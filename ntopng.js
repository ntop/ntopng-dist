!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var n in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+n+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[n]:("00"+t[n]).substr((""+t[n]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_\.a-zA-Z0-9]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[-a-zA-Z0-9:.]{1,256}+$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^[a-zA-Z0-9._:\-]{3,250}|^[a-zA-Z0-9._:\-]{3,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+-/=?^_${"`"}{|}~]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class n{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const n=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",n),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var a,l=e.split("/"),s=null;if(2!=l.length){if(!t)return null;a=e}else{if(a=l[0],!n.isNumeric(l[1]))return null;if((s=parseInt(l[1]))<0)return null}if(n.is_good_ipv4(a)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:a,mask:s}}if(n.is_good_ipv6(l[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:a,mask:s}}return null}static fbits(t){const n=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var a=Math.log(t)/Math.log(1e3),l=parseInt(Math.floor(a));if(l<0||isNaN(l))l=0;else if(l>=n.length)return"> "+n[n.length-1];if(l<=1)return Math.round(t/Math.pow(1e3,l)*100)/100+" "+n[l];var s=parseFloat(t/Math.pow(1e3,l)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+n[l]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var a=n.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static exports_format(t){if(void 0===t)return"-";var a=i18n_ext.exports.toLowerCase(),l=[a,"K "+a];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=n.scaleValue(t,l,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":n.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var a=n.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var a=n.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var a=n.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var a=n.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmillis(e){if(void 0===e)return"-";const t=n.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+"%"}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,n=1048576,a=1073741824,l=1099511627776;return e>=0&&e<t?parseFloat(e.toFixed(2))+" Bytes":e>=t&&e<n?parseFloat((e/t).toFixed(2))+" KB":e>=n&&e<a?parseFloat((e/n).toFixed(2))+" MB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" GB":e>=l?parseFloat((e/l).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,n){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+n+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),n.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),n.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),n=t[0],a=t.length>1?"."+t[1]:"",l=/(\d+)(\d{3})/;l.test(n);)n=n.replace(l,"$1,$2");return n+a}static scaleValue(e,t,n,a){if(0==e)return[0,t[0]];let l=a?10*a:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(n)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(n,s)*l)/l,t[s]]}static formatValue(t,a){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==a&&(a=0);var l=n.scaleValue(t,["","K","M","G","T"],1e3,a);return l[0]+l[1]}static formatPackets(e){return n.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var a=n.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(a[0])+" "+a[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,a){a=a||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var l=n.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],a);return l[0].toFixed(2)+" "+l[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),n=Math.floor(e/3600-24*t),a=Math.floor(e/60-1440*t-60*n),l=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return n>0&&(n<10&&(s="0"),s+=n+":"),a<10&&(s+="0"),s+=a+":",l<10&&(s+="0"),s+=l,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?n.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),a=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+n.secondsToTime(a)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var n in e=$(e),t){if(t.hasOwnProperty(n))$('<input type="hidden" name="'+n+'" value="'+t[n]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,n={};for(var a in e)n["key_"+t]=a,n["val_"+t]=e[a],t+=1;return n}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var n=window.location.hash;n||(n="#"+t),$('a[href="'+n+'"]',e).tab("show")}static _add_find_host_link(e,t,n){$("<input>").attr({type:"hidden",id:t,name:t,value:n}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,a){return a.context&&"historical"==a.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==a.type?n._add_find_host_link(t,"ip",a.ip):"mac"==a.type?n._add_find_host_link(t,"mac",a.mac):n._add_find_host_link(t,"name",a.hostname?a.hostname:a.name)):"mac"==a.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"network",a.network)):"snmp"==a.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),n._add_find_host_link(t,"snmp_port_idx",a.snmp_port_idx)):"snmp_device"==a.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"asn",a.asn)):(t.attr("action",e+"/lua/host_details.lua"),n._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,n){n=n||0;var a=parseInt(e.html())+n,l=d3.time.format(t)(new Date(1e3*a));return e.html(l).removeClass("hidden"),l}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},n=("?"===e[0]?e.substr(1):e).split("&"),a=0;a<n.length;a++){var l=n[a].split("=");t[decodeURIComponent(l[0])]=decodeURIComponent(l[1]||"")}return t}static getHistoryParameters(e){var t=n.parseQuery(window.location.search),a=$.extend(t,e),l="?"+$.param(a,!0);return[location.protocol,"//",location.host,location.pathname].join("")+l}static check_status_code(e,t,n){const a=200!=e;if(a&&null!=n){let a=i18n_ext.request_failed_message;e&&t&&(a+=`: ${e} - ${t}`),n.text(a).show()}else a&&null==n&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return a}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$(this).val().replace("C:\\fakepath\\",""),$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const n=$("#btn-confirm-import");n.attr("disabled","");const a=$("#import-input")[0].files[0];if(!a)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void n.removeAttr("disabled");const l=new FileReader;l.readAsText(a,"UTF-8"),l.onload=function(){let t=null;try{t=JSON.parse(l.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void n.removeAttr("disabled");e.loadConfigXHR(l.result).done(((t,n,a)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const l="all"==$("input[name='configuration']:checked").val()?i18n_ext.manage_configurations.messagges.import_all_success:i18n_ext.manage_configurations.messagges.import_success;ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n_ext.success,body:l,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{n.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},n=5e3){const a=new AbortController,l={...t,signal:a.signal};return setTimeout((()=>{a.abort()}),n),fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,n,a){if(null==e)return void console.warn("An action key must be defined to set a preference!");const l=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(n||l),s.fail(a||l)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},n=!1,a={}){const l=new URL(e,window.location);for(const[e,n]of Object.entries(t))(n||0===n)&&l.searchParams.set(e,n);if(n){const e=new URL(window.location.href);for(const[t,n]of Object.entries(a))n&&e.searchParams.set(t,n);l.searchParams.set("referer",e.toString())}return l.toString()}static getEditPoolLink(e,t){const n=new URL(e,window.location);return n.searchParams.set("pool_id",t),n.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const a=await fetch(n.getPoolLink(e,t)),l=await a.json();return l.rc<0?[!1,{}]:[!0,l.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const a=n.generateScaleElementKey(e);localStorage.setItem(a,JSON.stringify(t))}static generateScaleElementKey(e){let t;const n=location.pathname,a=e.attr("id");if(""!==a)t=a;else{t=e.attr("class")}return`${t}-${n}-scale`}static loadElementScale(e){const t=n.generateScaleElementKey(e),a=localStorage.getItem(t);if(null!=a)return JSON.parse(a)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const n=document.createElement("textarea");n.value=e,n.setAttribute("readonly",""),n.style.position="absolute",n.style.left="-9999px",document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,n){let a=e;if(e.length>t+5){let l=t;if(n){l=e.lastIndexOf(n);const s=e.slice(l);t>l&&(t=l),a=e.slice(0,t)+"... "+s}else a=e.slice(0,t)+"..."}return a}static sortAlphabetically(e,t){const n=e.label.toUpperCase(),a=t.label.toUpperCase();return n<a?-1:n>a?1:0}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,n,a){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${n}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${a}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${l.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${a.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${a.config.yaxis[0].title.text}</b>: ${i}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,n){const{seriesIndex:a,dataPointIndex:l}=n,{series:s}=n.config;if(-1===a)return;if(void 0===s)return;const i=s[a],o=i.base_url||s[0].base_url,r=i.start_url||s[0].start_url;if(null!=o&&null!=r){const e=i.data[l].meta.url_query;location.href=`${o}?${r}${e}`}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.x,i=l.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${l.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${a.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${a.config.yaxis[0].title.text}</b>: ${i}\n              </div>\n          </div>\n      </div>\n    `}}function a(e,t){var n=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+n+'"><i>'+t+"</i></td></tr>")}function l(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==l(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function o(e,t,n,a,l,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+l+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${n} ${s?"":"disabled"}" onclick="`+a+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){n.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,n){var a,l={},s=e+"/lua/get_processes_graph_data.lua?host="+n;d3.json(s,(function(s,i){if(s)return console.warn(s);var o;(a=i).forEach((function(t){o=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+n+"&page=flows",t.source=l[t.source]||(l[t.source]={name:t.source_name,num:t.source,link:o,type:t.source_type,pid:t.source_pid}),o=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+n+"&page=flows",t.target=l[t.target]||(l[t.target]={name:t.target_name,num:t.target,link:o,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(l)).links(a).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),p.attr("transform",h),_.attr("transform",h)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),p=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),_=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,n=e.target.y-e.source.y,a=Math.sqrt(t*t+n*n);return"M"+e.source.x+","+e.source.y+"A"+a+","+a+" 0 0,1 "+e.target.x+","+e.target.y}function h(e){return"translate("+e.x+","+e.y+")"}}))}});history.state&&history.state.zoom_level;class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),n=$(this).attr("name");e.inputs[`${t}[name='${n}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[n,a]of Object.entries(e.inputs))if(t.inputs[n]!=a)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,n]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(n),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,n){const a=$(this);let l=-1;const s=async e=>e.data.resolveDNS&&a.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=a.parent().find(".spinner-border");a.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(n).val());return a.removeAttr("readonly"),e.hide(),t.rc<0?(n.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(n.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(n.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):n.validity.patternMismatch?(n.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):n.validity.rangeOverflow?(n.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):n.validity.rangeUnderflow?(n.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(n.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:a.data("validationMessage"),validationEmptyMessage:a.data("validationEmptyMessage"),cannotBeEmpty:"required"===a.attr("required")||1==a.data("validationNotEmpty"),resolveDNS:a.data("validationResolvedns"),rangeOverflowMessage:a.data("validationRangeOverflowMessage"),rangeUnderflowMessage:a.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof a.val()&&""==a.val().trim()},[t,n]=await s(e);let l=a.parent().find(".invalid-feedback");0==l.length&&(l=$("<span class='invalid-feedback'></span>")),t?(a.removeClass("is-invalid"),l.fadeOut(500,(function(){$(this).remove()}))):(a.addClass("is-invalid"),a.parent().append(l),l.text(n))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=l&&clearTimeout(l),a.attr("formnovalidate")||(l=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),a.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,n){e&=n.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let n=this.options.beforeSumbit(this.data);n.csrf=this.csrf,n=$.extend(n,this.options.submitOptions),t.attr("disabled","disabled");const a=this;if(this.options.endpoint){let l;l="post"==a.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(n),method:a.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,n),this.isSubmitting=!0,l.done((function(t,l){a.isSubmitting=!1,a.currentState=null,a.options.resetAfterSubmit&&a.cleanForm(),e.hide();a.options.onSubmitSuccess(t,n,a)&&(a.dialog.modal?a.dialog.modal("hide"):(a.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(a.element).off("submit",a.submitHandler),a.delegateSubmit()})).fail((function(t,l,s){a.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),a.options.onSubmitError(i,n,l,s)})).always((function(e){t.removeAttr("disabled")}))}else{a.currentState=null,e.hide();a.options.onSubmitSuccess({},n,a)&&(a.dialog.modal?a.dialog.modal("hide"):a.dialog[0].hidden=!0),$(a.element).off("submit",a.submitHandler),a.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const n=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const a=$(t).attr("name");$(t).val(n[a]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function p(e){let t=d[e],n=3;null!=t.decimal&&t.decimal>0&&(n=6);let a=0;return null!=t.um&&(a=Math.max(...t.um.map((e=>e.length)))),n+1+a}function _(e,t){let n=d[e];if(e==d.no_formatting.id||null==t)return null;null!=n.scale_values&&(t*=n.scale_values);let a=n.step;t<0&&(t*=-1);let l=0,s=n.um;for(;t>=a&&l<s.length;)t/=a,l+=1;return l}function f(e,t,n){let a=d[e];t|=a.absolute_value;return function(l){if(null==l)return"";if(e==d.no_formatting.id)return l;null!=a.scale_values&&(l*=a.scale_values);let s=l<0;s&&(l*=-1);let i=a.step,o=a.decimal,r=a.um,c=0;for(null!=a.max_value&&l>a.max_value&&(l=a.max_value);l>=i&&c<r.length&&!n||null!=n&&c<n;)l/=i,c+=1;return null!=o&&o>0?(l*=Math.pow(10,o),l=Math.round(l),l=(l/=Math.pow(10,o)).toFixed(o)):l=Math.round(l),s&&!t&&(l*=-1),`${`${l}`} ${`${r[c]}`}`}}const h={types:d,getUnitMeasureLen:p,getFormatter:f,getScaleFactorIndex:_};window.NtopUtils=n,window.datatableInitRefreshRows=function(e,t,n,a){var l=e.data("datatable"),s=l.resultset.data,i=e.data("dt-rr-timer"),o=e.data("dt-rr-ajax");a=a||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),o&&(o.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var p=s[d];if(p[t]){var _=p[t];u[_]=d,c.push(_)}}if(!c)return!1;var f={custom_hosts:c.join(",")},h=l.options.url,m=!0,g=function(n){if("string"==typeof n&&(n=JSON.parse(n)),n){for(var s in n.data){var i=n.data[s],o=i[t];if(o&&u[o]){var c=u[o],d=l.rows[c],p=$("td",d);for(var _ in i){var f=p[r(e,_)],h=$(f),g=h.data("dt-rr-cur-val")||$(f).html(),v=a[_],b=i[_],y="";v&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(g))),h.data("dt-rr-cur-val",b),b=v(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:h,data:f,cache:!1,success:g}))}),n)),g(l.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var n;if("function"==typeof t)t.bind(this)(e);else for(n=0;n<t.length;n++)t[n].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=a,window.datatableGetNumDisplayedItems=l,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,n,l){n&&$(n).removeAttr("disabled").removeClass("disabled");var o=$(e).closest("form");$(e).remove(),aysUpdateForm(o);var r=i(o);s(r)&&a(r,t),l&&window[l](e)},window.datatableAddButtonCallback=o,window.datatableAddDeleteButtonCallback=function(e,t,n){o.bind(this)(e,n,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,n,a=!0,l=""){o.bind(this)(e,n,"btn-info",t,"javascript:void(0)",a,l)},window.datatableAddFilterButtonCallback=function(e,t,n,a="",l=!0){o.bind(this)(e,n,"btn-warning",t,"javascript:void(0)",l,a)},window.datatableAddLinkButtonCallback=function(e,t,n,a=""){o.bind(this)(e,n,"btn-info","",t,!0,a)},window.datatableMakeSelectUnique=function(e,t,n){function a(e,t,n,a){$("[id^="+t+"]").each((function(){var t=n($(this));t[0]!=e[0]&&a(t)}))}function l(e,t){if(t)e.removeAttr("disabled");else{var n=e.closest("select"),a=n.val()==e.val();if(e.attr("disabled","disabled"),a){var l=n.find("option:not([disabled])").first().val();n.val(l),n.attr("data-old-val",l)}}}function s(e,t,n){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",o=[];s==i&&(s=""),a($(this),e,t,(function(e){l(e.find("option[value='"+s+"']"),!0),l(e.find("option[value='"+i+"']"),!1),o.push(e)})),n($(this),s,i,o,l),$(this).attr("data-old-val",i)}var i=(n=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},n)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,n.selector_fn,n.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,n){e.val(""),a(e,t,n,(function(e){e.trigger("change")}));var l=e.find("option:not([disabled])").first().val();e.val(l),e.trigger("change")}(i,t,n.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,n){var a=e.data("datatable").resultset.data.filter((function(e){return e[t]===n}));if(a)return a[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,n){},onModalReset:function(e){}},e),n=new u(this,t);return n.delegateSubmit(),n},window.ebpfUtils=c,window.ntopFormatterUtils=h;var m={};window.makeUniqueValidator=function(e){return function(t){var n=t.val(),a=0;return!n||(e(t).each((function(){$(this).val()==n&&(a+=1)})),1==a)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),n=0;t.each((function(){""!=$(this).val()&&n++})),n==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var n=e.val();if(""===n.trim())return!0;var a=e.attr("name");m[a]||(m[a]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var l=m[a],s=function(){l.timer=null;var e=function(e){l.ajax_obj=null,l.valid=e,l.last_val=n};l.last_val!==n?(l.ajax_obj&&l.ajax_obj.abort(),l.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:n},error:function(){e(l.valid)},success:function(t){var n=!!t.response;e(n)}})):e(l.valid)};return t?s():l.last_val===n||(l.timer&&(clearTimeout(l.timer),l.submit_remind=!1),l.timer=setTimeout(s,250)),l.valid};const v=function(){let e={},t=[];return{ready:function(n){e[n]=!0,t.filter((e=>e.component_name==n)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=n))},on_ready:function(n){return new Promise(((a,l)=>{e[n]?a():t.push({resolve:a,component_name:n,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let n=0;n<e.length;n+=1){let a=this.clone(e[n]);t.push(a)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let n in e)t.push(e[n]);return t},check_and_set_default_interval_time:function(e){if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}},from_utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},from_utc_to_server_date_format:function(e,t){null==t&&(t="DD/MMM/YYYY HH:mm");let n=y.get_status(),a=n.epoch_begin,l=n.epoch_end;if(null!=a&&null!=l){let e=Number.parseInt(a);Number.parseInt(l)-e<=300&&(t="DD/MMM/YYYY HH:mm:ss")}let s=moment.tz(e,ntop_zoneinfo);return moment(e).format(t),s.format(t)},copy_object_keys:function(e,t,n=!1){if(null!=e)for(let a in e)null!=e[a]&&(1==n&&this.is_object(e[a])&&this.is_object(t[a])?this.copy_object_keys(e[a],t[a],n):t[a]=e[a])},set_http_globals_headers(t){e=t},http_request:async function(t,n,a,l){try{null==n&&(n={}),null==n.headers&&(n.headers={}),null!=n&&null!=n.headers&&null!=e&&(n.headers={...n.headers,...e});let a=await fetch(t,n);if(0==a.ok)return console.error(`http_request ${t}\n ok == false`),console.error(a),null;let s=await a.json();return 1==l?s:s.rsp}catch(e){if(console.error(e),1==a)throw e;return null}},download_URI:function(e,t){var n=document.createElement("a");n.download=t,n.href=e,document.body.appendChild(n),n.click(),document.body.removeChild(n)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,n,a=0;if(0===e.length)return a;for(t=0;t<e.length;t++)n=e.charCodeAt(t),a=(a<<5)-a+n,a|=0;return a},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const n=e=>b.clone(e),a=function(e,a){for(let l in t){if(l==a)continue;(0,t[l])(n(e))}};return{get_status:function(){return n(e)},update_subscribers:function(){const e=this.get_status();a(e)},on_status_change:function(e,a,l){if(t[e]=a,1==l){let e=this.get_status();a(n(e))}},replace_status:function(t,n){!function(t){e=t}(t),a(t,n)},add_obj_to_status:function(e,t){let n=this.get_status();b.copy_object_keys(e,n),this.replace_status(n,t)},add_value_to_status:function(e,t,n){let a=this.get_status();a[e]=t,this.replace_status(a,n)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let n=this.get_url_entries(t);for(const[t,a]of n)if(t==e)return a;return null},get_url_object:function(e){let t=this.get_url_entries(e),n={};for(const[e,a]of t)n[e]=a;return n},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,n){e[t]=n},obj_to_url_params:function(t){let n=[];const a=this.serialize_param;for(let l in t){let s=e[l];null==s&&(s=a);let i=s(l,t[l]);n.push(i)}return n.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let n=this.get_url_search_params();n.set(e,t),this.replace_url(n.toString())},add_obj_to_url:function(e,t){let n=this.obj_to_url_params(e),a=this.get_url_search_params(t),l=this.get_url_entries(n);for(const[e,t]of l)a.set(e,t);let s=a.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},C=function(){const e="events_manager";let t={},n={};const a=e=>b.clone(e),l=function(e,t,n){for(let l in e){if(l==n)continue;(0,e[l])(a(t))}};y.on_status_change(e,(function(e){for(let a in k){if(1==(0,S[a])(e,t)){let t=n[a];l(t,e)}}t=e}),!0);const s=function(e,t,a){let s=n[e];null!=s&&l(s,t,a)},i=function(e,t,l,s){if(null==n[t]&&(n[t]={}),1==s){let e=y.get_status();l(a(e))}n[t][e]=l};return{emit_custom_event:function(e,t){s(e,t)},on_custom_event:function(e,t,n){i(e,t,n)},emit_event:function(t,n,a){s(t,n,a),y.add_obj_to_status(n,e)},on_event_change:function(e,t,n,a){i(e,t,n,a)}}}();function N(e,t,n,a,l){this.name=e,this.update_url=t,this.url_params=n,this.units=a,this.refresh=l,this.pieInterval;let s=[],i="",o=[],r=[],c=[];var u=[],d=[],p=[],_=function(e,t){var n=500,a=325,l=52,s=14,i=250,o=116;$(e).hasClass("pie-chart-small")&&(a=250,l=(o=(n=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(l).outerRadius(o),d=d3.select(e).append("svg:svg").attr("width",n).attr("height",a).attr("viewBox","0 0 "+n+" "+a).attr("preserveAspectRatio","xMidYMid"),p=d.append("svg:g").attr("class","arc").attr("transform","translate("+n/2+","+a/2+")"),_=d.append("svg:g").attr("class","label_group").attr("transform","translate("+n/2+","+a/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+n/2+","+a/2+")");p.append("svg:circle").attr("fill","#EFEFEF").attr("r",o),f.append("svg:circle").attr("fill","white").attr("r",l);var h=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),h=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[p,r,m,h,c,i,u,_,f,o,s]}(e,a),f=_[0],h=_[1],m=_[2],g=_[4],v=_[5],b=_[6],y=_[7],w=_[9],x=_[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var n,a;d[t]?(n=d[t].startAngle,a=d[t].endAngle):!d[t]&&d[t-1]?(n=d[t-1].endAngle,a=d[t-1].endAngle):!d[t-1]&&d.length>0?(n=d[d.length-1].endAngle,a=d[d.length-1].endAngle):(n=0,a=0);t=d3.interpolate({startAngle:n,endAngle:a},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var n=t(e);return b(n)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var n=t(e);return b(n)}}function N(e,t){var n;n=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var a=(e.startAngle+e.endAngle-Math.PI)/2,l=d3.interpolateNumber(n,a);return function(e){var t=l(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=p,u=h(s);var t=0;function n(e,n,a){return e.name=s[n].label,e.value=s[n].value,e.url=s[n].url,t+=e.value,e.value>0}(p=u.filter(n)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(p),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return g(t)})).transition().duration(v).attrTween("d",S),i.transition().duration(v).attrTween("d",S),i.exit().transition().duration(v).attrTween("d",C).remove(),o=y.selectAll("line").data(p),o.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.transition().duration(v).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.exit().remove(),r=y.selectAll("text.value").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(v).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(v).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=v,window.ntopng_custom_events={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data"},N.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},N.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},N.prototype.setInterval=function(e){this.pieInterval=e},N.prototype.stopInterval=function(){clearInterval(this.pieInterval)},N.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const A={},T={db_analyze:function(e,t,n){const{dataPointIndex:a}=n,{filter:l}=n.w.config;let s;if(n.w.config.filtering_labels&&(s=n.w.config.filtering_labels[a]),n.w.config.labels&&n.w.config.labels[a],0==l.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:l[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,n){},standard:function(e,t,n){const{seriesIndex:a,dataPointIndex:l}=n,{series:s}=n.w.config;if(-1===a)return;if(void 0===s)return;const i=s[a];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[l].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}},E={format_bytes:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.x,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},P=E.format_value;class M{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in A)throw new Error(`The widget ${e.name} is already defined!`);A[e.name]=e}static getWidgetByName(e){if(e in A)return A[e];throw new Error(`Widget ${e} not found!`)}}class O{constructor(e,t={},n=0,a={}){this._fetchedData=[],this.name=e,this._updateTime=n,this._datasource=t,this._additionalParams=a}async init(){M.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let n=ntopng_url_manager.get_url_entries(e);for(const[e,a]of n)t.searchParams.set(e,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[n,a]of Object.entries(e))t.searchParams.set(n,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const I=(e,t)=>{let n=t.position().top;const a=e.height(),l=$(window).height();if(a+n>=l){const s=l-n;s<=150?n=n-a+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${n}px`)};$(window).on("scroll",(function(){$("#n-navbar").height();$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");I(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");I(e,t)}}));const U=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return b.from_utc_to_server_date_format(e)}},a=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),a={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:n.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:n.bytesToSize}}};return b.copy_object_keys(a,t,!0),t}(),i=function(){let t=b.clone(e),a={chart:{stacked:!0,type:"donut",height:400},yaxis:{show:!0,labels:{formatter:n.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:n.bytesToSize}}};return b.copy_object_keys(a,t,!0),t}(),o=function(){let t=b.clone(e),a={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:n.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:n.bytesToSize}}};return b.copy_object_keys(a,t,!0),t}(),r=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),c=function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${l.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${a.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                  </div>\n              </div>\n          </div>`},u=function(){let t=b.clone(e),n={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:c}};return b.copy_object_keys(n,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",POLAR:"POLAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(c){let d,p={};if(c==this.typeChart.TS_STACKED)p=b.clone(l),t(p);else if(c==this.typeChart.TS_LINE)p=b.clone(r),t(p);else if(c==this.typeChart.TS_COLUMN)p=b.clone(a),t(p);else if(c==this.typeChart.PIE)p=b.clone(s);else if(c==this.typeChart.DONUT)p=b.clone(i);else if(c==this.typeChart.POLAR)p=b.clone(o);else if(c==this.typeChart.BUBBLE)p=b.clone(u);else{if(c!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${c} unsupported`;p=b.clone(e)}return{drawChart:function(e,t){if(t.yaxis&&t.yaxis.labels&&t.yaxis.labels.formatter){const e=t.yaxis.labels.formatter;"formatValue"==e?t.yaxis.labels.formatter=n.formatValue:"bytesToSize"==e&&(t.yaxis.labels.formatter=n.bytesToSize)}b.copy_object_keys(t,p,!0),d=new ApexCharts(e,p),d.render()},to_data_uri:async function(e){if(null==d)return;return(await d.dataURI(e)).imgURI},destroyChart:function(){null!=d&&d.destroy()},updateChart:function(e){null!=d&&d.updateOptions(e,!1,!1,!1)},updateSeries:function(e){null!=d&&d.updateSeries(e)},registerEvent:function(e,t,n=!1){p.chart.events[e]=t,1==n&&d.updateOptions(p)}}}}}(),F=function(){let e={};return{addHandler:function(t){let n=e[t.handlerId];return null==n&&(n=[],e[t.handlerId]=n),n.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${n.length-1}')`},getHandler:function(t,n){let a=e[t];return null==a?null:a[n]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let n=F.getHandler(e,t);null!=n&&n()};class D{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${F.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,n)=>{let a="";if(e.handler){a=`onclick="${F.addHandler(e.handler)}"`}let l=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${a}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(l)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){F.deleteHandlersById(e)}static setAjaxConfig(e,t,n="",a="get",l={}){return e.ajax={url:t,type:a,dataSrc:n,data:function(e){return $.extend({},e,l)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),n=e%60,a=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(a)}:${t(n)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const n=t.get(e.paramName),a=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==n));if("function"==typeof e.cancelIf&&e.cancelIf(a))return;const l=$(`#${e.modalHandler.getModalID()}`);if(void 0!==a&&(e.modalHandler.invokeModalInit(a),l.modal("show")),!t.has("referer"))return void l.on("hidden.bs.modal",(function(t){const n=new URL(window.location.href);n.searchParams.delete(e.paramName),history.replaceState({},"",n.toString())}));const s=t.get("referer");l.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const n=e.table().node().id;D._loadColumnsVisibility(e).then((function(a){let l=[-1];a.success?l=a.columns.map((e=>parseInt(e))):console.warn(a.message);const s=[],i=[],o=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let a=0;a<s.length;a++){const o=s[a];if(""==o.name)continue;const r=`toggle-${o.name.split().join("_")}`,c=-1===l.indexOf(o.index);if(!c){e.column(o.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),p=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${o.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(a){$(".overlay").toggle(500);const l=e.column(o.index);l.visible(!l.visible());const s=l.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:n,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(l,s)})),p.prepend(d),u.append(p)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),o.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class j{static alertSeverityAndType(e,t,n){return`${j.formatValueLabel(e,t,n)} ${j.formatValueLabel(n.alert_id,t,n)}`}static hideIfZero(e,t,a){let l=void 0!==e.color?e.color:"#aaa",s=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(s)&&(l="#aaa");let i=`<span style='color: ${l}'>${n.fint(s)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,a){return"display"===t?n.secondsToTime(e):e}static filterize(e,t,n,a,l,s){return`<a class='tag-filter' data-tag-key='${e}' title='${l||t}' data-tag-value='${t}' data-tag-label='${a||n||t}' href='#'>${s||n||t}</a>`}static formatValueLabel(e,t,n){if("display"!==t)return e.value;let a=e.label;return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatMessage(e,t,n){if("display"!==t)return e.value;let a=e.descr;return e.shorten_descr&&(a=`<span title="${e.descr}">${e.shorten_descr}</span>`),a}static formatSubtype(e,t,n){if("display"!==t)return e;return j.filterize("subtype",e,e)}static getFormatGenericField(e){return function(t,n,a){if("display"!==n)return t.value;let l="";return void 0!==t.reference&&(l=t.reference),j.filterize(e,a[e].value,a[e].label,a[e].label,a[e].label)+" "+l}}static formatSNMPInterface(e,t,n){if("display"!==t)return e.value;let a=j.filterize("snmp_interface",e.value,e.label,e.label,e.label);return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatSNMPIP(e,t,n){return"display"!==t?e:j.filterize("ip",e,e,e,e)}static formatProbeIP(e,t,n){if("display"!==t)return e;return j.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,n){if("display"!==t)return e;let a="";void 0!==e.reference&&(a=e.reference);let l,s,i="";return e.label&&e.label!=e.value?(l="name",s=e.label_long,i=j.filterize("name",e.label_long,e.label,e.label,e.label_long)):(l="ip",s=e.value,i=j.filterize("ip",e.value,e.label,e.label,e.label_long)),n.vlan_id&&""!=n.vlan_id&&"0"!=n.vlan_id&&(i=j.filterize(l,`${s}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label_long}@${n.vlan_id}`)),e.country&&(i+=j.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),n.role&&"attacker"==n.role.value?i=i+" "+j.filterize("role",n.role.value,'<i class="fas fa-skull" title="'+n.role.label+'"></i>',n.role.label):n.role&&"victim"==n.role.value&&(i=i+" "+j.filterize("role",n.role.value,'<i class="fas fa-sad-tear" title="'+n.role.label+'"></i>',n.role.label)),n.role_cli_srv&&"client"==n.role_cli_srv.value?i=i+" "+j.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label):n.role_cli_srv&&"server"==n.role_cli_srv.value&&(i=i+" "+j.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label)),i+" "+a}static filterizeVlan(e,t,a,l,s,i){let o=l,r=s,c=i;return e.vlan&&0!=e.vlan.value&&(o=`${l}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),r=n.shortenLabel(r,16,"."),j.filterize(a,o,r,r,c)}static formatFlowTuple(e,t,n){let a=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",l="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),l=j.filterizeVlan(e,n,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else l=j.filterizeVlan(e,n,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let s="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(s=j.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+j.filterize("cli_port",e.cli_port,e.cli_port):"",o="";1==e.cli_ip.blacklisted&&(o=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let r="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),r=j.filterizeVlan(e,n,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else r=j.filterizeVlan(e,n,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let c=e.cli_port&&e.cli_port>0?":"+j.filterize("srv_port",e.srv_port,e.srv_port):"",u="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(u=j.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let d="";1==e.srv_ip.blacklisted&&(d=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",_="";return n.cli_role&&("attacker"==n.cli_role.value?p+=j.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label):"victim"==n.cli_role.value&&(p+=j.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label))),n.srv_role&&("attacker"==n.srv_role.value?_+=j.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label):"victim"==n.srv_role.value&&(_+=j.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label))),`${a} ${l}${o}${s}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${r}${d}${u}${c} ${_} ${e.srv_ip.reference}`}static formatNameDescription(e,t,n){if("display"!==t)return e.name;return j.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,n,a,l){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function L(e,t){const n=Object.create(null),a=e.split(",");for(let e=0;e<a.length;e++)n[a[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}window.do_pie=function(e,t,n,a,l){var s=new N(e,t,n,a,l);return l&&s.setInterval(setInterval((function(){s.update()}),l)),s},window.DataTableUtils=D,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:n,filters:a,columnIndex:l,icon:s=null,extraAttributes:i="",id:o=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=a,this.tableAPI=e,this.filterTitle=n,this.icon=s,this.filterMenuKey=t,this.columnIndex=l,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=o,this.url=r,this.urlParams,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const n=new RegExp(e);return t.filter((e=>n.test(e))).length}_createMenuEntry(e){const t=this;let n=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(n=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const a=n.html();t.$dropdown.title.html(a),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(e.regex,t),l=$(`<span class='counter'>(${a})</span>`);0==a&&n.hide(),n.append(l)}return n.on("click",(function(a){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=n.html();if(t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const n=new URLSearchParams(t.urlParams);n.set(t.filterMenuKey,null!=typeof e.id?e.id:""),t.url,n.toString(),window.history.pushState("","",window.location.pathname+"?"+n.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),n}_createFilters(e){const t={};for(const n of e){const e=this._createMenuEntry(n);t[n.key]={filter:n,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),n=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),a=$(`<span class='filter-title'>${this.filterTitle}</span>`);n.append(a),this.$dropdown={container:t,title:a,button:n},this.filters=this._createFilters(e);const l=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))l.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();l.prepend(this._createMenuEntry(e))}t.append(n),t.append(l),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],n=this._countEntries(t.filter.regex,e);0==n?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${n})`),this.$dropdown.button.find(".counter").text(`(${n})`)}}},window.DataTableRenders=j,window.ChartWidget=class extends O{constructor(e,t="line",n={},a=0,l={}){super(e,n,a,l),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,n){setTimeout((async()=>{try{const a=M.getWidgetByName(e),l={chart:{events:{[t]:n}}};await a._chart.updateOptions(l)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},t.tooltip){for(const n in t.tooltip)if("x"===n||"y"===n||"z"===n){const a=t.tooltip[n].formatter;e.tooltip[n]||(e.tooltip[n]={}),e.tooltip[n].formatter=E[a]||NtopUtils[a]}t.tooltip.custom&&(e.tooltip.custom=E[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const n=e[t];if(void 0!==n&&void 0!==n.labels&&void 0!==n.labels.ntop_utils_formatter&&"none"!==n.labels.ntop_utils_formatter){const e=n.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):n.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[n,a]of Object.entries(t.dataLabels))e.dataLabels[n]=a;let n=e.dataLabels.formatter;n&&E[n]&&(e.dataLabels.formatter=E[n])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,n=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const a of n)void 0!==t[a]&&(void 0!==e[a]?e[a]=Object.assign(e[a],t[a]):e[a]=t[a]);if(t.events)for(const n in t.events)e.chart.events[n]=T[t.events[n]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:n,labels:a,xaxis:l,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,l&&l.categories&&(this._chartConfig.xaxis.categories=l.categories),s&&(this._chartConfig.filtering_labels=s),n){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&E[e]?E[e]:P}a&&(this._chartConfig.labels=a),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=M,window.ntopChartApex=U,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const R=L("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),z=L("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(_e(e)){const t={};for(let n=0;n<e.length;n++){const a=e[n],l=ve(a)?G(a):V(a);if(l)for(const e in l)t[e]=l[e]}return t}return ve(e)||ye(e)?e:void 0}const q=/;(?![^(]*\))/g,H=/:(.+)/;function G(e){const t={};return e.split(q).forEach((e=>{if(e){const n=e.split(H);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function W(e){let t="";if(ve(e))t=e;else if(_e(e))for(let n=0;n<e.length;n++){const a=W(e[n]);a&&(t+=a+" ")}else if(ye(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function K(e){if(!e)return null;let{class:t,style:n}=e;return t&&!ve(t)&&(e.class=W(t)),n&&(e.style=V(n)),e}const J=L("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Y=L("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),Z=L("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function X(e,t){if(e===t)return!0;let n=me(e),a=me(t);if(n||a)return!(!n||!a)&&e.getTime()===t.getTime();if(n=be(e),a=be(t),n||a)return e===t;if(n=_e(e),a=_e(t),n||a)return!(!n||!a)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let a=0;n&&a<e.length;a++)n=X(e[a],t[a]);return n}(e,t);if(n=ye(e),a=ye(t),n||a){if(!n||!a)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const a=e.hasOwnProperty(n),l=t.hasOwnProperty(n);if(a&&!l||!a&&l||!X(e[n],t[n]))return!1}}return String(e)===String(t)}function Q(e,t){return e.findIndex((e=>X(e,t)))}const ee=e=>ve(e)?e:null==e?"":_e(e)||ye(e)&&(e.toString===xe||!ge(e.toString))?JSON.stringify(e,te,2):String(e),te=(e,t)=>t&&t.__v_isRef?te(e,t.value):fe(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:he(t)?{[`Set(${t.size})`]:[...t.values()]}:!ye(t)||_e(t)||$e(t)?t:String(t),ne={},ae=[],le=()=>{},se=()=>!1,ie=/^on[^a-z]/,oe=e=>ie.test(e),re=e=>e.startsWith("onUpdate:"),ce=Object.assign,ue=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},de=Object.prototype.hasOwnProperty,pe=(e,t)=>de.call(e,t),_e=Array.isArray,fe=e=>"[object Map]"===ke(e),he=e=>"[object Set]"===ke(e),me=e=>"[object Date]"===ke(e),ge=e=>"function"==typeof e,ve=e=>"string"==typeof e,be=e=>"symbol"==typeof e,ye=e=>null!==e&&"object"==typeof e,we=e=>ye(e)&&ge(e.then)&&ge(e.catch),xe=Object.prototype.toString,ke=e=>xe.call(e),$e=e=>"[object Object]"===ke(e),Se=e=>ve(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=L(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ne=L("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ae=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Te=/-(\w)/g,Ee=Ae((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Pe=/\B([A-Z])/g,Me=Ae((e=>e.replace(Pe,"-$1").toLowerCase())),Oe=Ae((e=>e.charAt(0).toUpperCase()+e.slice(1))),Ie=Ae((e=>e?`on${Oe(e)}`:"")),Ue=(e,t)=>!Object.is(e,t),Fe=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},De=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},je=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Le,Re;class ze{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&Re&&(this.parent=Re,this.index=(Re.scopes||(Re.scopes=[])).push(this)-1)}run(e){if(this.active){const t=Re;try{return Re=this,e()}finally{Re=t}}}on(){Re=this}off(){Re=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new ze(e)}function Ve(e,t=Re){t&&t.active&&t.effects.push(e)}function qe(){return Re}function He(e){Re&&Re.cleanups.push(e)}const Ge=e=>{const t=new Set(e);return t.w=0,t.n=0,t},We=e=>(e.w&Xe)>0,Ke=e=>(e.n&Xe)>0,Je=new WeakMap;let Ye,Ze=0,Xe=1;const Qe=Symbol(""),et=Symbol("");class tt{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,n)}run(){if(!this.active)return this.fn();let e=Ye,t=st;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ye,Ye=this,st=!0,Xe=1<<++Ze,Ze<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Xe})(this):nt(this),this.fn()}finally{Ze<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let a=0;a<t.length;a++){const l=t[a];We(l)&&!Ke(l)?l.delete(e):t[n++]=l,l.w&=~Xe,l.n&=~Xe}t.length=n}})(this),Xe=1<<--Ze,Ye=this.parent,st=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ye===this?this.deferStop=!0:this.active&&(nt(this),this.onStop&&this.onStop(),this.active=!1)}}function nt(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function at(e,t){e.effect&&(e=e.effect.fn);const n=new tt(e);t&&(ce(n,t),t.scope&&Ve(n,t.scope)),t&&t.lazy||n.run();const a=n.run.bind(n);return a.effect=n,a}function lt(e){e.effect.stop()}let st=!0;const it=[];function ot(){it.push(st),st=!1}function rt(){const e=it.pop();st=void 0===e||e}function ct(e,t,n){if(st&&Ye){let t=Je.get(e);t||Je.set(e,t=new Map);let a=t.get(n);a||t.set(n,a=Ge()),ut(a)}}function ut(e,t){let n=!1;Ze<=30?Ke(e)||(e.n|=Xe,n=!We(e)):n=!e.has(Ye),n&&(e.add(Ye),Ye.deps.push(e))}function dt(e,t,n,a,l,s){const i=Je.get(e);if(!i)return;let o=[];if("clear"===t)o=[...i.values()];else if("length"===n&&_e(e))i.forEach(((e,t)=>{("length"===t||t>=a)&&o.push(e)}));else switch(void 0!==n&&o.push(i.get(n)),t){case"add":_e(e)?Se(n)&&o.push(i.get("length")):(o.push(i.get(Qe)),fe(e)&&o.push(i.get(et)));break;case"delete":_e(e)||(o.push(i.get(Qe)),fe(e)&&o.push(i.get(et)));break;case"set":fe(e)&&o.push(i.get(Qe))}if(1===o.length)o[0]&&pt(o[0]);else{const e=[];for(const t of o)t&&e.push(...t);pt(Ge(e))}}function pt(e,t){const n=_e(e)?e:[...e];for(const e of n)e.computed&&_t(e);for(const e of n)e.computed||_t(e)}function _t(e,t){(e!==Ye||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const ft=L("__proto__,__v_isRef,__isVue"),ht=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(be)),mt=wt(),gt=wt(!1,!0),vt=wt(!0),bt=wt(!0,!0),yt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=rn(this);for(let e=0,t=this.length;e<t;e++)ct(n,0,e+"");const a=n[t](...e);return-1===a||!1===a?n[t](...e.map(rn)):a}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){ot();const n=rn(this)[t].apply(this,e);return rt(),n}})),e}();function wt(e=!1,t=!1){return function(n,a,l){if("__v_isReactive"===a)return!e;if("__v_isReadonly"===a)return e;if("__v_isShallow"===a)return t;if("__v_raw"===a&&l===(e?t?Zt:Yt:t?Jt:Kt).get(n))return n;const s=_e(n);if(!e&&s&&pe(yt,a))return Reflect.get(yt,a,l);const i=Reflect.get(n,a,l);return(be(a)?ht.has(a):ft(a))?i:(e||ct(n,0,a),t?i:fn(i)?s&&Se(a)?i:i.value:ye(i)?e?en(i):Xt(i):i)}}function xt(e=!1){return function(t,n,a,l){let s=t[n];if(ln(s)&&fn(s)&&!fn(a))return!1;if(!e&&!ln(a)&&(sn(a)||(a=rn(a),s=rn(s)),!_e(t)&&fn(s)&&!fn(a)))return s.value=a,!0;const i=_e(t)&&Se(n)?Number(n)<t.length:pe(t,n),o=Reflect.set(t,n,a,l);return t===rn(l)&&(i?Ue(a,s)&&dt(t,"set",n,a):dt(t,"add",n,a)),o}}const kt={get:mt,set:xt(),deleteProperty:function(e,t){const n=pe(e,t),a=Reflect.deleteProperty(e,t);return a&&n&&dt(e,"delete",t,void 0),a},has:function(e,t){const n=Reflect.has(e,t);return be(t)&&ht.has(t)||ct(e,0,t),n},ownKeys:function(e){return ct(e,0,_e(e)?"length":Qe),Reflect.ownKeys(e)}},$t={get:vt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},St=ce({},kt,{get:gt,set:xt(!0)}),Ct=ce({},$t,{get:bt}),Nt=e=>e,At=e=>Reflect.getPrototypeOf(e);function Tt(e,t,n=!1,a=!1){const l=rn(e=e.__v_raw),s=rn(t);n||(t!==s&&ct(l,0,t),ct(l,0,s));const{has:i}=At(l),o=a?Nt:n?dn:un;return i.call(l,t)?o(e.get(t)):i.call(l,s)?o(e.get(s)):void(e!==l&&e.get(t))}function Et(e,t=!1){const n=this.__v_raw,a=rn(n),l=rn(e);return t||(e!==l&&ct(a,0,e),ct(a,0,l)),e===l?n.has(e):n.has(e)||n.has(l)}function Pt(e,t=!1){return e=e.__v_raw,!t&&ct(rn(e),0,Qe),Reflect.get(e,"size",e)}function Mt(e){e=rn(e);const t=rn(this);return At(t).has.call(t,e)||(t.add(e),dt(t,"add",e,e)),this}function Ot(e,t){t=rn(t);const n=rn(this),{has:a,get:l}=At(n);let s=a.call(n,e);s||(e=rn(e),s=a.call(n,e));const i=l.call(n,e);return n.set(e,t),s?Ue(t,i)&&dt(n,"set",e,t):dt(n,"add",e,t),this}function It(e){const t=rn(this),{has:n,get:a}=At(t);let l=n.call(t,e);l||(e=rn(e),l=n.call(t,e)),a&&a.call(t,e);const s=t.delete(e);return l&&dt(t,"delete",e,void 0),s}function Ut(){const e=rn(this),t=0!==e.size,n=e.clear();return t&&dt(e,"clear",void 0,void 0),n}function Ft(e,t){return function(n,a){const l=this,s=l.__v_raw,i=rn(s),o=t?Nt:e?dn:un;return!e&&ct(i,0,Qe),s.forEach(((e,t)=>n.call(a,o(e),o(t),l)))}}function Dt(e,t,n){return function(...a){const l=this.__v_raw,s=rn(l),i=fe(s),o="entries"===e||e===Symbol.iterator&&i,r="keys"===e&&i,c=l[e](...a),u=n?Nt:t?dn:un;return!t&&ct(s,0,r?et:Qe),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:o?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function jt(e){return function(...t){return"delete"!==e&&this}}const[Lt,Rt,zt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Pt(this)},has:Et,add:Mt,set:Ot,delete:It,clear:Ut,forEach:Ft(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Pt(this)},has:Et,add:Mt,set:Ot,delete:It,clear:Ut,forEach:Ft(!1,!0)},n={get(e){return Tt(this,e,!0)},get size(){return Pt(this,!0)},has(e){return Et.call(this,e,!0)},add:jt("add"),set:jt("set"),delete:jt("delete"),clear:jt("clear"),forEach:Ft(!0,!1)},a={get(e){return Tt(this,e,!0,!0)},get size(){return Pt(this,!0)},has(e){return Et.call(this,e,!0)},add:jt("add"),set:jt("set"),delete:jt("delete"),clear:jt("clear"),forEach:Ft(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((l=>{e[l]=Dt(l,!1,!1),n[l]=Dt(l,!0,!1),t[l]=Dt(l,!1,!0),a[l]=Dt(l,!0,!0)})),[e,n,t,a]}();function Vt(e,t){const n=t?e?Bt:zt:e?Rt:Lt;return(t,a,l)=>"__v_isReactive"===a?!e:"__v_isReadonly"===a?e:"__v_raw"===a?t:Reflect.get(pe(n,a)&&a in t?n:t,a,l)}const qt={get:Vt(!1,!1)},Ht={get:Vt(!1,!0)},Gt={get:Vt(!0,!1)},Wt={get:Vt(!0,!0)},Kt=new WeakMap,Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap;function Xt(e){return ln(e)?e:nn(e,!1,kt,qt,Kt)}function Qt(e){return nn(e,!1,St,Ht,Jt)}function en(e){return nn(e,!0,$t,Gt,Yt)}function tn(e){return nn(e,!0,Ct,Wt,Zt)}function nn(e,t,n,a,l){if(!ye(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=l.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>ke(e).slice(8,-1))(e))}(e);if(0===i)return e;const o=new Proxy(e,2===i?a:n);return l.set(e,o),o}function an(e){return ln(e)?an(e.__v_raw):!(!e||!e.__v_isReactive)}function ln(e){return!(!e||!e.__v_isReadonly)}function sn(e){return!(!e||!e.__v_isShallow)}function on(e){return an(e)||ln(e)}function rn(e){const t=e&&e.__v_raw;return t?rn(t):e}function cn(e){return De(e,"__v_skip",!0),e}const un=e=>ye(e)?Xt(e):e,dn=e=>ye(e)?en(e):e;function pn(e){st&&Ye&&ut((e=rn(e)).dep||(e.dep=Ge()))}function _n(e,t){(e=rn(e)).dep&&pt(e.dep)}function fn(e){return!(!e||!0!==e.__v_isRef)}function hn(e){return gn(e,!1)}function mn(e){return gn(e,!0)}function gn(e,t){return fn(e)?e:new vn(e,t)}class vn{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:rn(e),this._value=t?e:un(e)}get value(){return pn(this),this._value}set value(e){e=this.__v_isShallow?e:rn(e),Ue(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:un(e),_n(this))}}function bn(e){_n(e)}function yn(e){return fn(e)?e.value:e}const wn={get:(e,t,n)=>yn(Reflect.get(e,t,n)),set:(e,t,n,a)=>{const l=e[t];return fn(l)&&!fn(n)?(l.value=n,!0):Reflect.set(e,t,n,a)}};function xn(e){return an(e)?e:new Proxy(e,wn)}class kn{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>pn(this)),(()=>_n(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function $n(e){return new kn(e)}function Sn(e){const t=_e(e)?new Array(e.length):{};for(const n in e)t[n]=Nn(e,n);return t}class Cn{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Nn(e,t,n){const a=e[t];return fn(a)?a:new Cn(e,t,n)}class An{constructor(e,t,n,a){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new tt(e,(()=>{this._dirty||(this._dirty=!0,_n(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!a,this.__v_isReadonly=n}get value(){const e=rn(this);return pn(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Tn=[];function En(e,...t){ot();const n=Tn.length?Tn[Tn.length-1].component:null,a=n&&n.appContext.config.warnHandler,l=function(){let e=Tn[Tn.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const a=e.component&&e.component.parent;e=a&&a.vnode}return t}();if(a)On(a,n,11,[e+t.join(""),n&&n.proxy,l.map((({vnode:e})=>`at <${bi(n,e.type)}>`)).join("\n"),l]);else{const n=[`[Vue warn]: ${e}`,...t];l.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",a=` at <${bi(e.component,e.type,!!e.component&&null==e.component.parent)}`,l=">"+n;return e.props?[a,...Pn(e.props),l]:[a+l]}(e))})),t}(l)),console.warn(...n)}rt()}function Pn(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...Mn(n,e[n]))})),n.length>3&&t.push(" ..."),t}function Mn(e,t,n){return ve(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:fn(t)?(t=Mn(e,rn(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=rn(t),n?t:[`${e}=`,t])}function On(e,t,n,a){let l;try{l=a?e(...a):e()}catch(e){Un(e,t,n)}return l}function In(e,t,n,a){if(ge(e)){const l=On(e,t,n,a);return l&&we(l)&&l.catch((e=>{Un(e,t,n)})),l}const l=[];for(let s=0;s<e.length;s++)l.push(In(e[s],t,n,a));return l}function Un(e,t,n,a=!0){if(t){let a=t.parent;const l=t.proxy,s=n;for(;a;){const t=a.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,l,s))return;a=a.parent}const i=t.appContext.config.errorHandler;if(i)return void On(i,null,10,[e,l,s])}!function(e,t,n,a=!0){console.error(e)}(e,0,0,a)}let Fn=!1,Dn=!1;const jn=[];let Ln=0;const Rn=[];let zn=null,Bn=0;const Vn=[];let qn=null,Hn=0;const Gn=Promise.resolve();let Wn=null,Kn=null;function Jn(e){const t=Wn||Gn;return e?t.then(this?e.bind(this):e):t}function Yn(e){jn.length&&jn.includes(e,Fn&&e.allowRecurse?Ln+1:Ln)||e===Kn||(null==e.id?jn.push(e):jn.splice(function(e){let t=Ln+1,n=jn.length;for(;t<n;){const a=t+n>>>1;na(jn[a])<e?t=a+1:n=a}return t}(e.id),0,e),Zn())}function Zn(){Fn||Dn||(Dn=!0,Wn=Gn.then(aa))}function Xn(e,t,n,a){_e(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?a+1:a)||n.push(e),Zn()}function Qn(e){Xn(e,qn,Vn,Hn)}function ea(e,t=null){if(Rn.length){for(Kn=t,zn=[...new Set(Rn)],Rn.length=0,Bn=0;Bn<zn.length;Bn++)zn[Bn]();zn=null,Bn=0,Kn=null,ea(e,t)}}function ta(e){if(ea(),Vn.length){const e=[...new Set(Vn)];if(Vn.length=0,qn)return void qn.push(...e);for(qn=e,qn.sort(((e,t)=>na(e)-na(t))),Hn=0;Hn<qn.length;Hn++)qn[Hn]();qn=null,Hn=0}}const na=e=>null==e.id?1/0:e.id;function aa(e){Dn=!1,Fn=!0,ea(e),jn.sort(((e,t)=>na(e)-na(t)));try{for(Ln=0;Ln<jn.length;Ln++){const e=jn[Ln];e&&!1!==e.active&&On(e,null,14)}}finally{Ln=0,jn.length=0,ta(),Fn=!1,Wn=null,(jn.length||Rn.length||Vn.length)&&aa(e)}}let la,sa=[];function ia(e,t){var n,a;la=e,la?(la.enabled=!0,sa.forEach((({event:e,args:t})=>la.emit(e,...t))),sa=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(a=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===a?void 0:a.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{ia(e,t)})),setTimeout((()=>{la||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sa=[])}),3e3)):sa=[]}function oa(e,t,...n){if(e.isUnmounted)return;const a=e.vnode.props||ne;let l=n;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in a){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=a[e]||ne;s&&(l=n.map((e=>e.trim()))),t&&(l=n.map(je))}let o,r=a[o=Ie(t)]||a[o=Ie(Ee(t))];!r&&s&&(r=a[o=Ie(Me(t))]),r&&In(r,e,6,l);const c=a[o+"Once"];if(c){if(e.emitted){if(e.emitted[o])return}else e.emitted={};e.emitted[o]=!0,In(c,e,6,l)}}function ra(e,t,n=!1){const a=t.emitsCache,l=a.get(e);if(void 0!==l)return l;const s=e.emits;let i={},o=!1;if(!ge(e)){const a=e=>{const n=ra(e,t,!0);n&&(o=!0,ce(i,n))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return s||o?(_e(s)?s.forEach((e=>i[e]=null)):ce(i,s),a.set(e,i),i):(a.set(e,null),null)}function ca(e,t){return!(!e||!oe(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Me(t))||pe(e,t))}let ua=null,da=null;function pa(e){const t=ua;return ua=e,da=e&&e.type.__scopeId||null,t}function _a(e){da=e}function fa(){da=null}const ha=e=>ma;function ma(e,t=ua,n){if(!t)return e;if(e._n)return e;const a=(...n)=>{a._d&&Os(-1);const l=pa(t),s=e(...n);return pa(l),a._d&&Os(1),s};return a._n=!0,a._c=!0,a._d=!0,a}function ga(e){const{type:t,vnode:n,proxy:a,withProxy:l,props:s,propsOptions:[i],slots:o,attrs:r,emit:c,render:u,renderCache:d,data:p,setupState:_,ctx:f,inheritAttrs:h}=e;let m,g;const v=pa(e);try{if(4&n.shapeFlag){const e=l||a;m=Ys(u.call(e,e,d,s,_,p,f)),g=r}else{m=Ys(t(s,t.length>1?{attrs:r,slots:o,emit:c}:null)),g=t.props?r:va(r)}}catch(t){As.length=0,Un(t,e,1),m=qs(Cs)}let b=m;if(g&&!1!==h){const e=Object.keys(g),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(re)&&(g=ba(g,i)),b=Gs(b,g))}return n.dirs&&(b=Gs(b),b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),n.transition&&(b.transition=n.transition),m=b,pa(v),m}const va=e=>{let t;for(const n in e)("class"===n||"style"===n||oe(n))&&((t||(t={}))[n]=e[n]);return t},ba=(e,t)=>{const n={};for(const a in e)re(a)&&a.slice(9)in t||(n[a]=e[a]);return n};function ya(e,t,n){const a=Object.keys(t);if(a.length!==Object.keys(e).length)return!0;for(let l=0;l<a.length;l++){const s=a[l];if(t[s]!==e[s]&&!ca(n,s))return!0}return!1}function wa({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const xa=e=>e.__isSuspense,ka={name:"Suspense",__isSuspense:!0,process(e,t,n,a,l,s,i,o,r,c){null==e?function(e,t,n,a,l,s,i,o,r){const{p:c,o:{createElement:u}}=r,d=u("div"),p=e.suspense=Sa(e,l,a,t,d,n,s,i,o,r);c(null,p.pendingBranch=e.ssContent,d,null,a,p,s,i),p.deps>0?($a(e,"onPending"),$a(e,"onFallback"),c(null,e.ssFallback,t,n,a,null,s,i),Aa(p,e.ssFallback)):p.resolve()}(t,n,a,l,s,i,o,r,c):function(e,t,n,a,l,s,i,o,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,_=t.ssFallback,{activeBranch:f,pendingBranch:h,isInFallback:m,isHydrating:g}=d;if(h)d.pendingBranch=p,js(p,h)?(r(h,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():m&&(r(f,_,n,a,l,null,s,i,o),Aa(d,_))):(d.pendingId++,g?(d.isHydrating=!1,d.activeBranch=h):c(h,l,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():(r(f,_,n,a,l,null,s,i,o),Aa(d,_))):f&&js(p,f)?(r(f,p,n,a,l,d,s,i,o),d.resolve(!0)):(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0&&d.resolve()));else if(f&&js(p,f))r(f,p,n,a,l,d,s,i,o),Aa(d,p);else if($a(t,"onPending"),d.pendingBranch=p,d.pendingId++,r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(_)}),e):0===e&&d.fallback(_)}}(e,t,n,a,l,i,o,r,c)},hydrate:function(e,t,n,a,l,s,i,o,r){const c=t.suspense=Sa(t,a,n,e.parentNode,document.createElement("div"),null,l,s,i,o,!0),u=r(e,c.pendingBranch=t.ssContent,n,c,s,i);return 0===c.deps&&c.resolve(),u},create:Sa,normalize:function(e){const{shapeFlag:t,children:n}=e,a=32&t;e.ssContent=Ca(a?n.default:n),e.ssFallback=a?Ca(n.fallback):qs(Cs)}};function $a(e,t){const n=e.props&&e.props[t];ge(n)&&n()}function Sa(e,t,n,a,l,s,i,o,r,c,u=!1){const{p:d,m:p,um:_,n:f,o:{parentNode:h,remove:m}}=c,g=je(e.props&&e.props.timeout),v={vnode:e,parent:t,parentComponent:n,isSVG:i,container:a,hiddenContainer:l,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof g?g:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:n,pendingBranch:a,pendingId:l,effects:s,parentComponent:i,container:o}=v;if(v.isHydrating)v.isHydrating=!1;else if(!e){const e=n&&a.transition&&"out-in"===a.transition.mode;e&&(n.transition.afterLeave=()=>{l===v.pendingId&&p(a,o,t,0)});let{anchor:t}=v;n&&(t=f(n),_(n,i,v,!0)),e||p(a,o,t,0)}Aa(v,a),v.pendingBranch=null,v.isInFallback=!1;let r=v.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qn(s),v.effects=[],$a(t,"onResolve")},fallback(e){if(!v.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:a,container:l,isSVG:s}=v;$a(t,"onFallback");const i=f(n),c=()=>{v.isInFallback&&(d(null,e,l,i,a,null,s,o,r),Aa(v,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=c),v.isInFallback=!0,_(n,a,null,!0),u||c()},move(e,t,n){v.activeBranch&&p(v.activeBranch,e,t,n),v.container=e},next:()=>v.activeBranch&&f(v.activeBranch),registerDep(e,t){const n=!!v.pendingBranch;n&&v.deps++;const a=e.vnode.el;e.asyncDep.catch((t=>{Un(t,e,0)})).then((l=>{if(e.isUnmounted||v.isUnmounted||v.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;di(e,l,!1),a&&(s.el=a);const o=!a&&e.subTree.el;t(e,s,h(a||e.subTree.el),a?null:f(e.subTree),v,i,r),o&&m(o),wa(e,s.el),n&&0==--v.deps&&v.resolve()}))},unmount(e,t){v.isUnmounted=!0,v.activeBranch&&_(v.activeBranch,n,e,t),v.pendingBranch&&_(v.pendingBranch,n,e,t)}};return v}function Ca(e){let t;if(ge(e)){const n=Ms&&e._c;n&&(e._d=!1,Es()),e=e(),n&&(e._d=!0,t=Ts,Ps())}if(_e(e)){const t=function(e){let t;for(let n=0;n<e.length;n++){const a=e[n];if(!Ds(a))return;if(a.type!==Cs||"v-if"===a.children){if(t)return;t=a}}return t}(e);e=t}return e=Ys(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Na(e,t){t&&t.pendingBranch?_e(e)?t.effects.push(...e):t.effects.push(e):Qn(e)}function Aa(e,t){e.activeBranch=t;const{vnode:n,parentComponent:a}=e,l=n.el=t.el;a&&a.subTree===n&&(a.vnode.el=l,wa(a,l))}function Ta(e,t){if(ai){let n=ai.provides;const a=ai.parent&&ai.parent.provides;a===n&&(n=ai.provides=Object.create(a)),n[e]=t}}function Ea(e,t,n=!1){const a=ai||ua;if(a){const l=null==a.parent?a.vnode.appContext&&a.vnode.appContext.provides:a.parent.provides;if(l&&e in l)return l[e];if(arguments.length>1)return n&&ge(t)?t.call(a.proxy):t}}function Pa(e,t){return Fa(e,null,t)}function Ma(e,t){return Fa(e,null,{flush:"post"})}function Oa(e,t){return Fa(e,null,{flush:"sync"})}const Ia={};function Ua(e,t,n){return Fa(e,t,n)}function Fa(e,t,{immediate:n,deep:a,flush:l}=ne){const s=ai;let i,o,r=!1,c=!1;if(fn(e)?(i=()=>e.value,r=sn(e)):an(e)?(i=()=>e,a=!0):_e(e)?(c=!0,r=e.some((e=>an(e)||sn(e))),i=()=>e.map((e=>fn(e)?e.value:an(e)?La(e):ge(e)?On(e,s,2):void 0))):i=ge(e)?t?()=>On(e,s,2):()=>{if(!s||!s.isUnmounted)return o&&o(),In(e,s,3,[u])}:le,t&&a){const e=i;i=()=>La(e())}let u=e=>{o=f.onStop=()=>{On(e,s,4)}},d=c?[]:Ia;const p=()=>{if(f.active)if(t){const e=f.run();(a||r||(c?e.some(((e,t)=>Ue(e,d[t]))):Ue(e,d)))&&(o&&o(),In(t,s,3,[e,d===Ia?void 0:d,u]),d=e)}else f.run()};let _;p.allowRecurse=!!t,_="sync"===l?p:"post"===l?()=>_s(p,s&&s.suspense):()=>function(e){Xn(e,zn,Rn,Bn)}(p);const f=new tt(i,_);return t?n?p():d=f.run():"post"===l?_s(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&ue(s.scope.effects,f)}}function Da(e,t,n){const a=this.proxy,l=ve(e)?e.includes(".")?ja(a,e):()=>a[e]:e.bind(a,a);let s;ge(t)?s=t:(s=t.handler,n=t);const i=ai;si(this);const o=Fa(l,s.bind(a),n);return i?si(i):ii(),o}function ja(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function La(e,t){if(!ye(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fn(e))La(e.value,t);else if(_e(e))for(let n=0;n<e.length;n++)La(e[n],t);else if(he(e)||fe(e))e.forEach((e=>{La(e,t)}));else if($e(e))for(const n in e)La(e[n],t);return e}function Ra(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return dl((()=>{e.isMounted=!0})),fl((()=>{e.isUnmounting=!0})),e}const za=[Function,Array],Ba={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:za,onEnter:za,onAfterEnter:za,onEnterCancelled:za,onBeforeLeave:za,onLeave:za,onAfterLeave:za,onLeaveCancelled:za,onBeforeAppear:za,onAppear:za,onAfterAppear:za,onAppearCancelled:za},setup(e,{slots:t}){const n=li(),a=Ra();let l;return()=>{const s=t.default&&Ka(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){i=e;break}const o=rn(e),{mode:r}=o;if(a.isLeaving)return Ha(i);const c=Ga(i);if(!c)return Ha(i);const u=qa(c,o,a,n);Wa(c,u);const d=n.subTree,p=d&&Ga(d);let _=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===l?l=e:e!==l&&(l=e,_=!0)}if(p&&p.type!==Cs&&(!js(c,p)||_)){const e=qa(p,o,a,n);if(Wa(p,e),"out-in"===r)return a.isLeaving=!0,e.afterLeave=()=>{a.isLeaving=!1,n.update()},Ha(i);"in-out"===r&&c.type!==Cs&&(e.delayLeave=(e,t,n)=>{Va(a,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=n})}return i}}};function Va(e,t){const{leavingVNodes:n}=e;let a=n.get(t.type);return a||(a=Object.create(null),n.set(t.type,a)),a}function qa(e,t,n,a){const{appear:l,mode:s,persisted:i=!1,onBeforeEnter:o,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:p,onAfterLeave:_,onLeaveCancelled:f,onBeforeAppear:h,onAppear:m,onAfterAppear:g,onAppearCancelled:v}=t,b=String(e.key),y=Va(n,e),w=(e,t)=>{e&&In(e,a,9,t)},x=(e,t)=>{const n=t[1];w(e,t),_e(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},k={mode:s,persisted:i,beforeEnter(t){let a=o;if(!n.isMounted){if(!l)return;a=h||o}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&js(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(a,[t])},enter(e){let t=r,a=c,s=u;if(!n.isMounted){if(!l)return;t=m||r,a=g||c,s=v||u}let i=!1;const o=e._enterCb=t=>{i||(i=!0,w(t?s:a,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,o]):o()},leave(t,a){const l=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return a();w(d,[t]);let s=!1;const i=t._leaveCb=n=>{s||(s=!0,a(),w(n?f:_,[t]),t._leaveCb=void 0,y[l]===e&&delete y[l])};y[l]=e,p?x(p,[t,i]):i()},clone:e=>qa(e,t,n,a)};return k}function Ha(e){if(Qa(e))return(e=Gs(e)).children=null,e}function Ga(e){return Qa(e)?e.children?e.children[0]:void 0:e}function Wa(e,t){6&e.shapeFlag&&e.component?Wa(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ka(e,t=!1,n){let a=[],l=0;for(let s=0;s<e.length;s++){let i=e[s];const o=null==n?i.key:String(n)+String(null!=i.key?i.key:s);i.type===$s?(128&i.patchFlag&&l++,a=a.concat(Ka(i.children,t,o))):(t||i.type!==Cs)&&a.push(null!=o?Gs(i,{key:o}):i)}if(l>1)for(let e=0;e<a.length;e++)a[e].patchFlag=-2;return a}function Ja(e){return ge(e)?{setup:e,name:e.name}:e}const Ya=e=>!!e.type.__asyncLoader;function Za(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:a,delay:l=200,timeout:s,suspensible:i=!0,onError:o}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),o)return new Promise(((t,n)=>{o(e,(()=>t((u++,c=null,d()))),(()=>n(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Ja({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=ai;if(r)return()=>Xa(r,e);const t=t=>{c=null,Un(t,e,13,!a)};if(i&&e.suspense)return d().then((t=>()=>Xa(t,e))).catch((e=>(t(e),()=>a?qs(a,{error:e}):null)));const o=hn(!1),u=hn(),p=hn(!!l);return l&&setTimeout((()=>{p.value=!1}),l),null!=s&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{o.value=!0,e.parent&&Qa(e.parent.vnode)&&Yn(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&r?Xa(r,e):u.value&&a?qs(a,{error:u.value}):n&&!p.value?qs(n):void 0}})}function Xa(e,{vnode:{ref:t,props:n,children:a}}){const l=qs(e,n,a);return l.ref=t,l}const Qa=e=>e.type.__isKeepAlive,el={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=li(),a=n.ctx,l=new Map,s=new Set;let i=null;const o=n.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=a,p=d("div");function _(e){il(e),u(e,n,o,!0)}function f(e){l.forEach(((t,n)=>{const a=vi(t.type);!a||e&&e(a)||h(n)}))}function h(e){const t=l.get(e);i&&t.type===i.type?i&&il(i):_(t),l.delete(e),s.delete(e)}a.activate=(e,t,n,a,l)=>{const s=e.component;c(e,t,n,0,o),r(s.vnode,e,t,n,s,o,a,e.slotScopeIds,l),_s((()=>{s.isDeactivated=!1,s.a&&Fe(s.a);const t=e.props&&e.props.onVnodeMounted;t&&ei(t,s.parent,e)}),o)},a.deactivate=e=>{const t=e.component;c(e,p,null,1,o),_s((()=>{t.da&&Fe(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&ei(n,t.parent,e),t.isDeactivated=!0}),o)},Ua((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tl(e,t))),t&&f((e=>!tl(t,e)))}),{flush:"post",deep:!0});let m=null;const g=()=>{null!=m&&l.set(m,ol(n.subTree))};return dl(g),_l(g),fl((()=>{l.forEach((e=>{const{subTree:t,suspense:a}=n,l=ol(t);if(e.type!==l.type)_(e);else{il(l);const e=l.component.da;e&&_s(e,a)}}))})),()=>{if(m=null,!t.default)return null;const n=t.default(),a=n[0];if(n.length>1)return i=null,n;if(!Ds(a)||!(4&a.shapeFlag||128&a.shapeFlag))return i=null,a;let o=ol(a);const r=o.type,c=vi(Ya(o)?o.type.__asyncResolved||{}:r),{include:u,exclude:d,max:p}=e;if(u&&(!c||!tl(u,c))||d&&c&&tl(d,c))return i=o,a;const _=null==o.key?r:o.key,f=l.get(_);return o.el&&(o=Gs(o),128&a.shapeFlag&&(a.ssContent=o)),m=_,f?(o.el=f.el,o.component=f.component,o.transition&&Wa(o,o.transition),o.shapeFlag|=512,s.delete(_),s.add(_)):(s.add(_),p&&s.size>parseInt(p,10)&&h(s.values().next().value)),o.shapeFlag|=256,i=o,xa(a.type)?a:o}}};function tl(e,t){return _e(e)?e.some((e=>tl(e,t))):ve(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function nl(e,t){ll(e,"a",t)}function al(e,t){ll(e,"da",t)}function ll(e,t,n=ai){const a=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(rl(t,a,n),n){let e=n.parent;for(;e&&e.parent;)Qa(e.parent.vnode)&&sl(a,t,n,e),e=e.parent}}function sl(e,t,n,a){const l=rl(t,e,a,!0);hl((()=>{ue(a[t],l)}),n)}function il(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function ol(e){return 128&e.shapeFlag?e.ssContent:e}function rl(e,t,n=ai,a=!1){if(n){const l=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...a)=>{if(n.isUnmounted)return;ot(),si(n);const l=In(t,n,e,a);return ii(),rt(),l});return a?l.unshift(s):l.push(s),s}}const cl=e=>(t,n=ai)=>(!ui||"sp"===e)&&rl(e,t,n),ul=cl("bm"),dl=cl("m"),pl=cl("bu"),_l=cl("u"),fl=cl("bum"),hl=cl("um"),ml=cl("sp"),gl=cl("rtg"),vl=cl("rtc");function bl(e,t=ai){rl("ec",e,t)}function yl(e,t){const n=ua;if(null===n)return e;const a=mi(n)||n.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,s,i,o=ne]=t[e];ge(n)&&(n={mounted:n,updated:n}),n.deep&&La(s),l.push({dir:n,instance:a,value:s,oldValue:void 0,arg:i,modifiers:o})}return e}function wl(e,t,n,a){const l=e.dirs,s=t&&t.dirs;for(let i=0;i<l.length;i++){const o=l[i];s&&(o.oldValue=s[i].value);let r=o.dir[a];r&&(ot(),In(r,n,8,[e.el,o,e,t]),rt())}}function xl(e,t){return Cl("components",e,!0,t)||e}const kl=Symbol();function $l(e){return ve(e)?Cl("components",e,!1)||e:e||kl}function Sl(e){return Cl("directives",e)}function Cl(e,t,n=!0,a=!1){const l=ua||ai;if(l){const n=l.type;if("components"===e){const e=vi(n,!1);if(e&&(e===t||e===Ee(t)||e===Oe(Ee(t))))return n}const s=Nl(l[e]||n[e],t)||Nl(l.appContext[e],t);return!s&&a?n:s}}function Nl(e,t){return e&&(e[t]||e[Ee(t)]||e[Oe(Ee(t))])}function Al(e,t,n,a){let l;const s=n&&n[a];if(_e(e)||ve(e)){l=new Array(e.length);for(let n=0,a=e.length;n<a;n++)l[n]=t(e[n],n,void 0,s&&s[n])}else if("number"==typeof e){l=new Array(e);for(let n=0;n<e;n++)l[n]=t(n+1,n,void 0,s&&s[n])}else if(ye(e))if(e[Symbol.iterator])l=Array.from(e,((e,n)=>t(e,n,void 0,s&&s[n])));else{const n=Object.keys(e);l=new Array(n.length);for(let a=0,i=n.length;a<i;a++){const i=n[a];l[a]=t(e[i],i,a,s&&s[a])}}else l=[];return n&&(n[a]=l),l}function Tl(e,t){for(let n=0;n<t.length;n++){const a=t[n];if(_e(a))for(let t=0;t<a.length;t++)e[a[t].name]=a[t].fn;else a&&(e[a.name]=a.fn)}return e}function El(e,t,n={},a,l){if(ua.isCE||ua.parent&&Ya(ua.parent)&&ua.parent.isCE)return qs("slot","default"===t?null:{name:t},a&&a());let s=e[t];s&&s._c&&(s._d=!1),Es();const i=s&&Pl(s(n)),o=Fs($s,{key:n.key||`_${t}`},i||(a?a():[]),i&&1===e._?64:-2);return!l&&o.scopeId&&(o.slotScopeIds=[o.scopeId+"-s"]),s&&s._c&&(s._d=!0),o}function Pl(e){return e.some((e=>!Ds(e)||e.type!==Cs&&!(e.type===$s&&!Pl(e.children))))?e:null}function Ml(e){const t={};for(const n in e)t[Ie(n)]=e[n];return t}const Ol=e=>e?oi(e)?mi(e)||e.proxy:Ol(e.parent):null,Il=ce(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Ol(e.parent),$root:e=>Ol(e.root),$emit:e=>e.emit,$options:e=>Rl(e),$forceUpdate:e=>e.f||(e.f=()=>Yn(e.update)),$nextTick:e=>e.n||(e.n=Jn.bind(e.proxy)),$watch:e=>Da.bind(e)}),Ul={get({_:e},t){const{ctx:n,setupState:a,data:l,props:s,accessCache:i,type:o,appContext:r}=e;let c;if("$"!==t[0]){const o=i[t];if(void 0!==o)switch(o){case 1:return a[t];case 2:return l[t];case 4:return n[t];case 3:return s[t]}else{if(a!==ne&&pe(a,t))return i[t]=1,a[t];if(l!==ne&&pe(l,t))return i[t]=2,l[t];if((c=e.propsOptions[0])&&pe(c,t))return i[t]=3,s[t];if(n!==ne&&pe(n,t))return i[t]=4,n[t];Dl&&(i[t]=0)}}const u=Il[t];let d,p;return u?("$attrs"===t&&ct(e,0,t),u(e)):(d=o.__cssModules)&&(d=d[t])?d:n!==ne&&pe(n,t)?(i[t]=4,n[t]):(p=r.config.globalProperties,pe(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:a,setupState:l,ctx:s}=e;return l!==ne&&pe(l,t)?(l[t]=n,!0):a!==ne&&pe(a,t)?(a[t]=n,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:a,appContext:l,propsOptions:s}},i){let o;return!!n[i]||e!==ne&&pe(e,i)||t!==ne&&pe(t,i)||(o=s[0])&&pe(o,i)||pe(a,i)||pe(Il,i)||pe(l.config.globalProperties,i)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:pe(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Fl=ce({},Ul,{get(e,t){if(t!==Symbol.unscopables)return Ul.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!R(t)});let Dl=!0;function jl(e,t,n){In(_e(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Ll(e,t,n,a){const l=a.includes(".")?ja(n,a):()=>n[a];if(ve(e)){const n=t[e];ge(n)&&Ua(l,n)}else if(ge(e))Ua(l,e.bind(n));else if(ye(e))if(_e(e))e.forEach((e=>Ll(e,t,n,a)));else{const a=ge(e.handler)?e.handler.bind(n):t[e.handler];ge(a)&&Ua(l,a,e)}}function Rl(e){const t=e.type,{mixins:n,extends:a}=t,{mixins:l,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,o=s.get(t);let r;return o?r=o:l.length||n||a?(r={},l.length&&l.forEach((e=>zl(r,e,i,!0))),zl(r,t,i)):r=t,s.set(t,r),r}function zl(e,t,n,a=!1){const{mixins:l,extends:s}=t;s&&zl(e,s,n,!0),l&&l.forEach((t=>zl(e,t,n,!0)));for(const l in t)if(a&&"expose"===l);else{const a=Bl[l]||n&&n[l];e[l]=a?a(e[l],t[l]):t[l]}return e}const Bl={data:Vl,props:Gl,emits:Gl,methods:Gl,computed:Gl,beforeCreate:Hl,created:Hl,beforeMount:Hl,mounted:Hl,beforeUpdate:Hl,updated:Hl,beforeDestroy:Hl,beforeUnmount:Hl,destroyed:Hl,unmounted:Hl,activated:Hl,deactivated:Hl,errorCaptured:Hl,serverPrefetch:Hl,components:Gl,directives:Gl,watch:function(e,t){if(!e)return t;if(!t)return e;const n=ce(Object.create(null),e);for(const a in t)n[a]=Hl(e[a],t[a]);return n},provide:Vl,inject:function(e,t){return Gl(ql(e),ql(t))}};function Vl(e,t){return t?e?function(){return ce(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function ql(e){if(_e(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Hl(e,t){return e?[...new Set([].concat(e,t))]:t}function Gl(e,t){return e?ce(ce(Object.create(null),e),t):t}function Wl(e,t,n,a){const[l,s]=e.propsOptions;let i,o=!1;if(t)for(let r in t){if(Ce(r))continue;const c=t[r];let u;l&&pe(l,u=Ee(r))?s&&s.includes(u)?(i||(i={}))[u]=c:n[u]=c:ca(e.emitsOptions,r)||r in a&&c===a[r]||(a[r]=c,o=!0)}if(s){const t=rn(n),a=i||ne;for(let i=0;i<s.length;i++){const o=s[i];n[o]=Kl(l,t,o,a[o],e,!pe(a,o))}}return o}function Kl(e,t,n,a,l,s){const i=e[n];if(null!=i){const e=pe(i,"default");if(e&&void 0===a){const e=i.default;if(i.type!==Function&&ge(e)){const{propsDefaults:s}=l;n in s?a=s[n]:(si(l),a=s[n]=e.call(null,t),ii())}else a=e}i[0]&&(s&&!e?a=!1:!i[1]||""!==a&&a!==Me(n)||(a=!0))}return a}function Jl(e,t,n=!1){const a=t.propsCache,l=a.get(e);if(l)return l;const s=e.props,i={},o=[];let r=!1;if(!ge(e)){const a=e=>{r=!0;const[n,a]=Jl(e,t,!0);ce(i,n),a&&o.push(...a)};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}if(!s&&!r)return a.set(e,ae),ae;if(_e(s))for(let e=0;e<s.length;e++){const t=Ee(s[e]);Yl(t)&&(i[t]=ne)}else if(s)for(const e in s){const t=Ee(e);if(Yl(t)){const n=s[e],a=i[t]=_e(n)||ge(n)?{type:n}:n;if(a){const e=Ql(Boolean,a.type),n=Ql(String,a.type);a[0]=e>-1,a[1]=n<0||e<n,(e>-1||pe(a,"default"))&&o.push(t)}}}const c=[i,o];return a.set(e,c),c}function Yl(e){return"$"!==e[0]}function Zl(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Xl(e,t){return Zl(e)===Zl(t)}function Ql(e,t){return _e(t)?t.findIndex((t=>Xl(t,e))):ge(t)&&Xl(t,e)?0:-1}const es=e=>"_"===e[0]||"$stable"===e,ts=e=>_e(e)?e.map(Ys):[Ys(e)],ns=(e,t,n)=>{if(t._n)return t;const a=ma(((...e)=>ts(t(...e))),n);return a._c=!1,a},as=(e,t,n)=>{const a=e._ctx;for(const n in e){if(es(n))continue;const l=e[n];if(ge(l))t[n]=ns(0,l,a);else if(null!=l){const e=ts(l);t[n]=()=>e}}},ls=(e,t)=>{const n=ts(t);e.slots.default=()=>n};function ss(){return{app:null,config:{isNativeTag:se,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function os(e,t){return function(n,a=null){ge(n)||(n=Object.assign({},n)),null==a||ye(a)||(a=null);const l=ss(),s=new Set;let i=!1;const o=l.app={_uid:is++,_component:n,_props:a,_container:null,_context:l,_instance:null,version:Di,get config(){return l.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(o,...t)):ge(e)&&(s.add(e),e(o,...t))),o),mixin:e=>(l.mixins.includes(e)||l.mixins.push(e),o),component:(e,t)=>t?(l.components[e]=t,o):l.components[e],directive:(e,t)=>t?(l.directives[e]=t,o):l.directives[e],mount(s,r,c){if(!i){const u=qs(n,a);return u.appContext=l,r&&t?t(u,s):e(u,s,c),i=!0,o._container=s,s.__vue_app__=o,mi(u.component)||u.component.proxy}},unmount(){i&&(e(null,o._container),delete o._container.__vue_app__)},provide:(e,t)=>(l.provides[e]=t,o)};return o}}function rs(e,t,n,a,l=!1){if(_e(e))return void e.forEach(((e,s)=>rs(e,t&&(_e(t)?t[s]:t),n,a,l)));if(Ya(a)&&!l)return;const s=4&a.shapeFlag?mi(a.component)||a.component.proxy:a.el,i=l?null:s,{i:o,r:r}=e,c=t&&t.r,u=o.refs===ne?o.refs={}:o.refs,d=o.setupState;if(null!=c&&c!==r&&(ve(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fn(c)&&(c.value=null)),ge(r))On(r,o,12,[i,u]);else{const t=ve(r),a=fn(r);if(t||a){const o=()=>{if(e.f){const n=t?u[r]:r.value;l?_e(n)&&ue(n,s):_e(n)?n.includes(s)||n.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=i,pe(d,r)&&(d[r]=i)):a&&(r.value=i,e.k&&(u[e.k]=i))};i?(o.id=-1,_s(o,n)):o()}}}let cs=!1;const us=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,ds=e=>8===e.nodeType;function ps(e){const{mt:t,p:n,o:{patchProp:a,createText:l,nextSibling:s,parentNode:i,remove:o,insert:r,createComment:c}}=e,u=(n,a,o,c,m,g=!1)=>{const v=ds(n)&&"["===n.data,b=()=>f(n,a,o,c,m,v),{type:y,ref:w,shapeFlag:x,patchFlag:k}=a,$=n.nodeType;a.el=n,-2===k&&(g=!1,a.dynamicChildren=null);let S=null;switch(y){case Ss:3!==$?""===a.children?(r(a.el=l(""),i(n),n),S=n):S=b():(n.data!==a.children&&(cs=!0,n.data=a.children),S=s(n));break;case Cs:S=8!==$||v?b():s(n);break;case Ns:if(1===$||3===$){S=n;const e=!a.children.length;for(let t=0;t<a.staticCount;t++)e&&(a.children+=1===S.nodeType?S.outerHTML:S.data),t===a.staticCount-1&&(a.anchor=S),S=s(S);return S}S=b();break;case $s:S=v?_(n,a,o,c,m,g):b();break;default:if(1&x)S=1!==$||a.type.toLowerCase()!==n.tagName.toLowerCase()?b():d(n,a,o,c,m,g);else if(6&x){a.slotScopeIds=m;const e=i(n);if(t(a,e,null,o,c,us(e),g),S=v?h(n):s(n),S&&ds(S)&&"teleport end"===S.data&&(S=s(S)),Ya(a)){let t;v?(t=qs($s),t.anchor=S?S.previousSibling:e.lastChild):t=3===n.nodeType?Ws(""):qs("div"),t.el=n,a.component.subTree=t}}else 64&x?S=8!==$?b():a.type.hydrate(n,a,o,c,m,g,e,p):128&x&&(S=a.type.hydrate(n,a,o,c,us(i(n)),m,g,e,u))}return null!=w&&rs(w,null,c,a),S},d=(e,t,n,l,s,i)=>{i=i||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:_}=t,f="input"===r&&_||"option"===r;if(f||-1!==u){if(_&&wl(t,null,n,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||oe(t)&&!Ce(t))&&a(e,t,null,c[t],!1,void 0,n);else c.onClick&&a(e,"onClick",null,c.onClick,!1,void 0,n);let r;if((r=c&&c.onVnodeBeforeMount)&&ei(r,n,t),_&&wl(t,null,n,"beforeMount"),((r=c&&c.onVnodeMounted)||_)&&Na((()=>{r&&ei(r,n,t),_&&wl(t,null,n,"mounted")}),l),16&d&&(!c||!c.innerHTML&&!c.textContent)){let a=p(e.firstChild,t,e,n,l,s,i);for(;a;){cs=!0;const e=a;a=a.nextSibling,o(e)}}else 8&d&&e.textContent!==t.children&&(cs=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,a,l,s,i,o)=>{o=o||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=o?r[t]:r[t]=Ys(r[t]);if(e)e=u(e,c,l,s,i,o);else{if(c.type===Ss&&!c.children)continue;cs=!0,n(null,c,a,null,l,s,us(a),i)}}return e},_=(e,t,n,a,l,o)=>{const{slotScopeIds:u}=t;u&&(l=l?l.concat(u):u);const d=i(e),_=p(s(e),t,d,n,a,l,o);return _&&ds(_)&&"]"===_.data?s(t.anchor=_):(cs=!0,r(t.anchor=c("]"),d,_),_)},f=(e,t,a,l,r,c)=>{if(cs=!0,t.el=null,c){const t=h(e);for(;;){const n=s(e);if(!n||n===t)break;o(n)}}const u=s(e),d=i(e);return o(e),n(null,t,d,u,a,l,us(d),r),u},h=e=>{let t=0;for(;e;)if((e=s(e))&&ds(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),ta(),void(t._vnode=e);cs=!1,u(t.firstChild,e,null,null,null),ta(),t._vnode=e,cs&&console.error("Hydration completed but contains mismatches.")},u]}const _s=Na;function fs(e){return ms(e)}function hs(e){return ms(e,ps)}function ms(e,t){(Le||(Le="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:n,remove:a,patchProp:l,createElement:s,createText:i,createComment:o,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:p=le,cloneNode:_,insertStaticContent:f}=e,h=(e,t,n,a=null,l=null,s=null,i=!1,o=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!js(e,t)&&(a=z(e),F(e,l,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ss:m(e,t,n,a);break;case Cs:g(e,t,n,a);break;case Ns:null==e&&v(t,n,a,i);break;case $s:C(e,t,n,a,l,s,i,o,r);break;default:1&d?b(e,t,n,a,l,s,i,o,r):6&d?N(e,t,n,a,l,s,i,o,r):(64&d||128&d)&&c.process(e,t,n,a,l,s,i,o,r,V)}null!=u&&l&&rs(u,e&&e.ref,s,t||e,!t)},m=(e,t,a,l)=>{if(null==e)n(t.el=i(t.children),a,l);else{const n=t.el=e.el;t.children!==e.children&&r(n,t.children)}},g=(e,t,a,l)=>{null==e?n(t.el=o(t.children||""),a,l):t.el=e.el},v=(e,t,n,a)=>{[e.el,e.anchor]=f(e.children,t,n,a,e.el,e.anchor)},b=(e,t,n,a,l,s,i,o,r)=>{i=i||"svg"===t.type,null==e?y(t,n,a,l,s,i,o,r):k(e,t,l,s,i,o,r)},y=(e,t,a,i,o,r,u,d)=>{let p,f;const{type:h,props:m,shapeFlag:g,transition:v,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==_&&-1===b)p=e.el=_(e.el);else{if(p=e.el=s(e.type,r,m&&m.is,m),8&g?c(p,e.children):16&g&&x(e.children,p,null,i,o,r&&"foreignObject"!==h,u,d),y&&wl(e,null,i,"created"),m){for(const t in m)"value"===t||Ce(t)||l(p,t,null,m[t],r,e.children,i,o,R);"value"in m&&l(p,"value",null,m.value),(f=m.onVnodeBeforeMount)&&ei(f,i,e)}w(p,e,e.scopeId,u,i)}y&&wl(e,null,i,"beforeMount");const k=(!o||o&&!o.pendingBranch)&&v&&!v.persisted;k&&v.beforeEnter(p),n(p,t,a),((f=m&&m.onVnodeMounted)||k||y)&&_s((()=>{f&&ei(f,i,e),k&&v.enter(p),y&&wl(e,null,i,"mounted")}),o)},w=(e,t,n,a,l)=>{if(n&&p(e,n),a)for(let t=0;t<a.length;t++)p(e,a[t]);if(l&&t===l.subTree){const t=l.vnode;w(e,t,t.scopeId,t.slotScopeIds,l.parent)}},x=(e,t,n,a,l,s,i,o,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=o?Zs(e[c]):Ys(e[c]);h(null,r,t,n,a,l,s,i,o)}},k=(e,t,n,a,s,i,o)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const _=e.props||ne,f=t.props||ne;let h;n&&gs(n,!1),(h=f.onVnodeBeforeUpdate)&&ei(h,n,t,e),p&&wl(t,e,n,"beforeUpdate"),n&&gs(n,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,n,a,m,i):o||M(e,t,r,null,n,a,m,i,!1),u>0){if(16&u)S(r,t,_,f,n,a,s);else if(2&u&&_.class!==f.class&&l(r,"class",null,f.class,s),4&u&&l(r,"style",_.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const o=i[t],c=_[o],u=f[o];u===c&&"value"!==o||l(r,o,c,u,s,e.children,n,a,R)}}1&u&&e.children!==t.children&&c(r,t.children)}else o||null!=d||S(r,t,_,f,n,a,s);((h=f.onVnodeUpdated)||p)&&_s((()=>{h&&ei(h,n,t,e),p&&wl(t,e,n,"updated")}),a)},$=(e,t,n,a,l,s,i)=>{for(let o=0;o<t.length;o++){const r=e[o],c=t[o],d=r.el&&(r.type===$s||!js(r,c)||70&r.shapeFlag)?u(r.el):n;h(r,c,d,null,a,l,s,i,!0)}},S=(e,t,n,a,s,i,o)=>{if(n!==a){for(const r in a){if(Ce(r))continue;const c=a[r],u=n[r];c!==u&&"value"!==r&&l(e,r,u,c,o,t.children,s,i,R)}if(n!==ne)for(const r in n)Ce(r)||r in a||l(e,r,n[r],null,o,t.children,s,i,R);"value"in a&&l(e,"value",n.value,a.value)}},C=(e,t,a,l,s,o,r,c,u)=>{const d=t.el=e?e.el:i(""),p=t.anchor=e?e.anchor:i("");let{patchFlag:_,dynamicChildren:f,slotScopeIds:h}=t;h&&(c=c?c.concat(h):h),null==e?(n(d,a,l),n(p,a,l),x(t.children,a,p,s,o,r,c,u)):_>0&&64&_&&f&&e.dynamicChildren?($(e.dynamicChildren,f,a,s,o,r,c),(null!=t.key||s&&t===s.subTree)&&vs(e,t,!0)):M(e,t,a,p,s,o,r,c,u)},N=(e,t,n,a,l,s,i,o,r)=>{t.slotScopeIds=o,null==e?512&t.shapeFlag?l.ctx.activate(t,n,a,i,r):A(t,n,a,l,s,i,r):T(e,t,r)},A=(e,t,n,a,l,s,i)=>{const o=e.component=function(e,t,n){const a=e.type,l=(t?t.appContext:e.appContext)||ti,s={uid:ni++,vnode:e,type:a,parent:t,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,scope:new ze(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(l.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jl(a,l),emitsOptions:ra(a,l),emit:null,emitted:null,propsDefaults:ne,inheritAttrs:a.inheritAttrs,ctx:ne,data:ne,props:ne,attrs:ne,slots:ne,refs:ne,setupState:ne,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=oa.bind(null,s),e.ce&&e.ce(s),s}(e,a,l);if(Qa(e)&&(o.ctx.renderer=V),function(e,t=!1){ui=t;const{props:n,children:a}=e.vnode,l=oi(e);(function(e,t,n,a=!1){const l={},s={};De(s,Rs,1),e.propsDefaults=Object.create(null),Wl(e,t,l,s);for(const t in e.propsOptions[0])t in l||(l[t]=void 0);e.props=n?a?l:Qt(l):e.type.props?l:s,e.attrs=s})(e,n,l,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=rn(t),De(t,"_",n)):as(t,e.slots={})}else e.slots={},t&&ls(e,t);De(e.slots,Rs,1)})(e,a),l&&function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=cn(new Proxy(e.ctx,Ul));const{setup:a}=n;if(a){const n=e.setupContext=a.length>1?hi(e):null;si(e),ot();const l=On(a,e,0,[e.props,n]);if(rt(),ii(),we(l)){if(l.then(ii,ii),t)return l.then((n=>{di(e,n,t)})).catch((t=>{Un(t,e,0)}));e.asyncDep=l}else di(e,l,t)}else fi(e,t)}(e,t),ui=!1}(o),o.asyncDep){if(l&&l.registerDep(o,E),!e.el){const e=o.subTree=qs(Cs);g(null,e,t,n)}}else E(o,e,t,n,l,s,i)},T=(e,t,n)=>{const a=t.component=e.component;if(function(e,t,n){const{props:a,children:l,component:s}=e,{props:i,children:o,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&r>=0))return!(!l&&!o||o&&o.$stable)||a!==i&&(a?!i||ya(a,i,c):!!i);if(1024&r)return!0;if(16&r)return a?ya(a,i,c):!!i;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==a[n]&&!ca(c,n))return!0}}return!1}(e,t,n)){if(a.asyncDep&&!a.asyncResolved)return void P(a,t,n);a.next=t,function(e){const t=jn.indexOf(e);t>Ln&&jn.splice(t,1)}(a.update),a.update()}else t.el=e.el,a.vnode=t},E=(e,t,n,a,l,s,i)=>{const o=e.effect=new tt((()=>{if(e.isMounted){let t,{next:n,bu:a,u:o,parent:r,vnode:c}=e,d=n;gs(e,!1),n?(n.el=c.el,P(e,n,i)):n=c,a&&Fe(a),(t=n.props&&n.props.onVnodeBeforeUpdate)&&ei(t,r,n,c),gs(e,!0);const p=ga(e),_=e.subTree;e.subTree=p,h(_,p,u(_.el),z(_),e,l,s),n.el=p.el,null===d&&wa(e,p.el),o&&_s(o,l),(t=n.props&&n.props.onVnodeUpdated)&&_s((()=>ei(t,r,n,c)),l)}else{let i;const{el:o,props:r}=t,{bm:c,m:u,parent:d}=e,p=Ya(t);if(gs(e,!1),c&&Fe(c),!p&&(i=r&&r.onVnodeBeforeMount)&&ei(i,d,t),gs(e,!0),o&&H){const n=()=>{e.subTree=ga(e),H(o,e.subTree,e,l,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{const i=e.subTree=ga(e);h(null,i,n,a,e,l,s),t.el=i.el}if(u&&_s(u,l),!p&&(i=r&&r.onVnodeMounted)){const e=t;_s((()=>ei(i,d,e)),l)}(256&t.shapeFlag||d&&Ya(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&_s(e.a,l),e.isMounted=!0,t=n=a=null}}),(()=>Yn(r)),e.scope),r=e.update=()=>o.run();r.id=e.uid,gs(e,!0),r()},P=(e,t,n)=>{t.component=e;const a=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,a){const{props:l,attrs:s,vnode:{patchFlag:i}}=e,o=rn(l),[r]=e.propsOptions;let c=!1;if(!(a||i>0)||16&i){let a;Wl(e,t,l,s)&&(c=!0);for(const s in o)t&&(pe(t,s)||(a=Me(s))!==s&&pe(t,a))||(r?!n||void 0===n[s]&&void 0===n[a]||(l[s]=Kl(r,o,s,void 0,e,!0)):delete l[s]);if(s!==o)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let a=0;a<n.length;a++){let i=n[a];if(ca(e.emitsOptions,i))continue;const u=t[i];if(r)if(pe(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Ee(i);l[t]=Kl(r,o,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&dt(e,"set","$attrs")}(e,t.props,a,n),((e,t,n)=>{const{vnode:a,slots:l}=e;let s=!0,i=ne;if(32&a.shapeFlag){const e=t._;e?n&&1===e?s=!1:(ce(l,t),n||1!==e||delete l._):(s=!t.$stable,as(t,l)),i=t}else t&&(ls(e,t),i={default:1});if(s)for(const e in l)es(e)||e in i||delete l[e]})(e,t.children,n),ot(),ea(void 0,e.update),rt()},M=(e,t,n,a,l,s,i,o,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,p=t.children,{patchFlag:_,shapeFlag:f}=t;if(_>0){if(128&_)return void I(u,p,n,a,l,s,i,o,r);if(256&_)return void O(u,p,n,a,l,s,i,o,r)}8&f?(16&d&&R(u,l,s),p!==u&&c(n,p)):16&d?16&f?I(u,p,n,a,l,s,i,o,r):R(u,l,s,!0):(8&d&&c(n,""),16&f&&x(p,n,a,l,s,i,o,r))},O=(e,t,n,a,l,s,i,o,r)=>{const c=(e=e||ae).length,u=(t=t||ae).length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const a=t[p]=r?Zs(t[p]):Ys(t[p]);h(e[p],a,n,null,l,s,i,o,r)}c>u?R(e,l,s,!0,!1,d):x(t,n,a,l,s,i,o,r,d)},I=(e,t,n,a,l,s,i,o,r)=>{let c=0;const u=t.length;let d=e.length-1,p=u-1;for(;c<=d&&c<=p;){const a=e[c],u=t[c]=r?Zs(t[c]):Ys(t[c]);if(!js(a,u))break;h(a,u,n,null,l,s,i,o,r),c++}for(;c<=d&&c<=p;){const a=e[d],c=t[p]=r?Zs(t[p]):Ys(t[p]);if(!js(a,c))break;h(a,c,n,null,l,s,i,o,r),d--,p--}if(c>d){if(c<=p){const e=p+1,d=e<u?t[e].el:a;for(;c<=p;)h(null,t[c]=r?Zs(t[c]):Ys(t[c]),n,d,l,s,i,o,r),c++}}else if(c>p)for(;c<=d;)F(e[c],l,s,!0),c++;else{const _=c,f=c,m=new Map;for(c=f;c<=p;c++){const e=t[c]=r?Zs(t[c]):Ys(t[c]);null!=e.key&&m.set(e.key,c)}let g,v=0;const b=p-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=_;c<=d;c++){const a=e[c];if(v>=b){F(a,l,s,!0);continue}let u;if(null!=a.key)u=m.get(a.key);else for(g=f;g<=p;g++)if(0===x[g-f]&&js(a,t[g])){u=g;break}void 0===u?F(a,l,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,h(a,t[u],n,null,l,s,i,o,r),v++)}const k=y?function(e){const t=e.slice(),n=[0];let a,l,s,i,o;const r=e.length;for(a=0;a<r;a++){const r=e[a];if(0!==r){if(l=n[n.length-1],e[l]<r){t[a]=l,n.push(a);continue}for(s=0,i=n.length-1;s<i;)o=s+i>>1,e[n[o]]<r?s=o+1:i=o;r<e[n[s]]&&(s>0&&(t[a]=n[s-1]),n[s]=a)}}for(s=n.length,i=n[s-1];s-- >0;)n[s]=i,i=t[i];return n}(x):ae;for(g=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],p=e+1<u?t[e+1].el:a;0===x[c]?h(null,d,n,p,l,s,i,o,r):y&&(g<0||c!==k[g]?U(d,n,p,2):g--)}}},U=(e,t,a,l,s=null)=>{const{el:i,type:o,transition:r,children:c,shapeFlag:u}=e;if(6&u)U(e.component.subTree,t,a,l);else if(128&u)e.suspense.move(t,a,l);else if(64&u)o.move(e,t,a,V);else if(o!==$s)if(o!==Ns)if(2!==l&&1&u&&r)if(0===l)r.beforeEnter(i),n(i,t,a),_s((()=>r.enter(i)),s);else{const{leave:e,delayLeave:l,afterLeave:s}=r,o=()=>n(i,t,a),c=()=>{e(i,(()=>{o(),s&&s()}))};l?l(i,o,c):c()}else n(i,t,a);else(({el:e,anchor:t},a,l)=>{let s;for(;e&&e!==t;)s=d(e),n(e,a,l),e=s;n(t,a,l)})(e,t,a);else{n(i,t,a);for(let e=0;e<c.length;e++)U(c[e],t,a,l);n(e.anchor,t,a)}},F=(e,t,n,a=!1,l=!1)=>{const{type:s,props:i,ref:o,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=o&&rs(o,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const _=1&u&&p,f=!Ya(e);let h;if(f&&(h=i&&i.onVnodeBeforeUnmount)&&ei(h,t,e),6&u)L(e.component,n,a);else{if(128&u)return void e.suspense.unmount(n,a);_&&wl(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,l,V,a):c&&(s!==$s||d>0&&64&d)?R(c,t,n,!1,!0):(s===$s&&384&d||!l&&16&u)&&R(r,t,n),a&&D(e)}(f&&(h=i&&i.onVnodeUnmounted)||_)&&_s((()=>{h&&ei(h,t,e),_&&wl(e,null,t,"unmounted")}),n)},D=e=>{const{type:t,el:n,anchor:l,transition:s}=e;if(t===$s)return void j(n,l);if(t===Ns)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=d(e),a(e),e=n;a(t)})(e);const i=()=>{a(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:a}=s,l=()=>t(n,i);a?a(e.el,i,l):l()}else i()},j=(e,t)=>{let n;for(;e!==t;)n=d(e),a(e),e=n;a(t)},L=(e,t,n)=>{const{bum:a,scope:l,update:s,subTree:i,um:o}=e;a&&Fe(a),l.stop(),s&&(s.active=!1,F(i,e,t,n)),o&&_s(o,t),_s((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},R=(e,t,n,a=!1,l=!1,s=0)=>{for(let i=s;i<e.length;i++)F(e[i],t,n,a,l)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),B=(e,t,n)=>{null==e?t._vnode&&F(t._vnode,null,null,!0):h(t._vnode||null,e,t,null,null,null,n),ta(),t._vnode=e},V={p:h,um:F,m:U,r:D,mt:A,mc:x,pc:M,pbc:$,n:z,o:e};let q,H;return t&&([q,H]=t(V)),{render:B,hydrate:q,createApp:os(B,q)}}function gs({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function vs(e,t,n=!1){const a=e.children,l=t.children;if(_e(a)&&_e(l))for(let e=0;e<a.length;e++){const t=a[e];let s=l[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=l[e]=Zs(l[e]),s.el=t.el),n||vs(t,s))}}const bs=e=>e&&(e.disabled||""===e.disabled),ys=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,ws=(e,t)=>{const n=e&&e.to;return ve(n)?t?t(n):null:n};function xs(e,t,n,{o:{insert:a},m:l},s=2){0===s&&a(e.targetAnchor,t,n);const{el:i,anchor:o,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&a(i,t,n),(!d||bs(u))&&16&r)for(let e=0;e<c.length;e++)l(c[e],t,n,2);d&&a(o,t,n)}const ks={__isTeleport:!0,process(e,t,n,a,l,s,i,o,r,c){const{mc:u,pc:d,pbc:p,o:{insert:_,querySelector:f,createText:h}}=c,m=bs(t.props);let{shapeFlag:g,children:v,dynamicChildren:b}=t;if(null==e){const e=t.el=h(""),c=t.anchor=h("");_(e,n,a),_(c,n,a);const d=t.target=ws(t.props,f),p=t.targetAnchor=h("");d&&(_(p,d),i=i||ys(d));const b=(e,t)=>{16&g&&u(v,e,t,l,s,i,o,r)};m?b(n,c):d&&b(d,p)}else{t.el=e.el;const a=t.anchor=e.anchor,u=t.target=e.target,_=t.targetAnchor=e.targetAnchor,h=bs(e.props),g=h?n:u,v=h?a:_;if(i=i||ys(u),b?(p(e.dynamicChildren,b,g,l,s,i,o),vs(e,t,!0)):r||d(e,t,g,v,l,s,i,o,!1),m)h||xs(t,n,a,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=ws(t.props,f);e&&xs(t,e,null,c,0)}else h&&xs(t,u,_,c,1)}},remove(e,t,n,a,{um:l,o:{remove:s}},i){const{shapeFlag:o,children:r,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&s(u),(i||!bs(p))&&(s(c),16&o))for(let e=0;e<r.length;e++){const a=r[e];l(a,t,n,!0,!!a.dynamicChildren)}},move:xs,hydrate:function(e,t,n,a,l,s,{o:{nextSibling:i,parentNode:o,querySelector:r}},c){const u=t.target=ws(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(bs(t.props))t.anchor=c(i(e),t,o(e),n,a,l,s),t.targetAnchor=r;else{t.anchor=i(e);let o=r;for(;o;)if(o=i(o),o&&8===o.nodeType&&"teleport anchor"===o.data){t.targetAnchor=o,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(r,t,u,n,a,l,s)}}return t.anchor&&i(t.anchor)}},$s=Symbol(void 0),Ss=Symbol(void 0),Cs=Symbol(void 0),Ns=Symbol(void 0),As=[];let Ts=null;function Es(e=!1){As.push(Ts=e?null:[])}function Ps(){As.pop(),Ts=As[As.length-1]||null}let Ms=1;function Os(e){Ms+=e}function Is(e){return e.dynamicChildren=Ms>0?Ts||ae:null,Ps(),Ms>0&&Ts&&Ts.push(e),e}function Us(e,t,n,a,l,s){return Is(Vs(e,t,n,a,l,s,!0))}function Fs(e,t,n,a,l){return Is(qs(e,t,n,a,l,!0))}function Ds(e){return!!e&&!0===e.__v_isVNode}function js(e,t){return e.type===t.type&&e.key===t.key}function Ls(e){}const Rs="__vInternal",zs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:n})=>null!=e?ve(e)||fn(e)||ge(e)?{i:ua,r:e,k:t,f:!!n}:e:null;function Vs(e,t=null,n=null,a=0,l=null,s=(e===$s?0:1),i=!1,o=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&zs(t),ref:t&&Bs(t),scopeId:da,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:a,dynamicProps:l,dynamicChildren:null,appContext:null};return o?(Xs(r,n),128&s&&e.normalize(r)):n&&(r.shapeFlag|=ve(n)?8:16),Ms>0&&!i&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const qs=function(e,t=null,n=null,a=0,l=null,s=!1){if(e&&e!==kl||(e=Cs),Ds(e)){const a=Gs(e,t,!0);return n&&Xs(a,n),Ms>0&&!s&&Ts&&(6&a.shapeFlag?Ts[Ts.indexOf(e)]=a:Ts.push(a)),a.patchFlag|=-2,a}var i;if(ge(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Hs(t);let{class:e,style:n}=t;e&&!ve(e)&&(t.class=W(e)),ye(n)&&(on(n)&&!_e(n)&&(n=ce({},n)),t.style=V(n))}return Vs(e,t,n,a,l,ve(e)?1:xa(e)?128:(e=>e.__isTeleport)(e)?64:ye(e)?4:ge(e)?2:0,s,!0)};function Hs(e){return e?on(e)||Rs in e?ce({},e):e:null}function Gs(e,t,n=!1){const{props:a,ref:l,patchFlag:s,children:i}=e,o=t?Qs(a||{},t):a;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:o,key:o&&zs(o),ref:t&&t.ref?n&&l?_e(l)?l.concat(Bs(t)):[l,Bs(t)]:Bs(t):l,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==$s?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Gs(e.ssContent),ssFallback:e.ssFallback&&Gs(e.ssFallback),el:e.el,anchor:e.anchor}}function Ws(e=" ",t=0){return qs(Ss,null,e,t)}function Ks(e,t){const n=qs(Ns,null,e);return n.staticCount=t,n}function Js(e="",t=!1){return t?(Es(),Fs(Cs,null,e)):qs(Cs,null,e)}function Ys(e){return null==e||"boolean"==typeof e?qs(Cs):_e(e)?qs($s,null,e.slice()):"object"==typeof e?Zs(e):qs(Ss,null,String(e))}function Zs(e){return null===e.el||e.memo?e:Gs(e)}function Xs(e,t){let n=0;const{shapeFlag:a}=e;if(null==t)t=null;else if(_e(t))n=16;else if("object"==typeof t){if(65&a){const n=t.default;return void(n&&(n._c&&(n._d=!1),Xs(e,n()),n._c&&(n._d=!0)))}{n=32;const a=t._;a||Rs in t?3===a&&ua&&(1===ua.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ua}}else ge(t)?(t={default:t,_ctx:ua},n=32):(t=String(t),64&a?(n=16,t=[Ws(t)]):n=8);e.children=t,e.shapeFlag|=n}function Qs(...e){const t={};for(let n=0;n<e.length;n++){const a=e[n];for(const e in a)if("class"===e)t.class!==a.class&&(t.class=W([t.class,a.class]));else if("style"===e)t.style=V([t.style,a.style]);else if(oe(e)){const n=t[e],l=a[e];!l||n===l||_e(n)&&n.includes(l)||(t[e]=n?[].concat(n,l):l)}else""!==e&&(t[e]=a[e])}return t}function ei(e,t,n,a=null){In(e,t,7,[n,a])}const ti=ss();let ni=0,ai=null;const li=()=>ai||ua,si=e=>{ai=e,e.scope.on()},ii=()=>{ai&&ai.scope.off(),ai=null};function oi(e){return 4&e.vnode.shapeFlag}let ri,ci,ui=!1;function di(e,t,n){ge(t)?e.render=t:ye(t)&&(e.setupState=xn(t)),fi(e,n)}function pi(e){ri=e,ci=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Fl))}}const _i=()=>!ri;function fi(e,t,n){const a=e.type;if(!e.render){if(!t&&ri&&!a.render){const t=a.template;if(t){const{isCustomElement:n,compilerOptions:l}=e.appContext.config,{delimiters:s,compilerOptions:i}=a,o=ce(ce({isCustomElement:n,delimiters:s},l),i);a.render=ri(t,o)}}e.render=a.render||le,ci&&ci(e)}si(e),ot(),function(e){const t=Rl(e),n=e.proxy,a=e.ctx;Dl=!1,t.beforeCreate&&jl(t.beforeCreate,e,"bc");const{data:l,computed:s,methods:i,watch:o,provide:r,inject:c,created:u,beforeMount:d,mounted:p,beforeUpdate:_,updated:f,activated:h,deactivated:m,beforeUnmount:g,unmounted:v,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,n=le,a=!1){_e(e)&&(e=ql(e));for(const n in e){const l=e[n];let s;s=ye(l)?"default"in l?Ea(l.from||n,l.default,!0):Ea(l.from||n):Ea(l),fn(s)&&a?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[n]=s}}(c,a,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];ge(t)&&(a[e]=t.bind(n))}if(l){const t=l.call(n,n);ye(t)&&(e.data=Xt(t))}if(Dl=!0,s)for(const e in s){const t=s[e],l=ge(t)?t.bind(n,n):ge(t.get)?t.get.bind(n,n):le,i=!ge(t)&&ge(t.set)?t.set.bind(n):le,o=yi({get:l,set:i});Object.defineProperty(a,e,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e})}if(o)for(const e in o)Ll(o[e],a,n,e);if(r){const e=ge(r)?r.call(n):r;Reflect.ownKeys(e).forEach((t=>{Ta(t,e[t])}))}function A(e,t){_e(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(u&&jl(u,e,"c"),A(ul,d),A(dl,p),A(pl,_),A(_l,f),A(nl,h),A(al,m),A(bl,x),A(vl,y),A(gl,w),A(fl,g),A(hl,v),A(ml,k),_e($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===le&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),rt(),ii()}function hi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(ct(e,0,"$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function mi(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xn(cn(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Il?Il[n](e):void 0}))}const gi=/(?:^|[-_])(\w)/g;function vi(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function bi(e,t,n=!1){let a=vi(t);if(!a&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(a=e[1])}if(!a&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};a=n(e.components||e.parent.type.components)||n(e.appContext.components)}return a?a.replace(gi,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}const yi=(e,t)=>function(e,t,n=!1){let a,l;const s=ge(e);return s?(a=e,l=le):(a=e.get,l=e.set),new An(a,l,s||!l,n)}(e,0,ui);function wi(){return null}function xi(){return null}function ki(e){}function $i(e,t){return null}function Si(){return Ni().slots}function Ci(){return Ni().attrs}function Ni(){const e=li();return e.setupContext||(e.setupContext=hi(e))}function Ai(e,t){const n=_e(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const a=n[e];a?_e(a)||ge(a)?n[e]={type:a,default:t[e]}:a.default=t[e]:null===a&&(n[e]={default:t[e]})}return n}function Ti(e,t){const n={};for(const a in e)t.includes(a)||Object.defineProperty(n,a,{enumerable:!0,get:()=>e[a]});return n}function Ei(e){const t=li();let n=e();return ii(),we(n)&&(n=n.catch((e=>{throw si(t),e}))),[n,()=>si(t)]}function Pi(e,t,n){const a=arguments.length;return 2===a?ye(t)&&!_e(t)?Ds(t)?qs(e,null,[t]):qs(e,t):qs(e,null,t):(a>3?n=Array.prototype.slice.call(arguments,2):3===a&&Ds(n)&&(n=[n]),qs(e,t,n))}const Mi=Symbol(""),Oi=()=>{{const e=Ea(Mi);return e||En("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Ii(){}function Ui(e,t,n,a){const l=n[a];if(l&&Fi(l,e))return l;const s=t();return s.memo=e.slice(),n[a]=s}function Fi(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(Ue(n[e],t[e]))return!1;return Ms>0&&Ts&&Ts.push(e),!0}const Di="3.2.37",ji="undefined"!=typeof document?document:null,Li=ji&&ji.createElement("template"),Ri={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,a)=>{const l=t?ji.createElementNS("http://www.w3.org/2000/svg",e):ji.createElement(e,n?{is:n}:void 0);return"select"===e&&a&&null!=a.multiple&&l.setAttribute("multiple",a.multiple),l},createText:e=>ji.createTextNode(e),createComment:e=>ji.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>ji.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,a,l,s){const i=n?n.previousSibling:t.lastChild;if(l&&(l===s||l.nextSibling))for(;t.insertBefore(l.cloneNode(!0),n),l!==s&&(l=l.nextSibling););else{Li.innerHTML=a?`<svg>${e}</svg>`:e;const l=Li.content;if(a){const e=l.firstChild;for(;e.firstChild;)l.appendChild(e.firstChild);l.removeChild(e)}t.insertBefore(l,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},zi=/\s*!important$/;function Bi(e,t,n){if(_e(n))n.forEach((n=>Bi(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const a=function(e,t){const n=qi[t];if(n)return n;let a=Ee(t);if("filter"!==a&&a in e)return qi[t]=a;a=Oe(a);for(let n=0;n<Vi.length;n++){const l=Vi[n]+a;if(l in e)return qi[t]=l}return t}(e,t);zi.test(n)?e.setProperty(Me(a),n.replace(zi,""),"important"):e[a]=n}}const Vi=["Webkit","Moz","ms"],qi={},Hi="http://www.w3.org/1999/xlink",[Gi,Wi]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const n=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(n&&Number(n[1])<=53)}return[e,t]})();let Ki=0;const Ji=Promise.resolve(),Yi=()=>{Ki=0};function Zi(e,t,n,a){e.addEventListener(t,n,a)}const Xi=/(?:Once|Passive|Capture)$/,Qi=/^on[a-z]/;function eo(e,t){const n=Ja(e);class a extends ao{constructor(e){super(n,e,t)}}return a.def=n,a}const to=e=>eo(e,ar),no="undefined"!=typeof HTMLElement?HTMLElement:class{};class ao extends no{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Jn((()=>{this._connected||(nr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,a=!_e(t),l=t?a?Object.keys(t):t:[];let s;if(a)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=je(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of l.map(Ee))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=je(t)),this._setProp(Ee(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,a=!0){t!==this._props[e]&&(this._props[e]=t,a&&this._instance&&this._update(),n&&(!0===t?this.setAttribute(Me(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Me(e),t+""):t||this.removeAttribute(Me(e))))}_update(){nr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=qs(this._def,ce({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof ao){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function lo(e="$style"){{const t=li();if(!t)return ne;const n=t.type.__cssModules;if(!n)return ne;return n[e]||ne}}function so(e){const t=li();if(!t)return;const n=()=>io(t.subTree,e(t.proxy));Ma(n),dl((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),hl((()=>e.disconnect()))}))}function io(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{io(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)oo(e.el,t);else if(e.type===$s)e.children.forEach((e=>io(e,t)));else if(e.type===Ns){let{el:n,anchor:a}=e;for(;n&&(oo(n,t),n!==a);)n=n.nextSibling}}function oo(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const ro=(e,{slots:t})=>Pi(Ba,fo(e),t);ro.displayName="Transition";const co={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},uo=ro.props=ce({},Ba.props,co),po=(e,t=[])=>{_e(e)?e.forEach((e=>e(...t))):e&&e(...t)},_o=e=>!!e&&(_e(e)?e.some((e=>e.length>1)):e.length>1);function fo(e){const t={};for(const n in e)n in co||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:a,duration:l,enterFromClass:s=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:o=`${n}-enter-to`,appearFromClass:r=s,appearActiveClass:c=i,appearToClass:u=o,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:_=`${n}-leave-to`}=e,f=function(e){if(null==e)return null;if(ye(e))return[ho(e.enter),ho(e.leave)];{const t=ho(e);return[t,t]}}(l),h=f&&f[0],m=f&&f[1],{onBeforeEnter:g,onEnter:v,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=g,onAppear:k=v,onAppearCancelled:$=b}=t,S=(e,t,n)=>{go(e,t?u:o),go(e,t?c:i),n&&n()},C=(e,t)=>{e._isLeaving=!1,go(e,d),go(e,_),go(e,p),t&&t()},N=e=>(t,n)=>{const l=e?k:v,i=()=>S(t,e,n);po(l,[t,i]),vo((()=>{go(t,e?r:s),mo(t,e?u:o),_o(l)||yo(t,a,h,i)}))};return ce(t,{onBeforeEnter(e){po(g,[e]),mo(e,s),mo(e,i)},onBeforeAppear(e){po(x,[e]),mo(e,r),mo(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>C(e,t);mo(e,d),$o(),mo(e,p),vo((()=>{e._isLeaving&&(go(e,d),mo(e,_),_o(y)||yo(e,a,m,n))})),po(y,[e,n])},onEnterCancelled(e){S(e,!1),po(b,[e])},onAppearCancelled(e){S(e,!0),po($,[e])},onLeaveCancelled(e){C(e),po(w,[e])}})}function ho(e){return je(e)}function mo(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function go(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function vo(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let bo=0;function yo(e,t,n,a){const l=e._endId=++bo,s=()=>{l===e._endId&&a()};if(n)return setTimeout(s,n);const{type:i,timeout:o,propCount:r}=wo(e,t);if(!i)return a();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),o+1),e.addEventListener(c,p)}function wo(e,t){const n=window.getComputedStyle(e),a=e=>(n[e]||"").split(", "),l=a("transitionDelay"),s=a("transitionDuration"),i=xo(l,s),o=a("animationDelay"),r=a("animationDuration"),c=xo(o,r);let u=null,d=0,p=0;return"transition"===t?i>0&&(u="transition",d=i,p=s.length):"animation"===t?c>0&&(u="animation",d=c,p=r.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,p=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:p,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function xo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>ko(t)+ko(e[n]))))}function ko(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function $o(){return document.body.offsetHeight}const So=new WeakMap,Co=new WeakMap,No={name:"TransitionGroup",props:ce({},uo,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=li(),a=Ra();let l,s;return _l((()=>{if(!l.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const a=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&a.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&a.classList.add(e))),a.style.display="none";const l=1===t.nodeType?t:t.parentNode;l.appendChild(a);const{hasTransform:s}=wo(a);return l.removeChild(a),s}(l[0].el,n.vnode.el,t))return;l.forEach(Ao),l.forEach(To);const a=l.filter(Eo);$o(),a.forEach((e=>{const n=e.el,a=n.style;mo(n,t),a.transform=a.webkitTransform=a.transitionDuration="";const l=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",l),n._moveCb=null,go(n,t))};n.addEventListener("transitionend",l)}))})),()=>{const i=rn(e),o=fo(i);let r=i.tag||$s;l=s,s=t.default?Ka(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wa(t,qa(t,o,a,n))}if(l)for(let e=0;e<l.length;e++){const t=l[e];Wa(t,qa(t,o,a,n)),So.set(t,t.el.getBoundingClientRect())}return qs(r,null,s)}}};function Ao(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function To(e){Co.set(e,e.el.getBoundingClientRect())}function Eo(e){const t=So.get(e),n=Co.get(e),a=t.left-n.left,l=t.top-n.top;if(a||l){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${a}px,${l}px)`,t.transitionDuration="0s",e}}const Po=e=>{const t=e.props["onUpdate:modelValue"]||!1;return _e(t)?e=>Fe(t,e):t};function Mo(e){e.target.composing=!0}function Oo(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Io={created(e,{modifiers:{lazy:t,trim:n,number:a}},l){e._assign=Po(l);const s=a||l.props&&"number"===l.props.type;Zi(e,t?"change":"input",(t=>{if(t.target.composing)return;let a=e.value;n&&(a=a.trim()),s&&(a=je(a)),e._assign(a)})),n&&Zi(e,"change",(()=>{e.value=e.value.trim()})),t||(Zi(e,"compositionstart",Mo),Zi(e,"compositionend",Oo),Zi(e,"change",Oo))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:a,number:l}},s){if(e._assign=Po(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(a&&e.value.trim()===t)return;if((l||"number"===e.type)&&je(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Uo={deep:!0,created(e,t,n){e._assign=Po(n),Zi(e,"change",(()=>{const t=e._modelValue,n=Ro(e),a=e.checked,l=e._assign;if(_e(t)){const e=Q(t,n),s=-1!==e;if(a&&!s)l(t.concat(n));else if(!a&&s){const n=[...t];n.splice(e,1),l(n)}}else if(he(t)){const e=new Set(t);a?e.add(n):e.delete(n),l(e)}else l(zo(e,a))}))},mounted:Fo,beforeUpdate(e,t,n){e._assign=Po(n),Fo(e,t,n)}};function Fo(e,{value:t,oldValue:n},a){e._modelValue=t,_e(t)?e.checked=Q(t,a.props.value)>-1:he(t)?e.checked=t.has(a.props.value):t!==n&&(e.checked=X(t,zo(e,!0)))}const Do={created(e,{value:t},n){e.checked=X(t,n.props.value),e._assign=Po(n),Zi(e,"change",(()=>{e._assign(Ro(e))}))},beforeUpdate(e,{value:t,oldValue:n},a){e._assign=Po(a),t!==n&&(e.checked=X(t,a.props.value))}},jo={deep:!0,created(e,{value:t,modifiers:{number:n}},a){const l=he(t);Zi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?je(Ro(e)):Ro(e)));e._assign(e.multiple?l?new Set(t):t:t[0])})),e._assign=Po(a)},mounted(e,{value:t}){Lo(e,t)},beforeUpdate(e,t,n){e._assign=Po(n)},updated(e,{value:t}){Lo(e,t)}};function Lo(e,t){const n=e.multiple;if(!n||_e(t)||he(t)){for(let a=0,l=e.options.length;a<l;a++){const l=e.options[a],s=Ro(l);if(n)l.selected=_e(t)?Q(t,s)>-1:t.has(s);else if(X(Ro(l),t))return void(e.selectedIndex!==a&&(e.selectedIndex=a))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Ro(e){return"_value"in e?e._value:e.value}function zo(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const Bo={created(e,t,n){Vo(e,t,n,null,"created")},mounted(e,t,n){Vo(e,t,n,null,"mounted")},beforeUpdate(e,t,n,a){Vo(e,t,n,a,"beforeUpdate")},updated(e,t,n,a){Vo(e,t,n,a,"updated")}};function Vo(e,t,n,a,l){const s=function(e,t){switch(e){case"SELECT":return jo;case"TEXTAREA":return Io;default:switch(t){case"checkbox":return Uo;case"radio":return Do;default:return Io}}}(e.tagName,n.props&&n.props.type)[l];s&&s(e,t,n,a)}const qo=["ctrl","shift","alt","meta"],Ho={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>qo.some((n=>e[`${n}Key`]&&!t.includes(n)))},Go=(e,t)=>(n,...a)=>{for(let e=0;e<t.length;e++){const a=Ho[t[e]];if(a&&a(n,t))return}return e(n,...a)},Wo={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ko=(e,t)=>n=>{if(!("key"in n))return;const a=Me(n.key);return t.some((e=>e===a||Wo[e]===a))?e(n):void 0},Jo={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Yo(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:a}){!t!=!n&&(a?t?(a.beforeEnter(e),Yo(e,!0),a.enter(e)):a.leave(e,(()=>{Yo(e,!1)})):Yo(e,t))},beforeUnmount(e,{value:t}){Yo(e,t)}};function Yo(e,t){e.style.display=t?e._vod:"none"}const Zo=ce({patchProp:(e,t,n,a,l=!1,s,i,o,r)=>{"class"===t?function(e,t,n){const a=e._vtc;a&&(t=(t?[t,...a]:[...a]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,a,l):"style"===t?function(e,t,n){const a=e.style,l=ve(n);if(n&&!l){for(const e in n)Bi(a,e,n[e]);if(t&&!ve(t))for(const e in t)null==n[e]&&Bi(a,e,"")}else{const s=a.display;l?t!==n&&(a.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(a.display=s)}}(e,n,a):oe(t)?re(t)||function(e,t,n,a,l=null){const s=e._vei||(e._vei={}),i=s[t];if(a&&i)i.value=a;else{const[n,o]=function(e){let t;if(Xi.test(e)){let n;for(t={};n=e.match(Xi);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[Me(e.slice(2)),t]}(t);if(a){const i=s[t]=function(e,t){const n=e=>{const a=e.timeStamp||Gi();(Wi||a>=n.attached-1)&&In(function(e,t){if(_e(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Ki||(Ji.then(Yi),Ki=Gi()),n}(a,l);Zi(e,n,i,o)}else i&&(function(e,t,n,a){e.removeEventListener(t,n,a)}(e,n,i,o),s[t]=void 0)}}(e,t,0,a,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,a){return a?"innerHTML"===t||"textContent"===t||!!(t in e&&Qi.test(t)&&ge(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!Qi.test(t)||!ve(n))&&t in e))))}(e,t,a,l))?function(e,t,n,a,l,s,i){if("innerHTML"===t||"textContent"===t)return a&&i(a,l,s),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const a=null==n?"":n;return e.value===a&&"OPTION"!==e.tagName||(e.value=a),void(null==n&&e.removeAttribute(t))}let o=!1;if(""===n||null==n){const a=typeof e[t];"boolean"===a?n=B(n):null==n&&"string"===a?(n="",o=!0):"number"===a&&(n=0,o=!0)}try{e[t]=n}catch(e){}o&&e.removeAttribute(t)}(e,t,a,s,i,o,r):("true-value"===t?e._trueValue=a:"false-value"===t&&(e._falseValue=a),function(e,t,n,a,l){if(a&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(Hi,t.slice(6,t.length)):e.setAttributeNS(Hi,t,n);else{const a=z(t);null==n||a&&!B(n)?e.removeAttribute(t):e.setAttribute(t,a?"":n)}}(e,t,a,l))}},Ri);let Xo,Qo=!1;function er(){return Xo||(Xo=fs(Zo))}function tr(){return Xo=Qo?Xo:hs(Zo),Qo=!0,Xo}const nr=(...e)=>{er().render(...e)},ar=(...e)=>{tr().hydrate(...e)},lr=(...e)=>{const t=er().createApp(...e),{mount:n}=t;return t.mount=e=>{const a=ir(e);if(!a)return;const l=t._component;ge(l)||l.render||l.template||(l.template=a.innerHTML),a.innerHTML="";const s=n(a,!1,a instanceof SVGElement);return a instanceof Element&&(a.removeAttribute("v-cloak"),a.setAttribute("data-v-app","")),s},t},sr=(...e)=>{const t=tr().createApp(...e),{mount:n}=t;return t.mount=e=>{const t=ir(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function ir(e){return ve(e)?document.querySelector(e):e}const or=le;var rr=Object.freeze({__proto__:null,render:nr,hydrate:ar,createApp:lr,createSSRApp:sr,initDirectivesForSSR:or,defineCustomElement:eo,defineSSRCustomElement:to,VueElement:ao,useCssModule:lo,useCssVars:so,Transition:ro,TransitionGroup:No,vModelText:Io,vModelCheckbox:Uo,vModelRadio:Do,vModelSelect:jo,vModelDynamic:Bo,withModifiers:Go,withKeys:Ko,vShow:Jo,reactive:Xt,ref:hn,readonly:en,unref:yn,proxyRefs:xn,isRef:fn,toRef:Nn,toRefs:Sn,isProxy:on,isReactive:an,isReadonly:ln,isShallow:sn,customRef:$n,triggerRef:bn,shallowRef:mn,shallowReactive:Qt,shallowReadonly:tn,markRaw:cn,toRaw:rn,effect:at,stop:lt,ReactiveEffect:tt,effectScope:Be,EffectScope:ze,getCurrentScope:qe,onScopeDispose:He,computed:yi,watch:Ua,watchEffect:Pa,watchPostEffect:Ma,watchSyncEffect:Oa,onBeforeMount:ul,onMounted:dl,onBeforeUpdate:pl,onUpdated:_l,onBeforeUnmount:fl,onUnmounted:hl,onActivated:nl,onDeactivated:al,onRenderTracked:vl,onRenderTriggered:gl,onErrorCaptured:bl,onServerPrefetch:ml,provide:Ta,inject:Ea,nextTick:Jn,defineComponent:Ja,defineAsyncComponent:Za,useAttrs:Ci,useSlots:Si,defineProps:wi,defineEmits:xi,defineExpose:ki,withDefaults:$i,mergeDefaults:Ai,createPropsRestProxy:Ti,withAsyncContext:Ei,getCurrentInstance:li,h:Pi,createVNode:qs,cloneVNode:Gs,mergeProps:Qs,isVNode:Ds,Fragment:$s,Text:Ss,Comment:Cs,Static:Ns,Teleport:ks,Suspense:ka,KeepAlive:el,BaseTransition:Ba,withDirectives:yl,useSSRContext:Oi,ssrContextKey:Mi,createRenderer:fs,createHydrationRenderer:hs,queuePostFlushCb:Qn,warn:En,handleError:Un,callWithErrorHandling:On,callWithAsyncErrorHandling:In,resolveComponent:xl,resolveDirective:Sl,resolveDynamicComponent:$l,registerRuntimeCompiler:pi,isRuntimeOnly:_i,useTransitionState:Ra,resolveTransitionHooks:qa,setTransitionHooks:Wa,getTransitionRawChildren:Ka,initCustomFormatter:Ii,get devtools(){return la},setDevtoolsHook:ia,withCtx:ma,pushScopeId:_a,popScopeId:fa,withScopeId:ha,renderList:Al,toHandlers:Ml,renderSlot:El,createSlots:Tl,withMemo:Ui,isMemoSame:Fi,openBlock:Es,createBlock:Fs,setBlockTracking:Os,createTextVNode:Ws,createCommentVNode:Js,createStaticVNode:Ks,createElementVNode:Vs,createElementBlock:Us,guardReactiveProps:Hs,toDisplayString:ee,camelize:Ee,capitalize:Oe,toHandlerKey:Ie,normalizeProps:K,normalizeClass:W,normalizeStyle:V,transformVNodeArgs:Ls,version:Di,ssrUtils:null,resolveFilter:null,compatUtils:null});function cr(e){throw e}function ur(e){}function dr(e,t,n,a){const l=new SyntaxError(String(e));return l.code=e,l.loc=t,l}const pr=Symbol(""),_r=Symbol(""),fr=Symbol(""),hr=Symbol(""),mr=Symbol(""),gr=Symbol(""),vr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Tr=Symbol(""),Er=Symbol(""),Pr=Symbol(""),Mr=Symbol(""),Or=Symbol(""),Ir=Symbol(""),Ur=Symbol(""),Fr=Symbol(""),Dr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Rr=Symbol(""),zr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),qr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr={[pr]:"Fragment",[_r]:"Teleport",[fr]:"Suspense",[hr]:"KeepAlive",[mr]:"BaseTransition",[gr]:"openBlock",[vr]:"createBlock",[br]:"createElementBlock",[yr]:"createVNode",[wr]:"createElementVNode",[xr]:"createCommentVNode",[kr]:"createTextVNode",[$r]:"createStaticVNode",[Sr]:"resolveComponent",[Cr]:"resolveDynamicComponent",[Nr]:"resolveDirective",[Ar]:"resolveFilter",[Tr]:"withDirectives",[Er]:"renderList",[Pr]:"renderSlot",[Mr]:"createSlots",[Or]:"toDisplayString",[Ir]:"mergeProps",[Ur]:"normalizeClass",[Fr]:"normalizeStyle",[Dr]:"normalizeProps",[jr]:"guardReactiveProps",[Lr]:"toHandlers",[Rr]:"camelize",[zr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[qr]:"pushScopeId",[Hr]:"popScopeId",[Gr]:"withCtx",[Wr]:"unref",[Kr]:"isRef",[Jr]:"withMemo",[Yr]:"isMemoSame"},Xr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function Qr(e,t,n,a,l,s,i,o=!1,r=!1,c=!1,u=Xr){return e&&(o?(e.helper(gr),e.helper(Ac(e.inSSR,c))):e.helper(Nc(e.inSSR,c)),i&&e.helper(Tr)),{type:13,tag:t,props:n,children:a,patchFlag:l,dynamicProps:s,directives:i,isBlock:o,disableTracking:r,isComponent:c,loc:u}}function ec(e,t=Xr){return{type:17,loc:t,elements:e}}function tc(e,t=Xr){return{type:15,loc:t,properties:e}}function nc(e,t){return{type:16,loc:Xr,key:ve(e)?ac(e,!0):e,value:t}}function ac(e,t=!1,n=Xr,a=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:a}}function lc(e,t=Xr){return{type:8,loc:t,children:e}}function sc(e,t=[],n=Xr){return{type:14,loc:n,callee:e,arguments:t}}function ic(e,t,n=!1,a=!1,l=Xr){return{type:18,params:e,returns:t,newline:n,isSlot:a,loc:l}}function oc(e,t,n,a=!0){return{type:19,test:e,consequent:t,alternate:n,newline:a,loc:Xr}}const rc=e=>4===e.type&&e.isStatic,cc=(e,t)=>e===t||e===Me(t);function uc(e){return cc(e,"Teleport")?_r:cc(e,"Suspense")?fr:cc(e,"KeepAlive")?hr:cc(e,"BaseTransition")?mr:void 0}const dc=/^\d|[^\$\w]/,pc=e=>!dc.test(e),_c=/[A-Za-z_$\xA0-\uFFFF]/,fc=/[\.\?\w$\xA0-\uFFFF]/,hc=/\s+[.[]\s*|\s*[.[]\s+/g,mc=e=>{e=e.trim().replace(hc,(e=>e.trim()));let t=0,n=[],a=0,l=0,s=null;for(let i=0;i<e.length;i++){const o=e.charAt(i);switch(t){case 0:if("["===o)n.push(t),t=1,a++;else if("("===o)n.push(t),t=2,l++;else if(!(0===i?_c:fc).test(o))return!1;break;case 1:"'"===o||'"'===o||"`"===o?(n.push(t),t=3,s=o):"["===o?a++:"]"===o&&(--a||(t=n.pop()));break;case 2:if("'"===o||'"'===o||"`"===o)n.push(t),t=3,s=o;else if("("===o)l++;else if(")"===o){if(i===e.length-1)return!1;--l||(t=n.pop())}break;case 3:o===s&&(t=n.pop(),s=null)}}return!a&&!l};function gc(e,t,n){const a={source:e.source.slice(t,t+n),start:vc(e.start,e.source,t),end:e.end};return null!=n&&(a.end=vc(e.start,e.source,t+n)),a}function vc(e,t,n=t.length){return bc(ce({},e),t,n)}function bc(e,t,n=t.length){let a=0,l=-1;for(let e=0;e<n;e++)10===t.charCodeAt(e)&&(a++,l=e);return e.offset+=n,e.line+=a,e.column=-1===l?e.column+n:n-l,e}function yc(e,t,n=!1){for(let a=0;a<e.props.length;a++){const l=e.props[a];if(7===l.type&&(n||l.exp)&&(ve(t)?l.name===t:t.test(l.name)))return l}}function wc(e,t,n=!1,a=!1){for(let l=0;l<e.props.length;l++){const s=e.props[l];if(6===s.type){if(n)continue;if(s.name===t&&(s.value||a))return s}else if("bind"===s.name&&(s.exp||a)&&xc(s.arg,t))return s}}function xc(e,t){return!(!e||!rc(e)||e.content!==t)}function kc(e){return 5===e.type||2===e.type}function $c(e){return 7===e.type&&"slot"===e.name}function Sc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Nc(e,t){return e||t?yr:wr}function Ac(e,t){return e||t?vr:br}const Tc=new Set([Dr,jr]);function Ec(e,t=[]){if(e&&!ve(e)&&14===e.type){const n=e.callee;if(!ve(n)&&Tc.has(n))return Ec(e.arguments[0],t.concat(e))}return[e,t]}function Pc(e,t,n){let a,l,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!ve(s)&&14===s.type){const e=Ec(s);s=e[0],i=e[1],l=i[i.length-1]}if(null==s||ve(s))a=tc([t]);else if(14===s.type){const e=s.arguments[0];ve(e)||15!==e.type?s.callee===Lr?a=sc(n.helper(Ir),[tc([t]),s]):s.arguments.unshift(tc([t])):e.properties.unshift(t),!a&&(a=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const n=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===n))}e||s.properties.unshift(t),a=s}else a=sc(n.helper(Ir),[tc([t]),s]),l&&l.callee===jr&&(l=i[i.length-2]);13===e.type?l?l.arguments[0]=a:e.props=a:l?l.arguments[0]=a:e.arguments[2]=a}function Mc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}function Oc(e,{helper:t,removeHelper:n,inSSR:a}){e.isBlock||(e.isBlock=!0,n(Nc(a,e.isComponent)),t(gr),t(Ac(a,e.isComponent)))}const Ic=/&(gt|lt|amp|apos|quot);/g,Uc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Fc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:se,isPreTag:se,isCustomElement:se,decodeEntities:e=>e.replace(Ic,((e,t)=>Uc[t])),onError:cr,onWarn:ur,comments:!1};function Dc(e,t,n){const a=Xc(n),l=a?a.ns:0,s=[];for(;!au(e,t,n);){const i=e.source;let o;if(0===t||1===t)if(!e.inVPre&&Qc(i,e.options.delimiters[0]))o=Wc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])o=Qc(i,"\x3c!--")?Rc(e):Qc(i,"<!DOCTYPE")?zc(e):Qc(i,"<![CDATA[")&&0!==l?Lc(e,n):zc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){eu(e,3);continue}if(/[a-z]/i.test(i[2])){qc(e,1,a);continue}o=zc(e)}else/[a-z]/i.test(i[1])?o=Bc(e,n):"?"===i[1]&&(o=zc(e));if(o||(o=Kc(e,t)),_e(o))for(let e=0;e<o.length;e++)jc(s,o[e]);else jc(s,o)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let n=0;n<s.length;n++){const a=s[n];if(e.inPre||2!==a.type)3!==a.type||e.options.comments||(i=!0,s[n]=null);else if(/[^\t\r\n\f ]/.test(a.content))t&&(a.content=a.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[n-1],l=s[n+1];!e||!l||t&&(3===e.type||3===l.type||1===e.type&&1===l.type&&/[\r\n]/.test(a.content))?(i=!0,s[n]=null):a.content=" "}}if(e.inPre&&a&&e.options.isPreTag(a.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function jc(e,t){if(2===t.type){const n=Xc(e);if(n&&2===n.type&&n.loc.end.offset===t.loc.start.offset)return n.content+=t.content,n.loc.end=t.loc.end,void(n.loc.source+=t.loc.source)}e.push(t)}function Lc(e,t){eu(e,9);const n=Dc(e,3,t);return 0===e.source.length||eu(e,3),n}function Rc(e){const t=Yc(e);let n;const a=/--(\!)?>/.exec(e.source);if(a){n=e.source.slice(4,a.index);const t=e.source.slice(0,a.index);let l=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",l));)eu(e,s-l+1),l=s+1;eu(e,a.index+a[0].length-l+1)}else n=e.source.slice(4),eu(e,e.source.length);return{type:3,content:n,loc:Zc(e,t)}}function zc(e){const t=Yc(e),n="?"===e.source[1]?1:2;let a;const l=e.source.indexOf(">");return-1===l?(a=e.source.slice(n),eu(e,e.source.length)):(a=e.source.slice(n,l),eu(e,l+1)),{type:3,content:a,loc:Zc(e,t)}}function Bc(e,t){const n=e.inPre,a=e.inVPre,l=Xc(t),s=qc(e,0,l),i=e.inPre&&!n,o=e.inVPre&&!a;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),o&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,l),c=Dc(e,r,t);if(t.pop(),s.children=c,lu(e.source,s.tag))qc(e,1,l);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&Qc(e.loc.source,"\x3c!--")}return s.loc=Zc(e,s.loc.start),i&&(e.inPre=!1),o&&(e.inVPre=!1),s}const Vc=L("if,else,else-if,for,slot");function qc(e,t,n){const a=Yc(e),l=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=l[1],i=e.options.getNamespace(s,n);eu(e,l[0].length),tu(e);const o=Yc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Hc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ce(e,o),e.source=r,c=Hc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=Qc(e.source,"/>"),eu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,n){const a=n.options;if(a.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||uc(e)||a.isBuiltInComponent&&a.isBuiltInComponent(e)||a.isNativeTag&&!a.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const n=t[e];if(6===n.type){if("is"===n.name&&n.value&&n.value.content.startsWith("vue:"))return!0}else{if("is"===n.name)return!0;"bind"===n.name&&xc(n.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Zc(e,a),codegenNode:void 0}}function Hc(e,t){const n=[],a=new Set;for(;e.source.length>0&&!Qc(e.source,">")&&!Qc(e.source,"/>");){if(Qc(e.source,"/")){eu(e,1),tu(e);continue}const l=Gc(e,a);6===l.type&&l.value&&"class"===l.name&&(l.value.content=l.value.content.replace(/\s+/g," ").trim()),0===t&&n.push(l),/^[^\t\r\n\f />]/.test(e.source),tu(e)}return n}function Gc(e,t){const n=Yc(e),a=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(a),t.add(a);{const e=/["'<]/g;for(;e.exec(a););}let l;eu(e,a.length),/^[\t\r\n\f ]*=/.test(e.source)&&(tu(e),eu(e,1),tu(e),l=function(e){const t=Yc(e);let n;const a=e.source[0],l='"'===a||"'"===a;if(l){eu(e,1);const t=e.source.indexOf(a);-1===t?n=Jc(e,e.source.length,4):(n=Jc(e,t,4),eu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const a=/["'<=`]/g;for(;a.exec(t[0]););n=Jc(e,t[0].length,4)}return{content:n,isQuoted:l,loc:Zc(e,t)}}(e));const s=Zc(e,n);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(a)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(a);let i,o=Qc(a,"."),r=t[1]||(o||Qc(a,":")?"bind":Qc(a,"@")?"on":"slot");if(t[2]){const l="slot"===r,s=a.lastIndexOf(t[2]),o=Zc(e,nu(e,n,s),nu(e,n,s+t[2].length+(l&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):l&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:o}}if(l&&l.isQuoted){const e=l.loc;e.start.offset++,e.start.column++,e.end=vc(e.start,l.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return o&&c.push("prop"),{type:7,name:r,exp:l&&{type:4,content:l.content,isStatic:!1,constType:0,loc:l.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&Qc(a,"v-"),{type:6,name:a,value:l&&{type:2,content:l.content,loc:l.loc},loc:s}}function Wc(e,t){const[n,a]=e.options.delimiters,l=e.source.indexOf(a,n.length);if(-1===l)return;const s=Yc(e);eu(e,n.length);const i=Yc(e),o=Yc(e),r=l-n.length,c=e.source.slice(0,r),u=Jc(e,r,t),d=u.trim(),p=u.indexOf(d);return p>0&&bc(i,c,p),bc(o,c,r-(u.length-d.length-p)),eu(e,a.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Zc(e,i,o)},loc:Zc(e,s)}}function Kc(e,t){const n=3===t?["]]>"]:["<",e.options.delimiters[0]];let a=e.source.length;for(let t=0;t<n.length;t++){const l=e.source.indexOf(n[t],1);-1!==l&&a>l&&(a=l)}const l=Yc(e);return{type:2,content:Jc(e,a,t),loc:Zc(e,l)}}function Jc(e,t,n){const a=e.source.slice(0,t);return eu(e,t),2!==n&&3!==n&&a.includes("&")?e.options.decodeEntities(a,4===n):a}function Yc(e){const{column:t,line:n,offset:a}=e;return{column:t,line:n,offset:a}}function Zc(e,t,n){return{start:t,end:n=n||Yc(e),source:e.originalSource.slice(t.offset,n.offset)}}function Xc(e){return e[e.length-1]}function Qc(e,t){return e.startsWith(t)}function eu(e,t){const{source:n}=e;bc(e,n,t),e.source=n.slice(t)}function tu(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&eu(e,t[0].length)}function nu(e,t,n){return vc(t,e.originalSource.slice(t.offset,n),n)}function au(e,t,n){const a=e.source;switch(t){case 0:if(Qc(a,"</"))for(let e=n.length-1;e>=0;--e)if(lu(a,n[e].tag))return!0;break;case 1:case 2:{const e=Xc(n);if(e&&lu(a,e.tag))return!0;break}case 3:if(Qc(a,"]]>"))return!0}return!a}function lu(e,t){return Qc(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function su(e,t){ou(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!Cc(t)}function ou(e,t,n=!1){const{children:a}=e,l=a.length;let s=0;for(let e=0;e<a.length;e++){const l=a[e];if(1===l.type&&0===l.tagType){const e=n?0:ru(l,t);if(e>0){if(e>=2){l.codegenNode.patchFlag="-1",l.codegenNode=t.hoist(l.codegenNode),s++;continue}}else{const e=l.codegenNode;if(13===e.type){const n=_u(e);if((!n||512===n||1===n)&&du(l,t)>=2){const n=pu(l);n&&(e.props=t.hoist(n))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===l.type&&ru(l.content,t)>=2&&(l.codegenNode=t.hoist(l.codegenNode),s++);if(1===l.type){const e=1===l.tagType;e&&t.scopes.vSlot++,ou(l,t),e&&t.scopes.vSlot--}else if(11===l.type)ou(l,t,1===l.children.length);else if(9===l.type)for(let e=0;e<l.branches.length;e++)ou(l.branches[e],t,1===l.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(a,t,e),s&&s===l&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&_e(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(ec(e.codegenNode.children)))}function ru(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const a=n.get(e);if(void 0!==a)return a;const l=e.codegenNode;if(13!==l.type)return 0;if(l.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(_u(l))return n.set(e,0),0;{let a=3;const s=du(e,t);if(0===s)return n.set(e,0),0;s<a&&(a=s);for(let l=0;l<e.children.length;l++){const s=ru(e.children[l],t);if(0===s)return n.set(e,0),0;s<a&&(a=s)}if(a>1)for(let l=0;l<e.props.length;l++){const s=e.props[l];if(7===s.type&&"bind"===s.name&&s.exp){const l=ru(s.exp,t);if(0===l)return n.set(e,0),0;l<a&&(a=l)}}if(l.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return n.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ac(t.inSSR,l.isComponent)),l.isBlock=!1,t.helper(Nc(t.inSSR,l.isComponent))}return n.set(e,a),a}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return ru(e.content,t);case 4:return e.constType;case 8:let s=3;for(let n=0;n<e.children.length;n++){const a=e.children[n];if(ve(a)||be(a))continue;const l=ru(a,t);if(0===l)return 0;l<s&&(s=l)}return s}}const cu=new Set([Ur,Fr,Dr,jr]);function uu(e,t){if(14===e.type&&!ve(e.callee)&&cu.has(e.callee)){const n=e.arguments[0];if(4===n.type)return ru(n,t);if(14===n.type)return uu(n,t)}return 0}function du(e,t){let n=3;const a=pu(e);if(a&&15===a.type){const{properties:e}=a;for(let a=0;a<e.length;a++){const{key:l,value:s}=e[a],i=ru(l,t);if(0===i)return i;let o;if(i<n&&(n=i),o=4===s.type?ru(s,t):14===s.type?uu(s,t):0,0===o)return o;o<n&&(n=o)}}return n}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function _u(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function fu(e,t){const n=function(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:a=!1,cacheHandlers:l=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:o=null,isBuiltInComponent:r=le,isCustomElement:c=le,expressionPlugins:u=[],scopeId:d=null,slotted:p=!0,ssr:_=!1,inSSR:f=!1,ssrCssVars:h="",bindingMetadata:m=ne,inline:g=!1,isTS:v=!1,onError:b=cr,onWarn:y=ur,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Oe(Ee(x[1])),prefixIdentifiers:n,hoistStatic:a,cacheHandlers:l,nodeTransforms:s,directiveTransforms:i,transformHoist:o,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:p,ssr:_,inSSR:f,ssrCssVars:h,bindingMetadata:m,inline:g,isTS:v,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const n=t-1;n?k.helpers.set(e,n):k.helpers.delete(e)}},helperString:e=>`_${Zr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){ve(e)&&(e=ac(e)),k.hoists.push(e);const t=ac(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:Xr}}(k.cached++,e,t)};return k}(e,t);hu(e,n),t.hoistStatic&&su(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:a}=e;if(1===a.length){const n=a[0];if(iu(e,n)&&n.codegenNode){const a=n.codegenNode;13===a.type&&Oc(a,t),e.codegenNode=a}else e.codegenNode=n}else if(a.length>1){let a=64;e.codegenNode=Qr(t,n(pr),void 0,e.children,a+"",void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=[...n.helpers.keys()],e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached}function hu(e,t){t.currentNode=e;const{nodeTransforms:n}=t,a=[];for(let l=0;l<n.length;l++){const s=n[l](e,t);if(s&&(_e(s)?a.push(...s):a.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(xr);break;case 5:t.ssr||t.helper(Or);break;case 9:for(let n=0;n<e.branches.length;n++)hu(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const a=()=>{n--};for(;n<e.children.length;n++){const l=e.children[n];ve(l)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=a,hu(l,t))}}(e,t)}t.currentNode=e;let l=a.length;for(;l--;)a[l]()}function mu(e,t){const n=ve(e)?t=>t===e:t=>e.test(t);return(e,a)=>{if(1===e.type){const{props:l}=e;if(3===e.tagType&&l.some($c))return;const s=[];for(let i=0;i<l.length;i++){const o=l[i];if(7===o.type&&n(o.name)){l.splice(i,1),i--;const n=t(e,o,a);n&&s.push(n)}}return s}}}const gu=e=>`${Zr[e]}: _${Zr[e]}`;function vu(e,t,{helper:n,push:a,newline:l,isTS:s}){const i=n("component"===t?Sr:Nr);for(let n=0;n<e.length;n++){let o=e[n];const r=o.endsWith("__self");r&&(o=o.slice(0,-6)),a(`const ${Mc(o,t)} = ${i}(${JSON.stringify(o)}${r?", true":""})${s?"!":""}`),n<e.length-1&&l()}}function bu(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),yu(e,t,n),n&&t.deindent(),t.push("]")}function yu(e,t,n=!1,a=!0){const{push:l,newline:s}=t;for(let i=0;i<e.length;i++){const o=e[i];ve(o)?l(o):_e(o)?bu(o,t):wu(o,t),i<e.length-1&&(n?(a&&l(","),s()):a&&l(", "))}}function wu(e,t){if(ve(e))t.push(e);else if(be(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:wu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:xu(e,t);break;case 5:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(Or)}(`),wu(e.content,t),n(")")}(e,t);break;case 8:ku(e,t);break;case 3:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(xr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:a,pure:l}=t,{tag:s,props:i,children:o,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:_}=e;u&&n(a(Tr)+"("),d&&n(`(${a(gr)}(${p?"true":""}), `),l&&n("/*#__PURE__*/");n(a(d?Ac(t.inSSR,_):Nc(t.inSSR,_))+"(",e),yu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,o,r,c]),t),n(")"),d&&n(")"),u&&(n(", "),wu(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:a,pure:l}=t,s=ve(e.callee)?e.callee:a(e.callee);l&&n("/*#__PURE__*/"),n(s+"(",e),yu(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:a,deindent:l,newline:s}=t,{properties:i}=e;if(!i.length)return void n("{}",e);const o=i.length>1||!1;n(o?"{":"{ "),o&&a();for(let e=0;e<i.length;e++){const{key:a,value:l}=i[e];$u(a,t),n(": "),wu(l,t),e<i.length-1&&(n(","),s())}o&&l(),n(o?"}":" }")}(e,t);break;case 17:!function(e,t){bu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:a,deindent:l}=t,{params:s,returns:i,body:o,newline:r,isSlot:c}=e;c&&n(`_${Zr[Gr]}(`),n("(",e),_e(s)?yu(s,t):s&&wu(s,t),n(") => "),(r||o)&&(n("{"),a()),i?(r&&n("return "),_e(i)?bu(i,t):wu(i,t)):o&&wu(o,t),(r||o)&&(l(),n("}")),c&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:a,alternate:l,newline:s}=e,{push:i,indent:o,deindent:r,newline:c}=t;if(4===n.type){const e=!pc(n.content);e&&i("("),xu(n,t),e&&i(")")}else i("("),wu(n,t),i(")");s&&o(),t.indentLevel++,s||i(" "),i("? "),wu(a,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===l.type;u||t.indentLevel++,wu(l,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:a,indent:l,deindent:s,newline:i}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(l(),n(`${a(Vr)}(-1),`),i()),n(`_cache[${e.index}] = `),wu(e.value,t),e.isVNode&&(n(","),i(),n(`${a(Vr)}(1),`),i(),n(`_cache[${e.index}]`),s()),n(")")}(e,t);break;case 21:yu(e.body,t,!0,!1)}}function xu(e,t){const{content:n,isStatic:a}=e;t.push(a?JSON.stringify(n):n,e)}function ku(e,t){for(let n=0;n<e.children.length;n++){const a=e.children[n];ve(a)?t.push(a):wu(a,t)}}function $u(e,t){const{push:n}=t;8===e.type?(n("["),ku(e,t),n("]")):e.isStatic?n(pc(e.content)?e.content:JSON.stringify(e.content),e):n(`[${e.content}]`,e)}const Su=mu(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,a){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=ac("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const l=Cu(e,t),s={type:9,loc:e.loc,branches:[l]};if(n.replaceNode(s),a)return a(s,l,!0)}else{const l=n.parent.children;let s=l.indexOf(e);for(;s-- >=-1;){const i=l[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){n.removeNode();const l=Cu(e,t);i.branches.push(l);const s=a&&a(i,l,!1);hu(l,n),s&&s(),n.currentNode=null}break}n.removeNode(i)}}}(e,t,n,((e,t,a)=>{const l=n.parent.children;let s=l.indexOf(e),i=0;for(;s-- >=0;){const e=l[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(a)e.codegenNode=Nu(t,i,n);else{const a=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);a.alternate=Nu(t,i+e.branches.length-1,n)}}}))));function Cu(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!yc(e,"for")?e.children:[e],userKey:wc(e,"key"),isTemplateIf:n}}function Nu(e,t,n){return e.condition?oc(e.condition,Au(e,t,n),sc(n.helper(xr),['""',"true"])):Au(e,t,n)}function Au(e,t,n){const{helper:a}=n,l=nc("key",ac(`${t}`,!1,Xr,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Pc(e,l,n),e}{let t=64;return Qr(n,a(pr),tc([l]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(o=e).type&&o.callee===Jr?o.arguments[1].returns:o;return 13===t.type&&Oc(t,n),Pc(t,l,n),e}var o}const Tu=mu("for",((e,t,n)=>{const{helper:a,removeHelper:l}=n;return function(e,t,n,a){if(!t.exp)return;const l=Ou(t.exp);if(!l)return;const{scopes:s}=n,{source:i,value:o,key:r,index:c}=l,u={type:11,loc:t.loc,source:i,valueAlias:o,keyAlias:r,objectIndexAlias:c,parseResult:l,children:Sc(e)?e.children:[e]};n.replaceNode(u),s.vFor++;const d=a&&a(u);return()=>{s.vFor--,d&&d()}}(e,t,n,(t=>{const s=sc(a(Er),[t.source]),i=Sc(e),o=yc(e,"memo"),r=wc(e,"key"),c=r&&(6===r.type?ac(r.value.content,!0):r.exp),u=r?nc("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:r?128:256;return t.codegenNode=Qr(n,a(pr),void 0,s,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:p}=t,_=1!==p.length||1!==p[0].type,f=Cc(e)?e:i&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,i&&u&&Pc(r,u,n)):_?r=Qr(n,a(pr),u?tc([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=p[0].codegenNode,i&&u&&Pc(r,u,n),r.isBlock!==!d&&(r.isBlock?(l(gr),l(Ac(n.inSSR,r.isComponent))):l(Nc(n.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(a(gr),a(Ac(n.inSSR,r.isComponent))):a(Nc(n.inSSR,r.isComponent))),o){const e=ic(Uu(t.parseResult,[ac("_cached")]));e.body={type:21,body:[lc(["const _memo = (",o.exp,")"]),lc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${n.helperString(Yr)}(_cached, _memo)) return _cached`]),lc(["const _item = ",r]),ac("_item.memo = _memo"),ac("return _item")],loc:Xr},s.arguments.push(e,ac("_cache"),ac(String(n.cached++)))}else s.arguments.push(ic(Uu(t.parseResult),r,!0))}}))})),Eu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Pu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Mu=/^\(|\)$/g;function Ou(e,t){const n=e.loc,a=e.content,l=a.match(Eu);if(!l)return;const[,s,i]=l,o={source:Iu(n,i.trim(),a.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Mu,"").trim();const c=s.indexOf(r),u=r.match(Pu);if(u){r=r.replace(Pu,"").trim();const e=u[1].trim();let t;if(e&&(t=a.indexOf(e,c+r.length),o.key=Iu(n,e,t)),u[2]){const l=u[2].trim();l&&(o.index=Iu(n,l,a.indexOf(l,o.key?t+e.length:c+r.length)))}}return r&&(o.value=Iu(n,r,c)),o}function Iu(e,t,n){return ac(t,!1,gc(e,n,t.length))}function Uu({value:e,key:t,index:n},a=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||ac("_".repeat(t+1),!1)))}([e,t,n,...a])}const Fu=ac("undefined",!1),Du=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(yc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},ju=(e,t,n)=>ic(e,t,!1,!0,t.length?t[0].loc:n);function Lu(e,t,n=ju){t.helper(Gr);const{children:a,loc:l}=e,s=[],i=[];let o=t.scopes.vSlot>0||t.scopes.vFor>0;const r=yc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!rc(e)&&(o=!0),s.push(nc(e||ac("default",!0),n(t,a,l)))}let c=!1,u=!1;const d=[],p=new Set;for(let e=0;e<a.length;e++){const l=a[e];let _;if(!Sc(l)||!(_=yc(l,"slot",!0))){3!==l.type&&d.push(l);continue}if(r)break;c=!0;const{children:f,loc:h}=l,{arg:m=ac("default",!0),exp:g}=_;let v;rc(m)?v=m?m.content:"default":o=!0;const b=n(g,f,h);let y,w,x;if(y=yc(l,"if"))o=!0,i.push(oc(y.exp,Ru(m,b),Fu));else if(w=yc(l,/^else(-if)?$/,!0)){let t,n=e;for(;n--&&(t=a[n],3===t.type););if(t&&Sc(t)&&yc(t,"if")){a.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?oc(w.exp,Ru(m,b),Fu):Ru(m,b)}}else if(x=yc(l,"for")){o=!0;const e=x.parseResult||Ou(x.exp);e&&i.push(sc(t.helper(Er),[e.source,ic(Uu(e),Ru(m,b),!0)]))}else{if(v){if(p.has(v))continue;p.add(v),"default"===v&&(u=!0)}s.push(nc(m,b))}}if(!r){const e=(e,t)=>nc("default",n(e,t,l));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,a))}const _=o?2:zu(e.children)?3:1;let f=tc(s.concat(nc("_",ac(_+"",!1))),l);return i.length&&(f=sc(t.helper(Mr),[f,ec(i)])),{slots:f,hasDynamicSlots:o}}function Ru(e,t){return tc([nc("name",e),nc("fn",t)])}function zu(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||zu(n.children))return!0;break;case 9:if(zu(n.branches))return!0;break;case 10:case 11:if(zu(n.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,qu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:a}=e,l=1===e.tagType;let s=l?function(e,t,n=!1){let{tag:a}=e;const l=Ku(a),s=wc(e,"is");if(s)if(l){const e=6===s.type?s.value&&ac(s.value.content,!0):s.exp;if(e)return sc(t.helper(Cr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(a=s.value.content.slice(4));const i=!l&&yc(e,"is");if(i&&i.exp)return sc(t.helper(Cr),[i.exp]);const o=uc(a)||t.isBuiltInComponent(a);return o?(n||t.helper(o),o):(t.helper(Sr),t.components.add(a),Mc(a,"component"))}(e,t):`"${n}"`;const i=ye(s)&&s.callee===Cr;let o,r,c,u,d,p,_=0,f=i||s===_r||s===fr||!l&&("svg"===n||"foreignObject"===n);if(a.length>0){const n=Hu(e,t,void 0,l,i);o=n.props,_=n.patchFlag,d=n.dynamicPropNames;const a=n.directives;p=a&&a.length?ec(a.map((e=>function(e,t){const n=[],a=Vu.get(e);a?n.push(t.helperString(a)):(t.helper(Nr),t.directives.add(e.name),n.push(Mc(e.name,"directive")));const{loc:l}=e;if(e.exp&&n.push(e.exp),e.arg&&(e.exp||n.push("void 0"),n.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=ac("true",!1,l);n.push(tc(e.modifiers.map((e=>nc(e,t))),l))}return ec(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===hr&&(f=!0,_|=1024),l&&s!==_r&&s!==hr){const{slots:n,hasDynamicSlots:a}=Lu(e,t);r=n,a&&(_|=1024)}else if(1===e.children.length&&s!==_r){const n=e.children[0],a=n.type,l=5===a||8===a;l&&0===ru(n,t)&&(_|=1),r=l||2===a?n:e.children}else r=e.children;0!==_&&(c=String(_),d&&d.length&&(u=function(e){let t="[";for(let n=0,a=e.length;n<a;n++)t+=JSON.stringify(e[n]),n<a-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=Qr(t,s,o,r,c,u,p,!!f,!1,l,e.loc)};function Hu(e,t,n=e.props,a,l,s=!1){const{tag:i,loc:o,children:r}=e;let c=[];const u=[],d=[],p=r.length>0;let _=!1,f=0,h=!1,m=!1,g=!1,v=!1,b=!1,y=!1;const w=[],x=({key:e,value:n})=>{if(rc(e)){const s=e.content,i=oe(s);if(!i||a&&!l||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(v=!0),i&&Ce(s)&&(y=!0),20===n.type||(4===n.type||8===n.type)&&ru(n,t)>0)return;"ref"===s?h=!0:"class"===s?m=!0:"style"===s?g=!0:"key"===s||w.includes(s)||w.push(s),!a||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let a=0;a<n.length;a++){const l=n[a];if(6===l.type){const{loc:e,name:n,value:a}=l;let s=!0;if("ref"===n&&(h=!0,t.scopes.vFor>0&&c.push(nc(ac("ref_for",!0),ac("true")))),"is"===n&&(Ku(i)||a&&a.content.startsWith("vue:")))continue;c.push(nc(ac(n,!0,gc(e,0,n.length)),ac(a?a.content:"",s,a?a.loc:e)))}else{const{name:n,arg:a,exp:r,loc:f}=l,h="bind"===n,m="on"===n;if("slot"===n)continue;if("once"===n||"memo"===n)continue;if("is"===n||h&&xc(a,"is")&&Ku(i))continue;if(m&&s)continue;if((h&&xc(a,"key")||m&&p&&xc(a,"vue:before-update"))&&(_=!0),h&&xc(a,"ref")&&t.scopes.vFor>0&&c.push(nc(ac("ref_for",!0),ac("true"))),!a&&(h||m)){b=!0,r&&(c.length&&(u.push(tc(Gu(c),o)),c=[]),u.push(h?r:{type:14,loc:f,callee:t.helper(Lr),arguments:[r]}));continue}const g=t.directiveTransforms[n];if(g){const{props:n,needRuntime:a}=g(l,e,t);!s&&n.forEach(x),c.push(...n),a&&(d.push(l),be(a)&&Vu.set(l,a))}else Ne(n)||(d.push(l),p&&(_=!0))}}let k;if(u.length?(c.length&&u.push(tc(Gu(c),o)),k=u.length>1?sc(t.helper(Ir),u,o):u[0]):c.length&&(k=tc(Gu(c),o)),b?f|=16:(m&&!a&&(f|=2),g&&!a&&(f|=4),w.length&&(f|=8),v&&(f|=32)),_||0!==f&&32!==f||!(h||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,n=-1,a=!1;for(let t=0;t<k.properties.length;t++){const l=k.properties[t].key;rc(l)?"class"===l.content?e=t:"style"===l.content&&(n=t):l.isHandlerKey||(a=!0)}const l=k.properties[e],s=k.properties[n];a?k=sc(t.helper(Dr),[k]):(l&&!rc(l.value)&&(l.value=sc(t.helper(Ur),[l.value])),s&&(g||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=sc(t.helper(Fr),[s.value])));break;case 14:break;default:k=sc(t.helper(Dr),[sc(t.helper(jr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:_}}function Gu(e){const t=new Map,n=[];for(let a=0;a<e.length;a++){const l=e[a];if(8===l.key.type||!l.key.isStatic){n.push(l);continue}const s=l.key.content,i=t.get(s);i?("style"===s||"class"===s||oe(s))&&Wu(i,l):(t.set(s,l),n.push(l))}return n}function Wu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=ec([e.value,t.value],e.loc)}function Ku(e){return"component"===e||"Component"===e}const Ju=(e,t)=>{if(Cc(e)){const{children:n,loc:a}=e,{slotName:l,slotProps:s}=function(e,t){let n,a='"default"';const l=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];6===n.type?n.value&&("name"===n.name?a=JSON.stringify(n.value.content):(n.name=Ee(n.name),l.push(n))):"bind"===n.name&&xc(n.arg,"name")?n.exp&&(a=n.exp):("bind"===n.name&&n.arg&&rc(n.arg)&&(n.arg.content=Ee(n.arg.content)),l.push(n))}if(l.length>0){const{props:a,directives:s}=Hu(e,t,l,!1,!1);n=a}return{slotName:a,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",l,"{}","undefined","true"];let o=2;s&&(i[2]=s,o=3),n.length&&(i[3]=ic([],n,!1,!1,a),o=4),t.scopeId&&!t.slotted&&(o=5),i.splice(o),e.codegenNode=sc(t.helper(Pr),i,a)}},Yu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Zu=(e,t,n,a)=>{const{loc:l,modifiers:s,arg:i}=e;let o;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),o=ac(Ie(Ee(e)),!0,i.loc)}else o=lc([`${n.helperString(Br)}(`,i,")"]);else o=i,o.children.unshift(`${n.helperString(Br)}(`),o.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=n.cacheHandlers&&!r&&!n.inVOnce;if(r){const e=mc(r.content),t=!(e||Yu.test(r.content)),n=r.content.includes(";");(t||c&&e)&&(r=lc([`${t?"$event":"(...args)"} => ${n?"{":"("}`,r,n?"}":")"]))}let u={props:[nc(o,r||ac("() => {}",!1,l))]};return a&&(u=a(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Xu=(e,t,n)=>{const{exp:a,modifiers:l,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),l.includes("camel")&&(4===i.type?i.content=i.isStatic?Ee(i.content):`${n.helperString(Rr)}(${i.content})`:(i.children.unshift(`${n.helperString(Rr)}(`),i.children.push(")"))),n.inSSR||(l.includes("prop")&&Qu(i,"."),l.includes("attr")&&Qu(i,"^")),!a||4===a.type&&!a.content.trim()?{props:[nc(i,ac("",!0,s))]}:{props:[nc(i,a)]}},Qu=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},ed=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let a,l=!1;for(let e=0;e<n.length;e++){const t=n[e];if(kc(t)){l=!0;for(let l=e+1;l<n.length;l++){const s=n[l];if(!kc(s)){a=void 0;break}a||(a=n[e]=lc([t],t.loc)),a.children.push(" + ",s),n.splice(l,1),l--}}}if(l&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const a=n[e];if(kc(a)||8===a.type){const l=[];2===a.type&&" "===a.content||l.push(a),t.ssr||0!==ru(a,t)||l.push("1"),n[e]={type:12,content:a,loc:a.loc,codegenNode:sc(t.helper(kr),l)}}}}},td=new WeakSet,nd=(e,t)=>{if(1===e.type&&yc(e,"once",!0)){if(td.has(e)||t.inVOnce)return;return td.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},ad=(e,t,n)=>{const{exp:a,arg:l}=e;if(!a)return ld();const s=a.loc.source,i=4===a.type?a.content:s;if(!i.trim()||!mc(i))return ld();const o=l||ac("modelValue",!0),r=l?rc(l)?`onUpdate:${l.content}`:lc(['"onUpdate:" + ',l]):"onUpdate:modelValue";let c;c=lc([(n.isTS?"($event: any)":"$event")+" => ((",a,") = $event)"]);const u=[nc(o,e.exp),nc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),n=l?rc(l)?`${l.content}Modifiers`:lc([l,' + "Modifiers"']):"modelModifiers";u.push(nc(n,ac(`{ ${t} }`,!1,e.loc,2)))}return ld(u)};function ld(e=[]){return{props:e}}const sd=new WeakSet,id=(e,t)=>{if(1===e.type){const n=yc(e,"memo");if(!n||sd.has(e))return;return sd.add(e),()=>{const a=e.codegenNode||t.currentNode.codegenNode;a&&13===a.type&&(1!==e.tagType&&Oc(a,t),e.codegenNode=sc(t.helper(Jr),[n.exp,ic(void 0,a),"_cache",String(t.cached++)]))}}};function od(e,t={}){const n=t.onError||cr,a="module"===t.mode;!0===t.prefixIdentifiers?n(dr(46)):a&&n(dr(47)),t.cacheHandlers&&n(dr(48)),t.scopeId&&!a&&n(dr(49));const l=ve(e)?function(e,t={}){const n=function(e,t){const n=ce({},Fc);let a;for(a in t)n[a]=void 0===t[a]?Fc[a]:t[a];return{options:n,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:n.onWarn}}(e,t),a=Yc(n);return function(e,t=Xr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Dc(n,0,[]),Zc(n,a))}(e,t):e,[s,i]=[[nd,Su,id,Tu,Ju,qu,Du,ed],{on:Zu,bind:Xu,model:ad}];return fu(l,ce({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ce({},i,t.directiveTransforms||{})})),function(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:a=!1,filename:l="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:o="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const _={mode:t,prefixIdentifiers:n,sourceMap:a,filename:l,scopeId:s,optimizeImports:i,runtimeGlobalName:o,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Zr[e]}`,push(e,t){_.code+=e},indent(){f(++_.indentLevel)},deindent(e=!1){e?--_.indentLevel:f(--_.indentLevel)},newline(){f(_.indentLevel)}};function f(e){_.push("\n"+"  ".repeat(e))}return _}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:a,push:l,prefixIdentifiers:s,indent:i,deindent:o,newline:r,ssr:c}=n,u=e.helpers.length>0,d=!s&&"module"!==a;if(function(e,t){const{push:n,newline:a,runtimeGlobalName:l}=t,s=l;e.helpers.length>0&&(n(`const _Vue = ${s}\n`),e.hoists.length)&&n(`const { ${[yr,wr,xr,kr,$r].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:a}=t;a();for(let l=0;l<e.length;l++){const s=e[l];s&&(n(`const _hoisted_${l+1} = `),wu(s,t),a())}t.pure=!1}(e.hoists,t),a(),n("return ")}(e,n),l(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(l("with (_ctx) {"),i(),u&&(l(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),l("\n"),r())),e.components.length&&(vu(e.components,"component",n),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(vu(e.directives,"directive",n),e.temps>0&&r()),e.temps>0){l("let ");for(let t=0;t<e.temps;t++)l(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(l("\n"),r()),c||l("return "),e.codegenNode?wu(e.codegenNode,n):l("null"),d&&(o(),l("}")),o(),l("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}(l,ce({},t,{prefixIdentifiers:!1}))}const rd=Symbol(""),cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),pd=Symbol(""),_d=Symbol(""),fd=Symbol(""),hd=Symbol(""),md=Symbol(""),gd=Symbol("");var vd;let bd;vd={[rd]:"vModelRadio",[cd]:"vModelCheckbox",[ud]:"vModelText",[dd]:"vModelSelect",[pd]:"vModelDynamic",[_d]:"withModifiers",[fd]:"withKeys",[hd]:"vShow",[md]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(vd).forEach((e=>{Zr[e]=vd[e]}));const yd=L("style,iframe,script,noscript",!0),wd={isVoidTag:Z,isNativeTag:e=>J(e)||Y(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return bd||(bd=document.createElement("div")),t?(bd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,bd.children[0].getAttribute("foo")):(bd.innerHTML=e,bd.textContent)},isBuiltInComponent:e=>cc(e,"Transition")?md:cc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let n=t?t.ns:0;if(t&&2===n)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(n=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(n=0);else t&&1===n&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(n=0));if(0===n){if("svg"===e)return 1;if("math"===e)return 2}return n},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(yd(e))return 2}return 0}},xd=(e,t)=>{const n=G(e);return ac(JSON.stringify(n),!1,t,3)},kd=L("passive,once,capture"),$d=L("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Sd=L("left,right"),Cd=L("onkeyup,onkeydown,onkeypress",!0),Nd=(e,t)=>rc(e)&&"onclick"===e.content.toLowerCase()?ac(t,!0):4!==e.type?lc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ad=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:ac("style",!0,t.loc),exp:xd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Ed={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[nc(ac("innerHTML",!0,l),a||ac("",!0))]}},text:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[nc(ac("textContent",!0),a?ru(a,n)>0?a:sc(n.helperString(Or),[a],l):ac("",!0))]}},model:(e,t,n)=>{const a=ad(e,t,n);if(!a.props.length||1===t.tagType)return a;const{tag:l}=t,s=n.isCustomElement(l);if("input"===l||"textarea"===l||"select"===l||s){let e=ud,i=!1;if("input"===l||s){const n=wc(t,"type");if(n){if(7===n.type)e=pd;else if(n.value)switch(n.value.content){case"radio":e=rd;break;case"checkbox":e=cd;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===l&&(e=dd);i||(a.needRuntime=n.helper(e))}return a.props=a.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),a},on:(e,t,n)=>Zu(e,0,n,(t=>{const{modifiers:a}=e;if(!a.length)return t;let{key:l,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:o,eventOptionModifiers:r}=((e,t,n,a)=>{const l=[],s=[],i=[];for(let n=0;n<t.length;n++){const a=t[n];kd(a)?i.push(a):Sd(a)?rc(e)?Cd(e.content)?l.push(a):s.push(a):(l.push(a),s.push(a)):$d(a)?s.push(a):l.push(a)}return{keyModifiers:l,nonKeyModifiers:s,eventOptionModifiers:i}})(l,a);if(o.includes("right")&&(l=Nd(l,"onContextmenu")),o.includes("middle")&&(l=Nd(l,"onMouseup")),o.length&&(s=sc(n.helper(_d),[s,JSON.stringify(o)])),!i.length||rc(l)&&!Cd(l.content)||(s=sc(n.helper(fd),[s,JSON.stringify(i)])),r.length){const e=r.map(Oe).join("");l=rc(l)?ac(`${l.content}${e}`,!0):lc(["(",l,`) + "${e}"`])}return{props:[nc(l,s)]}})),show:(e,t,n)=>({props:[],needRuntime:n.helper(hd)})},Pd=Object.create(null);function Md(e,t){if(!ve(e)){if(!e.nodeType)return le;e=e.innerHTML}const n=e,a=Pd[n];if(a)return a;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:l}=function(e,t={}){return od(e,ce({},wd,t,{nodeTransforms:[Ad,...Td,...t.nodeTransforms||[]],directiveTransforms:ce({},Ed,t.directiveTransforms||{}),transformHoist:null}))}(e,ce({hoistStatic:!0,onError:void 0,onWarn:le},t)),s=new Function("Vue",l)(rr);return s._rc=!0,Pd[n]=s}pi(Md);var Od=Object.freeze({__proto__:null,BaseTransition:Ba,Comment:Cs,EffectScope:ze,Fragment:$s,KeepAlive:el,ReactiveEffect:tt,Static:Ns,Suspense:ka,Teleport:ks,Text:Ss,Transition:ro,TransitionGroup:No,VueElement:ao,callWithAsyncErrorHandling:In,callWithErrorHandling:On,camelize:Ee,capitalize:Oe,cloneVNode:Gs,compatUtils:null,compile:Md,computed:yi,createApp:lr,createBlock:Fs,createCommentVNode:Js,createElementBlock:Us,createElementVNode:Vs,createHydrationRenderer:hs,createPropsRestProxy:Ti,createRenderer:fs,createSSRApp:sr,createSlots:Tl,createStaticVNode:Ks,createTextVNode:Ws,createVNode:qs,customRef:$n,defineAsyncComponent:Za,defineComponent:Ja,defineCustomElement:eo,defineEmits:xi,defineExpose:ki,defineProps:wi,defineSSRCustomElement:to,get devtools(){return la},effect:at,effectScope:Be,getCurrentInstance:li,getCurrentScope:qe,getTransitionRawChildren:Ka,guardReactiveProps:Hs,h:Pi,handleError:Un,hydrate:ar,initCustomFormatter:Ii,initDirectivesForSSR:or,inject:Ea,isMemoSame:Fi,isProxy:on,isReactive:an,isReadonly:ln,isRef:fn,isRuntimeOnly:_i,isShallow:sn,isVNode:Ds,markRaw:cn,mergeDefaults:Ai,mergeProps:Qs,nextTick:Jn,normalizeClass:W,normalizeProps:K,normalizeStyle:V,onActivated:nl,onBeforeMount:ul,onBeforeUnmount:fl,onBeforeUpdate:pl,onDeactivated:al,onErrorCaptured:bl,onMounted:dl,onRenderTracked:vl,onRenderTriggered:gl,onScopeDispose:He,onServerPrefetch:ml,onUnmounted:hl,onUpdated:_l,openBlock:Es,popScopeId:fa,provide:Ta,proxyRefs:xn,pushScopeId:_a,queuePostFlushCb:Qn,reactive:Xt,readonly:en,ref:hn,registerRuntimeCompiler:pi,render:nr,renderList:Al,renderSlot:El,resolveComponent:xl,resolveDirective:Sl,resolveDynamicComponent:$l,resolveFilter:null,resolveTransitionHooks:qa,setBlockTracking:Os,setDevtoolsHook:ia,setTransitionHooks:Wa,shallowReactive:Qt,shallowReadonly:tn,shallowRef:mn,ssrContextKey:Mi,ssrUtils:null,stop:lt,toDisplayString:ee,toHandlerKey:Ie,toHandlers:Ml,toRaw:rn,toRef:Nn,toRefs:Sn,transformVNodeArgs:Ls,triggerRef:bn,unref:yn,useAttrs:Ci,useCssModule:lo,useCssVars:so,useSSRContext:Oi,useSlots:Si,useTransitionState:Ra,vModelCheckbox:Uo,vModelDynamic:Bo,vModelRadio:Do,vModelSelect:jo,vModelText:Io,vShow:Jo,version:Di,warn:En,watch:Ua,watchEffect:Pa,watchPostEffect:Ma,watchSyncEffect:Oa,withAsyncContext:Ei,withCtx:ma,withDefaults:$i,withDirectives:yl,withKeys:Ko,withMemo:Ui,withModifiers:Go,withScopeId:ha}),Id={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let n=await this.chart.to_data_uri();downloadURI(n,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let n=this.get_url_request(e);n!=t?(t=n,this.update_chart(n)):t=n}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,n=this.chart_type;null==n&&(n=t.typeChart.TS_STACKED),this.chart=t.newChart(n);let a=this;this.chart.registerEvent("zoomed",(function(e,t){a.on_zoomed(e,t)}));let l=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,l)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await ntopng_utility.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,{xaxis:t,yaxis:n}){this.from_zoom=!0;const a=moment(t.min),l=moment(t.max);let s={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,s,this.id),this.$emit("zoom",s)}}};const Ud={style:{width:"100%"},ref:"chart"};Id.render=function(e,t,n,a,l,s){return Es(),Us("div",Ud,null,512)},Id.__file="http_src/vue/chart.vue";const Fd=["selected","value","disabled"],Dd=["label"],jd=["selected","value","disabled"];var Ld={__name:"select-search",props:{id:String,options:Array,selected_option:Object,disable_change:Boolean},emits:["update:selected_option","select_option"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn([]),i=hn([]),o=hn({});function r(){return null==a.selected_option?a.options[0]:a.selected_option}function c(e){null==e&&(e=r()),o.value=e,null==o.value.value&&(o.value.value=e.label)}function u(e){let t;return null==e&&(e=r()),t=e.value?e.value:e.label,t}Ua((()=>a.selected_option),((e,t)=>{c(e);let n=l.value,a=u(e);$(n).val(a),$(n).trigger("change")}),{flush:"pre"});let d=!0;function p(){!function(){if(s.value=[],i.value=[],null==a.options)return;let e={};a.options.forEach((t=>{let n={...t};0!=n.value&&"0"!=n.value||(n.value=null),null==n.value&&(n.value=n.label),null==t.group?s.value.push(n):(null==e[t.group]&&(e[t.group]={group:n.group,options:[]}),e[t.group].options.push(n))})),i.value=ntopng_utility.object_to_array(e)}(),c()}Ua((()=>a.options),((e,t)=>{1!=a.disable_change&&null!=e&&p()}),{flush:"pre"}),dl((()=>{a.options&&(a.disable_change&&d||p())})),Ua([s,i],((e,t)=>{_()}),{flush:"post"});const _=()=>{let e=l.value;0==d&&f(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,l=function(e){null==e&&(e=u());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let n=0;n<i.value.length;n+=1)if(t=i.value[n].options.find((t=>t.value==e)),null!=t)return t;return null}(t),o=a.options.find((e=>e.label==l.label));t!=a.selected_option&&(n("update:selected_option",o),n("select_option",o))}))),d=!1};function f(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),fl((()=>{f()})),(e,t)=>(Es(),Us("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type"},[(Es(!0),Us($s,null,Al(s.value,((e,t)=>(Es(),Us("option",{class:"ntopng-dropdown-min-width no-wrap",selected:e.value==o.value.value,value:e.value,disabled:e.disabled},ee(e.label),9,Fd)))),256)),(Es(!0),Us($s,null,Al(i.value,((e,t)=>(Es(),Us("optgroup",{label:e.group},[(Es(!0),Us($s,null,Al(e.options,((e,t)=>(Es(),Us("option",{selected:e.value==o.value.value,value:e.value,disabled:e.disabled},ee(e.label),9,jd)))),256))],8,Dd)))),256))],512))},__file:"http_src/vue/select-search.vue"},Rd={components:{"select-search":Ld},props:{id:String,enable_refresh:Boolean},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)}},emits:["epoch_change"],created(){},mounted(){let e=ntopng_url_manager.get_url_entry("epoch_begin"),t=ntopng_url_manager.get_url_entry("epoch_end");null!=e&&null!=t&&ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,{epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id);let n=this,a=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,a){n.enable_apply=!0,n.wrong_date=n.flat_begin_date.selectedDates[0].getTime()>n.flat_end_date.selectedDates[0].getTime()}});this.flat_begin_date=a("begin-date"),this.flat_end_date=a("end-date"),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},server_date_to_date:function(e,t){let n=e.getTime(),a=e.getTimezoneOffset(),l=moment.tz(n,ntop_zoneinfo)._offset;return new Date(n-1e3*(l+a)*60)},on_status_updated:function(e){let t=Date.now(),n=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,n=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(n),ntopng_url_manager.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(n,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,ntopng_url_manager.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){let n=this.get_select_values();const a=60,l=this.get_utc_seconds(Date.now()),s=this.get_utc_seconds(t),i=this.get_utc_seconds(e);this.is_between(s,l,a)?this.is_between(i,l-n.min_5,a)?this.select_time_value="min_5":this.is_between(i,l-n.min_30,a)?this.select_time_value="min_30":this.is_between(i,l-n.hour,a)?this.select_time_value="hour":this.is_between(i,l-n.day,a)?this.select_time_value="day":this.is_between(i,l-n.week,a)?this.select_time_value="week":this.is_between(i,l-n.month,a)?this.select_time_value="month":this.is_between(i,l-n.year,a)?this.select_time_value="year":this.select_time_value="custom":this.select_time_value="custom",this.time_preset_list.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),n=this.get_utc_seconds(t.getTime()),a=this.server_date_to_date(this.flat_end_date.selectedDates[0]),l=this.get_utc_seconds(a.getTime());l>e&&(l=e);let s={epoch_begin:n,epoch_end:l};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_select_values()[this.selected_time_option.value],n=this.get_utc_seconds(Date.now()),a={epoch_begin:n-t,epoch_end:n,refresh_data:e};this.emit_epoch_change(a)},get_select_values:function(){return{min_5:300,min_30:1800,hour:3600,day:this.get_last_day_seconds(),week:this.get_last_week_seconds(),month:this.get_last_month_seconds(),year:this.get_last_year_seconds()}},get_utc_seconds:function(e){return Number.parseInt(e/1e3)},is_between:function(e,t,n){return e>=t-n&&e<=t},get_last_day_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-1))},get_last_week_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-7))},get_last_month_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-1))},get_last_year_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-12))},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,n=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=n-t/2,this.epoch_status.epoch_end=n+t/2;let a=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>a&&(this.epoch_status.epoch_end=a),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(t!=this.id&&this.on_status_updated(e),ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),this.$emit("epoch_change",e)))},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"min_5",selected_time_option:{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"min_30",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}]})};const zd=e=>(_a("data-v-bc6f1430"),e=e(),fa(),e),Bd={class:"input-group"},Vd={class:"form-group"},qd={class:"controls d-flex flex-wrap"},Hd={class:"btn-group me-auto btn-group-sm"},Gd={class:"btn-group ms-2"},Wd=zd((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),Kd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date"},Jd=zd((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),Yd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date"},Zd=["title"],Xd=[zd((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],Qd={class:"d-flex align-items-center ms-2"},ep=["disabled"],tp={class:"btn-group"},np=["title"],ap=[zd((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],lp=["title"],sp=[zd((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],ip=["title"],op=[zd((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],rp=["title"],cp=[zd((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],up=["disabled","title"],dp=[zd((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],pp=["disabled","title"],_p=[zd((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function fp(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],l=document.createElement("style");l.type="text/css","top"===n&&a.firstChild?a.insertBefore(l,a.firstChild):a.appendChild(l),l.styleSheet?l.styleSheet.cssText=e:l.appendChild(document.createTextNode(e))}}fp("\n.date_time_input[data-v-bc6f1430] {\n  width: 10.5rem;\n  max-width: 10.5rem;\n  min-width: 10.5rem;\n}\n"),Rd.render=function(e,t,n,a,l,s){const i=xl("select-search");return Es(),Us("div",Bd,[Vs("div",Vd,[Vs("div",qd,[Vs("div",Hd,[El(e.$slots,"begin"),qs(i,{selected_option:l.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>l.selected_time_option=e),id:"time_preset_range_picker",options:l.time_preset_list,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["selected_option","options"]),Vs("div",Gd,[Wd,Vs("input",Kd,null,512),Js(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Js(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Jd,Vs("input",Yd,null,512),Js(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Js(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),yl(Vs("span",{title:l.i18n("wrong_date_range"),style:{"margin-left":"0.2rem",color:"red"}},Xd,8,Zd),[[Jo,l.wrong_date]])]),Vs("div",Qd,[Vs("button",{disabled:!l.enable_apply||l.wrong_date,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-sm btn-primary"},ee(l.i18n("apply")),9,ep),Vs("div",tp,[Vs("button",{onClick:t[3]||(t[3]=e=>s.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:l.i18n("date_time_range_picker.btn_move_left")},ap,8,np),Vs("button",{onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:l.i18n("date_time_range_picker.btn_move_right")},sp,8,lp),Vs("button",{onClick:t[5]||(t[5]=e=>s.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:l.i18n("date_time_range_picker.btn_zoom_in")},op,8,ip),Vs("button",{onClick:t[6]||(t[6]=e=>s.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:l.i18n("date_time_range_picker.btn_zoom_out")},cp,8,rp),Vs("button",{disabled:null==l.history_last_status,onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_undo")},dp,8,up),Vs("button",{disabled:"custom"==l.select_time_value,onClick:t[8]||(t[8]=e=>s.change_select_time()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_refresh")},_p,8,pp),El(e.$slots,"extra_buttons")])])])])])])},Rd.__scopeId="data-v-bc6f1430",Rd.__file="http_src/vue/data-time-range-picker.vue";var hp=Ja({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const mp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},gp={class:"modal-content"},vp={class:"modal-header"},bp={class:"modal-title"},yp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),wp={class:"modal-body"},xp={class:"modal-footer"},kp=Vs("div",{class:"mr-auto"},null,-1),$p=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);hp.render=function(e,t,n,a,l,s){return Es(),Us("div",{onSubmit:t[0]||(t[0]=Go(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",mp,[Vs("div",gp,[Vs("div",vp,[Vs("h5",bp,[El(e.$slots,"title")]),yp]),Vs("div",wp,[El(e.$slots,"body")]),Vs("div",xp,[kp,El(e.$slots,"footer"),$p])])])],544)},hp.__file="http_src/vue/modal.vue";const Sp=e=>(_a("data-v-089b0491"),e=e(),fa(),e),Cp=Sp((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Np={class:"nav nav-tabs"},Ap=["disabled"],Tp={key:0,style:{"min-height":"8.5rem"}},Ep={class:"form-group ms-2 me-2 mt-3 row"},Pp={class:"col-form-label col-sm-4"},Mp={class:"col-sm-6"},Op=["pattern"],Ip={key:1,style:{"min-height":"8.5rem"}},Up={class:"form-group ms-2 me-2 mt-3 row"},Fp={class:"col-form-label col-sm-4"},Dp={class:"col-sm-8"},jp={value:"name"},Lp={value:"date"},Rp={class:"form-group ms-2 me-2 mt-3 row"},zp={class:"col-form-label col-sm-4"},Bp={class:"col-sm-8"},Vp=["value"],qp={class:"form-group ms-2 me-2 mt-3 row"},Hp={class:"custom-control custom-switch"},Gp={class:"custom-control-label ms-1 form-check-label"},Wp=["disabled"],Kp=["disabled"],Jp=["disabled"];var Yp={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn("add"),i=hn(""),o=hn(!1),r=hn(""),c=hn(!0),u=hn(""),d=hn(""),p=hn([]),_=hn("date");let f=NtopUtils.REGEXES.singleword;const h=yi((()=>!new RegExp(f).test(d.value))),m=yi((()=>""==i.value));function g(){if(null!=a.page)return a.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let v=null;function b(){v!=_.value&&(p.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),p.value.length>0&&(i.value=p.value[0]),v=_.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=g(),l={snapshot_name:d.value,filters:e,page:t};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}$(),n("added_snapshots",l)},x=()=>{$();let e=i.value.filters;if(1==o.value){let t=ntopng_status_manager.get_status(),n=ntopng_url_manager.get_url_object(e);n.epoch_begin=t.epoch_begin,n.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(n)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let l={snapshot_name:t,page:g()};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}n(1==e?"deleted_all_snapshots":"deleted_snapshot",l),$()},$=()=>{l.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,o.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),n=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,n),t=t.replace(/\%end_time/,a),u.value=t;let l=S("snapshots.apply_time");if(l=l.replace(/\%begin_time/,n),l=l.replace(/\%end_time/,a),r.value=l,y){y=!1;let e=g(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,n=await ntopng_utility.http_request(t);p.value=ntopng_utility.object_to_array(n)}b(),p.value.length>0&&(i.value=p.value[0])}(),l.value.show()},close:$}),dl((()=>{}));const S=e=>i18n(e);return(e,t)=>(Es(),Fs(hp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(S("snapshots.manage"))+" ",1),Cp])),body:ma((()=>[Vs("ul",Np,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:W(["nav-link",{active:"add"==s.value}]),href:"#"},ee(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==p.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==p.value.length,class:W(["nav-link",{active:"select"==s.value,"not-allowed":0==p.value.length}]),href:"#"},ee(S("snapshots.manage")),11,Ap)])]),"add"==s.value?(Es(),Us("div",Tp,[Vs("div",Ep,[Vs("label",Pp,[Vs("b",null,ee(S("snapshots.name"))+":",1)]),Vs("div",Mp,[yl(Vs("input",{pattern:yn(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Op),[[Io,d.value]])])]),Js(' <div class="form-group ms-2 me-2 mt-3 row"> '),Js(' \t<div class="custom-control custom-switch"> '),Js(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Js(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Js(" \t</div> "),Js(" </div>       ")])):Js("v-if",!0),Js(" action add "),"select"==s.value?(Es(),Us("div",Ip,[Vs("div",Up,[Vs("label",Fp,[Vs("b",null,ee(S("snapshots.order_by")),1)]),Vs("div",Dp,[yl(Vs("select",{class:"form-select",onClick:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[Vs("option",jp,ee(S("snapshots.name")),1),Vs("option",Lp,ee(S("snapshots.date")),1)],512),[[jo,_.value]])])]),Vs("div",Rp,[Vs("label",zp,[Vs("b",null,ee(S("snapshots.select")),1)]),Vs("div",Bp,[yl(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(Es(!0),Us($s,null,Al(p.value,(e=>(Es(),Us("option",{value:e},ee(function(e){let t=1e3*e.utc,n=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${n})`}(e)),9,Vp)))),256))],512),[[jo,i.value]])])]),Vs("div",qp,[Vs("div",Hp,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>o.value=e)},null,512),[[Uo,o.value]]),Vs("label",Gp,ee(r.value),1)])])])):Js("v-if",!0),Js(" action select ")])),footer:ma((()=>["add"==s.value?(Es(),Us("button",{key:0,type:"button",onClick:w,disabled:yn(h),class:"btn btn-primary"},ee(S("snapshots.add")),9,Wp)):Js("v-if",!0),"select"==s.value?(Es(),Us("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},ee(S("snapshots.delete_all")),1)):Js("v-if",!0),"select"==s.value?(Es(),Us("button",{key:2,type:"button",onClick:k,disabled:yn(m),class:"btn btn-danger"},ee(S("snapshots.delete")),9,Kp)):Js("v-if",!0),"select"==s.value?(Es(),Us("button",{key:3,type:"button",onClick:x,disabled:yn(m),class:"btn btn-primary"},ee(S("snapshots.apply")),9,Jp)):Js("v-if",!0)])),_:1},512))}};fp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Yp.__scopeId="data-v-089b0491",Yp.__file="http_src/vue/modal-snapshot.vue";const Zp=e=>(_a("data-v-185590b6"),e=e(),fa(),e),Xp={class:"form-group ms-2 me-2 mt-3 row"},Qp={class:"col-11"},e_={class:"col-form-label"},t_=[Zp((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],n_={class:"container"},a_={class:"row custom-ms me-2 mt-1"},l_={class:"col-5"},s_=["onUpdate:modelValue"],i_={class:"custom-control-label ms-1 form-check-label"},o_={class:"col-2"},r_=["onUpdate:modelValue"],c_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),u_={class:"col-2"},d_=["onUpdate:modelValue"],p_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),__={class:"col-3"},f_=["onUpdate:modelValue"],h_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var m_={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const n=e;function a(){t("update:timeseries",n.timeseries)}function l(){t("delete_ts",n.id)}return(t,n)=>(Es(),Us("div",null,[Vs("div",Xp,[Vs("div",Qp,[Vs("label",e_,[Vs("b",null,ee(e.title),1)])]),e.show_delete_button?(Es(),Us("div",{key:0,class:"col-1",onClick:l},t_)):Js("v-if",!0)]),Vs("div",n_,[(Es(!0),Us($s,null,Al(e.timeseries,(e=>(Es(),Us("div",a_,[Vs("div",l_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.raw=t},null,40,s_),[[Uo,e.raw]]),Vs("label",i_,ee(e.label),1)]),Vs("div",o_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.past=t},null,40,r_),[[Uo,e.past]]),c_]),Vs("div",u_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.avg=t},null,40,d_),[[Uo,e.avg]]),p_]),Vs("div",__,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.perc_95=t},null,40,f_),[[Uo,e.perc_95]]),h_])])))),256))])]))}};fp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),m_.__scopeId="data-v-185590b6",m_.__file="http_src/vue/list-timeseries.vue";const g_=h.getFormatter(h.types.bytes.id),v_="page-stats-action-link",b_="page-stats-action-jump-historical",y_={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:v_,render:function(e,t,n){let a=this,l={handlerId:v_,onClick:function(){let e=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(e,n.ts_query)}};return D.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>n.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:b_,onClick:function(){a.status;let e=x.serialize_param("l7proto",`${n.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",o=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?x.serialize_param("ifid",n.value):"host"==e.value?x.serialize_param("ip",`${n.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return D.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},w_={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:v_,render:function(e,t,n){let a=this,l={handlerId:v_,onClick:function(){let e=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(e,n.ts_query)}};return D.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:b_,onClick:function(){a.status;let e=x.serialize_param("l7cat",`${n.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",o=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?x.serialize_param("ifid",n.value):"host"==e.value?x.serialize_param("ip",`${n.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return D.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},x_=[y_,w_,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:v_,render:function(e,t,n){let a=this,l=e.label,s="",i={handlerId:v_,onClick:async function(){a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host&&e.is_local&&(l=D.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l=n.host.id,s=n.host.is_local,i={handlerId:b_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=x.serialize_param(e,t):"host"==e&&(a=x.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:b_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return a.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),D.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:v_,render:function(e,t,n){let a=this,l=e.label,s="",i={handlerId:v_,onClick:async function(){a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host&&e.is_local&&(l=D.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l=n.host.id,s=n.host.is_local,i={handlerId:b_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=x.serialize_param(e,t):"host"==e&&(a=x.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:b_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return a.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),D.createActionButtons(r)}}]}];let k_=x_.find((e=>"top_protocols"==e.view));null!=k_&&(k_=b.clone(k_),k_.table_value="host");const $_=[k_],S_=h.getFormatter(h.types.bytes.id),C_=h.getFormatter(h.types.bps.id),N_="page-stats-action-link",A_={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,n=e.source_type.source_def_array;for(let a=0;a<n.length;a+=1)if("device"==n[a].value){t=e.source_array[a].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface"),name:"interface",data:"interface",handlerId:N_,render:function(e,t,n){let a=this,l={handlerId:N_,onClick:function(){a.add_ts_group_from_source_value_dict("snmp_interface",n.tags,"snmp_if:traffic")}},s=`${e.label} (${e.id})`;return D.createLinkCallback({text:s,handler:l})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>S_(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>S_(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>S_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>C_(e)}]},T_=[A_],E_={hide:"hide",select:"select",input:"input"},P_={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`})},M_={interface:x_,host:$_,snmp_interface:T_,snmp_device:T_},O_=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:E_.select}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:E_.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:E_.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:E_.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:E_.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:E_.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:E_.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:E_.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:E_.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:E_.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:E_.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:E_.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:E_.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:E_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:E_.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:E_.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:E_.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:E_.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:E_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:E_.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:E_.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:E_.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:E_.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:E_.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:E_.input}]}],I_={ui_types:E_,sources_url_el_to_source:P_,sources_types:O_,sources_types_tables:M_},U_=e=>{let t=[];e.forEach((e=>{let n=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let n=e.metric.schema;null!=e.metric.query&&(n=`${n}+${e.metric.query}`);let a=t.join("|"),l=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${l};${n};${a}`;return s}(e);t.push(n)}));let n=t.join(";;");x.set_key_to_url("timeseries_groups",n)};const F_=(e,t,n)=>{let a=L_(e,t,n),l=[];for(let e in n.timeseries){let t=n.timeseries[e];l.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:a,source_type:e,source_array:t,metric:n,timeseries:l}},D_=async(e,t,n)=>{let a=Q_(),l=await V_(e,a),s=await X_(e,a,l),i=nf(s,t,n);return[F_(a,l,i)]};async function j_(e){let t=e.split(";"),n=t[0],a=t[1].split("+"),l=t[2].split("+");l.length<2&&l.push(null);let s=t[3],i=B_(n),o=await H_(http_prefix,i,a),r=await ef(http_prefix,i,o,l[0],l[1]),c=function(e,t){let n=e.split("|"),a=/(.+)=(.+):(.+):(.+):(.+)/,l=[];return n.forEach((e=>{let n=a.exec(e),s=n[1],i=t.timeseries[s].label,o=JSON.parse(n[2]),r=JSON.parse(n[3]),c=JSON.parse(n[4]),u=JSON.parse(n[5]);l.push({id:s,label:i,raw:o,past:r,avg:c,perc_95:u})})),l}(s,r);return{id:L_(i,o,r),source_type:i,source_array:o,metric:r,timeseries:c}}const L_=(e,t,n,a,l)=>{let s="";null!=n&&(s=n.schema,null!=n.query&&(s=`${s} - ${n.query}`));let i=e.source_def_array,o=t.map(((e,t)=>{let n=i[t].value;return null==a||a[n]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return l&&null!=e.id_group&&(r=e.id_group),`${r} - ${o} - ${s}`};const R_=I_.sources_url_el_to_source,z_=I_.sources_types,B_=e=>z_.find((t=>t.id==e)),V_=async(e,t)=>{let n=J_(t);return await H_(e,t,n)};async function q_(e,t,n){let a=t.source_def_array.map((e=>n[e.value]));return await H_(e,t,a)}const H_=async(e,t,n)=>{null==t&&(t=Q_());let a,l=[];for(let s=0;s<n.length;s+=1){let i=n[s],o=t.source_def_array[s];if(o.sources_url||o.sources_function){let n=[];n=o.sources_url?await W_(e,t.id,o):o.sources_function(),a=n.find((e=>e.value==i)),null==a&&(a=n[0])}else a={label:i,value:i};l.push(a)}return l};let G_={};const W_=async(e,t,a)=>{let l=`${t}_${a.value}`;if(null==G_[l])if(a.sources_url){let t=`${e}/${a.sources_url}`;G_[l]=b.http_request(t)}else{if(!a.sources_function)return[];G_[l]=a.sources_function()}let s=await G_[l];if(a.sources_url){let e=R_[a.value_map_sources_res];if(null==e&&(e=R_[a.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${a.value} key`;s=s.map((t=>e(t)))}return s.sort(n.sortAlphabetically)};function K_(e,t){e.source_def_array.forEach((e=>{let n=t[e.value];null!=n&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,n):x.set_key_to_url(e.value,n))}))}const J_=e=>(null==e&&(e=Q_()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let Y_={},Z_=null;const X_=async(e,t,n)=>{let a=`${x.get_url_entry("epoch_begin")}_${x.get_url_entry("epoch_end")}`;null==t&&(t=Q_()),null==n&&(n=await V_(e,t));let l=function(e,t,n){let a=t.source_def_array.map(((e,t)=>`${e.value}=${n[t].value}`)).join("&");return`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${a}`}(e,t,n),s=function(e,t){let n=t.map((e=>e.value)).join("_");return`${e.id}_${n}`}(t,n);a!=Z_&&(Y_[s]=null,Z_=a),null==Y_[s]&&(Y_[s]=b.http_request(l));let i=await Y_[s];return null==i?[{}]:(0==i.some((e=>1==e.default_visible))&&(i[0].default_visible=!0),b.clone(i))},Q_=()=>{let e=window.location.pathname;for(let t=0;t<z_.length;t+=1){if(1==new RegExp(z_[t].regex_page_url).test(e))return z_[t]}throw`source_type not found for ${e}`},ef=async(e,t,n,a,l)=>(await X_(e,t,n)).find((e=>e.schema==a&&e.query==l)),tf=(e,t)=>{null==t&&(t=Q_());let n={};t.source_def_array.forEach((e=>n[e.value]=!0));let a=e.split(",");for(let e=0;e<a.length;e+=1){let t=a[e].split(":")[0];if(null==n[t])return a[e]}return null},nf=(e,t,n)=>{let a;return null!=t&&(a=e.find((e=>e.schema==t&&(null==n||e.query==n)))),null==a&&(a=e.find((e=>1==e.default_visible))),null!=a?a:e[0]},af={set_timeseries_groups_in_url:U_,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let n=t.split(";;");return!n?.length>0?null:Promise.all(n.map((async e=>await j_(e))))},get_default_timeseries_groups:D_,get_ts_group:F_,get_ts_group_id:L_,sources_types:z_,sources_types_tables:I_.sources_types_tables,get_source_type_from_id:B_,get_current_page_source_type:Q_,get_sources:W_,get_default_source_array:V_,get_source_array_from_value_dict:q_,get_source_array_from_value_array:H_,get_default_source_value_array:J_,get_metrics:X_,get_metric_from_schema:ef,get_metric_query_from_ts_query:tf,get_default_metric:nf,set_source_value_object_in_url:K_,ui_types:I_.ui_types};function lf(e,t){let n=e.start,a=1e3*e.step;e.series.forEach((e=>{e.name=e.label,delete e.type;let t=1e3*n;e.data=e.data.map((e=>{let n={x:t,y:e};return t+=a,n}))})),e.xaxis={labels:{show:!0},axisTicks:{show:!0}},e.yaxis={labels:{formatter:h.getFormatter(t.measure_unit)},axisBorder:{show:!0},title:{text:t.measure_unit}}}function sf(e){return`${e.label}`}function of(e,t){return"number"==e?t:e}function rf(e,t,n,a){null==e&&(e=t);let l="";if(null!=e&&(l=`${e} `),0==a)return e;let s=gf(n);return`${`${n.source_array[s].label}`} ${l}(${of(n.metric.measure_unit,n.metric.scale)})`}function cf(e){return`${e.measure_unit}_${e.scale}`}const uf=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];const df={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")},"1_chart":{value:"1_chart",label:i18n("page_stats.layout_1_per_all")}};function pf(e){return df[e]||null}function _f(e,t,n,a){if(n.value==df["1_chart"].value){let n=[hf(e,t,a)];return ff(n),n}if(n.value==df["1_chart_x_yaxis"].value){let n={};t.forEach(((t,a)=>{let l=cf(t.metric),s={tsGroup:t,tsOptions:e[a]};null==n[l]?n[l]=[s]:n[l].push(s)}));let l=[];for(let e in n){let t=n[e],s=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),o=hf(s,i,a);l.push(o)}return ff(l),l}if(n.value==df["1_chart_x_metric"].value){let n=[];return e.forEach(((e,l)=>{let s=hf([e],[t[l]],a);n.push(s)})),ff(n),n}return[]}function ff(e){let t=1==e.length;e.forEach((e=>{t||e.yaxis.filter((e=>e.show)).forEach((e=>{e.labels.minWidth=60})),e.yaxis.length<2||(e.yaxis.forEach((e=>{e.labels.offsetX=-20})),e.grid.padding.left=-7)}))}function hf(e,t,n){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToApexOptions: tsOptionsArray ${e} different length from tsGrpupsArray ${t}`);let a=[],l=[],s={},i={};!function(e){e[0]?.source?.name}(t);let o=null;e.forEach(((e,r)=>{let c=t[r];r>0&&(o="line");let u=function(e,t,n,a,l){let s=1e3*e.start,i=1e3*e.step,o=[],r=Object.keys(t.metric.timeseries);return"top"!=t.metric.type&&e.series?.length!=r.length&&(e.series=r.map(((t,n)=>{let a=e.series.find((e=>sf(e)==t));return null!=a?a:{label:t,data:[null]}}))),e.series.forEach(((r,c)=>{let u=sf(r),d=t.metric.timeseries[u];if(null==d)throw`Impossible find timeserie_id = ${u} in metric metadata (id,schema,query) = (${metric.id},${metric.schema},${metric.id})`;let p=1;1==d.invert_direction&&(p=-1);let _=e=>{let t=s,n=e.map((e=>{let n={x:t,y:e*p};return t+=i,n}));return n},f=t.timeseries?.find((e=>e.id==u)),h=d.label;null!=r.ext_label&&"top"==t.metric.type&&(h=r.ext_label);let m=rf(h,u,t,n);if(null==f||1==f.raw){let e=_(r.data),t=d.draw_type;null==t&&null!=a?t=a:null==t&&(t="area");let n={id:u,colorPalette:0,color:d.color,type:t,name:m,data:e,invert_direction:d.invert_direction};o.push(n)}if(1==f?.past&&b.is_object(e.additional_series)){let t=b.object_to_array(e.additional_series)[0],n={id:u,colorPalette:1,type:"line",name:`${m} ${l} Ago`,data:_(t),dashed:!0,invert_direction:d.invert_direction};o.push(n)}let g=(e,t,n)=>{if(null==n)return null;null!=n&&(n*=p);let a=s;return{id:t,name:`${m} (${e})`,colorPalette:1,type:"line",data:r.data.map((e=>{let t={x:a,y:n};return a+=i,t})),invert_direction:d.invert_direction}};if(1==f?.avg){let t=e.statistics?.by_serie[c].average,n=g("Avg",u,t);o.push(n)}if(1==f?.perc_95){let t=e.statistics?.by_serie[c]["95th_percentile"],n=g("95th Perc",u,t);o.push(n)}})),o}(e,c,!0,o,n);a=a.concat(u);let d=function(e,t,n,a){let l=t.metric,s=cf(l),i=!1,o=Object.keys(n).length,r=[];for(let e in t.metric.timeseries)i|=t.metric.timeseries[e].invert_direction;return e.forEach((e=>{let i=n[s],c=0,u=null;if(null!=e.data){let t=e.data.map((e=>null==e.y?0:Math.abs(e.y)));c=Math.max.apply(Math,t),u=h.getScaleFactorIndex(l.measure_unit,c)}if(null==i){a[s]=u;let l={seriesName:e.name,show:!0,labels:{},axisTicks:{show:!0},axisBorder:{show:!0},title:{text:of(t.metric.measure_unit,t.metric.scale)},opposite:o%2==1};n[s]=l.seriesName,r.push(l)}else r.push({seriesName:i,labels:{},show:!1});a[s]=Math.max(a[s],u)})),r.forEach((e=>e.labels.formatter=h.getFormatter(l.measure_unit,i,a[s]))),r}(u,c,s,i);l=l.concat(d)})),function(e){let t=0,n=0,a=uf,l=d3v7.schemeCategory10;e.forEach((e=>{0==e.colorPalette?(e.color=a[t%a.length],t+=1):1==e.colorPalette&&(e.color=l[n%l.length],n+=1)}))}(a),function(e,t){let n={},a={};for(let l=0;l<t.length;l+=1){let s=t[l],i=e[l],o=i.seriesName;null==n[o]&&(n[o]=[],a[o]={min:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER,invert_direction:!1}),n[o].push(i);let r=a[o];s.data.forEach((e=>{r.max=Math.max(r.max,e.y),r.min=Math.min(r.min,e.y)})),r.invert_direction|=s.invert_direction}let l=(e,t)=>{if(0==e||null==e||e==Number.MAX_SAFE_INTEGER||e==Number.MIN_SAFE_INTEGER)return 0;let n=e/100*3;return t&&e>0||!t&&e<0?e+n:e-n};for(let e in n){let t=n[e],s=a[e];s.min=l(s.min,!1),s.max=l(s.max,!0),t.forEach((e=>{let t=Math.abs(s.min),n=Math.abs(s.max);t>n?(e.min=s.min,e.max=t):t<n&&1==s.invert_direction?(e.min=-1*n,e.max=s.max):(e.min=s.min,e.max=s.max)}))}}(l,a);let r=function(e,t){return{chart:{id:b.get_random_string(),group:"timeseries"},grid:{padding:{},row:{}},fill:{opacity:.9,type:"solid",pattern:{strokeWidth:10}},markers:{size:2.5,strokeWidth:1,strokeColors:e.map((e=>e.color))},stroke:{show:!0,lineCap:"butt",width:3,dashArray:e.map((e=>e.dashed?4:0))},legend:{show:!0,showForSingleSeries:!0,position:"top",horizontalAlign:"right",onItemClick:{toggleDataSeries:!1}},series:e,yaxis:t,xaxis:{labels:{show:!0},axisTicks:{show:!0}}}}(a,l);return r}function mf(e,t,n){let a=e.source_type.source_def_array.map(((t,a)=>{if(null!=n&&!n[t.value])return null;let l=e.source_array[a].value;return`${t.value}:${l}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(a=`${a},${e.metric.query}`),a}function gf(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function vf(e,t,n,a,l){let s,i={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(l){let t={zoom:n,initial_point:!0,limit:180,version:4,ts_compare:n},l=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,o={ts_requests:a.map((e=>{let t=gf(e),n={ts_query:mf(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(n.tskey=e.source_array[t].value),n})),...i,...t},r={"Content-Type":"application/json"};s=await b.http_request(l,{method:"post",headers:r,body:JSON.stringify(o)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,l=`ts_compare=${n}&version=4&zoom=${n}&initial_point=true&limit=180`,o=a[0],r=gf(o),c=mf(o),u={...i,ts_query:c,ts_schema:`${o.metric.schema}`};o.source_type.source_def_array[r].disable_tskey||(u.tskey=o.source_array[r].value);let d=`${t}?${x.add_obj_to_url(u,l)}`;s=[await b.http_request(d)]}return s}const bf={groupsOptionsModesEnum:df,tsToApexOptions:lf,tsArrayToApexOptions:hf,tsArrayToApexOptionsArray:_f,getGroupOptionMode:pf,getSerieId:sf,getSerieName:rf,getTsChartsOptions:vf,getTsQuery:mf,getMainSourceDefIndex:gf},yf=n;function wf(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=wf("vlan"),n=yf.REGEXES.ipv4,a=n.replace("$",`${t}$`),l=yf.REGEXES.ipv6,s=l.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,a=n.replace("$",`${e}$`),s=n.replace("$",`${e}${t}$`),i=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${a}|${s}|${l.replaceAll("$",`${i}$`)}|${l.replaceAll("$",`${i}${t}$`)})`}return`(${n})|(${a})|(${l})|(${s})`}return"mac"==e?yf.REGEXES.macAddress:yf.REGEXES[e]}const xf={get_data_pattern:wf},kf={class:"nav nav-tabs"},$f={class:"form-group ms-2 me-2 mt-3 row"},Sf={class:"form-group row"},Cf={class:"col-form-label col-sm-4"},Nf={class:"col-sm-8"},Af={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Tf={class:"form-group row"},Ef={class:"col-form-label col-sm-4"},Pf={class:"col-sm-8"},Mf=["title"],Of={key:0,class:"form-group mt-2 row"},If={class:"col-form-label col-sm-4"},Uf={class:"col-sm-8"},Ff={key:1,class:"form-group mt-2 row"},Df={class:"col-form-label col-sm-4"},jf={class:"col-sm-8"},Lf=["onUpdate:modelValue","pattern"],Rf={class:"form-group row mt-2",style:{"text-align":"end"}},zf={class:"col-sm-12"},Bf=["disabled"],Vf={class:"form-group ms-2 me-2 mt-3 row"},qf={class:"form-group row"},Hf={class:"col-form-label col-sm-4"},Gf={class:"col-sm-8"};var Wf={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn(null),i=hn("select");let o=af.get_current_page_source_type();const r=af.sources_types,c=hn(o),u=af.ui_types,d=hn([]),p=hn([]),_=hn([]),f=hn(""),h=hn([]),m=hn(!1),g=yi((()=>{if(0==m.value)return!1;for(let e=0;e<h.value.length;e+=1){let t=h.value[e];if(null==t)continue;let n=new RegExp(t),a=_.value[e];if(0==n.test(a))return!1}return!0})),v=hn(!1),y=hn([]),w=hn({}),x=hn([]),k=hn([]);let $=null;ul((()=>{r.forEach((e=>{a.sources_types_enabled[e.id]}))})),dl((async()=>{$=async function(){await C(),P()}()}));function S(e){i.value=e}async function C(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);h.value=e.map((e=>null==e?null:xf.get_data_pattern(e)))}(),function(){let e=c.value;v.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let n=0;n<e.length;n+=1){let a=await af.get_sources(http_prefix,c.value.id,e[n]);t.push(a)}let n=await af.get_default_source_array(http_prefix,c.value);p.value=n,d.value=t,_.value=n.map((e=>e.value)),T()}(),await E()}async function N(){m.value=!1,_.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let n=p.value[t];n.value=e,n.label=e}})),await async function(){await E()}(),T()}function A(){m.value=!0}function T(){f.value=`${p.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function E(){y.value=await af.get_metrics(http_prefix,c.value,p.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=af.get_default_metric(y.value)}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function M(e){let t=e.source_type.label,n=bf.getMainSourceDefIndex(e);return`${t} - ${e.source_array[n].label} - ${e.metric.label}`}function O(e){let t,n,a;return null==e?(t=c.value,n=p.value,a=w.value):(t=e.source_type,n=e.source_array,a=e.metric),af.get_ts_group_id(t,n,a)}const I=e=>{x.value=x.value.filter((t=>O(t)!=e))},U=(e,t)=>{let a=x.value.findIndex((t=>t.id==e.id));a<0?x.value.push(e):x.value[a]=e,t&&n("apply",x.value)},F=()=>{if("add"==i.value){let e={id:O(),source_type:c.value,source_array:b.clone(p.value),metric:w.value,timeseries:b.clone(k.value)};U(e)}n("apply",x.value),D()},D=()=>{l.value.close()},j=e=>i18n(e);return t({show:async e=>{x.value=e,await $,i.value="select",l.value.show()},close:D,add_ts_group:U,set_timeseries_groups:(e,t)=>{x.value=e,t&&n("apply",x.value)}}),(e,t)=>(Es(),Fs(hp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(j("modal_timeseries.title")),1)])),body:ma((()=>[Vs("ul",kf,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:W(["nav-link",{active:"add"==i.value}]),href:"#"},ee(j("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:W(["nav-link",{active:"select"==i.value}]),href:"#"},ee(j("modal_timeseries.manage_timeseries")),3)])]),Js(" action add "),"add"==i.value?(Es(),Us($s,{key:0},[Js(" Sources Types "),Vs("div",$f,[Vs("div",Sf,[Vs("label",Cf,[Vs("b",null,ee(j("modal_timeseries.source_type")),1)]),Vs("div",Nf,[qs(Ld,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:yn(r)},null,8,["selected_option","options"])])])]),Js(" Sources "),v.value?Js("v-if",!0):(Es(),Us("div",Af,[Vs("div",Tf,[Vs("label",Ef,[Vs("b",null,ee(j("modal_timeseries.source")),1)]),Vs("div",Pf,[yl(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Mf),[[Io,f.value]])])]),(Es(!0),Us($s,null,Al(c.value.source_def_array,((e,n)=>(Es(),Us($s,null,[Js(" select "),e.ui_type==yn(u).select?(Es(),Us("div",Of,[Vs("label",If,[Vs("b",null,ee(e.label)+" "+ee(n),1)]),Vs("div",Uf,[qs(Ld,{selected_option:p.value[n],"onUpdate:selected_option":e=>p.value[n]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[n]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0),Js(" end select "),Js(" input text "),e.ui_type==yn(u).input?(Es(),Us("div",Ff,[Vs("label",Df,[Vs("b",null,ee(e.label),1)]),Vs("div",jf,[yl(Vs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>_.value[n]=e,pattern:h.value[n],required:"",type:"text",placeholder:""},null,40,Lf),[[Io,_.value[n]]])])])):Js("v-if",!0),Js(" input text ")],64)))),256)),yl(Vs("div",Rf,[Vs("div",zf,[Vs("button",{type:"button",onClick:N,disabled:0==yn(g),class:"btn btn-primary"},ee(j("modal_timeseries.apply_source")),9,Bf)])],512),[[Jo,yn(g)]])])),Js(" end Sources "),Js(" Metrics "),Vs("div",Vf,[Vs("div",qf,[Vs("label",Hf,[Vs("b",null,ee(j("modal_timeseries.metric")),1)]),Vs("div",Gf,[qs(Ld,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),qs(m_,{id:"",title:j("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Js("v-if",!0),Js(" action == add "),Js(" action select"),"select"==i.value?(Es(),Us($s,{key:1},[(Es(!0),Us($s,null,Al(x.value,(e=>(Es(),Fs(m_,{id:O(e),title:M(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:I},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Js(" v-for timeseries_groups_added ")],64)):Js("v-if",!0),Js(" action == select ")])),footer:ma((()=>[yl(Vs("button",{type:"button",onClick:F,class:"btn btn-primary"},ee(j("modal_timeseries.add")),513),[[Jo,"add"==i.value]]),yl(Vs("button",{type:"button",onClick:F,class:"btn btn-primary"},ee(j("modal_timeseries.apply")),513),[[Jo,"select"==i.value]])])),_:1},512))}};fp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Wf.__scopeId="data-v-103cd911",Wf.__file="http_src/vue/modal-timeseries.vue";var Kf=Ja({components:{modal:hp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,i18n:e=>i18n(e),id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,n=(await ntopng_utility.http_request(e,null,!1,!0)).id,a=i18n("traffic_recording.extraction_scheduled"),l=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${n}">${l}</a>`;a=a.replace("%{page}",s),a=`${a} ${n}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:a,type:"alert-success"})}this.$refs.modal.close()},show:async function(e){if(null==e){let t=ntopng_url_manager.get_url_params(),n=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,a=await ntopng_utility.http_request(n);if(null==a||null==a.bpf)return void console.error(`modal-traffic-extraction: ${n} return null value`);e=a.bpf}let t=ntopng_status_manager.get_status();if(null==t.epoch_begin||null==t.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");let n=new Date(1e3*t.epoch_begin),a=new Date(1e3*t.epoch_end),l=i18n("traffic_recording.about_to_download_flow");l=l.replace("%{date_begin}",this.format_date(n)),l=l.replace("%{date_end}",this.format_date(a)),this.description=l,this.bpf_filter=e,this.$refs.modal.show()},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const Jf=e=>(_a("data-v-0be978c4"),e=e(),fa(),e),Yf=["innerHTML"],Zf={style:{height:"95%"}},Xf={class:"tab-content",style:{height:"100%"}},Qf={class:"row"},eh={class:"form-group mb-3 col-md-3 has-feedback"},th={class:"form-group mb-3 col-md-9 text-right asd"},nh={class:"radio-inline",style:{"margin-left":"1rem"}},ah={class:"radio-inline"},lh={class:"row",id:"pcapDownloadModal_advanced",style:{}},sh={class:"form-group mb-3 col-md-12 has-feedback"},ih=Jf((()=>Vs("br",null,null,-1))),oh={class:"form-label"},rh=Jf((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),ch={class:"input-group"},uh=Jf((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),dh=Jf((()=>Vs("br",null,null,-1))),ph={class:"form-label"},_h=Jf((()=>Vs("br",null,null,-1))),fh=Jf((()=>Vs("ul",null,[Vs("li",null,[Ws("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ws("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ws("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ws("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));fp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),Kf.render=function(e,t,n,a,l,s){const i=xl("modal");return Es(),Fs(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:ma((()=>[Ws(ee(e.i18n("traffic_recording.pcap_extract")),1)])),body:ma((()=>[Vs("div",{class:"alert alert-info",innerHTML:e.description},null,8,Yf),Vs("form",Zf,[Vs("div",Xf,[Vs("div",Qf,[Vs("div",eh,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ws(ee(e.i18n("advanced")),1),Vs("i",{class:W({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",th,[Vs("label",nh,[yl(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Do,e.extract_now]]),Ws(" "+ee(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",ah,[yl(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Do,e.extract_now]]),Ws(" "+ee(e.i18n("traffic_recording.queue_as_job")),1)])])]),yl(Vs("div",lh,[Vs("div",sh,[ih,Vs("label",oh,[Ws(ee(e.i18n("traffic_recording.filter_bpf"))+" ",1),rh]),Vs("div",ch,[uh,yl(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Io,e.bpf_filter]]),yl(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},ee(e.i18n("invalid_value")),513),[[Jo,e.invalid_bpf]])]),dh,Vs("label",ph,ee(e.i18n("traffic_recording.filter_examples"))+":",1),_h,fh])],512),[[Jo,e.show_menu]])])])])),footer:ma((()=>[Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},ee(e.i18n("apply")),1)])),_:1},8,["id","onApply"])},Kf.__scopeId="data-v-0be978c4",Kf.__file="http_src/vue/modal-traffic-extraction.vue";const hh={class:"form-group mt-2 row"},mh={class:"col-form-label col-sm-4"},gh={class:"col-sm-6"},vh={class:"col-form-label col-sm-2"},bh=["disabled"];var yh={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn(""),i=String.raw`^[^~${"`"}!@#$%^&*|+-=?;:'"\\,.<>\/{}()\[\]\s]+$`,o=yi((()=>new RegExp(i).test(s.value)));function r(){let e=`${s.value}.${a.ext}`;n("download",e),c()}const c=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=(e=e.replaceAll(/[-=?;:\s]/g,"_")).replaceAll(/[`~!@#$%^&*|+-=?;:'",\.<>\s\/{}\[\]()]/g,""),s.value=e,l.value.show()},close:c}),dl((()=>{}));const u=e=>i18n(e);return(e,t)=>(Es(),Fs(hp,{ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(a.title),1)])),body:ma((()=>[Vs("div",hh,[Vs("label",mh,[Vs("b",null,ee(u("modal_download_file.filename"))+":",1)]),Vs("div",gh,[yl(Vs("input",{class:"form-control",required:"",pattern:i,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",placeholder:""},null,512),[[Io,s.value]])]),Vs("label",vh," ."+ee(a.ext),1)])])),footer:ma((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==yn(o)},ee(u("modal_download_file.download")),9,bh)])),_:1},512))}};fp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),yh.__scopeId="data-v-59120eb8",yh.__file="http_src/vue/modal-download-file.vue";var wh=Ja({components:{},props:{id:String,global:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const xh=["innerHTML"];wh.render=function(e,t,n,a,l,s){return 1==e.show_alert?(Es(),Us("div",{key:0,style:{width:"100%"},class:W(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,xh),Vs("button",{type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"})],2)):Js("v-if",!0)},wh.__file="http_src/vue/alert-info.vue";const kh={class:"text-center"},$h=Vs("tbody",null,null,-1);var Sh={__name:"datatable",props:{table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},setup(e,{expose:t}){const n=e;let a=n.base_params;const l=hn(null);let s=null;dl((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:n.enable_search,order:[[0,"asc"]],pagingType:"full_numbers",columnDefs:n.columns_config,columns:n.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:n.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const n=t.oInstance.api(),a=e.order[0].column,l=n.column(a).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=l),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED)}};for(const e in n.table_config||{})t[e]=n.table_config[e];let o=DataTableUtils.getStdDatatableConfig(n.table_buttons);o=DataTableUtils.extendConfig(o,t),s=$(l.value).DataTable(o);for(const t of n.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let n=0;t.filters.forEach((e=>{e.currently_active=!1,n+=1,e.id==a&&(e.currently_active=!0,n-=1)})),n==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:s,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:n.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&n.base_params){const e=x.get_url_entries();for(const[t,n]of e)a[t]=n;s.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),i()}}()}));const i=()=>{null!=s&&s.ajax.reload()},o=e=>{DataTableUtils.deleteButtonHandlers(e)};let r=!1;const c=()=>{s.clear(),s.destroy(!0),r=!0,n.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{o(e.handlerId)}))};return t({reload:i,delete_button_handlers:o,destroy_table:c,update_url:e=>{null!=s&&s.ajax.url(e)}}),fl((()=>{1!=r&&c()})),(t,n)=>(Es(),Us("div",null,[Vs("table",{ref_key:"table_id",ref:l,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Es(!0),Us($s,null,Al(e.columns_config,(e=>(Es(),Us("th",kh,ee(e.columnName),1)))),256))])]),$h],512)]))},__file:"http_src/vue/datatable.vue"};const Ch={class:"table table-hover table-borderless mb-0"},Nh=["innerHTML"],Ah=["innerHTML"];var Th={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function},setup:e=>(t,n)=>(Es(),Us("table",Ch,[Vs("thead",null,[Vs("tr",null,[(Es(!0),Us($s,null,Al(e.columns,(t=>(Es(),Us("th",{scope:"col",innerHTML:e.print_html_column(t)},null,8,Nh)))),256))])]),Vs("tbody",null,[(Es(!0),Us($s,null,Al(e.rows,(t=>(Es(),Us("tr",null,[(Es(!0),Us($s,null,Al(e.columns,(n=>(Es(),Us("td",{scope:"col",innerHTML:e.print_html_row(n,t)},null,8,Ah)))),256))])))),256))])])),__file:"http_src/vue/bootstrap-table.vue"};const Eh=e=>(_a("data-v-937058e4"),e=e(),fa(),e),Ph={class:"col-12 mb-2 mt-2"},Mh={class:"card h-100 overflow-hidden"},Oh=["title"],Ih=[Eh((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Uh=["title"],Fh=[Eh((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],Dh=["title"],jh=[Eh((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Lh=["title"],Rh=[Eh((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],zh={class:"form-group ms-1 me-1 mt-1"},Bh={class:"inline select2-size me-2 mt-2"},Vh={class:"inline select2-size me-2 mt-2"},qh={key:0,class:"mt-4 card card-shadow"},Hh={class:"card-body"},Gh={key:1,class:"mt-4 card card-shadow"},Wh={class:"card-body"},Kh={key:0,class:"inline select2-size me-2 mt-2"};var Jh={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e;b.check_and_set_default_interval_time();const a=e=>i18n(e);let l="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;hn({}),hn(!1);const i=hn([]),o=hn(null),r=hn(null),c=hn(null),u=hn(null),d=hn(null),p=hn([]),_=hn({});af.get_current_page_source_type();const f=hn(!1);hn(!1);const m=hn([]),g=b.object_to_array(bf.groupsOptionsModesEnum),v=hn(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return bf.getGroupOptionMode(e);return g[0]}());let w=null;const k={label:i18n("page_stats.custom_metrics"),currently_active:!1},$="timeseries",S=hn(!1);ul((async()=>{!function(){if(null==t.source_value_object)return;let e=af.get_current_page_source_type();af.set_source_value_object_in_url(e,t.source_value_object)}()})),dl((async()=>{!async function(){let e,t,n=!0,a=await af.get_timeseries_groups_from_url(http_prefix);if(null==a){n=!1,e=x.get_url_entry("ts_schema");let l=x.get_url_entry("ts_query");null!=l&&""!=l&&(t=af.get_metric_query_from_ts_query(l)),""==e&&(e=null),a=await af.get_default_timeseries_groups(http_prefix,e,t)}p.value=await C(n),_.value=1==n?k:af.get_default_metric(p.value,e,t);S.value=!0,await V(a,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(l)])}));async function C(e,a){if(!a&&null==e)return l.value;let l=await af.get_metrics(http_prefix);if(e&&l.push(k),(null==j||a)&&(j=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${$}`,n=await b.http_request(e),a=b.object_to_array(n).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return a}()),t.enable_snapshots){j.forEach((e=>l.push(e)))}return l.sort(n.sortAlphabetically),l}async function N(e){let t=af.get_current_page_source_type(),n=await af.get_default_source_array(http_prefix,t);return[af.get_ts_group(t,n,e)]}const A=async(e,t,n)=>{let a=af.get_source_type_from_id(e),l=await af.get_source_array_from_value_dict(http_prefix,a,t),s=await af.get_metric_from_schema(http_prefix,a,l,n);E(af.get_ts_group(a,l,s))},T=async(e,t)=>{let n=p.value.find((n=>n.schema==e&&n.query==t));null!=n?E((await N(n))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function E(e){c.value.set_timeseries_groups(w),c.value.add_ts_group(e,!0)}async function P(e){if(1==e.is_snapshot){let t=e.filters,n=x.get_url_entry("timeseries_groups",t),a=await af.get_timeseries_groups_from_url(http_prefix,n);v.value=bf.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await V(a,!0,!1)}else await async function(){let e=await async function(){return N(_.value)}();await V(e,!0,!1)}(),R(!1)}function M(e){let n=_.value.label==k.label;V(w,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=G.value?.table_config_def;if(null==e)return;let n=q(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(n),r.value.reload()}(),R(n,!0)}function O(e){}function I(){u.value.show()}function U(){null!=w&&c.value.show(w)}function F(e){return async t=>m.value[e].chart_options}let D,j=null;function L(){R(_.value.label==k.label,!0)}async function R(e,t){p.value=await C(e,t),e&&(_.value=k)}async function z(e){R(!0),await V(e,!0,!0)}function B(){V(w,!1,!1)}async function V(e,n,a,l){let s=y.get_status(),o=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);n&&(D=await bf.getTsChartsOptions(http_prefix,s,o,e,t.is_ntop_pro)),function(e,t){e.forEach(((e,n)=>{let a=t[n],l=a?.query?.label;if(null!=l){let t=bf.getMainSourceDefIndex(e);e.source_array[t].label=l}}))}(e,D);let r=bf.tsArrayToApexOptionsArray(D,e,v.value,o);l?function(e){e.forEach(((e,t)=>{i.value[t].update_chart_series(e?.series)}))}(r):function(e){m.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,n){let a=!0;if(f.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!f.value)return;const l=e=>"bps"==e?"bytes":e;K.value=[],e.forEach(((e,s)=>{let i=t[s];1!=i.source_type.disable_stats&&e.series.forEach(((t,s)=>{let o,r=bf.getSerieId(t),c=i.metric.timeseries[r],u=h.getFormatter(i.metric.measure_unit);if("top"==i.metric.type?o=e.statistics:e?.statistics?.by_serie?.length>s&&(o=e.statistics.by_serie[s]),null==o||"top"==i.metric.type&&s>0)return;let d=bf.getSerieName(c.label,r,i,a),p=l(i.metric.measure_unit),_=h.getFormatter(p);if(null!=o.total){n.epoch_end,n.epoch_begin;o.average}let f={metric:d,total:_(o.total),perc_95:u(o["95th_percentile"]),avg:u(o.average),max:u(o.max_val),min:u(o.min_val)};K.value.push(f)}))}))}(D,e,s),a&&function(e,n){if(!t.is_ntop_pro)return;null==e&&(e=w);null==n&&(n=y.get_status());let a=af.sources_types_tables,l={};e.forEach((e=>{e.source_type;let t=af.get_ts_group_id(e.source_type,e.source_array);l[t]=e}));let s={};H.value=[];for(let e in l){let i=l[e],o=bf.getMainSourceDefIndex(i),r=i.source_array[o],c=i.source_type,u=a[c.id];null!=u&&u.forEach((e=>{let a=t.sources_types_top_enabled[e.table_value];if(null==a)return;if(!a[e.view])return;let l=e.table_source_def_value_dict,o=q(i,e.table_value,e.view,l,n),u=af.get_ts_group_id(i.source_type,i.source_array,null,l,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,p=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(i);const _={ts_group:i,table_def:e,table_buttons:[],data_url:o,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};_.columns_config=e.columns.map((e=>{let a={is_history_enabled:t.is_history_enabled},l={visible:!e.render_if||e.render_if(a),...e};return null==l.className&&(l.className="text-nowrap"),null==l.responsivePriority&&(l.responsivePriority=1),l.render=e.render.bind({add_metric_from_metric_schema:T,add_ts_group_from_source_value_dict:A,sources_types_enabled:t.sources_types_enabled,status:n,source_type:c,source_array:i.source_array}),l}));let f={value:p,label:d,table_config_def:_};H.value.push(f)}))}if(null!=G.value&&H.value.find((e=>e.value==G.value.value)))return;G.value=H.value.find((e=>1==e.table_config_def.default)),null==G.value&&(G.value=H.value[0])}(e,s),w=e,x.set_key_to_url("timeseries_groups_mode",v.value.value),af.set_timeseries_groups_in_url(w)}function q(e,t,n,a,l){null==l&&(l=y.get_status());let s=bf.getTsQuery(e,!0,a),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,o={zoom:"5m",ts_query:s,epoch_begin:`${l.epoch_begin}`,epoch_end:`${l.epoch_end}`,detail_view:`${n}`,new_charts:"true"};return`${i}?${x.add_obj_to_url(o,"")}`}const H=hn([]),G=hn({});let W=[{id:"metric",label:a("page_stats.metric")},{id:"avg",label:a("page_stats.average")},{id:"perc_95",label:a("page_stats.95_perc")},{id:"max",label:a("page_stats.max")},{id:"min",label:a("page_stats.min")},{id:"total",label:a("page_stats.total")}];const K=hn([]);function J(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},n=x.obj_to_url_params(t);const a=`${http_prefix}/lua/pro/db_search.lua?${n}`;x.go_to_url(a)}const Y=hn(null);function Z(){Y.value.show()}function X(){if(!D?.length)return;let e=w[0],t=bf.getSerieName(null,null,e);d.value.show(t)}async function Q(e){let t=i.value.map((async e=>{let t=await e.get_data_uri();return new Promise(((e,n)=>{let a=new Image;a.src=t,a.onload=function(){e(a)}}))})),n=0,a=await Promise.all(t);a.forEach((e=>{n+=e.height}));let l=document.createElement("canvas"),s=l.getContext("2d");l.width=a[0].width,l.height=n,n=0,a.forEach((e=>{s.drawImage(e,0,n,e.width,e.height),n+=e.height})),b.download_URI(l.toDataURL(),e)}return(t,n)=>(Es(),Us($s,null,[Vs("div",Ph,[qs(wh),Vs("div",Mh,[qs(Rd,{style:{"margin-top":"0.5rem"},id:yn(l),enable_refresh:!0,ref_key:"date_time_picker",ref:o,onEpoch_change:M},{begin:ma((()=>[])),extra_buttons:ma((()=>[e.enable_snapshots?(Es(),Us("button",{key:0,class:"btn btn-link btn-sm",onClick:I,title:a("page_stats.manage_snapshots_btn")},Ih,8,Oh)):Js("v-if",!0),e.traffic_extraction_permitted?(Es(),Us("button",{key:1,class:"btn btn-link btn-sm",onClick:Z,title:a("traffic_recording.pcap_download")},Fh,8,Uh)):Js("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",onClick:X,title:a("page_stats.title_modal_download_file")},jh,8,Dh),e.is_history_enabled?(Es(),Us("button",{key:2,class:"btn btn-link btn-sm",onClick:J,title:a("page_stats.historical_flows")},Rh,8,Lh)):Js("v-if",!0)])),_:1},8,["id"]),Js(" select metric "),yl(Vs("div",zh,[Vs("div",Bh,[qs(Ld,{selected_option:_.value,"onUpdate:selected_option":n[0]||(n[0]=e=>_.value=e),options:p.value,onSelect_option:P},null,8,["selected_option","options"])]),Vs("div",Vh,[qs(Ld,{selected_option:v.value,"onUpdate:selected_option":n[1]||(n[1]=e=>v.value=e),options:yn(g),onSelect_option:B},null,8,["selected_option","options"])]),e.is_ntop_pro?(Es(),Us("button",{key:0,type:"button",onClick:U,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Js("v-if",!0)],512),[[Jo,S.value]]),(Es(!0),Us($s,null,Al(m.value,((e,t)=>(Es(),Us("div",{key:e.key,class:"m-3",style:{height:"300px"}},[qs(Id,{id:yn("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:yn(s),register_on_status_change:!1,get_custom_chart_options:F(t),onZoom:M,onChart_reloaded:O},null,8,["id","chart_type","get_custom_chart_options"])])))),128))]),f.value?(Es(),Us("div",qh,[Vs("div",Hh,[qs(Th,{id:"page_stats_bootstrap_table",columns:yn(W),rows:K.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Js("v-if",!0),e.is_ntop_pro?(Es(),Us("div",Gh,[Vs("div",Wh,[G.value?.table_config_def?(Es(),Us("div",Kh,[qs(Ld,{selected_option:G.value,"onUpdate:selected_option":n[2]||(n[2]=e=>G.value=e),options:H.value},null,8,["selected_option","options"])])):Js("v-if",!0),G.value?.table_config_def?(Es(),Fs(Sh,{key:G.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:G.value.table_config_def.table_button,columns_config:G.value.table_config_def.columns_config,data_url:G.value.table_config_def.data_url,enable_search:G.value.table_config_def.enable_search,table_config:G.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])):Js("v-if",!0)]),e.enable_snapshots?(Es(),Fs(Yp,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:$,onAdded_snapshot:L,onDeleted_snapshots:L,onDeleted_all_snapshots:L},null,8,["csrf"])):Js("v-if",!0),e.is_ntop_pro?(Es(),Fs(Wf,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:z},null,8,["sources_types_enabled"])):Js("v-if",!0),qs(Kf,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Y},null,512),qs(yh,{ref_key:"modal_download_file",ref:d,title:a("page_stats.title_modal_download_file"),ext:"png",onDownload:Q},null,8,["title"])],64))}};fp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Jh.__scopeId="data-v-937058e4",Jh.__file="http_src/vue/page-stats.vue";var Yh=Ja({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const Zh={class:"card-header mb-2"},Xh={class:"nav nav-tabs card-header-tabs",role:"tablist"},Qh=["onClick"],em=["onClick"];Yh.render=function(e,t,n,a,l,s){return Es(),Us("div",Zh,[Vs("ul",Xh,[(Es(!0),Us($s,null,Al(e.tab_list,(t=>(Es(),Us($s,null,[t.active?(Es(),Us("li",{key:0,onClick:n=>e.change_tab(t),class:W([{active:t.active},"nav-item nav-link"])},ee(t.title),11,Qh)):(Es(),Us("a",{key:1,onClick:n=>e.change_tab(t),href:"#",class:"nav-item nav-link"},ee(t.title),9,em))],64)))),256))])])},Yh.__file="http_src/vue/tab-list.vue";var tm={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete"],setup(e,{expose:t,emit:n}){const a=hn(null),l=()=>{n("delete"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),dl((()=>{}));const i=e=>i18n(e);return(t,n)=>(Es(),Fs(hp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Ws(ee(e.body),1)])),footer:ma((()=>[Vs("button",{type:"button",onClick:l,class:"btn btn-danger"},ee(i("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const nm="change_asset_table_tab_event";var am={components:{datatable:Sh,"modal-delete-confirm":tm,"tab-list":Yh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){this.asset_table_tab=x.get_url_entry("view")||"centrality",this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),x.set_key_to_url("asset_family",this.$props.url_params.asset_family),function(e){const t=[];let n=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let a=url_params;a.view="standard";let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,l)=>{a.view=e.asset_table_tab,a[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);n=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(l);i.table_config={serverSide:!1,order:[[3,"desc"]]},i.columns_config=n,i.table_filters=s,e.config_devices_standard=i,a.view="centrality",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(l);o.table_config={serverSide:!1,order:[[1,"desc"]]},o.columns_config=n,o.table_filters=s,console.log(i),console.log(o),e.config_devices_centrality=o}(this)},mounted(){C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",nm,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(nm,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const lm={class:"row"},sm={class:"col-md-12 col-lg-12"},im=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),om={class:"card"},rm=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),cm={class:"card-body"},um={id:"table_asset"},dm={class:"card-footer"},pm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},_m=Vs("i",{class:"fas fa-trash"},null,-1),fm=["href"],hm=[Vs("i",{class:"fas fa-download"},null,-1)];am.render=function(e,t,n,a,l,s){const i=xl("modal-delete-confirm"),o=xl("tab-list"),r=xl("datatable");return Es(),Us("div",lm,[Vs("div",sm,[im,Vs("div",om,[rm,Vs("div",cm,[Vs("div",um,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.asset_table_tab?(Es(),Fs(r,{key:0,ref:"table_asset_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters},{default:ma((()=>[Ws(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0),"centrality"==l.asset_table_tab?(Es(),Fs(r,{key:1,ref:"table_asset_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters},{default:ma((()=>[Ws(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0)])]),Vs("div",dm,[Vs("button",pm,[_m,Ws(" "+ee(l.i18n("map_page.delete_assets")),1)]),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},hm,8,fm)])])])])},am.__file="http_src/vue/page-asset-table.vue";var mm={components:{datatable:Sh,"modal-delete-confirm":tm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=ntopng_utility.clone(url_params);l.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,n)=>{l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,n)=>"sort"==t||"type"==t?e:e+" sec"}],a=6;let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const gm={class:"row"},vm={class:"col-md-12 col-lg-12"},bm=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),ym={class:"card"},wm=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),xm={class:"card-body"},km={id:"periodicity-table"},$m={class:"card-footer"},Sm={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Cm=Vs("i",{class:"fas fa-trash"},null,-1),Nm=["href"],Am=[Vs("i",{class:"fas fa-download"},null,-1)];mm.render=function(e,t,n,a,l,s){const i=xl("modal-delete-confirm"),o=xl("datatable");return Es(),Us("div",gm,[Vs("div",vm,[bm,Vs("div",ym,[wm,Vs("div",xm,[Vs("div",km,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"table_periodicity",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config,base_url:l.base_url,base_params:n.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",$m,[n.is_admin?(Es(),Us("button",Sm,[Cm,Ws(" "+ee(l.i18n("map_page.delete_services")),1)])):Js("v-if",!0),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Am,8,Nm)])])])])},mm.__file="http_src/vue/page-periodicity-table.vue";const Tm={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{tooltipDelay:150,hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}}}},Em=function(e,t,n,a){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:a}).then((e=>{e.success&&n&&n()}))},Pm=function(){return Tm},Mm="change_service_table_tab_event";var Om={components:{datatable:Sh,"modal-delete-confirm":tm,"tab-list":Yh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"centrality",this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=url_params;l.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,a)=>{l.view=e.service_table_tab,l[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],a=6,e.is_admin&&n.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,n,a)=>e.create_action_buttons(t,n,a)});let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r,l.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],a=2,o.order=[[a,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_centrality=r}(this)},mounted(){C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",Mm,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(Mm,e.id)},create_action_buttons:function(e,t,n){const a=this.reload_table,l=this.$props.page_csrf,s={onClick:()=>{Em(n.hash_id,this.$props.service_acceptance[0].id,a,l)}},i={onClick:()=>{Em(n.hash_id,this.$props.service_acceptance[1].id,a,l)}},o={onClick:()=>{Em(n.hash_id,this.$props.service_acceptance[2].id,a,l)}};if("display"!==t)return e;const r=n.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:o};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Im={class:"row"},Um={class:"col-md-12 col-lg-12"},Fm=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Dm={class:"card"},jm=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Lm={class:"card-body"},Rm={id:"table_service"},zm={class:"card-footer"},Bm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Vm=Vs("i",{class:"fas fa-trash"},null,-1),qm=["href"],Hm=[Vs("i",{class:"fas fa-download"},null,-1)];Om.render=function(e,t,n,a,l,s){const i=xl("modal-delete-confirm"),o=xl("tab-list"),r=xl("datatable");return Es(),Us("div",Im,[Vs("div",Um,[Fm,Vs("div",Dm,[jm,Vs("div",Lm,[Vs("div",Rm,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"service_tab_list",id:"service_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.service_table_tab?(Es(),Fs(r,{key:0,ref:"table_service_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0),"centrality"==l.service_table_tab?(Es(),Fs(r,{key:1,ref:"table_service_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters,table_config:l.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0)])]),Vs("div",zm,[Js('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Bm,[Vm,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Hm,8,qm)])])])])},Om.__file="http_src/vue/page-service-table.vue";const Gm={id:"empty-map-message",class:"alert alert-info",hidden:""},Wm=["id"];var Km={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const n=e,a={ifid:n.url_params.ifid,action:"load_graph",map:n.url_params.map_id};let l=null,s={},i={},o=null,r=!1,c=null,u={},d=!1;dl((async()=>{_(),u=n.url_params,o=document.getElementById(n.map_id);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const c={nodes:s,edges:i};p(c),l=new vis.Network(o,c,Pm()),h(),f(),C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}))})),fl((()=>{1!=d&&v()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},_=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},f=()=>{l.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),l.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],x.set_key_to_url("host",u.host),x.set_key_to_url("vlan_id",u.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),b()})(s.get(e.nodes[0]))})),l.on("zoom",(function(e){c=m()})),l.on("dragEnd",(function(e){g()}));for(const e in n.event_listeners||{})l.on(e,n.event_listeners[e])},h=()=>{if(!l)return;const e=l.getPositions(l.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:l.getScale(),position:l.getViewPosition()}};$.post(n.url,{...u,csrf:n.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},m=()=>(l.getScale()<=.15&&l.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(h)),g=()=>{c&&clearTimeout(c),h()},v=()=>{l.destroy(!0),d=!0},b=async()=>{console.log(u);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const o={nodes:s,edges:i};p(o),l&&l.setData(o),C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED),h()}))};return t({reload:b,destroy:v,is_max_entry_reached:()=>r,autolayout:()=>{void 0!==l?l instanceof vis.Network?(l.stabilize(),setTimeout((()=>{h()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{u=e}}),(t,n)=>(Es(),Us($s,null,[Vs("div",Gm,ee(e.empty_message),1),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Wm)],64))},__file:"http_src/vue/network-map.vue"},Jm={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:n}){const a=hn(null),l=()=>{n("autolayout"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),dl((()=>{}));const i=e=>i18n(e);return(t,n)=>(Es(),Fs(hp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Ws(ee(e.body),1)])),footer:ma((()=>[Vs("button",{type:"button",onClick:l,class:"btn btn-primary"},ee(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Ym="change_filter_event";var Zm={components:{"network-map":Km,"modal-delete-confirm":tm,"modal-autolayout-confirm":Jm,"select-search":Ld},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Ym,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=ntopng_url_manager.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Ym,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Xm={class:"row"},Qm={class:"col-md-12 col-lg-12"},eg={class:"card card-shadow"},tg=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ng={class:"card-body"},ag={id:"table_service"},lg={class:"d-flex align-items-center justify-content-end mb-2"},sg=["title"],ig=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],og={class:"d-flex ms-auto"},rg={class:"m-1"},cg=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),ug=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),dg={class:"card-footer"},pg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},_g=Vs("i",{class:"fas fa-trash"},null,-1),fg=["href"],hg=[Vs("i",{class:"fas fa-download"},null,-1)];Zm.render=function(e,t,n,a,l,s){const i=xl("select-search"),o=xl("modal-delete-confirm"),r=xl("modal-autolayout-confirm"),c=xl("network-map");return Es(),Us("div",Xm,[Vs("div",Qm,[Vs("div",eg,[tg,Vs("div",ng,[Vs("div",ag,[Vs("div",lg,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},ig,8,sg),Vs("div",og,[(Es(!0),Us($s,null,Al(l.filter_list,((e,t)=>(Es(),Us("div",rg,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),cg,ug]),qs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"service_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",dg,[Vs("button",pg,[_g,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},hg,8,fg)])])])])},Zm.__file="http_src/vue/page-service-map.vue";const mg="change_filter_event";var gg={components:{"network-map":Km,"modal-delete-confirm":tm,"modal-autolayout-confirm":Jm,"select-search":Ld},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,n]of e)this.updated_url_params[t]=n;const t=this.max_entry_reached,n=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",mg,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")})),$("#reload-graph").click((function(e){n()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(mg,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const vg={class:"row"},bg={class:"col-md-12 col-lg-12"},yg={class:"card card-shadow"},wg=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),xg={class:"card-body"},kg={id:"table_periodicity"},$g={class:"d-flex align-items-center justify-content-end mb-2"},Sg=["title"],Cg=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ng={class:"d-flex ms-auto"},Ag={class:"m-1"},Tg=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Eg=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Pg={class:"card-footer"},Mg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Og=Vs("i",{class:"fas fa-trash"},null,-1),Ig=["href"],Ug=[Vs("i",{class:"fas fa-download"},null,-1)];gg.render=function(e,t,n,a,l,s){const i=xl("select-search"),o=xl("modal-delete-confirm"),r=xl("modal-autolayout-confirm"),c=xl("network-map");return Es(),Us("div",vg,[Vs("div",bg,[Vs("div",yg,[wg,Vs("div",xg,[Vs("div",kg,[Vs("div",$g,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Cg,8,Sg),Vs("div",Ng,[(Es(!0),Us($s,null,Al(l.filter_list,((e,t)=>(Es(),Us("div",Ag,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Tg,Eg]),qs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"periodicity_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Pg,[Vs("button",Mg,[Og,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Ug,8,Ig)])])])])},gg.__file="http_src/vue/page-periodicity-map.vue";const Fg="change_filter_event";var Dg={components:{"network-map":Km,"modal-delete-confirm":tm,"modal-autolayout-confirm":Jm,"select-search":Ld},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=x.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Fg,(e=>{this.active_filter_list[e.id]=e,x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=x.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),NtopUtils.hideOverlays(),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Fg,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map(),NtopUtils.hideOverlays()}}}};const jg={class:"row"},Lg={class:"col-md-12 col-lg-12"},Rg={class:"card card-shadow"},zg=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Bg={class:"card-body"},Vg={id:"table_asset"},qg={class:"d-flex align-items-center justify-content-end mb-2"},Hg=["title"],Gg=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Wg={class:"d-flex ms-auto"},Kg={class:"m-1"},Jg=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Yg=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Zg={class:"card-footer"},Xg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Qg=Vs("i",{class:"fas fa-trash"},null,-1),ev=["href"],tv=[Vs("i",{class:"fas fa-download"},null,-1)];Dg.render=function(e,t,n,a,l,s){const i=xl("select-search"),o=xl("modal-delete-confirm"),r=xl("modal-autolayout-confirm"),c=xl("network-map");return Es(),Us("div",jg,[Vs("div",Lg,[Vs("div",Rg,[zg,Vs("div",Bg,[Vs("div",Vg,[Vs("div",qg,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Gg,8,Hg),Vs("div",Wg,[(Es(!0),Us($s,null,Al(l.filter_list,((e,t)=>(Es(),Us("div",Kg,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Jg,Yg]),qs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"asset_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Zg,[Vs("button",Xg,[Qg,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},tv,8,ev)])])])])},Dg.__file="http_src/vue/page-asset-map.vue";var nv=Ja({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const av={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},lv={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},sv=["href","title"],iv=["title"],ov=["href","title"],rv=["title"],cv=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),uv=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),dv={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},pv={class:"navbar-nav"},_v=["onClick"],fv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},hv=["onClick"],mv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},gv={class:"navbar-nav ms-auto"},vv=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),bv=["href"],yv=[Vs("i",{class:"fas fa-question-circle"},null,-1)];nv.render=function(e,t,n,a,l,s){return Es(),Us("nav",av,[Vs("span",lv,[Vs("i",{class:W(e.main_title.icon)},null,2),e.main_title.href?(Es(),Us("a",{key:0,href:e.main_title.href,title:e.main_title.title},ee(e.main_title.label),9,sv)):(Es(),Us("span",{key:1,title:e.main_title.title},ee(e.main_title.label),9,iv)),(Es(!0),Us($s,null,Al(e.secondary_title_list,(e=>(Es(),Us($s,null,[Ws(" / "),e.href?(Es(),Us("a",{key:0,href:e.href,title:e.title},ee(e.label),9,ov)):(Es(),Us("span",{key:1,title:e.title},ee(e.label),9,rv))],64)))),256))]),cv,uv,Vs("div",dv,[Vs("ul",pv,[(Es(!0),Us($s,null,Al(e.items_table,(e=>(Es(),Us($s,null,[e.active?(Es(),Us("li",{key:0,onClick:t=>this.$emit("click_item",e),class:W([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(Es(),Us("span",fv,ee(e.badge_num),1)):Js("v-if",!0),Vs("b",null,[Vs("i",{class:W(e.icon)},null,2),Ws(" "+ee(e.label),1)])],10,_v)):(Es(),Us("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(Es(),Us("span",mv,ee(e.badge_num),1)):Js("v-if",!0),Vs("i",{class:W(e.icon)},null,2),Ws(" "+ee(e.label),1)],8,hv))],64)))),256))]),Vs("ul",gv,[vv,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},yv,8,bv)])])])},nv.__file="http_src/vue/page-navbar.vue";const wv={class:"form-group mb-3 row"},xv={class:"col-form-label col-sm-4"},kv={class:"col-sm-7"},$v=Vs("div",{class:"invalid-feedback"},null,-1),Sv={class:"form-group mb-3 row"},Cv={class:"col-form-label col-sm-4 pt-2"},Nv={class:"form-switch col-sm-7 pt-2 ps-3"},Av={class:"col-form-label"};var Tv={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:n}){const a=hn(""),l=hn(""),s=hn(null),i=()=>{n("add",{mac_list:a.value,trigger_alerts:l.value}),o()},o=()=>{s.value.close()};t({show:()=>{a.value="",s.value.show()},close:o}),dl((()=>{}));const r=e=>i18n(e);return(t,n)=>(Es(),Fs(hp,{onShowed:n[2]||(n[2]=e=>{}),ref_key:"modal_id",ref:s},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Vs("div",wv,[Vs("label",xv,ee(e.body),1),Vs("div",kv,[yl(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Io,a.value]]),Vs("small",null,ee(e.list_notes),1),$v])]),Vs("div",Sv,[Vs("label",Cv,ee(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Nv,[yl(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},null,512),[[Uo,l.value]])]),Vs("small",Av,ee(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ma((()=>[Ws(ee(r("host_details.notes"))+": "+ee(e.footer)+" ",1),Vs("button",{type:"button",onClick:i,class:"btn btn-primary"},ee(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Ev={class:"form-group mb-3 row"},Pv={class:"col-form-label col-sm-4"},Mv={class:"col-sm-7"},Ov={class:"form-group mb-3 row"},Iv={class:"col-form-label col-sm-4"},Uv={class:"col-sm-7"},Fv={value:"allowed"},Dv={value:"denied"},jv={class:"form-group mb-3 row"},Lv={class:"col-form-label col-sm-4 pt-2"},Rv={class:"form-switch col-sm-7 pt-2 ps-3"},zv={class:"col-form-label"};var Bv={__name:"modal-edit-device-exclusion",props:{title:String},emits:["edit"],setup(e,{expose:t,emit:n}){const a=hn(""),l=hn(""),s=hn(""),i=hn(null),o=()=>{n("edit",{mac_alias:a.value,mac_status:l.value,trigger_alerts:s.value}),r()},r=()=>{i.value.close()};t({show:e=>{l.value=e.status,a.value=e.mac_address_label.label,s.value=e.trigger_alert||!1,i.value.show()},close:r}),dl((()=>{}));const c=e=>i18n(e);return(t,n)=>(Es(),Fs(hp,{onShowed:n[3]||(n[3]=e=>{}),ref_key:"modal_id",ref:i},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Vs("div",Ev,[Vs("label",Pv,ee(c("edit_check.device_alias")),1),Vs("div",Mv,[yl(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:"{{_i18n('custom_name')}}","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Io,a.value]])])]),Vs("div",Ov,[Vs("label",Iv,ee(c("edit_check.device_status")),1),Vs("div",Uv,[yl(Vs("select",{name:"device_status",class:"form-select","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},[Vs("option",Fv,ee(c("allowed")),1),Vs("option",Dv,ee(c("denied")),1)],512),[[jo,l.value]])])]),Vs("div",jv,[Vs("label",Lv,ee(c("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Rv,[yl(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Uo,s.value]])]),Vs("small",zv,ee(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ma((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-primary"},ee(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},Vv={components:{"page-navbar":nv,datatable:Sh,"modal-delete-confirm":tm,"modal-add-device-exclusion":Tv,"modal-edit-device-exclusion":Bv},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,n,a,l){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},a=ntopng_utility.clone(n);a.table_buttons=n.table_buttons,a.data_url=`${a.data_url}`,a.columns_config=[{sortable:!1,searchable:!1,visible:!1,data:"mac_address",type:"mac-address",responsivePriority:1},{columnName:i18n("edit_check.excluded_device"),data:"mac_address_label",type:"mac-address",className:"text-nowrap",sortable:!0,searchable:!0,createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,n){let a=e.label;return e.label!==e.mac&&(a=a+" ["+e.mac+"]"),e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a}},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,n,a){let l={handlerId:"delete_device",onClick:()=>{let n=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label.label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),n,t)}},s={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},i={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:i,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"btn-secondary",handler:s,icon:"fa-edit",title:i18n("edit"),class:"pointer"},{class:"btn-danger",handler:l,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])}}],e.config_devices=a}(this)},mounted(){this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,""),e.csrf=this.$props.page_csrf,e.mac=t.mac_address;let n=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(n,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,n){this.row_to_delete=n,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const qv={id:"navbar"},Hv={class:"row"},Gv={class:"col-md-12 col-lg-12"},Wv=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Kv={class:"card"},Jv={class:"card-body"},Yv={id:"devices-learning-status",class:"alert alert-info",hidden:""},Zv={id:"table_devices_vue"},Xv={class:"card-footer"},Qv={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger"},eb=Vs("i",{class:"fas fa-trash"},null,-1);Vv.render=function(e,t,n,a,l,s){const i=xl("page-navbar"),o=xl("modal-delete-confirm"),r=xl("modal-add-device-exclusion"),c=xl("modal-edit-device-exclusion"),u=xl("datatable");return Es(),Us($s,null,[Vs("div",qv,[qs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,base_url:l.navbar_context.base_url,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),Vs("div",Hv,[Vs("div",Gv,[Wv,Vs("div",Kv,[Vs("div",Jv,[Vs("div",Yv,ee(l.learning_message),1),Vs("div",Zv,[qs(o,{ref:"modal_delete_confirm",title:l.title_delete,body:l.body_delete,onDelete:s.delete_row},null,8,["title","body","onDelete"]),qs(o,{ref:"modal_delete_all",title:l.title_delete_all,body:l.body_delete_all,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_add_device",title:l.title_add,body:l.body_add,footer:l.footer_add,list_notes:l.list_notes_add,onAdd:s.add_device},null,8,["title","body","footer","list_notes","onAdd"]),qs(c,{ref:"modal_edit_device",title:l.title_edit,onEdit:s.edit_row},null,8,["title","onEdit"]),qs(u,{ref:"table_devices_exclusion",table_buttons:l.config_devices.table_buttons,columns_config:l.config_devices.columns_config,data_url:l.config_devices.data_url,enable_search:l.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),Vs("div",Xv,[Vs("button",Qv,[eb,Ws(" "+ee(l.i18n("edit_check.delete_all_device_exclusions")),1)])])])])])],64)},Vv.__file="http_src/vue/page-device-exclusions.vue";var tb={components:{datatable:Sh},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const nb={class:"row"},ab={class:"col-md-12 col-lg-12"},lb=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),sb={class:"card"},ib={class:"card-body"},ob={id:"table_host_tls"},rb={class:"card-footer"};tb.render=function(e,t,n,a,l,s){const i=xl("datatable");return Es(),Us("div",nb,[Vs("div",ab,[lb,Vs("div",sb,[Vs("div",ib,[Vs("div",ob,[qs(i,{ref:"table_fingerprint",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",rb,[Vs("b",null,ee(l.i18n("fingerprint_note")),1)])])])])},tb.__file="http_src/vue/page-host-tls.vue";var cb={components:{datatable:Sh},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const ub={class:"row"},db={class:"col-md-12 col-lg-12"},pb=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),_b={class:"card"},fb={class:"card-body"},hb={id:"table_host_ssh"};cb.render=function(e,t,n,a,l,s){const i=xl("datatable");return Es(),Us("div",ub,[Vs("div",db,[pb,Vs("div",_b,[Vs("div",fb,[Vs("div",hb,[qs(i,{ref:"table_hassh",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},cb.__file="http_src/vue/page-host-ssh.vue";const mb="change_map_event";var gb={components:{"page-periodicity-map":gg,"page-periodicity-table":mm,"page-asset-map":Dg,"page-asset-table":am,"page-service-map":Zm,"page-service-table":Om,"page-navbar":nv},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",mb,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id&&(this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:NtopUtils.shortenLabel(`${e.selected_host.label}`,16,"."),title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${e.selected_host.id}`:null,target_blank:"true"}))},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(mb,e))}}};gb.render=function(e,t,n,a,l,s){const i=xl("page-navbar"),o=xl("page-service-map"),r=xl("page-service-table"),c=xl("page-periodicity-map"),u=xl("page-periodicity-table"),d=xl("page-asset-map"),p=xl("page-asset-table");return Es(),Us($s,null,[qs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,secondary_title_list:l.navbar_context.secondary_title_list,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==l.active_tab&&"graph"==l.page?(Es(),Fs(o,{key:0,ref:"service_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"service_map"==l.active_tab&&"table"==l.page?(Es(),Fs(r,{key:1,ref:"service_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.service_table_filter_list,is_admin:n.is_admin,service_acceptance:n.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Js("v-if",!0),"periodicity_map"==l.active_tab&&"graph"==l.page?(Es(),Fs(c,{key:2,ref:"periodicity_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"periodicity_map"==l.active_tab&&"table"==l.page?(Es(),Fs(u,{key:3,ref:"periodicity_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.periodicity_table_filter_list,is_admin:n.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Js("v-if",!0),n.asset_map_filter_list&&n.asset_table_filter_list?(Es(),Us($s,{key:4},["asset_map"==l.active_tab&&"graph"==l.page?(Es(),Fs(d,{key:0,ref:"asset_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"asset_map"==l.active_tab&&"table"==l.page?(Es(),Fs(p,{key:1,ref:"asset_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Js("v-if",!0)],64)):Js("v-if",!0)],64)},gb.__file="http_src/vue/page-home-map.vue";const vb=["width","height"],bb=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var yb={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,n=d3v7,a=hn(null),l=hn({});return ul((async()=>{})),dl((async()=>{!async function(){const e=n.scaleOrdinal(n.schemeCategory10);let s=await async function(){let e={nodes:[{index:0,name:"Liikevaihto",hours:"100%"},{index:1,name:"Kiinteät kulut",hours:"85%"},{index:2,name:"Muuttuvat kulut",hours:"3:00"},{index:3,name:"Palkkakulut",hours:"1:20"},{index:4,name:"Muut kiinte",hours:"1:40"},{index:5,name:"Kate",hours:"1:40"}],links:[{source:0,target:1,value:75,hours:"+1:00"},{source:0,target:2,value:10,hours:"+2:00"},{source:1,target:3,value:69,hours:"+1:20"},{source:1,target:4,value:6,hours:"+1:40"},{source:0,target:5,value:15,hours:"+1:40"}]};e=function(e){let t=[],n=[],a={};const l=(e,n,l)=>{if(null!=a[e])return;let s=t.length;a[e]=s;let i={index:s,name:e,href:n,color:l};t.push(i)},s=(e,t,l,s)=>{let i={source:a[e],target:a[t],value:l,label:s};n.push(i)};return e.forEach((e=>{l(e.source,e.source_link,e.source_color),l(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:n}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]);return e}();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let n=t.height;null==n&&(n=window.innerHeight-50);return{width:e,height:n}}();l.value=i;const{links:o,nodes:r}=function(e,t,a){return n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,a]])(e)}(s,i.width-10,i.height-5);n.select(a.value).select("g.nodes").selectAll("rect").data(r).join((t=>{const a=t.append("rect");a.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),a.transition(n.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/r.length))),a.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(n.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/r.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),n.select(a.value).select("g.texts").selectAll("text").data(r).join((t=>{t.append("text").transition(n.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>n.rgb(e(t.index/r.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(n.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>n.rgb(e(t.index/r.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove())),n.select(a.value).select("defs").selectAll("linearGradient").data(o).join((t=>{const n=t.append("linearGradient");n.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),n.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/r.length))),n.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/r.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/r.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/r.length)))}),(e=>e.remove())),n.select(a.value).select("g.links").selectAll("path").data(o).join((e=>{const t=e.append("path");t.transition(n.easeLinear).delay(1e3).duration(500).attr("d",n.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(n.easeLinear).delay(500).duration(500).attr("d",n.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Es(),Us("div",null,[(Es(),Us("svg",{ref_key:"sankey_chart_ref",ref:a,width:l.value.width,height:l.value.height,style:{margin:"10px"}},bb,8,vb))]))}};fp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),yb.__file="http_src/vue/page-sankey.vue";const wb="change_applications_tab_event";var xb={components:{chart:Id,datatable:Sh,"modal-delete-confirm":tm,"tab-list":Yh},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n=url_params;n.view="applications";let a={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},l=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.tot_bytes,l=100*n.bytes_rcvd/n.tot_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(l,"l7proto","application");let s=ntopng_utility.clone(a);s.columns_config=l,e.config_devices_applications=s,n.view="categories",a.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),l=[{columnName:i18n("host_details.category"),targets:0,width:"20",name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.applications"),targets:0,width:"20",name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`},{columnName:i18n("host_details.duration"),targets:0,width:"15",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,width:"25",name:"percentage",data:"percentage",width:"20%",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(l,"l7cat","category");let i=ntopng_utility.clone(a);i.columns_config=l,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){C.on_custom_event("change_applications_tab_event",wb,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,n){const a=`${this.$props.url_params.host}`,l=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,o,r)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[n].id};eq&ip=${a};eq`;0!=l&&(e=`${e}&vlan_id=${l};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(wb,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const kb={class:"row"},$b={class:"col-md-12 col-lg-12"},Sb={class:"card"},Cb=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nb={class:"card-body"},Ab={id:"host_details_applications"},Tb={class:"row mb-4 mt-4",id:"host_details_applications"},Eb={class:"col-6"},Pb={key:0,class:"widget-name"};xb.render=function(e,t,n,a,l,s){const i=xl("tab-list"),o=xl("chart"),r=xl("datatable");return Es(),Us("div",kb,[Vs("div",$b,[Vs("div",Sb,[Cb,Vs("div",Nb,[Vs("div",Ab,[qs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",Tb,[(Es(!0),Us($s,null,Al(l.chart_options,(e=>(Es(),Us("div",Eb,[e.tab==l.applications_tab?(Es(),Us("h3",Pb,ee(e.title),1)):Js("v-if",!0),e.tab==l.applications_tab?(Es(),Fs(o,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Js("v-if",!0)])))),256))]),"applications"==l.applications_tab?(Es(),Fs(r,{key:0,ref:"table_host_applications",table_buttons:l.config_devices_applications.table_buttons,columns_config:l.config_devices_applications.columns_config,data_url:l.config_devices_applications.data_url,enable_search:l.config_devices_applications.enable_search,table_config:l.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0),"categories"==l.applications_tab?(Es(),Fs(r,{key:1,ref:"table_host_categories",table_buttons:l.config_devices_categories.table_buttons,columns_config:l.config_devices_categories.columns_config,data_url:l.config_devices_categories.data_url,enable_search:l.config_devices_categories.enable_search,table_config:l.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])])])])},xb.__file="http_src/vue/page-host-details-applications.vue";const Mb={class:"row"},Ob={class:"col-md-12 col-lg-12"},Ib={class:"card"},Ub=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Fb={class:"card-body"},Db={id:"host_details_traffic"},jb={class:"row mb-4 mt-4",id:"host_details_traffic"},Lb={class:"col-4"},Rb={class:"widget-name"};var zb={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=hn(null);hn([]);const n=hn({});ul((async()=>{!function(e){const a=[];let l={};l.host=x.get_url_entry("host"),l.vlan=x.get_url_entry("vlan"),l.ifid=x.get_url_entry("ifid"),a.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,n,a,l){t.value.reload()}});let s={table_buttons:a,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,l),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.total_bytes,l=100*n.bytes_rcvd/n.total_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],o=ntopng_utility.clone(s);o.columns_config=i,n.value=o}()})),hl((async()=>{t.value.destroy_table()}));const a=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,l)=>(Es(),Us("div",Mb,[Vs("div",Ob,[Vs("div",Ib,[Ub,Vs("div",Fb,[Vs("div",Db,[Vs("div",jb,[(Es(),Us($s,null,Al(a,(e=>Vs("div",Lb,[Vs("h3",Rb,ee(e.title),1),qs(Id,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),qs(Sh,{ref_key:"traffic_table",ref:t,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const Bb={class:"row"},Vb={class:"col-md-12 col-lg-12"},qb={class:"card"},Hb=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Gb={class:"card-body"},Wb={class:"row"},Kb={class:"col-6 mb-4 mt-4"},Jb={class:"widget-name"};var Yb={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function a(e,t,a){n.hideOverlays()}return dl((()=>{})),(e,n)=>(Es(),Us("div",Bb,[Vs("div",Vb,[Vs("div",qb,[Hb,Vs("div",Gb,[Vs("div",Wb,[(Es(),Us($s,null,Al(t,(e=>Vs("div",Kb,[Vs("h3",Jb,ee(e.title),1),qs(Id,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:a},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const Zb=[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])],-1)];var Xb={__name:"loading",props:{},setup(e,{expose:t}){const n=hn(null);return t({hide_loading:function(e=500){$(n.value).fadeOut(e)},show_loading:function(e=500){$(n.value).fadeIn(e)}}),(e,t)=>(Es(),Us("div",{ref_key:"overlay",ref:n,class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},Zb,512))},__file:"http_src/vue/loading.vue"};const Qb={key:0,class:"alert alert-info",id:"empty-message"},ey=["width","height"],ty=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var ny={__name:"sankey_3",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:n}){const a=e,l=d3v7,s=hn(!1),i=hn(null),o=hn({});function r(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=a.sankey_data.nodes&&null!=a.sankey_data.links&&0!=a.sankey_data.length&&0!=a.sankey_data.links.length&&d()}ul((async()=>{})),dl((async()=>{r(),window.addEventListener("resize",(()=>r(!0)))})),Ua((()=>a.sankey_data),((e,t)=>{r(!0)}));let c=null,u=null;async function d(){const e=l.scaleOrdinal(l.schemeCategory10);let t=a.sankey_data;const s=function(){n("update_width");let e=a.width;null==e&&(e=$(i.value).parent().parent().width()-10);n("update_height");let t=a.height;null==t&&(t=$(i.value).parent().parent().height()-80);return{width:e,height:t}}();var r,d;o.value=s,r=s.width-10,d=s.height-5,c=l.sankey().nodeAlign(l.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[r,d]]),u=c(t);const{links:h,nodes:m}=u;let g=l.select(i.value).select("g.nodes").selectAll("g").data(m).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));l.zoom().scaleExtent([1,40]).on("zoom",f),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/m.length))).attr("class","sankey-node").attr("style","cursor:move;"),l.selectAll("rect").append("title").text((e=>`${e.label}`)),g.data(m).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<s.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<s.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){n("node_click",t.data)})),g.call(l.drag().subject((e=>e)).on("start",p).on("drag",_));const v=l.select(i.value).select("g.links").selectAll("g").data(h).join((e=>e.append("g")));let b=v.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/m.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/m.length))),v.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",l.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),v.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function _(e,t){l.select(this).attr("transform",(function(t){const n=e.x-t.__x,a=e.y-t.__y,s=o.value.width,i=o.value.width;return t.x0=t.__x0+n,t.x1=t.__x1+n,t.y0=t.__y0+a,t.y1=t.__y1+a,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),c.update(u),l.selectAll(".sankey-link").attr("d",l.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function f({transform:e}){g.attr("transform",e)}const h=e=>i18n(e);return t({draw_sankey:d,set_no_data_flag:function(e){s.value=e}}),(t,n)=>(Es(),Us($s,null,[s.value?(Es(),Us("div",Qb,ee(e.no_data_message||h("flows_page.no_data")),1)):Js("v-if",!0),Vs("div",null,[(Es(),Us("svg",{ref_key:"sankey_chart_ref",ref:i,width:o.value.width,height:o.value.height,style:{margin:"10px"}},ty,8,ey))])],64))}};fp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),ny.__file="http_src/vue/sankey_3.vue";let ay=d3v7;const ly={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:ay.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:ay.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:ay.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},sy=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${n.bytesToSize(e.value)}`,iy={formatFlowTitle:sy,get_data:async function(){return{}},getDefaultSankeySettings:function(){return ly}},oy={class:"row"},ry={class:"col-md-12 col-lg-12"},cy={class:"card card-shadow"},uy={class:"card-body"},dy={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},py={class:"d-flex align-items-center mb-2"},_y={class:"d-flex no-wrap ms-auto"},fy={class:"m-1"},hy={style:{"min-width":"16rem"}},my={class:"my-auto me-1"},gy=Vs("label",{class:"my-auto me-1"},null,-1),vy=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var by={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,n=e=>i18n(e),a=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,l=hn(null),s=hn(null),i=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:n("flows_page.local_cli_remote_srv"),label:n("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:n("flows_page.local_srv_remote_cli"),label:n("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:n("flows_page.all_flows"),label:n("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?i.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:n("flows_page.local_only"),label:n("flows_page.local_only"),filter_icon:!1,countable:!1}):i.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:n("flows_page.remote_only"),label:n("flows_page.remote_only"),filter_icon:!1,countable:!1});const o=hn(i[0]),r=hn({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},n=x.obj_to_url_params(t);const a=`${http_prefix}/lua/host_details.lua?${n}`;x.go_to_url(a)}ul((()=>{})),dl((()=>{u()}));const u=function(){let e=o.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value.show_loading();let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),n=`${a}?${t}`;return n}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),n=function(e,t){let n={};e.nodes.forEach((e=>n[e.node_id]=!0));let a=e=>null!=n[e.source_node_id]&&null!=n[e.target_node_id],l=function(e,t,n){return e.filter((e=>{const a=t(e);return 0==a&&null!=n&&n(e),a}))}(e.links,a,t);return l}(e,t);return{nodes:e.nodes,links:n}}(t);let n=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let n={};e.nodes.forEach((e=>n[e.node_id]=e));const a=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},l=(e,n)=>e==t?e:`${n}_${e}`;let s={},i={nodes:[],links:[]};e.links.forEach((e=>{let t,o=a(e),r={source_node_id:l(e.source_node_id,o),target_node_id:l(e.target_node_id,o),label:e.label,value:e.value,data:e};if(-1==o){let a=n[e.target_node_id];t={node_id:r.target_node_id,label:a.label,data:a}}else{let a=n[e.source_node_id];t={node_id:r.source_node_id,label:a.label,data:a}}i.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,i.nodes.push(t))}));let o=n[t];i.nodes.push({node_id:o.node_id,label:o.label,data:o}),i.nodes.forEach((e=>n[e.node_id]=e));const r=e=>`${a(e)}_${e.label}`;let c={};i.links.forEach((e=>{let t=r(e),a=c[t];null==a&&(a={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=a),a.node_links.push({source:n[e.source_node_id],target:n[e.target_node_id],value:p(e)})}));let u=i.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],n={node_id:t.id,label:t.label,data:t.data};u.push(n),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:n.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value,data:e}),d.push({source_node_id:n.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value,data:e})}))}let _={},f=[];u.map(((e,t)=>{let n={index:t,node_id:e.node_id,label:e.label,data:e.data};_[e.node_id]=n,f.push(n)}));let h=d.map((e=>{let t=_[e.source_node_id],n=_[e.target_node_id];return{source:t.index,target:n.index,source_node_id:t.index,target_node_id:n.index,value:e.value,label:e.label}}));return{nodes:f,links:h}}(t,n);return s.links.length>0&&s.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),s}();r.value=e,s.value.hide_loading()}()},d=function(){u()};function p(e){return e.data?.info?.traffic}return(e,t)=>(Es(),Us("div",oy,[Vs("div",ry,[Vs("div",cy,[qs(Xb,{ref_key:"loading",ref:s},null,512),Vs("div",uy,[Vs("div",dy,[Vs("div",py,[Vs("div",_y,[Vs("div",fy,[Vs("div",hy,[Vs("label",my,ee(n("hosts"))+": ",1),qs(Ld,{selected_option:o.value,"onUpdate:selected_option":t[0]||(t[0]=e=>o.value=e),options:i,onSelect_option:u},null,8,["selected_option"])])]),Vs("div",null,[gy,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},vy)])])])]),qs(ny,{ref_key:"sankey_chart",ref:l,onNode_click:c,sankey_data:r.value},null,8,["sankey_data"])])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const yy={id:"script-description",class:"notes bg-light border",role:"alert"};var wy={__name:"note-list",props:{note_list:Array},setup(e){const t=e,n=e=>i18n(e);return(e,a)=>(Es(),Us("div",yy,[Vs("b",null,ee(n("notes")),1),Vs("ul",null,[(Es(!0),Us($s,null,Al(t.note_list,(e=>(Es(),Us("li",null,ee(e),1)))),256))])]))},__file:"http_src/vue/note-list.vue"};const xy={class:"form-group ms-2 me-2 mt-3 row"},ky={class:"col-form-label col-sm-4"},$y={class:"col-sm-8"},Sy={key:0,class:"form-group ms-2 me-2 mt-3 row"},Cy={class:"col-form-label col-sm-4"},Ny={class:"col-8"},Ay={key:1,class:"form-group ms-2 me-2 mt-3 row"},Ty={class:"col-form-label col-sm-4"},Ey={class:"col-8"},Py={class:"form-group ms-2 me-2 mt-3 row"},My={class:"col-form-label col-sm-4"},Oy={class:"col-3"},Iy={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},Uy=["value","id"],Fy=["id","for"],Dy=["value","id"],jy=["id","for"];var Ly={__name:"modal-add-host-rules",props:{metric_list:Array,frequency_list:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e;hn(""),hn("");const l=hn(null),s=i18n("if_stats_config.add_host_rules_title"),i=hn(!1),o=e=>i18n(e),r=hn([]),c=hn([]),u=hn(null),d=hn({}),p=hn({}),_=hn(!0),f=hn({}),h=hn(!0),m=[o("if_stats_config.note_1"),o("if_stats_config.note_2"),o("if_stats_config.note_3"),o("if_stats_config.note_4")],g=[{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1}],v=[{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0}],b=[{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0}],y=hn(null),w=hn(null);const x=()=>{let e=new RegExp(xf.get_data_pattern("ip"));_.value=!(e.test(y.value.value)||"*"===y.value.value)},k=e=>{const t=e.target.id;"throughput"==f.value.id?b.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):v.forEach((e=>{e.id===t?e.active=!0:e.active=!1})),Array.from(e.target.parentElement.children).forEach((e=>{"LABEL"==e.tagName&&(e.id==t?(e.classList.remove("btn-secondary"),e.classList.add("btn-primary"),e.classList.add("active")):(e.classList.add("btn-secondary"),e.classList.remove("btn-primary"),e.classList.remove("active")))}))},$=()=>{const e=y.value.value,t=p.value.id,a=d.value.id;let l,s,i=f.value.id,o=d.value.extra_metric?d.value.extra_metric:null;!1===h.value&&(i="",o="",s=w.value.value),"throughput"==i?(b.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)/8):"volume"==i&&(v.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)),n("add",{host:e,frequency:t,metric:a,threshold:s,metric_type:i,extra_metric:o}),S()},S=()=>{l.value.close()};return ul((()=>{f.value=g[0]})),t({show:()=>{y.value.value="",d.value=r.value[0],p.value=c.value[0],f.value=g[0],g.forEach((e=>e.active=!1)),g[0].active=!0,v.forEach((e=>e.active=!1)),v[v.length-1].active=!0,b.forEach((e=>e.active=!1)),b[b.length-1].active=!0,w.value.value=1,l.value.show()},close:S,metricsLoaded:e=>{i.value=!0,r.value=e,c.value=a.frequency_list,p.value=c.value[0],d.value=r.value[0]}}),(e,t)=>(Es(),Fs(hp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(yn(s)),1)])),body:ma((()=>[Js(" Target information, here an IP is put "),Vs("div",xy,[Vs("label",ky,[Vs("b",null,ee(o("if_stats_config.target")),1)]),Vs("div",$y,[Vs("input",{ref_key:"host",ref:y,onInput:x,class:"form-control",type:"text",placeholder:"A local host IP or '*' for checking all local hosts",required:""},null,544)])]),Js(" Metric information, here a metric is selected (e.g. DNS traffic) "),i.value?(Es(),Us("div",Sy,[Vs("label",Cy,[Vs("b",null,ee(o("if_stats_config.metric")),1)]),Vs("div",Ny,[qs(Ld,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),onSelect_option:t[1]||(t[1]=e=>{1==d.value.show_volume?h.value=!0:h.value=!1}),options:r.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),i.value?(Es(),Us("div",Ay,[Vs("label",Ty,[Vs("b",null,ee(o("if_stats_config.frequency")),1)]),Vs("div",Ey,[qs(Ld,{selected_option:p.value,"onUpdate:selected_option":t[2]||(t[2]=e=>p.value=e),options:c.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Threshold information, maximum amount of bytes "),Vs("div",Py,[Vs("label",My,[Vs("b",null,ee(o("if_stats_config.threshold")),1)]),h.value?(Es(),Us($s,{key:0},[Vs("div",Oy,[qs(Ld,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:g},null,8,["selected_option"])]),Vs("div",{class:W(["col-3",["throughput"==f.value.id?"p-0":""]])},[Vs("div",Iy,["throughput"==f.value.id?(Es(),Us($s,{key:0},Al(b,(e=>(Es(),Us($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,Uy),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},ee(e.label),11,Fy)],64)))),64)):(Es(),Us($s,{key:1},Al(v,(e=>(Es(),Us($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,Dy),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},ee(e.label),11,jy)],64)))),64))])],2)],64)):Js("v-if",!0),Vs("div",{class:W([h.value?"col-2":"col-8"])},[Vs("input",{value:"1",ref_key:"threshold",ref:w,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512)],2)])])),footer:ma((()=>[qs(wy,{note_list:m}),Vs("button",{type:"button",onClick:$,class:W(["btn btn-primary",[_.value?"disabled":""]])},ee(o("add")),3)])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const Ry={class:"row"},zy={class:"col-md-12 col-lg-12"},By={class:"card"},Vy=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),qy={class:"card-body"},Hy={class:"mb-4"},Gy={id:"host_rules"},Wy={class:"card-footer"};var Ky={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,a=hn(null),l=hn(null),s=hn(null),i=e=>i18n(e),o=hn({}),r=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua`,c=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,u=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,d=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,p=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],_={ifid:t.ifid,csrf:t.page_csrf};let f={},h=i("if_stats_config.delete_host_rules_title"),m=i("if_stats_config.delete_host_rules_description"),g=[];const v=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}],b=function(){a.value.reload()},y=async function(){const e=o.value,t=n.buildURL(d,{..._,rule_id:e.id});await $.post(t,(function(e,t){b()}))},w=async function(e){const t=n.buildURL(u,{..._,...e});await $.post(t,(function(e,t){b()}))},x=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,l.value.show()}};return DataTableUtils.createActionButtons([{class:"btn-danger",handler:t,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])},k=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){b()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.metric"),targets:2,width:"10",name:"metric",data:"metric",className:"text-nowrap",responsivePriority:1,render:function(e,t,n){return function(e,t){let n=e;return g.forEach((a=>{a.id==e&&(t.extra_metric?t.extra_metric==a.extra_metric&&(n=a.label):n=a.label)})),n}(e,n)}},{columnName:i("if_stats_config.frequency"),targets:3,width:"10",name:"frequency",data:"frequency",className:"text-nowrap",responsivePriority:1,render:function(e){return function(e){let t="";return v.forEach((n=>{e==n.id&&(t=n.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:4,width:"10",name:"threshold",data:"threshold",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=parseInt(e);return a=t.metric_type&&"throughput"==t.metric_type?n.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?n.bytesToSize(e):e,a}(e,a)}},{columnName:i("metric_type"),visible:!1,targets:5,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:i("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,n){return x(n)}}],a={table_buttons:e,data_url:n.buildURL(c,_),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};f=a};return ul((async()=>{k(),await async function(){const e=n.buildURL(r,_);await $.get(e,(function(e,t){g=e.rsp}))}(),s.value.metricsLoaded(g)})),hl((()=>{a.value.destroy_table()})),(e,t)=>(Es(),Us("div",Ry,[Vs("div",zy,[Vs("div",By,[Vy,Vs("div",qy,[Vs("div",Hy,[Vs("h4",null,ee(i("if_stats_config.host_rules")),1)]),Vs("div",Gy,[qs(tm,{ref_key:"modal_delete_confirm",ref:l,title:yn(h),body:yn(m),onDelete:y},null,8,["title","body"]),qs(Ly,{ref_key:"modal_add_host_rule",ref:s,metric_list:yn(g),frequency_list:v,onAdd:w},null,8,["metric_list"]),qs(Sh,{ref_key:"table_host_rules",ref:a,table_buttons:yn(f).table_buttons,columns_config:yn(f).columns_config,data_url:yn(f).data_url,enable_search:yn(f).enable_search,table_config:yn(f).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",Wy,[qs(wy,{note_list:p})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const Jy={class:"row"},Yy={class:"col-md-12 col-lg-12"},Zy={class:"card"},Xy=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Qy={class:"card-body"},ew={id:"host_details_ports"},tw={class:"row mb-4 mt-4",id:"host_details_ports"},nw={class:"col-6"};var aw={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){hn(null),hn([]),hn({});const t=e=>i18n(e);ul((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),a.forEach((t=>{let a={...t.extra_params,...e};$.get(n.buildURL(t.url,a),(async function(e,n){let a=[];e.rsp.forEach((e=>{const t=e.port_info.port,n=e.port_info.l7_proto;a.push({label:`${t} (${n})`})})),t.stats_rows=a}))}))}()})),dl((async()=>{n.hideOverlays()})),hl((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const a=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Es(),Us("div",Jy,[Vs("div",Yy,[Vs("div",Zy,[Xy,Vs("div",Qy,[Vs("div",ew,[Vs("div",tw,[(Es(),Us($s,null,Al(a,(e=>Vs("div",nw,[qs(Th,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const lw={class:"row"},sw={class:"col-12"},iw={class:"card"},ow={class:"card-body"},rw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},cw={class:"d-flex ms-auto flex-row-reverse"},uw=Vs("label",{class:"my-auto me-1"},null,-1),dw=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],pw={key:0,class:"m-1"},_w={style:{"min-width":"14rem"}},fw={class:"my-auto me-1"};var hw={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,a=e=>i18n(e),l=hn(null),s=ntopChartApex.typeChart.BUBBLE,i=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,o="alerts-map",r={},c=hn(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[n,a]of Object.entries(t))e=`${e}&${n}=${a}`;return e},d=function(){l.value.show_loading(),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()},p=function(){return async e=>{let a=function(e){let a={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(a=t)})),a&&a.chart&&a.chart.ntop_events){a.chart.events=a.chart.events||{};for(const[e,t]of Object.entries(a.chart.ntop_events))null!=t&&(a.chart.events[e]=n[t]||n.fnone)}return a&&a.xaxis&&a.xaxis.labels&&a.xaxis.labels.ntop_utils_formatter&&(a.xaxis.labels.formatter=n[a.xaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.yaxis&&a.yaxis.labels&&a.yaxis.labels.ntop_utils_formatter&&(a.yaxis.labels.formatter=n[a.yaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.tooltip&&a.tooltip.ntop_utils_formatter&&(a.tooltip.custom=n[a.tooltip.ntop_utils_formatter]),a}(Number(r.bubble_mode.id));const l=await ntopng_utility.http_request(e);return a.series=l.series||{},a}},_=function(e){l.value.show_loading(),x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()};return ul((()=>{const e=x.get_url_entry("timeframe"),n=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),n||x.set_key_to_url("vlan",0),x.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),dl((()=>{l.value.hide_loading()})),(t,n)=>(Es(),Us("div",lw,[Vs("div",sw,[Vs("div",iw,[qs(Xb,{ref_key:"loading",ref:l},null,512),Vs("div",ow,[Vs("div",rw,[Vs("div",cw,[Vs("div",null,[uw,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},dw)])]),(Es(!0),Us($s,null,Al(e.available_filters,((e,t,n)=>(Es(),Us($s,null,[e.length>0?(Es(),Us("div",pw,[Vs("div",_w,[Vs("label",fw,ee(a("bubble_map."+t))+": ",1),qs(Ld,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:_},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256))]),Vs("div",{id:o,style:{height:"90%"}},[qs(Id,{ref_key:"bubble_chart",ref:c,id:o,chart_type:yn(s),base_url_request:i,get_params_url_request:u,get_custom_chart_options:p(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const mw={class:"row"},gw={class:"col-12"},vw={class:"card"},bw={class:"card-body"},yw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},ww={class:"d-flex ms-auto flex-row-reverse"},xw=Vs("label",{class:"my-auto me-1"},null,-1),kw={class:"m-1"},$w={key:0,style:{"min-width":"15rem"}},Sw={class:"my-auto me-1"};var Cw={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,a=e=>i18n(e),l=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,i="alerts-map",o={},r=hn(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[n,a]of Object.entries(t))e=`${e}&${n}=${a}`;return e},u=function(){return async e=>{let a=function(e){let a={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(a=t)})),a&&a.chart&&a.chart.ntop_events){a.chart.events=a.chart.events||{};for(const[e,t]of Object.entries(a.chart.ntop_events))null!=t&&(a.chart.events[e]=n[t]||n.fnone)}return a&&a.xaxis&&a.xaxis.labels&&a.xaxis.labels.ntop_utils_formatter&&(a.xaxis.labels.formatter=n[a.xaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.yaxis&&a.yaxis.labels&&a.yaxis.labels.ntop_utils_formatter&&(a.yaxis.labels.formatter=n[a.yaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.tooltip&&a.tooltip.ntop_utils_formatter&&(a.tooltip.custom=n[a.tooltip.ntop_utils_formatter]),a}(Number(o.bubble_mode.id));const l=await ntopng_utility.http_request(e);return a.series=l.series||{},a}},d=function(e){x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return ul((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),(t,n)=>(Es(),Us("div",mw,[Vs("div",gw,[Vs("div",vw,[Vs("div",bw,[Vs("div",yw,[Vs("div",ww,[xw,(Es(!0),Us($s,null,Al(e.available_filters,((e,t,n)=>(Es(),Us("div",kw,[e.length>0?(Es(),Us("div",$w,[Vs("label",Sw,ee(a("bubble_map."+t))+": ",1),qs(Ld,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Js("v-if",!0)])))),256))]),Vs("div",{id:i,style:{height:"90%"}},[qs(Id,{ref_key:"bubble_chart",ref:r,id:i,chart_type:yn(l),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const Nw={class:"row"},Aw={class:"col-md-12 col-lg-12"},Tw={class:"card card-shadow"},Ew={class:"card-body"},Pw={class:"d-flex align-items-center flex-row-reverse mb-2"},Mw=Vs("label",{class:"my-auto me-1"},null,-1),Ow=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],Iw={key:0,class:"m-1"},Uw={style:{"min-width":"14rem"}},Fw={class:"my-auto me-1"},Dw=["title"],jw=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var Lw={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,n={},a=e=>i18n(e),l=hn(!1),s=a("ports_analysis.max_entries"),i=a("ports_analysis.no_data"),o=hn(null),r=hn(null),c=hn(null),u=hn(null),d=hn({}),p=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,_=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=hn(null);function h(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}ul((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),a||x.set_key_to_url("vlan","none"),a||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(n[e]=t)}))})),dl((()=>{y(),w(),v()}));const m=function(){v()},g=function(e){x.set_key_to_url(e.filter_name,e.id),v()},v=function(){!async function(){f.value.show_loading();let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),n=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==n&&(n="");let a="",l={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:n},s=x.obj_to_url_params(l);a=""==t?`${p}?${s}`:`${_}?${s}`;return a}();let t=await b.http_request(e);(function(e){l.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),n=function(e,t){let n={};e.nodes.forEach((e=>n[e.node_id]=!0));let a=e=>null!=n[e.source_node_id]&&null!=n[e.target_node_id],l=function(e,t,n){return e.filter((e=>{const a=t(e);return 0==a&&null!=n&&n(e),a}))}(e.links,a,t);return l}(e,t);return{nodes:e.nodes,links:n}}(t);const n=function(e){let t={},n={};e.nodes.forEach((e=>t[e.node_id]=e));let a=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let l=a(e),s=n[l];null==s&&(s={id:l,label:e.label,link:e.optional_info.link,node_links:[]},n[l]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let l=e.nodes.map((e=>e)),s=[];for(let e in n){let t=n[e],a={node_id:t.id,label:t.label,link:t.link};l.push(a),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value}),s.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value})}))}let i=l.map(((e,t)=>({index:t,label:e.label,data:e}))),o={};i.forEach(((e,t)=>o[e.data.node_id]=e));let r=s.map((e=>({source:o[e.source_node_id].index,target:o[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:r}}(t);return n.links.length>0&&n.nodes.length>0?o.value.set_no_data_flag(!1):o.value.set_no_data_flag(!0),n}();d.value=e,f.value.hide_loading()}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,p)=>(Es(),Us("div",Nw,[Vs("div",Aw,[Vs("div",Tw,[qs(Xb,{ref_key:"loading",ref:f},null,512),Vs("div",Ew,[Vs("div",{class:"align-items-center justify-content-end mb-2",style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",Pw,[Vs("div",null,[Mw,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:m},Ow)])]),(Es(!0),Us($s,null,Al(e.available_filters,((e,t,l)=>(Es(),Us($s,null,[e.length>0?(Es(),Us("div",Iw,[Vs("div",Uw,[Vs("label",Fw,ee(a("ports_analysis."+t))+": ",1),qs(Ld,{selected_option:n[t],"onUpdate:selected_option":e=>n[t]=e,options:e,onSelect_option:g},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256)),1==l.value?(Es(),Us("div",{key:0,class:"mt-auto m-1",title:yn(s),style:{cursor:"help"}},jw,8,Dw)):Js("v-if",!0)]),qs(ny,{ref_key:"sankey_chart",ref:o,width:c.value,height:u.value,no_data_message:yn(i),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:h},null,8,["width","height","no_data_message","sankey_data"])],512)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const Rw={class:"row"},zw={class:"col-md-12 col-lg-12"},Bw={class:"card card-shadow"},Vw={class:"card-body"},qw={id:"aggregated_live_flows"};var Hw={__name:"page-aggregated-live-flows",props:{vlans:Array,ifid:Number},setup(e){const t=e,a=hn(null),l=hn({}),s=hn(null),i=e=>i18n(e),o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows.lua`;return ul((async()=>{await async function(){const e=[];let r={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid,vlan_id:ntopng_url_manager.get_url_entry("vlan_id")},c=ntopng_url_manager.obj_to_url_params(r);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,n,a){s.value.reload()}});const u=[];t.vlans.length>0&&u.push({filterTitle:i("map_page.vlans"),filters:t.vlans,filterMenuKey:"vlan_id",columnIndex:0,removeAllEntry:!0,callbackFunction:(e,n)=>{let l={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid,vlan_id:n.id};ntopng_url_manager.set_key_to_url("vlan_id",n.id),e.ajax.url(`${o}?${ntopng_url_manager.obj_to_url_params(l)}`),a.value.show_loading(),e.ajax.reload(),a.value.hide_loading()}});let d={table_buttons:e,data_url:`${o}?${c}`,enable_search:!0,table_filters:u,table_config:{serverSide:!1,order:[[7,"desc"]],columnDefs:[{type:"file-size",targets:6},{type:"file-size",targets:7},{type:"file-size",targets:8}]}},p=[{columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<a href="${http_prefix}/lua/flows_stats.lua?application=${e.id}" target="_blank">${e.label}</a>`}];t.vlans.length>0&&(p.push({columnName:i18n("vlan"),targets:0,name:"vlan_id",data:"vlan_id",className:"text-nowrap text-center",responsivePriority:1,render:e=>0===e.id?"":`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}" target="_blank">${e.label}</a>`}),d.table_config.order=[[8,"desc"]],d.table_config.columnDefs=[{type:"file-size",targets:7},{type:"file-size",targets:8},{type:"file-size",targets:9}]);p.push({columnName:i18n("flows"),targets:0,name:"flows",data:"flows",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("score"),targets:0,name:"score",data:"tot_score",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("clients"),targets:0,name:"num_clients",data:"num_clients",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("servers"),targets:0,name:"num_servers",data:"num_servers",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("breakdown"),targets:0,sorting:!1,name:"breakdown",data:"breakdown",className:"text-nowrap text-center",responsivePriority:1,render:e=>n.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{columnName:i18n("traffic_sent"),targets:0,name:"bytes_sent",data:"bytes_sent",className:"text-nowrap text-end",responsivePriority:1,render:e=>n.bytesToSize(e)},{columnName:i18n("traffic_rcvd"),targets:0,name:"bytes_rcvd",data:"bytes_rcvd",className:"text-nowrap text-end",responsivePriority:1,render:e=>n.bytesToSize(e)},{columnName:i18n("total_traffic"),targets:0,name:"tot_traffic",data:"tot_traffic",className:"text-nowrap text-end",responsivePriority:1,render:e=>n.bytesToSize(e)}),d.columns_config=p,l.value=d}()})),(e,t)=>(Es(),Us("div",Rw,[Vs("div",zw,[Vs("div",Bw,[qs(Xb,{ref_key:"loading",ref:a},null,512),Vs("div",Vw,[Vs("div",qw,[qs(Sh,{ref_key:"table_aggregated_live_flows",ref:s,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"},Gw={components:{modal:hp,"select-search":Ld},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:[],filter_type_label_selected:null,operator_selected:[],option_selected:[],input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected=[],this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){e!=[]&&(this.operator_selected=e)},change_data_filter:function(e){e!=[]&&(this.option_selected=e)},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected||(this.option_selected=this.options_to_show[0])):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&0==this.operator_selected.length&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):xf.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected&&0!=this.option_selected.length){let n=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),a=n.options.find((e=>e.value==this.option_selected.value));e=a.value,t=a.value_label||a.label}else null==e&&(e="");let n={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",n),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,n),this.close()},close:function(){this.$refs.modal.close()}}};const Ww=e=>(_a("data-v-3119c83e"),e=e(),fa(),e),Kw={autocomplete:"off"},Jw={class:"form-group row"},Yw=Ww((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Zw={class:"col-sm-8"},Xw=Ww((()=>Vs("hr",null,null,-1))),Qw={class:"dt-filter-template-container form-group row"},ex={class:"col-form-label col-sm-3"},tx={class:"col-sm-8"},nx={class:"input-group mb-3"},ax={class:"input-group-prepend col-sm-3"},lx={key:0,class:"col-sm-9"},sx=["pattern","required"],ix={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},ox=["disabled"];fp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),Gw.render=function(e,t,n,a,l,s){const i=xl("select-search"),o=xl("modal");return Es(),Fs(o,{id:l.id_modal,ref:"modal"},{title:ma((()=>[Ws(ee(l.i18n("alerts_dashboard.add_filter")),1)])),body:ma((()=>[Vs("form",Kw,[Vs("div",Jw,[Yw,Vs("div",Zw,[qs(i,{selected_option:l.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>l.filter_type_selected=e),id:"filter_type",options:n.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Xw,Vs("div",Qw,[Vs("label",ex,[Vs("b",null,ee(l.filter_type_label_selected),1)]),Vs("div",tx,[Vs("div",nx,[Vs("div",ax,[qs(i,{selected_option:l.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>l.operator_selected=e),id:"operator_filter",options:l.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),l.options_to_show?(Es(),Us("div",lx,[qs(i,{selected_option:l.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>l.option_selected=e),id:"data_filter",options:l.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(Es(),Us($s,{key:1},[yl(Vs("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>l.input_value=e),pattern:l.data_pattern_selected,name:"value",required:l.input_required,type:"text",class:"form-control"},null,8,sx),[[Io,l.input_value]]),Vs("span",ix,ee(l.i18n("invalid_value")),1)],64))]),Js(" end div input-group mb-3 ")]),Js(" end div form-group-row ")])])])),footer:ma((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},ee(l.i18n("apply")),9,ox)])),_:1},8,["id"])},Gw.__scopeId="data-v-3119c83e",Gw.__file="http_src/vue/modal-filters.vue";let rx,cx,ux=[];let dx,px,_x=null!=window.location.toString().match(/alert_stats.lua/),fx={value:ntopng_url_manager.get_url_entry("query_preset"),count:ntopng_url_manager.get_url_entry("count")};null==fx.value&&(fx.value="");let hx=ntopng_url_manager.get_url_entry("status");null!=hx&&""!=hx||(hx="historical");const mx=!_x;let gx=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(_x);const vx=async function(){ux=await async function(e,t){let n;if(e)n=`${base_path}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}`;else{let e=ntopng_url_manager.get_url_entry("query_preset");null==e&&(e=""),n=`${base_path}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${e}`}return await ntopng_utility.http_request(n)}(_x,gx),ux.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),ux.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},rx={},cx={},ux.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>rx[e.id]=e.label)),cx[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[n,a]of e){let e=ux.find((e=>e.id==n));if(null!=e){a.split(",").forEach((n=>{let[a,l]=n.split(";");null==l||null==a||""==l||null!=e.options&&null==e.options.find((e=>e.value==a))||t.push({id:e.id,operator:l,value:a})}))}}return t};var bx={props:{id:String},components:{"data-time-range-picker":Rd,"modal-filters":Gw},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,this.enable_query_presets&&await async function(e){let t=e.page,n=`${base_path}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${t}`,a=await ntopng_utility.http_request(n),l=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0})));if(a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count};l.push(t)})),null==e.query_preset||""==e.query_preset.value)e.query_preset=l[0];else{let t=l.find((t=>t.value==e.query_preset.value));e.query_preset=t}return ntopng_url_manager.set_key_to_url("query_preset",e.query_preset.value),ntopng_url_manager.set_key_to_url("count",e.query_preset.count),e.query_presets=l,a}(this),"all"!=this.page){let e=await vx();px=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${e.class?e.class:""}' ${this.getAttributes(e)}>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                            ${e.label?`<b>${e.label}</b>&nbsp;`:""}\n                            <b class='operator'>${e.selectedOperator?rx[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(dx)}));const n=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let n=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(n)&&(cx[e.key]&&!Array.isArray(cx[e.key])&&(e.operators=cx[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,n=e.detail.data.realValue,a=ntopng_status_manager.get_status();if(void 0===t)return;if(null==a.filters)return;const l=a.filters.filter((e=>e.id!=t||e.id==t&&e.value!=n));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:l})})),t.on("add",(async function(e){const n=e.detail;if(void 0===n.data)return;return n.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const n=t.detail;if(void 0===n.data)return;if(void 0===n.data.key)return;const a=n.data;e.edit_tag=a,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:a.key,operator:a.selectedOperator,value:a.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:n}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=ux,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_data-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:_x,query_presets:[],query_preset:fx,status_view:hx,enable_query_presets:mx,page:gx,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=cx[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},update_select_query_presets:function(){ntopng_url_manager.get_url_params(),ntopng_url_manager.set_key_to_url("query_preset",this.query_preset.value),ntopng_url_manager.set_key_to_url("count",this.query_preset.count),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(ux.map((e=>e.id))),px.tagify.removeAllTags();let n=function(e){if(null==e)return{};let t={};e.forEach((e=>{let n=t[e.id];null==n&&(n=[],t[e.id]=n),n.push(e)}));let n={};for(let e in t){let a=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");n[e]=a}return n}(t);ntopng_url_manager.add_obj_to_url(n),t.forEach((e=>{let t=function(e){let t=ux.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let n=e.value;if(null!=t.options){let a=t.options.find((t=>t.value==e.value));null!=a&&(n=a.label)}const a={label:t.label,key:t.id,value:n,realValue:e.value,title:`${t.label}${e.operator}${n}`,selectedOperator:e.operator};return""==a.value&&(a.value="''"),null==a.realValue||null==a.selectedOperator||""==a.selectedOperator?null:a}(e);null!=t&&px.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const yx=e=>(_a("data-v-aaee59ea"),e=e(),fa(),e),wx={style:{width:"100%"}},xx={class:"mb-1"},kx={key:0,class:"d-flex align-items-center me-2"},$x={class:"btn-group",id:"statusSwitch",role:"group"},Sx=["value"],Cx=["label"],Nx=["value"],Ax={key:0,class:"d-flex mt-1",style:{width:"100%"}},Tx=["placeholder"],Ex=[yx((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],Px=[yx((()=>Vs("i",{class:"fas fa-times"},null,-1)))];fp("\n.tagify__input[data-v-aaee59ea] {\n  min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n  white-space: nowrap;\n  margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  background-color: white;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n  padding: 0.05em 0.2em;\n}\n.tagify__tag > div[data-v-aaee59ea] {\n  display: flex;\n  align-items: center;\n}\n"),bx.render=function(e,t,n,a,l,s){const i=xl("modal-filters"),o=xl("data-time-range-picker");return Es(),Us("div",wx,[Vs("div",xx,[qs(i,{filters_options:l.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:l.id_modal_filters},null,8,["filters_options","onApply","id"]),qs(o,{id:l.id_data_time_range_picker},{begin:ma((()=>[l.is_alert_stats_url?(Es(),Us("div",kx,[Vs("div",$x,[Vs("a",{href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("historical")),class:W(["btn btn-sm",{active:"historical"==l.status_view,"btn-seconday":"historical"!=l.status_view,"btn-primary":"historical"==l.status_view}])},"Past",2),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("acknowledged")),class:W(["btn btn-sm",{active:"acknowledged"==l.status_view,"btn-seconday":"acknowledged"!=l.status_view,"btn-primary":"acknowledged"==l.status_view}])},"Ack",2),"flow"!=l.page?(Es(),Us("a",{key:0,href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("engaged")),class:W(["btn btn-sm",{active:"engaged"==l.status_view,"btn-seconday":"engaged"!=l.status_view,"btn-primary":"engaged"==l.status_view}])},"Engaged",2)):Js("v-if",!0)])])):Js("v-if",!0),l.enable_query_presets?yl((Es(),Us("select",{key:1,class:"me-2 form-select","onUpdate:modelValue":t[3]||(t[3]=e=>l.query_preset=e),onChange:t[4]||(t[4]=e=>s.update_select_query_presets())},[(Es(!0),Us($s,null,Al(l.query_presets,(e=>(Es(),Us($s,null,[1==e.builtin?(Es(),Us("option",{key:0,value:e},ee(e.name),9,Sx)):Js("v-if",!0)],64)))),256)),"analysis"!=l.page?(Es(),Us("optgroup",{key:0,label:l.i18n("queries.queries")},[(Es(!0),Us($s,null,Al(l.query_presets,(e=>(Es(),Us($s,null,[e.builtin?Js("v-if",!0):(Es(),Us("option",{key:0,value:e},ee(e.name),9,Nx))],64)))),256))],8,Cx)):Js("v-if",!0)],544)),[[jo,l.query_preset]]):Js("v-if",!0)])),extra_buttons:ma((()=>[El(e.$slots,"extra_range_buttons")])),_:3},8,["id"])]),Js(" tagify "),"all"!=l.page?(Es(),Us("div",Ax,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:l.i18n("show_alerts.filters")},null,8,Tx),yl(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[5]||(t[5]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},Ex,512),[[Jo,l.modal_data&&l.modal_data.length>0]]),yl(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[6]||(t[6]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},Px,512),[[Jo,l.modal_data&&l.modal_data.length>0]])])):Js("v-if",!0),Js(" end tagify ")])},bx.__scopeId="data-v-aaee59ea",bx.__file="http_src/vue/range-picker.vue";var Mx={components:{},props:{chart_options:Object},watch:{chart_options:function(e,t){this.reloaded_table()}},emits:[],created(){},data:()=>({total:0,percentile_sent:0,percentile_rcvd:0,avg_sent:0,avg_rcvd:0,max_sent:0,max_rcvd:0}),async mounted(){},methods:{reloaded_table:function(){let e=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bps.id),t=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bytes.id),n=this.chart_options.statistics.total,a=this.chart_options.statistics.by_serie[0].max_val,l=this.chart_options.statistics.by_serie[1].max_val,s=this.chart_options.statistics.by_serie[0].average,i=this.chart_options.statistics.by_serie[1].average,o=this.chart_options.statistics.by_serie[0]["95th_percentile"],r=this.chart_options.statistics.by_serie[1]["95th_percentile"];this.max_sent=e(8*a),this.max_rcvd=e(8*l),this.avg_sent=e(8*s),this.avg_rcvd=e(8*i),this.percentile_sent=e(8*o),this.percentile_rcvd=e(8*r),this.total=t(n)}}};const Ox={class:"table table-borderless graph-statistics mb-2",style:{}},Ix=Vs("thead",{class:"text-center"},[Vs("tr",null,[Vs("th",{class:"graph-val-total-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}}," Total:"),Vs("th",{class:"graph-val-95percentile-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},[Ws("95th "),Vs("a",{href:"https://en.wikipedia.org/wiki/Percentile"},"Percentile"),Ws(":")]),Vs("th",{class:"graph-val-average-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},"Average:"),Vs("th",{class:"graph-val-max-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px","border-right-width":"1px"}},"Max:")])],-1),Ux={class:"graph-val-total text-center",style:{"border-width":"1px"}},Fx={class:"graph-val-95percentile text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},Dx=Vs("br",null,null,-1),jx={class:"graph-val-average text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},Lx=Vs("br",null,null,-1),Rx={class:"graph-val-max text-center",style:{"border-bottom-width":"1px","border-top-width":"1px","border-right-width":"1px"}},zx=Vs("br",null,null,-1);Mx.render=function(e,t,n,a,l,s){return Es(),Us("div",null,[Vs("table",Ox,[Ix,Vs("tbody",null,[Vs("tr",null,[Vs("td",Ux,[Vs("span",null,ee(l.total),1)]),Vs("td",Fx,[Vs("span",null,[Ws(ee(l.percentile_sent)+" [Sent]",1),Dx,Ws(ee(l.percentile_rcvd)+" [Rcvd]",1)])]),Vs("td",jx,[Vs("span",null,[Ws(ee(l.avg_sent)+" Kbit/s [Sent]",1),Lx,Ws(ee(l.avg_rcvd)+" [Rcvd]",1)])]),Js(' <td class="graph-val-min" style="display:none;border-bottom-width: 1px;border-top-width: 1px;border-right-width: 1px;">nil: <span></span></td> '),Vs("td",Rx,[Vs("span",null,[Ws(ee(l.max_sent)+" [Sent]",1),zx,Ws(ee(l.max_rcvd)+" [Rcvd]",1)])])])])])])},Mx.__file="http_src/vue/simple-table.vue";const Bx={key:0,class:"alert alert-info",id:"empty-message"},Vx=["id"];var qx={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const n=e,a=hn(!1);const l=e=>i18n(e);return dl((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return n.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(n.url,e)}();await $.get(t,(function(e,t){const l=e.rsp;if(l.length>0){let e=function(e){let t={...iy.getDefaultSankeySettings(),...n.extra_settings};const a=d3v7.map(e,t.linkSource).map(A),l=d3v7.map(e,t.linkTarget).map(A),s=d3v7.map(e,t.linkSourceNode).map(A),i=d3v7.map(e,t.linkTargetNode).map(A),o=d3v7.map(e,t.linkLink).map(A),r=d3v7.map(e,t.linkValue),c=d3v7.map(e,t.linkColor),u=d3v7.map(e,t.sourceColor),d=d3v7.map(e,t.targetColor),p=d3v7.map(e,t.sourceLink),_=d3v7.map(e,t.targetLink);let f=e,h=Array.from(d3v7.union(a,l),(e=>({id:e})));const m=d3v7.map(h,t.nodeId).map(A);t.nodeGroups=d3v7.map(h,t.nodeGroup).map(A),h=d3v7.map(h,((e,t)=>({id:m[t]}))),f=d3v7.map(f,((e,t)=>({source:a[t],target:l[t],value:r[t],source_node:s[t],target_node:i[t],link:o[t],color:c[t],source_color:u[t],target_color:d[t],source_link:p[t],target_link:_[t]})));const g=d3v7.scaleOrdinal(t.nodeGroups,t.colors),v=d3v7.map(h,t.nodeLabel),b=d3v7.map(h,t.nodeTitle),y=d3v7.map(f,t.linkTitle);let w=d3v7.sankey().nodeId((({index:e})=>m[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:h,links:f});const x=d3v7.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");let k,$;const S=t.width,C=x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(f).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(y?e=>e.append("title").text((({index:e})=>y[e])):()=>{}),N=d3v7.drag().on("start",(function(e,t){const n=d3v7.select(this);k=n.attr("x")-e.x,$=n.attr("y")-e.y})).on("drag",(function(e,t){d3v7.select(this).attr("x",e.x+k).attr("y",e.y+$),w=d3v7.sankey().update(w),C.selectAll("path").data(w.links,(function(e){return e}))}));function A(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(h).join("rect").call(N).on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,n=e.targetLinks,a=t&&t[0]?t[0]:n[0];a&&(a.source.id===e.id?a.source_link&&""!==a.source_link&&window.open(a.source_link,"_blank"):a.target.id===e.id&&a.target_link&&""!==a.target_link&&window.open(a.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const n=e.sourceLinks;let a=g(t.nodeGroups[e.index]);return n&&n[0]&&(n[0].source.id===e.id?n[0].source_color&&""!==n[0].source_color&&(a=n[0].source_color):n[0].target.id===e.id&&n[0].target_color&&""!==n[0].target_color&&(a=n[0].target_color)),a})).append("title").text((({index:e})=>b[e])),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(h).join("text").attr("x",(e=>e.x0<S/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>v[e])),Object.assign(x.node(),{scales:{color:g}})}(l);a.value=!1,$(`#${n.id}`).empty(),$(`#${n.id}`).append(e)}else $(`#${n.id}`).empty(),a.value=!0})),NtopUtils.hideOverlays()}}),(t,n)=>(Es(),Us($s,null,[a.value?(Es(),Us("div",Bx,ee(l("flows_page.no_data")),1)):Js("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,Vx)],64))},__file:"http_src/vue/sankey.vue"};const Hx=e=>(_a("data-v-7e5acce0"),e=e(),fa(),e),Gx={class:"mb-3 row"},Wx={class:"col-form-label col-sm-4"},Kx={class:"col-sm-6"},Jx={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},Yx=Hx((()=>Vs("hr",null,null,-1))),Zx={class:"host-alert-fields"},Xx={class:"mb-3 row"},Qx={class:"col-form-label col-sm-4"},ek={class:"col-sm-6"},tk={value:""},nk={value:"0"},ak={disabled:""},lk=["value"],sk={class:"flow-alert-fields"},ik={class:"mb-3 row"},ok={class:"col-form-label col-sm-4"},rk={class:"col-sm-6"},ck={value:""},uk={value:"0"},dk={disabled:""},pk=["value"],_k={key:0,class:"ip-fields"},fk={class:"mb-3 row"},hk={class:"col-form-label col-sm-4"},mk={class:"col-sm-6"},gk=["pattern"],vk={key:1,class:"network-fields"},bk={class:"mb-3 row"},yk={class:"col-form-label col-sm-4"},wk={class:"col-sm-4 pr-0"},xk=["pattern"],kk={class:"col-sm-2 ps-4 pe-0"},$k=Hx((()=>Vs("span",{class:"me-2"},"/",-1))),Sk={class:"mb-3 row"},Ck={class:"col-form-label col-sm-4"},Nk={class:"col-sm-6"},Ak={class:"mb-3 row"},Tk={class:"col-form-label col-sm-4"},Ek={key:0},Pk={key:1},Mk={class:"col-sm-6"},Ok=["pattern"],Ik=["pattern"],Uk=["disabled"];var Fk={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn("ip"),i=hn(""),o=hn(""),r=hn(0),c=hn(""),u=hn(""),d=hn(""),p=hn("");function _(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let f=_("ip"),h=_("text"),m=_("certificate");const g=e=>{s.value=e},v=()=>{let e=null,t=!0;return"hosts"==a.alert_exclusions_page?(e=new RegExp(f),t="ip"==s.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value||null==p.value||""==p.value||parseInt(p.value)<1||parseInt(p.value)>127):"domain_names"==a.alert_exclusions_page?(e=new RegExp(h),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==a.alert_exclusions_page&&(e=new RegExp(m),t=null==c.value||""==c.value||0==e.test(c.value)),t},b=()=>{l.value.close()},y=()=>{let e,t=i.value;"hosts"==a.alert_exclusions_page?("network"==s.value&&(t=`${o.value}/${p.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==a.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==a.alert_exclusions_page&&(e={alert_certificate:c.value}),n("add",e),b()};t({show:()=>{s.value="ip",i.value="",o.value="",r.value=0,u.value="",d.value="",p.value="",c.value="",l.value.show()},close:b}),dl((()=>{}));const w=e=>i18n(e);return(t,n)=>(Es(),Fs(hp,{onShowed:n[10]||(n[10]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(w("check_exclusion.add_exclusion")),1)])),body:ma((()=>["hosts"==e.alert_exclusions_page?(Es(),Us($s,{key:0},[Js(" modal hosts "),Vs("div",Gx,[Vs("label",Wx,[Vs("b",null,ee(w("check_exclusion.member_type")),1)]),Vs("div",Kx,[Vs("div",Jx,[Vs("label",{class:W([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:n[0]||(n[0]=e=>g("ip"))}),Ws(" "+ee(w("check_exclusion.ip_address")),1)],2),Vs("label",{class:W([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:n[1]||(n[1]=e=>g("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ws(" "+ee(w("check_exclusion.network")),1)],2)])])]),Yx,Vs("div",Zx,[Vs("div",Xx,[Vs("label",Qx,[Vs("b",null,ee(w("check_exclusion.host_alert_type")),1)]),Vs("div",ek,[yl(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":n[2]||(n[2]=e=>u.value=e)},[Vs("option",tk,ee(w("check_exclusion.none")),1),Vs("option",nk,ee(w("check_exclusion.exclude_all_alerts")),1),Vs("option",ak,ee(w("check_exclusion.spacing_bar")),1),(Es(!0),Us($s,null,Al(e.host_alert_types,(e=>(Es(),Us($s,null,[null!=e?(Es(),Us("option",{key:0,value:e.alert_id},ee(e.label),9,lk)):Js("v-if",!0)],64)))),256))],512),[[jo,u.value]])])])]),Vs("div",sk,[Vs("div",ik,[Vs("label",ok,[Vs("b",null,ee(w("check_exclusion.flow_alert_type")),1)]),Vs("div",rk,[yl(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":n[3]||(n[3]=e=>d.value=e)},[Vs("option",ck,ee(w("check_exclusion.none")),1),Vs("option",uk,ee(w("check_exclusion.exclude_all_alerts")),1),Vs("option",dk,ee(w("check_exclusion.spacing_bar")),1),(Es(!0),Us($s,null,Al(e.flow_alert_types,(e=>(Es(),Us($s,null,[null!=e?(Es(),Us("option",{key:0,value:e.alert_id},ee(e.label),9,pk)):Js("v-if",!0)],64)))),256))],512),[[jo,d.value]])])])]),"ip"==s.value?(Es(),Us("div",_k,[Vs("div",fk,[Vs("label",hk,[Vs("b",null,ee(w("check_exclusion.ip_address")),1)]),Vs("div",mk,[yl(Vs("input",{pattern:yn(f),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[4]||(n[4]=e=>i.value=e)},null,8,gk),[[Io,i.value]])])])])):Js("v-if",!0),"network"==s.value?(Es(),Us("div",vk,[Vs("div",bk,[Vs("label",yk,[Vs("b",null,ee(w("check_exclusion.network")),1)]),Vs("div",wk,[yl(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:yn(f),"onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e)},null,8,xk),[[Io,o.value]])]),Vs("div",kk,[$k,yl(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":n[6]||(n[6]=e=>p.value=e)},null,512),[[Io,p.value]])])])])):Js("v-if",!0),Vs("div",Sk,[Vs("label",Ck,[Vs("b",null,ee(w("vlan")),1)]),Vs("div",Nk,[yl(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),class:"form-control"},null,512),[[Io,r.value]])])])],64)):Js("v-if",!0),Js(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Es(),Us($s,{key:1},[Js(" modal domain_names"),Vs("div",null,[Vs("div",Ak,[Vs("label",Tk,["domain_names"==e.alert_exclusions_page?(Es(),Us("b",Ek,ee(w("check_exclusion.domain")),1)):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Es(),Us("b",Pk,ee(w("check_exclusion.tls_certificate")),1)):Js("v-if",!0)]),Vs("div",Mk,["domain_names"==e.alert_exclusions_page?yl((Es(),Us("input",{key:0,placeholder:"",pattern:yn(h),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[8]||(n[8]=e=>c.value=e)},null,8,Ok)),[[Io,c.value]]):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?yl((Es(),Us("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:yn(m),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[9]||(n[9]=e=>c.value=e)},null,8,Ik)),[[Io,c.value]]):Js("v-if",!0)])])])],64)):Js("v-if",!0),Js(" modal domain_names")])),footer:ma((()=>[Vs("button",{type:"button",disabled:v(),onClick:y,class:"btn btn-primary"},ee(w("add")),9,Uk)])),_:1},512))}};fp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),Fk.__scopeId="data-v-7e5acce0",Fk.__file="http_src/vue/modal-add-check-exclusion.vue";const Dk=e=>(_a("data-v-19c5b1f1"),e=e(),fa(),e),jk=["innerHTML"],Lk={class:"form-group mb-3"},Rk=["innerHTML"],zk={class:"alert_label"},Bk={class:"form-check"},Vk={class:"form-check-label"},qk={key:0,class:"form-check"},Hk={class:"form-check-label"},Gk={class:"form-check"},Wk={class:"form-check-label"},Kk={class:"form-check"},Jk={class:"form-check-label"},Yk={key:0,class:"exclude-domain-certificate"},Zk={class:"alert_label"},Xk={key:0,class:"form-check"},Qk={class:"form-check-label whitespace"},e$=["pattern","disabled"],t$={key:1,class:"form-check"},n$={class:"form-check-label whitespace"},a$=["disabled","pattern"],l$=Dk((()=>Vs("hr",{class:"separator"},null,-1))),s$={class:"form-group mb-3"},i$={class:"custom-control custom-switch"},o$={class:"custom-control-label"},r$={class:"alert alert-warning border",role:"alert"},c$=["disabled"];var u$={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn("any"),i=hn(!0),o=hn(null),r=hn(null);Ua((()=>a.alert),((e,t)=>{null!=e&&(s.value="any",i.value=!0,o.value=""==e.info?.value?null:e.info?.value,r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const c=()=>{if("domain"==s.value){let e=new RegExp(_);return null==o.value||0==e.test(o.value)}if("certificate"==s.value){let e=new RegExp(f);return null==r.value||0==e.test(r.value)}return!1},u=yi((()=>a.alert?.alert_name)),d=yi((()=>{let e={value:"",label:""};if("host"!=a.page||null==a.alert)return e;let t=a.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),p=yi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=a.page||null==a.alert)return e;let t=a.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let n=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(n=`${n}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),n!==e.cli_value&&(n=`${n} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=n,e.srv_label=l,e}));let _=NtopUtils.REGEXES.domain_name_not_strict,f=NtopUtils.REGEXES.tls_certificate;const h=()=>{let e=a.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",l={delete_alerts:i.value,type:t},c=null;"host"==t?("host"==s.value?c=d.value.value:"server_host"==s.value?c=p.value.srv_value:"client_host"==s.value&&(c=p.value.cli_value),l.alert_addr=c,"flow"==e?l.flow_alert_key=a.alert.alert_id.value:"host"==e&&(l.host_alert_key=a.alert.alert_id.value)):"domain"==t?(l.delete_alerts=!1,l.alert_domain=o.value):"certificate"==t&&(l.delete_alerts=!1,l.alert_certificate=r.value),m(),n("exclude",l)},m=()=>{l.value.close()};t({show:()=>{l.value.show()},close:m}),dl((()=>{}));const g=e=>i18n(e);return(t,n)=>(Es(),Fs(hp,{onShowed:n[9]||(n[9]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(g("exclude_check"))+": ",1),Vs("span",{innerHTML:yn(u)},null,8,jk)])),body:ma((()=>[Vs("div",Lk,[Vs("div",null,[Vs("label",null,[Ws(ee(g("exclude_check"))+' "',1),Vs("b",{innerHTML:yn(u)},null,8,Rk),Ws('". '),Vs("span",zk,ee(g("exclude_for"))+":",1)]),Vs("div",Bk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":n[0]||(n[0]=e=>s.value=e)},null,512),[[Do,s.value]]),Vs("label",Vk,[Vs("span",null,ee(g("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Es(),Us("div",qk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":n[1]||(n[1]=e=>s.value=e)},null,512),[[Do,s.value]]),Vs("label",Hk,[Vs("span",null,ee(yn(d).label),1)])])):Js("v-if",!0),"flow"==e.page?(Es(),Us($s,{key:1},[Vs("div",Gk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Do,s.value]]),Vs("label",Wk,[Vs("span",null,ee(g("client"))+": "+ee(yn(p).cli_label),1)])]),Vs("div",Kk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":n[3]||(n[3]=e=>s.value=e)},null,512),[[Do,s.value]]),Vs("label",Jk,[Vs("span",null,ee(g("server"))+": "+ee(yn(p).srv_label),1)])])],64)):Js("v-if",!0)]),null!=o.value||null!=r.value?(Es(),Us("div",Yk,[Vs("label",null,[Vs("span",Zk,ee(g("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=o.value?(Es(),Us("div",Xk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":n[4]||(n[4]=e=>s.value=e)},null,512),[[Do,s.value]]),Vs("label",Qk,[Vs("span",null,ee(g("check_exclusion.domain"))+":",1)]),yl(Vs("input",{type:"text",pattern:yn(_),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e),class:"form-check-label custom-width"},null,8,e$),[[Io,o.value]])])):Js("v-if",!0),null!=r.value?(Es(),Us("div",t$,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":n[6]||(n[6]=e=>s.value=e)},null,512),[[Do,s.value]]),Vs("label",n$,[Vs("span",null,ee(g("check_exclusion.tls_certificate"))+":",1)]),yl(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),pattern:yn(f),required:"",class:"form-check-label custom-width"},null,8,a$),[[Io,r.value]])])):Js("v-if",!0)])):Js("v-if",!0)]),"domain"!=s.value&&"certificate"!=s.value?(Es(),Us($s,{key:0},[yl(Vs("div",{class:"message alert alert-danger"},ee(g("show_alerts.confirm_delete_filtered_alerts")),513),[[Jo,i.value]]),l$,Vs("div",s$,[Vs("div",i$,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":n[8]||(n[8]=e=>i.value=e)},null,512),[[Uo,i.value]]),Vs("label",o$,ee(g("delete_disabled_alerts")),1)])])],64)):Js("v-if",!0),Vs("div",r$,ee(g("show_alerts.confirm_filter_alert")),1)])),footer:ma((()=>[Vs("button",{type:"button",onClick:h,disabled:c(),class:"btn btn-warning"},ee(g("filter")),9,c$)])),_:1},512))}};fp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),u$.__scopeId="data-v-19c5b1f1",u$.__file="http_src/vue/modal-alerts-filter.vue";let d$={PageStats:Jh,PageAssetTable:am,PagePeriodicityTable:mm,PageServiceTable:Om,PageServiceMap:Zm,PagePeriodicityMap:gg,PageAssetMap:Dg,PageDeviceExclusions:Vv,PageHostTLS:tb,PageHostSSH:cb,PageHomeMap:gb,PageSankey:yb,PageHostRules:Ky,PageAlertAnalysis:hw,PageHostMap:Cw,PageVLANPortsFlowSankey:Lw,PageHostDetailsApplications:xb,PageHostDetailsTraffic:zb,PageHostDetailsPackets:Yb,PageHostDetailsFlowSankey:by,PageHostDetailsPorts:aw,PageAggregatedLiveFlows:Hw,AlertInfo:wh,Chart:Id,Datatable:Sh,DateTimeRangePicker:Rd,NetworkMap:Km,RangePicker:bx,PageNavbar:nv,SimpleTable:Mx,SelectSearch:Ld,TabList:Yh,Sankey:qx,NoteList:wy,Loading:Xb,ListTimeseries:m_,Modal:hp,ModalAddCheckExclusion:Fk,ModalAlertsFilter:u$,ModalFilters:Gw,ModalTimeseries:Wf,ModalTrafficExtraction:Kf,ModalDeleteConfirm:tm,ModalSnapshot:Yp,ModalAddDeviceExclusion:Tv,ModalEditDeviceExclusion:Bv,ModalAddHostRules:Ly,Vue:Od};window.ntopVue=d$;var p$=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function _$(){const e=e=>$(p$[3])[p$[2]]($(e)[p$[1]]())[p$[0]]();let t=p$[4];const n=(()=>{let n=$(t),a=i18n(p$[5])[p$[7]](p$[6]);$(p$[8],n)[p$[0]](a[0]),$(p$[9],n)[p$[0]](a[1]);let l=`${p$[10]}${i18n(p$[11])}${p$[12]}`;return $(p$[13],n)[p$[0]](l),e(n)})(),a=()=>{$(p$[14])[p$[2]](n)};a();const l=()=>$(p$[16])[p$[15]]()[p$[15]]()[p$[15]]()[p$[15]]()[p$[15]]();ntopng_events_manager[p$[23]](p$[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=l();if(null==t)return!1;let a=t[p$[1]]();$(p$[16],a)[p$[0]](p$[17]),$(p$[18],a)[p$[0]](p$[17]);const s=e(a);return n===s})()&&((()=>{let e=l();null!=e&&e[p$[19]]()})(),a()),(e=>{$(p$[16])[p$[0]](e[p$[20]]),$(p$[18])[p$[0]](e[p$[21]])})(t)}))}$(document)[p$[24]]((()=>_$()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnRvcG5nLmpzIiwic291cmNlcyI6WyIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbnRvcC11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9kYXRhdGFibGUvYm9vdHN0cmFwLWRhdGF0YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9lYnBmLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2dyYXBoL2dyYXBoLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL21vZGFsL21vZGFsLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy91dGlsaXRpZXMuanMiLCIuLi8uLi9odHRwX3NyYy92YWxpZGF0b3JzL250b3BuZy12YWxpZGF0b3JzLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmFsaWRhdG9ycy92YWxpZGF0b3JzLmpzIiwiLi4vLi4vaHR0cF9zcmMvc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvY2hhcnRzL3BpZS1jaGFydC5qcyIsIi4uLy4uL2h0dHBfc3JjL3NlcnZpY2VzL3NlcnZpY2VzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy93aWRnZXQvd2lkZ2V0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvc2lkZWJhci9zaWRlYmFyLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9udG9wQ2hhcnRBcGV4LmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20tYnJvd3Nlci5wcm9kLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9jb21wb25lbnRzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmlld3MvcHVibGljL2Jsb2cvYmxvZy1ub3RpZmljYXRpb24tdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvY2hhcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NlbGVjdC1zZWFyY2gudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGEtdGltZS1yYW5nZS1waWNrZXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGEtdGltZS1yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWJjNmYxNDMwJmxhbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtaW5qZWN0L2Rpc3Qvc3R5bGUtaW5qZWN0LmVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzFkZWZmZTAmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1zbmFwc2hvdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbGlzdC10aW1lc2VyaWVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9ob3N0X3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvc25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9tZXRyaWNzLWNvbnN0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvdGltZXNlcmllcy11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXRpbWVzZXJpZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wYmU5NzhjNCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRvd25sb2FkLWZpbGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRlOTgxMWE4JmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvZGF0YXRhYmxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXN0YXRzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90YWItbGlzdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFiLWxpc3QudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWUwNWEzMzdhJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYXNzZXQtdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYXNzZXQtdGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU3Y2U3ZjYwJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9M2RlYmM3YTMmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zZXJ2aWNlLXRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MWI1ZGYyNSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL25ldHdvcmstbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZmMDhiNTczJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1wZXJpb2RpY2l0eS1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktbWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04MDBhYjUxZSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYXNzZXQtbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LW1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjliMjI4NmUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLW5hdmJhci52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uYXZiYXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTAzNDQwNDllJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YjQzNWYzYWEmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtdGxzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtdGxzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZWIyNDdiNyZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1zc2gudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1zc2gudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE1YmExMzc4JmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob21lLW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob21lLW1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmZiYmViY2YmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtYXBwbGljYXRpb25zLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtZGV0YWlscy1hcHBsaWNhdGlvbnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTA3YmVlMTQyJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtdHJhZmZpYy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtcGFja2V0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbG9hZGluZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvc2Fua2V5XzMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL21hcC9zYW5rZXlfdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtZmxvdy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL25vdGUtbGlzdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWhvc3QtcnVsZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1ydWxlcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtcG9ydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWxlcnQtYW5hbHlzaXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utdmxhbi1wb3J0cy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWdncmVnYXRlZC1saXZlLWZsb3dzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1maWx0ZXJzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1maWx0ZXJzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zMTE5YzgzZSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3JhbmdlLXBpY2tlci52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcmFuZ2UtcGlja2VyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hYWVlNTllYSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NpbXBsZS10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvc2ltcGxlLXRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MmFlODk2MCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWNoZWNrLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWxlcnRzLWZpbHRlci52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbnRvcF92dWUuanMiLCIuLi8uLi9odHRwX3NyYy9leHRlbnNpb25zL2NoYXJ0X2NvbG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMDE0LTIwIC0gbnRvcC5vcmdcbkRhdGUucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHsgLy9hdXRob3I6IG1laXp6XG5cdHZhciBvID0ge1xuXHRcdFwiTStcIjogdGhpcy5nZXRNb250aCgpICsgMSwgLy9tb250aFxuXHRcdFwiZCtcIjogdGhpcy5nZXREYXRlKCksICAgIC8vZGF5XG5cdFx0XCJoK1wiOiB0aGlzLmdldEhvdXJzKCksICAgLy9ob3VyXG5cdFx0XCJtK1wiOiB0aGlzLmdldE1pbnV0ZXMoKSwgLy9taW51dGVcblx0XHRcInMrXCI6IHRoaXMuZ2V0U2Vjb25kcygpLCAvL3NlY29uZFxuXHRcdFwicStcIjogTWF0aC5mbG9vcigodGhpcy5nZXRNb250aCgpICsgMykgLyAzKSwgIC8vcXVhcnRlclxuXHRcdFwiU1wiOiB0aGlzLmdldE1pbGxpc2Vjb25kcygpIC8vbWlsbGlzZWNvbmRcblx0fVxuXG5cdGlmICgvKHkrKS8udGVzdChmb3JtYXQpKSBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShSZWdFeHAuJDEsXG5cdFx0KHRoaXMuZ2V0RnVsbFllYXIoKSArIFwiXCIpLnN1YnN0cig0IC0gUmVnRXhwLiQxLmxlbmd0aCkpO1xuXHRmb3IgKHZhciBrIGluIG8pIGlmIChuZXcgUmVnRXhwKFwiKFwiICsgayArIFwiKVwiKS50ZXN0KGZvcm1hdCkpXG5cdFx0Zm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoUmVnRXhwLiQxLFxuXHRcdFx0UmVnRXhwLiQxLmxlbmd0aCA9PSAxID8gb1trXSA6XG5cdFx0XHRcdChcIjAwXCIgKyBvW2tdKS5zdWJzdHIoKFwiXCIgKyBvW2tdKS5sZW5ndGgpKTtcblx0cmV0dXJuIGZvcm1hdDtcbn1cblxuLy8gRXh0ZW5kZWQgZGlzYWJsZSBmdW5jdGlvbiBcbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRkaXNhYmxlOiBmdW5jdGlvbiAoc3RhdGUpIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyk7XG5cdFx0XHRpZiAoJHRoaXMuaXMoJ2lucHV0LCBidXR0b24sIHRleHRhcmVhLCBzZWxlY3QnKSlcblx0XHRcdFx0dGhpcy5kaXNhYmxlZCA9IHN0YXRlO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHQkdGhpcy50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBzdGF0ZSk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5jb25zdCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSA9IDAuMDA1O1xuXG5jb25zdCBiYWNrdGljayA9ICdgJztcbmNvbnN0IFJFR0VYRVMgPSB7XG5cdGlwdjQ6IFN0cmluZy5yYXdgXigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJGAsXG5cdGlwdjY6IFN0cmluZy5yYXdgXigoKFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pOil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkkfF5cXHMqKCgoWzAtOUEtRmEtZl17MSw0fTopezd9KFswLTlBLUZhLWZdezEsNH18OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezZ9KDpbMC05QS1GYS1mXXsxLDR9fCgoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwyfSl8OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NH0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwzfSl8KCg6WzAtOUEtRmEtZl17MSw0fSk/OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezN9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNH0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsMn06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Mn0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw1fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwzfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsxfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDZ9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDR9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg6KCgoOlswLTlBLUZhLWZdezEsNH0pezEsN30pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNX06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSkpKCUuKyk/XFxzKikkYCxcblx0ZG9tYWluTmFtZTogU3RyaW5nLnJhd2BeKChbYS16QS1aXXsxfSl8KFthLXpBLVpdezF9W2EtekEtWl17MX0pfChbYS16QS1aXXsxfVswLTldezF9KXwoWzAtOV17MX1bYS16QS1aXXsxfSl8KFthLXpBLVowLTldWy1fXFwuYS16QS1aMC05XXsxLDYxfVthLXpBLVowLTldKSlcXC4oW2EtekEtWl17MiwxM318W2EtekEtWjAtOS1dezIsMzB9XFwuW2EtekEtWl17MiwzfSlgLFxuXHRwb3J0OiBTdHJpbmcucmF3YF4oWzAtOV17MSw0fXxbMS01XVswLTldezR9fDZbMC00XVswLTldezN9fDY1WzAtNF1bMC05XXsyfXw2NTVbMC0yXVswLTldfDY1NTNbMC01XSkkYCxcblx0bGF0ZW5jeTogU3RyaW5nLnJhd2BeKFswLTldKlsuXSk/WzAtOV0rJGAsXG5cdHVybDogU3RyaW5nLnJhd2BeKGh0dHBzP1xcOlxcL1xcL1teXFwvXFxzXSsoXFwvLiopPykkYCxcblx0ZW1haWxVcmw6IFN0cmluZy5yYXdgXnNtdHBzPzpcXC9cXC9bLWEtekEtWjAtOTouXXsxLDI1Nn0rJGAsXG5cdG1hY0FkZHJlc3M6IFN0cmluZy5yYXdgXihbMC05QS1GYS1mXXsyfTopezV9KFswLTlBLUZhLWZdezJ9KSRgLFxuXHRob3N0bmFtZTogU3RyaW5nLnJhd2BeW2EtekEtWjAtOS5fOlxcLV17MywyNTB9fF5bYS16QS1aMC05Ll86XFwtXXszLDI1MH1AWzAtOV17MCw1fWAsXG5cdHVzZXJuYW1lOiBTdHJpbmcucmF3YF5bYS16QS1aMC05Ll9AIS0/XXszLDMwfSRgLFxuXHRzaW5nbGV3b3JkOiBTdHJpbmcucmF3YF4oPz1bYS16QS1aMC05Ll86XFwtXXszLDI1M30kKSg/IS4qW18uOlxcLV17Mn0pW15fLjpcXC1dLipbXl8uOlxcLV0kYCxcbiAgICBlbWFpbDogU3RyaW5nLnJhd2BeKFthLXpBLVowLTkuISMkJSYnKistLz0/Xl8ke2JhY2t0aWNrfXt8fX5dK0BbYS16QS1aMC05LV0rKD86XFwuW2EtekEtWjAtOS1dKykqKSRgLFxuXHRodHRwczogU3RyaW5nLnJhd2BeaHR0cHM/OlxcL1xcLy4rJGAsXG5cdHRva2VuOiBTdHJpbmcucmF3YF5bMC05YS1mXXszMn1gLFxuXHRzY29yZTogU3RyaW5nLnJhd2BeWzAtOV17MSw1fWAsXG5cdHRlbGVncmFtX2NoYW5uZWw6IFN0cmluZy5yYXdgXlswLTlcXC1dezEsMTV9YCxcblx0cGFzc3dvcmQ6IFN0cmluZy5yYXdgXltcXHdcXC8kIVxcLygpPT9eKkBfLV17NSwzMX0kYCxcblx0dGxzX2NlcnRpZmljYXRlOiBTdHJpbmcucmF3YF5bXj0sXSs9W149LF0rKCxcXHNbXj0sXSs9W149LF0rKSokYCxcblx0ZG9tYWluX25hbWVfbm90X3N0cmljdDogU3RyaW5nLnJhd2BeW2EtekEtWjAtOVxcLV9+XSsoKFxcLlthLXpBLVowLTlcXC1ffl0rKSspJGAsXG5cdG5vbl9xdW90ZWRfdGV4dDogU3RyaW5nLnJhd2BeW2EtekEtWjAtOS4tX10rJGAsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdG9wVXRpbHMge1xuXG4gIC8qIFNob3cgYW4gb3ZlcmxheSB0byBoaWRlIGxvYWRpbmcgKi9cbiAgc3RhdGljIHRvZ2dsZU92ZXJsYXlzKHRpbWUgPSA1MDApIHtcbiAgICAkKGAub3ZlcmxheWApLnRvZ2dsZSh0aW1lKTtcbiAgfVxuICBcbiAgc3RhdGljIHNob3dPdmVybGF5cyh0aW1lID0gNTAwKSB7XG4gICAgJChgLm92ZXJsYXlgKS5mYWRlSW4odGltZSk7XG4gIH1cbiAgXG4gIHN0YXRpYyBoaWRlT3ZlcmxheXModGltZSA9IDUwMCkge1xuICAgICQoYC5vdmVybGF5YCkuZmFkZU91dCh0aW1lKTtcbiAgfVxuXG5cdHN0YXRpYyBnZXQgUkVHRVhFUygpIHtcblx0XHRyZXR1cm4gUkVHRVhFUztcblx0fVxuXG5cdHN0YXRpYyBnZXRJUHY0UmVnZXhXaXRoQ0lEUigpIHtcblx0XHRjb25zdCBsZW5ndGggPSBSRUdFWEVTLmlwdjQubGVuZ3RoO1xuXHRcdHJldHVybiBgJHtSRUdFWEVTLmlwdjQuc3Vic3RyaW5nKDAsIGxlbmd0aCAtIDEpfShcXFxcLz8pKFxcXFxiKFswLTldfFsxMl1bMC05XXwzWzAtMl0pP1xcXFxiKSRgO1xuXHR9XG5cblx0c3RhdGljIGdldElQdjZSZWdleFdpdGhDSURSKCkge1xuXHRcdGNvbnN0IGxlbmd0aCA9IFJFR0VYRVMuaXB2Ni5sZW5ndGg7XG5cdFx0cmV0dXJuIGAke1JFR0VYRVMuaXB2Ni5zdWJzdHJpbmcoMCwgbGVuZ3RoIC0gMSl9KFxcXFwvPylcXFxcYihbMC05XXxbMS05XVswLTldfDFbMDFdWzAtOV18MTJbMC04XSk/XFxcXGIkYDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNvbHZlIGEgaG9zdG5hbWUgYnkgZG9pbmcgYSBETlMgUmVzb2x2ZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lIFRoZSBob3N0bmFtZSB0byByZXNvbHZlXG5cdCAqL1xuXHRzdGF0aWMgYXN5bmMgcmVzb2x2ZUROUyhob3N0bmFtZSA9IFwibnRvcC5vcmdcIikge1xuXG5cdFx0Ly8gcmVzb2x2ZSB0aGUgaG9zdG5hbWUgYnkgZG9pbmcgYSBmZXRjaCByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBmZXRjaChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2Rucy9yZXNvbHZlLmx1YT9ob3N0bmFtZT0ke2hvc3RuYW1lfWApO1xuXHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHR9XG5cdFx0Y2F0Y2ggKGVycikge1xuXHRcdFx0Ly8gcHJpbnRzIG91dCB0aGUgZXJyb3IgaWYgdGhlIHJlcXVlc3QgZmFpbHNcblx0XHRcdGNvbnNvbGUuZXJyb3IoYFNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gcmVzb2x2aW5nIGhvc3RuYW1lOiAke2Vycn1gKVxuXHRcdH1cblxuXHRcdC8vIGlmIHRoZSByZXF1ZXN0IGhhcyBmYWlsZWQgcmV0dXJuIGEgcGxhY2Vob2xkZXIgcmVzcG9uc2Vcblx0XHQvLyBpbmRpY2F0aW5nIHRoZSBmYWlsdXJlXG5cdFx0cmV0dXJuIHsgcmM6IC0xLCByY19zdHI6IFwiRkFJTEVEX0hUVFBfUkVRVUVTVFwiIH07XG5cdH1cblxuXHQvKipcblx0ICogUmVwbGFjZSB0aGUgaW5wdXRzIHdoaWNoIGNvbnRhaW4gdGhlIFtkYXRhLXBhdHRlcm5dIGF0dHJpYnV0ZVxuXHQgKiB3aXRoIHRoZSBbcGF0dGVybl0gYXR0cmlidXRlLlxuXHQgKi9cblx0c3RhdGljIGluaXREYXRhUGF0dGVybnMoKSB7XG5cdFx0Ly8gZm9yIGVhY2ggaW5wdXQgd2l0aCB0aGUgZGF0YS1wYXR0ZXJuIGF0dHJpYnV0ZVxuXHRcdC8vIHN1YnN0aXR1dGUgdGhlIGRhdGEtcGF0dGVybiB3aXRoIHRoZSByaWdodCByZWdleGVzXG5cdFx0JChgaW5wdXRbZGF0YS1wYXR0ZXJuXWApLmVhY2goZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQvLyBpZiB0aGUgcGF0dGVybiBpcyBlbXB0eSB0aGVuIHByaW50IGEgd2FybiBpbnNpZGUgdGhlIGNvbnNvbGVcblx0XHRcdGNvbnN0IGRhdGFQYXR0ZXJuID0gJCh0aGlzKS5kYXRhKCdwYXR0ZXJuJyk7XG5cdFx0XHRpZiAoIWRhdGFQYXR0ZXJuKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgQW4gZW1wdHkgZGF0YS1wYXR0ZXJuIG9uIGFuIGlucHV0IHdhcyBmb3VuZCFgLCB0aGlzKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBidWlsZCB0aGUgcmVnZXhwIHBhdHRlcm4gZm9yIHRoZSBpbnB1dFxuXHRcdFx0Y29uc3QgcGF0dGVybiA9IGRhdGFQYXR0ZXJuLnNwbGl0KCd8JykubWFwKHAgPT4gUkVHRVhFU1twXS50b1N0cmluZygpKS5qb2luKCd8Jyk7XG5cdFx0XHQvLyBsb2FkIHRoZSBwYXR0ZXJuXG5cdFx0XHQkKHRoaXMpLmF0dHIoJ3BhdHRlcm4nLCBwYXR0ZXJuKTtcblx0XHRcdC8vIHJlbW92ZSB0aGUgZGF0YS1wYXR0ZXJuIGZyb20gdGhlIGlucHV0XG5cdFx0XHQkKHRoaXMpLnJlbW92ZUF0dHIoJ2RhdGEtcGF0dGVybicpO1xuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIGlzX2dvb2RfaXB2NChpcHY0KSB7XG5cdFx0cmV0dXJuIG5ldyBSZWdFeHAoUkVHRVhFUy5pcHY0KS50ZXN0KGlwdjQpO1xuXHR9XG5cblx0c3RhdGljIGlzX2dvb2RfaXB2NihpcHY2KSB7XG5cdFx0cmV0dXJuIG5ldyBSZWdFeHAoUkVHRVhFUy5pcHY2KS50ZXN0KGlwdjYpO1xuXHR9XG5cblx0c3RhdGljIGlzX21hY19hZGRyZXNzKG1hYykge1xuXHRcdHJldHVybiBuZXcgUmVnRXhwKFJFR0VYRVMubWFjQWRkcmVzcykudGVzdChtYWMpO1xuXHR9XG5cblx0c3RhdGljIGlzTnVtZXJpYyh2YWx1ZSkge1xuXHRcdHJldHVybiAvXlxcZCskLy50ZXN0KHZhbHVlKTtcblx0fVxuXG5cdHN0YXRpYyBpc19uZXR3b3JrX21hc2sod2hhdCwgb3B0aW9uYWxfbWFzaykge1xuXHRcdHZhciBlbGVtcyA9IHdoYXQuc3BsaXQoXCIvXCIpO1xuXHRcdHZhciBtYXNrID0gbnVsbDtcblx0XHR2YXIgaXBfYWRkcjtcblxuXHRcdGlmIChlbGVtcy5sZW5ndGggIT0gMikge1xuXHRcdFx0aWYgKCFvcHRpb25hbF9tYXNrKVxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0aXBfYWRkciA9IHdoYXQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlwX2FkZHIgPSBlbGVtc1swXTtcblxuXHRcdFx0aWYgKCFOdG9wVXRpbHMuaXNOdW1lcmljKGVsZW1zWzFdKSlcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdG1hc2sgPSBwYXJzZUludChlbGVtc1sxXSk7XG5cblx0XHRcdGlmIChtYXNrIDwgMClcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0aWYgKE50b3BVdGlscy5pc19nb29kX2lwdjQoaXBfYWRkcikpIHtcblx0XHRcdGlmIChtYXNrID09PSBudWxsKVxuXHRcdFx0XHRtYXNrID0gMzI7XG5cdFx0XHRlbHNlIGlmIChtYXNrID4gMzIpXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcImlwdjRcIixcblx0XHRcdFx0YWRkcmVzczogaXBfYWRkcixcblx0XHRcdFx0bWFzazogbWFza1xuXHRcdFx0fTtcblx0XHR9IGVsc2UgaWYgKE50b3BVdGlscy5pc19nb29kX2lwdjYoZWxlbXNbMF0pKSB7XG5cdFx0XHRpZiAobWFzayA9PT0gbnVsbClcblx0XHRcdFx0bWFzayA9IDEyODtcblx0XHRcdGVsc2UgaWYgKG1hc2sgPiAxMjgpXG5cdFx0XHRcdHJldHVybiAoZmFsc2UpO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcImlwdjZcIixcblx0XHRcdFx0YWRkcmVzczogaXBfYWRkcixcblx0XHRcdFx0bWFzazogbWFza1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHN0YXRpYyBmYml0cyhiaXRzKSB7XG5cdFx0Y29uc3Qgc2l6ZXMgPSBbJ2JwcycsICdLYnBzJywgJ01icHMnLCAnR2JwcycsICdUYnBzJ107XG5cblx0XHRpZiAodHlwZW9mIChiaXRzKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdGlmIChiaXRzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChiaXRzID4gMCkgJiYgKGJpdHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBicHMnKTtcblx0XHR2YXIgYml0c19sb2cxMDAwID0gTWF0aC5sb2coYml0cykgLyBNYXRoLmxvZygxMDAwKVxuXHRcdHZhciBpID0gcGFyc2VJbnQoTWF0aC5mbG9vcihiaXRzX2xvZzEwMDApKTtcblx0XHRpZiAoaSA8IDAgfHwgaXNOYU4oaSkpIHtcblx0XHRcdGkgPSAwO1xuXHRcdH0gZWxzZSBpZiAoaSA+PSBzaXplcy5sZW5ndGgpIHsgLy8gcHJldmVudHMgb3ZlcmZsb3dzXG5cdFx0XHRyZXR1cm4gXCI+IFwiICsgc2l6ZXNbc2l6ZXMubGVuZ3RoIC0gMV1cblx0XHR9XG5cblx0XHRpZiAoaSA8PSAxKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZChiaXRzIC8gTWF0aC5wb3coMTAwMCwgaSkgKiAxMDApIC8gMTAwICsgJyAnICsgc2l6ZXNbaV1cblx0XHR9IFxuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIHJldCA9IHBhcnNlRmxvYXQoYml0cyAvIE1hdGgucG93KDEwMDAsIGkpKS50b0ZpeGVkKDIpXG5cdFx0XHRpZiAocmV0ICUgMSA9PSAwKVxuXHRcdFx0XHRyZXQgPSBNYXRoLnJvdW5kKHJldClcblx0XHRcdHJldHVybiByZXQgKyAnICcgKyBzaXplc1tpXVxuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBleHBvcnRfcmF0ZShlcHMpIHtcblx0XHRpZiAodHlwZW9mIChlcHMpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdFx0cmV0dXJuIFwiLVwiO1xuXG5cdFx0dmFyIHNpemVzID0gWydleHAvcycsICdLZXhwL3MnXTtcblx0XHRpZiAoZXBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChlcHMgPiAwKSAmJiAoZXBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgZXhwcy9zJyk7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGVwcywgc2l6ZXMsIDEwMDApO1xuXG5cdFx0Ly8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG5cdFx0cmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBleHBvcnRzX2Zvcm1hdChleHBvcnRzKSB7XG5cdFx0aWYgKHR5cGVvZiAoZXhwb3J0cykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHR2YXIgZXhwb3J0c19sYWJlbCA9IGkxOG5fZXh0LmV4cG9ydHMudG9Mb3dlckNhc2UoKTtcblxuXHRcdHZhciBzaXplcyA9IFtleHBvcnRzX2xhYmVsLCAnSyAnICsgZXhwb3J0c19sYWJlbF07XG5cdFx0aWYgKGV4cG9ydHMgPT0gMCkgcmV0dXJuICcwJztcblx0XHRpZiAoKGV4cG9ydHMgPiAwKSAmJiAoZXhwb3J0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGV4cHMvcycpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShleHBvcnRzLCBzaXplcywgMTAwMCk7XG5cblx0XHQvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcblx0XHRyZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuXHR9XG5cblx0c3RhdGljIGZiaXRzX2Zyb21fYnl0ZXMoYnl0ZXMpIHtcblx0XHRpZiAodHlwZW9mIChieXRlcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cdFx0cmV0dXJuIChOdG9wVXRpbHMuZmJpdHMoYnl0ZXMgKiA4KSk7XG5cdH1cblxuXHRzdGF0aWMgZnBhY2tldHMocHBzKSB7XG5cdFx0aWYgKHR5cGVvZiAocHBzKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdHZhciBzaXplcyA9IFsncHBzJywgJ0twcHMnLCAnTXBwcycsICdHcHBzJywgJ1RwcHMnXTtcblx0XHRpZiAocHBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChwcHMgPiAwKSAmJiAocHBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgcHBzJyk7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKHBwcywgc2l6ZXMsIDEwMDApO1xuXG5cdFx0Ly8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG5cdFx0cmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBmcG9pbnRzKHBwcykge1xuXHRcdGlmICh0eXBlb2YgKHBwcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHR2YXIgc2l6ZXMgPSBbJ3B0L3MnLCAnS3B0L3MnLCAnTXB0L3MnLCAnR3B0L3MnLCAnVHB0L3MnXTtcblx0XHRpZiAocHBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChwcHMgPiAwKSAmJiAocHBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgcHQvcycpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShwcHMsIHNpemVzLCAxMDAwKTtcblxuXHRcdC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG5cdH1cblxuXHRzdGF0aWMgZmZsb3dzKGZwcykge1xuXHRcdGlmICh0eXBlb2YgKGZwcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHR2YXIgc2l6ZXMgPSBbJ2ZwcycsICdLZnBzJywgJ01mcHMnLCAnR2ZwcycsICdUZnBzJ107XG5cdFx0aWYgKGZwcyA9PSAwKSByZXR1cm4gJzAnO1xuXHRcdGlmICgoZnBzID4gMCkgJiYgKGZwcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGZwcycpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShmcHMsIHNpemVzLCAxMDAwKTtcblxuXHRcdC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG5cdH1cblxuXHRzdGF0aWMgZm1zZ3MobXBzKSB7XG5cdFx0aWYgKHR5cGVvZiAobXBzKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdHZhciBzaXplcyA9IFsnbXNnL3MnLCAnS21zZy9zJywgJ01zZy9zJywgJ0dtc2cvcycsICdUbXNnL3MnXTtcblx0XHRpZiAobXBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChtcHMgPiAwKSAmJiAobXBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgbXBzJyk7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKG1wcywgc2l6ZXMsIDEwMDApO1xuXG5cdFx0Ly8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG5cdFx0cmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBmbWlsbGlzKG1zKSB7XG5cblx0XHRpZiAobXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuICctJztcblx0XHRjb25zdCBzaXplcyA9IFsnbXMnXTtcblx0XHRjb25zdCByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShtcywgc2l6ZXMsIDEwMDApO1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG5cdH1cblxuXHRzdGF0aWMgZm5vbmUodmFsKSB7XG5cblx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiAnLSc7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQodmFsICogMTAwKSAvIDEwMDtcblx0fVxuXG5cdHN0YXRpYyBmYWxlcnRzKGFwcykge1xuXHRcdGlmICh0eXBlb2YgKGFwcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHQvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcblx0XHRyZXR1cm4gTWF0aC5yb3VuZChhcHMgKiAxMDApIC8gMTAwICsgJyBhbGVydHMvcyc7XG5cdH1cblxuXHRzdGF0aWMgZmludCh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdHZhciB4ID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIik7XG5cdH1cblxuXHRzdGF0aWMgZmZsb2F0KHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiAodmFsdWUpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdFx0cmV0dXJuIFwiLVwiO1xuXG5cdFx0dmFyIHggPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMC47XG5cdFx0cmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIik7XG5cdH1cblxuXHRzdGF0aWMgZnBlcmNlbnQodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHRyZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMCkgLyAxMDAgKyBcIiVcIjtcblx0fVxuXG5cdHN0YXRpYyBmZGF0ZSh3aGVuKSB7XG5cdFx0dmFyIGVwb2NoID0gd2hlbiAqIDEwMDA7XG5cdFx0dmFyIGQgPSBuZXcgRGF0ZShlcG9jaCk7XG5cblx0XHRyZXR1cm4gKGQpO1xuXHR9XG5cblx0c3RhdGljIGNhcGl0YWxpc2VGaXJzdExldHRlcihzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuXHR9XG5cblx0c3RhdGljIGdldF90cmVuZChhY3R1YWwsIGJlZm9yZSkge1xuXHRcdGlmICgoYWN0dWFsID09PSB1bmRlZmluZWQpIHx8IChiZWZvcmUgPT09IHVuZGVmaW5lZCkgfHwgKGFjdHVhbCA9PSBiZWZvcmUpKSB7XG5cdFx0XHRyZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1taW51c1xcXCI+PC9pPlwiKTtcblx0XHR9IGVsc2UgaWYgKGFjdHVhbCA+IGJlZm9yZSkge1xuXHRcdFx0cmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctdXBcXFwiPjwvaT5cIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLWFycm93LWRvd25cXFwiPjwvaT5cIik7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGFiYnJldmlhdGVTdHJpbmcoc3RyLCBsZW4pIHtcblx0XHRpZiAoIXN0cilcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdGlmIChzdHIubGVuZ3RoIDwgbGVuKVxuXHRcdFx0cmV0dXJuIHN0cjtcblx0XHRyZXR1cm4gc3RyLnN1YnN0cmluZygwLCBsZW4pICsgXCIuLi5cIjtcblx0fVxuXG5cdHN0YXRpYyB0b0ZpeGVkMihudW0pIHtcblx0XHRpZiAoIW51bSkgcmV0dXJuIFwiXCI7XG5cdFx0cmV0dXJuIG51bS50b0ZpeGVkKDIpO1xuXHR9XG5cblx0Ly8gQ29udmVydCBieXRlcyB0byBodW1hbiByZWFkYWJsZSBmb3JtYXRcblx0c3RhdGljIGJ5dGVzVG9TaXplKGJ5dGVzKSB7XG5cdFx0aWYgKHR5cGVvZiAoYnl0ZXMpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdFx0cmV0dXJuIFwiLVwiO1xuXG5cdFx0dmFyIHByZWNpc2lvbiA9IDI7XG5cdFx0dmFyIGtpbG9ieXRlID0gMTAyNDtcblx0XHR2YXIgbWVnYWJ5dGUgPSBraWxvYnl0ZSAqIDEwMjQ7XG5cdFx0dmFyIGdpZ2FieXRlID0gbWVnYWJ5dGUgKiAxMDI0O1xuXHRcdHZhciB0ZXJhYnl0ZSA9IGdpZ2FieXRlICogMTAyNDtcblxuXHRcdGlmICgoYnl0ZXMgPj0gMCkgJiYgKGJ5dGVzIDwga2lsb2J5dGUpKVxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQoYnl0ZXMudG9GaXhlZChwcmVjaXNpb24pKSArIFwiIEJ5dGVzXCI7XG5cdFx0ZWxzZSBpZiAoKGJ5dGVzID49IGtpbG9ieXRlKSAmJiAoYnl0ZXMgPCBtZWdhYnl0ZSkpXG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBraWxvYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgS0InO1xuXHRcdGVsc2UgaWYgKChieXRlcyA+PSBtZWdhYnl0ZSkgJiYgKGJ5dGVzIDwgZ2lnYWJ5dGUpKVxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQoKGJ5dGVzIC8gbWVnYWJ5dGUpLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIE1CJztcblx0XHRlbHNlIGlmICgoYnl0ZXMgPj0gZ2lnYWJ5dGUpICYmIChieXRlcyA8IHRlcmFieXRlKSlcblx0XHRcdHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIGdpZ2FieXRlKS50b0ZpeGVkKHByZWNpc2lvbikpICsgJyBHQic7XG5cdFx0ZWxzZSBpZiAoYnl0ZXMgPj0gdGVyYWJ5dGUpXG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyB0ZXJhYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgVEInO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBwYXJzZUZsb2F0KGJ5dGVzLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIEJ5dGVzJztcblx0fVxuXG5cdHN0YXRpYyBkcmF3VHJlbmQoY3VycmVudCwgbGFzdCwgd2l0aENvbG9yKSB7XG5cdFx0aWYgKGN1cnJlbnQgPT0gbGFzdCkge1xuXHRcdFx0cmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtbWludXNcXFwiPjwvaT5cIik7XG5cdFx0fSBlbHNlIGlmIChjdXJyZW50ID4gbGFzdCkge1xuXHRcdFx0cmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctdXBcXFwiXCIgKyB3aXRoQ29sb3IgKyBcIj48L2k+XCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1hcnJvdy1kb3duXFxcIj48L2k+XCIpO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyB0b2dnbGVBbGxUYWJzKGVuYWJsZWQpIHtcblx0XHRpZiAoZW5hYmxlZCA9PT0gdHJ1ZSlcblx0XHRcdCQoXCIjaGlzdG9yaWNhbC10YWJzLWNvbnRhaW5lclwiKS5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKS5maW5kKFwiYVwiKS5hdHRyKFwiZGF0YS10b2dnbGVcIiwgXCJ0YWJcIik7XG5cdFx0ZWxzZVxuXHRcdFx0JChcIiNoaXN0b3JpY2FsLXRhYnMtY29udGFpbmVyXCIpLmZpbmQoXCJsaVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLmZpbmQoXCJhXCIpLnJlbW92ZUF0dHIoXCJkYXRhLXRvZ2dsZVwiKTtcblx0fVxuXG5cdHN0YXRpYyBkaXNhYmxlQWxsRHJvcGRvd25zQW5kVGFicygpIHtcblx0XHQkKFwic2VsZWN0XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0JCh0aGlzKS5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG5cdFx0fSk7XG5cdFx0TnRvcFV0aWxzLnRvZ2dsZUFsbFRhYnMoZmFsc2UpXG5cdH1cblxuXHRzdGF0aWMgZW5hYmxlQWxsRHJvcGRvd25zQW5kVGFicygpIHtcblx0XHQkKFwic2VsZWN0XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0JCh0aGlzKS5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuXHRcdH0pO1xuXHRcdE50b3BVdGlscy50b2dnbGVBbGxUYWJzKHRydWUpXG5cdH1cblxuXHRzdGF0aWMgY2FwaXRhbGl6ZShzKSB7XG5cdFx0cmV0dXJuIHMgJiYgc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcblx0fVxuXG5cdHN0YXRpYyBhZGRDb21tYXMoblN0cikge1xuXHRcdG5TdHIgKz0gJyc7XG5cdFx0dmFyIHggPSBuU3RyLnNwbGl0KCcuJyk7XG5cdFx0dmFyIHgxID0geFswXTtcblx0XHR2YXIgeDIgPSB4Lmxlbmd0aCA+IDEgPyAnLicgKyB4WzFdIDogJyc7XG5cdFx0dmFyIHJneCA9IC8oXFxkKykoXFxkezN9KS87XG5cdFx0d2hpbGUgKHJneC50ZXN0KHgxKSkge1xuXHRcdFx0eDEgPSB4MS5yZXBsYWNlKHJneCwgJyQxJyArICcsJyArICckMicpO1xuXHRcdH1cblx0XHRyZXR1cm4geDEgKyB4Mjtcblx0fVxuXG5cdHN0YXRpYyBzY2FsZVZhbHVlKHZhbCwgc2l6ZXMsIHNjYWxlLCBkZWNpbWFscykge1xuXHRcdGlmICh2YWwgPT0gMCkgcmV0dXJuIFswLCBzaXplc1swXV07XG5cdFx0bGV0IGZhY3RvciA9IGRlY2ltYWxzID8gKDEwICogZGVjaW1hbHMpIDogMTA7XG5cblx0XHR2YXIgaSA9IHBhcnNlSW50KE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSAvIE1hdGgubG9nKHNjYWxlKSkpO1xuXHRcdGlmIChpIDwgMCB8fCBpc05hTihpKSkge1xuXHRcdFx0aSA9IDA7XG5cdFx0fSBlbHNlIGlmIChpID49IHNpemVzLmxlbmd0aCkge1xuXHRcdFx0aSA9IHNpemVzLmxlbmd0aCAtIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtNYXRoLnJvdW5kKCh2YWwgLyBNYXRoLnBvdyhzY2FsZSwgaSkpICogZmFjdG9yKSAvIGZhY3Rvciwgc2l6ZXNbaV1dO1xuXHR9XG5cblx0c3RhdGljIGZvcm1hdFZhbHVlKHZhbCwgZGVjaW1hbHMpIHtcblx0XHR2YXIgc2l6ZXMgPSBbJycsICdLJywgJ00nLCAnRycsICdUJ107XG5cdFx0aWYgKHZhbCA9PSAwKSByZXR1cm4gJzAnO1xuXHRcdGlmICgodmFsID4gMCkgJiYgKHZhbCA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpO1xuXHRcdGlmIChkZWNpbWFscyA9PSB1bmRlZmluZWQpIGRlY2ltYWxzID0gMDtcblx0XHR2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUodmFsLCBzaXplcywgMTAwMCwgZGVjaW1hbHMpO1xuXG5cdFx0cmV0dXJuIHJlc1swXSArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBmb3JtYXRQYWNrZXRzKG4pIHtcblx0XHRyZXR1cm4gKE50b3BVdGlscy5hZGRDb21tYXMobi50b0ZpeGVkKDApKSArIFwiIFBrdHNcIik7XG5cdH1cblxuXHRzdGF0aWMgYnl0ZXNUb1ZvbHVtZShieXRlcykge1xuXHRcdHZhciBzaXplcyA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInXTtcblx0XHRpZiAoYnl0ZXMgPT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcblx0XHRpZiAoKGJ5dGVzID4gMCkgJiYgKGJ5dGVzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArIFwiIEJ5dGVzXCIpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShieXRlcywgc2l6ZXMsIDEwMjQpO1xuXG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQocmVzWzBdKSArIFwiIFwiICsgcmVzWzFdO1xuXHR9O1xuXG5cdHN0YXRpYyBieXRlc1RvVm9sdW1lQW5kTGFiZWwoYnl0ZXMpIHtcblx0XHR2YXIgc2l6ZXMgPSBbJ0J5dGVzJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ107XG5cdFx0aWYgKGJ5dGVzID09IDApIHJldHVybiAnMCBCeXRlcyc7XG5cdFx0dmFyIGkgPSBwYXJzZUludChNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKDEwMjQpKSk7XG5cdFx0cmV0dXJuIFsoYnl0ZXMgLyBNYXRoLnBvdygxMDI0LCBpKSkudG9GaXhlZCgyKSwgc2l6ZXNbaV1dO1xuXHR9O1xuXG5cdHN0YXRpYyBiaXRzVG9TaXplKGJpdHMsIGZhY3Rvcikge1xuXHRcdGZhY3RvciA9IGZhY3RvciB8fCAxMDAwO1xuXHRcdHZhciBzaXplcyA9IFsnYnBzJywgJ0ticHMnLCAnTWJwcycsICdHYnBzJywgJ1RicHMnXTtcblx0XHRpZiAoYml0cyA9PSAwKSByZXR1cm4gJzAgYnBzJztcblx0XHRpZiAoKGJpdHMgPiAwKSAmJiAoYml0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyBcIiBicHNcIik7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGJpdHMsIHNpemVzLCBmYWN0b3IpO1xuXG5cdFx0cmV0dXJuIHJlc1swXS50b0ZpeGVkKDIpICsgXCIgXCIgKyByZXNbMV07XG5cdH07XG5cblx0c3RhdGljIHNlY29uZHNUb1RpbWUoc2Vjb25kcykge1xuXG5cdFx0aWYgKHNlY29uZHMgPCAxKSB7XG5cdFx0XHRyZXR1cm4gKFwiPCAxIHNlY1wiKVxuXHRcdH1cblxuXHRcdGxldCBkYXlzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gODY0MDApXG5cdFx0bGV0IGhvdXJzID0gTWF0aC5mbG9vcigoc2Vjb25kcyAvIDM2MDApIC0gKGRheXMgKiAyNCkpXG5cdFx0bGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKChzZWNvbmRzIC8gNjApIC0gKGRheXMgKiAxNDQwKSAtIChob3VycyAqIDYwKSlcblx0XHRsZXQgc2VjID0gc2Vjb25kcyAlIDYwXG5cdFx0bGV0IG1zZyA9IFwiXCIsIG1zZ19hcnJheSA9IFtdXG5cblx0XHRpZiAoZGF5cyA+IDApIHtcblx0XHRcdGxldCB5ZWFycyA9IE1hdGguZmxvb3IoZGF5cyAvIDM2NSlcblxuXHRcdFx0aWYgKHllYXJzID4gMCkge1xuXHRcdFx0XHRkYXlzID0gZGF5cyAlIDM2NVxuXG5cdFx0XHRcdG1zZyA9IHllYXJzICsgXCIgeWVhclwiXG5cdFx0XHRcdGlmICh5ZWFycyA+IDEpIHtcblx0XHRcdFx0XHRtc2cgKz0gXCJzXCJcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1zZ19hcnJheS5wdXNoKG1zZylcblx0XHRcdFx0bXNnID0gXCJcIlxuXHRcdFx0fVxuXHRcdFx0bXNnID0gZGF5cyArIFwiIGRheVwiXG5cdFx0XHRpZiAoZGF5cyA+IDEpIHsgbXNnICs9IFwic1wiIH1cblx0XHRcdG1zZ19hcnJheS5wdXNoKG1zZylcblx0XHRcdG1zZyA9IFwiXCJcblx0XHR9XG5cblx0XHRpZiAoaG91cnMgPiAwKSB7XG5cdFx0XHRpZiAoaG91cnMgPCAxMCkgeyBtc2cgPSBcIjBcIiB9XG5cdFx0XHRtc2cgKz0gaG91cnMgKyBcIjpcIjtcblx0XHR9XG5cblx0XHRpZiAobWludXRlcyA8IDEwKSB7IG1zZyArPSBcIjBcIiB9XG5cdFx0bXNnICs9IG1pbnV0ZXMgKyBcIjpcIjtcblx0XHRpZiAoc2VjIDwgMTApIHsgbXNnICs9IFwiMFwiIH1cblx0XHRtc2cgKz0gc2VjO1xuXHRcdG1zZ19hcnJheS5wdXNoKG1zZylcblxuXHRcdHJldHVybiBtc2dfYXJyYXkuam9pbihcIiwgXCIpXG5cdH1cblxuXHRzdGF0aWMgbXNlY1RvVGltZShtc2VjKSB7XG5cdFx0aWYgKG1zZWMgPj0gMTAwMCkge1xuXHRcdFx0cmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKG1zZWMvMTAwMCk7XG5cdFx0fSBlbHNlIHtcblx0XHQgICAgICAgIHZhciB4ID0gTWF0aC5yb3VuZChtc2VjICogMTAwMCkgLyAxMDAwLjtcblx0XHQgICAgICAgIHJldHVybiB4LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpICsgXCIgbXNcIjtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgZXBvY2gyU2VlbihlcG9jaCkge1xuXHRcdC8qIDA4LzAxLzEzIDE1OjEyOjM3IFsxOCBtaW4sIDEzIHNlYyBhZ29dICovXG5cdFx0dmFyIGQgPSBuZXcgRGF0ZShlcG9jaCAqIDEwMDApO1xuXHRcdHZhciB0ZGlmZiA9IE1hdGguZmxvb3IoKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKSAtIGVwb2NoKTtcblxuXHRcdHJldHVybiAoZC5mb3JtYXQoXCJkZC9NTS95eXl5IGhoOm1tOnNzXCIpICsgXCIgW1wiICsgTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUodGRpZmYpICsgXCIgYWdvXVwiKTtcblx0fVxuXG5cdC8qIHRpY2tzIGZvciBncmFwaCB4IGF4aXMgKi9cblx0c3RhdGljIGdyYXBoR2V0WEF4aXNUaWNrc0Zvcm1hdChkaWZmX2Vwb2NoKSB7XG5cdFx0dmFyIHRpY2tGb3JtYXQ7XG5cblx0XHRpZiAoZGlmZl9lcG9jaCA8PSA4NjQwMCkge1xuXHRcdFx0dGlja0Zvcm1hdCA9IFwiJUg6JU06JVNcIjtcblx0XHR9IGVsc2UgaWYgKGRpZmZfZXBvY2ggPD0gMiAqIDg2NDAwKSB7XG5cdFx0XHR0aWNrRm9ybWF0ID0gXCIlYiAlZSwgJUg6JU06JVNcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGlja0Zvcm1hdCA9IFwiJWIgJWVcIjtcblx0XHR9XG5cblx0XHRyZXR1cm4gKHRpY2tGb3JtYXQpO1xuXHR9XG5cblx0c3RhdGljIHBhcmFtc0V4dGVuZChkZWZhdWx0cywgb3ZlcnJpZGUpIHtcblx0XHRyZXR1cm4gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvdmVycmlkZSk7XG5cdH1cblxuXHRzdGF0aWMgcGFyYW1zVG9Gb3JtKGZvcm0sIHBhcmFtcykge1xuXHRcdGZvcm0gPSAkKGZvcm0pO1xuXG5cdFx0Zm9yICh2YXIgayBpbiBwYXJhbXMpIHtcblx0XHRcdGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoaykpIHtcblx0XHRcdFx0dmFyIGlucHV0ID0gJCgnPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJyArIGsgKyAnXCIgdmFsdWU9XCInICsgcGFyYW1zW2tdICsgJ1wiPicpO1xuXHRcdFx0XHRpbnB1dC5hcHBlbmRUbyhmb3JtKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZm9ybTtcblx0fVxuXG5cdC8qXG5cdCAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGphdmFzY3JpcHQgb2JqZWN0IHdoZXJlIGVhY2ggay0+diBwYWlyIG9mIHRoZSBpbnB1dCBvYmplY3Rcblx0ICogdHJhbnNsYXRlcyBpbnRvIHR3byBwYWlycyBpbiB0aGUgb3V0cHV0IG9iamVjdDogYSBrZXlfW2ldLT5rIGFuZCBhIHZhbF9baV0tPnYsIHdoZXJlXG5cdCAqIGkgaXMgYW4gaW5jcmVtZW50YWwgaW5kZXguXG5cdCAqXG5cdCAqIFRoZSBvdXRwdXQgb2JqZWN0IGNhbiB0aGVuIGJlIHNlcmlhbGl6ZWQgdG8gYW4gVVJMLiBUaGlzIGNvbnZlcnNpb24gaXMgcmVxdWlyZWQgZm9yXG5cdCAqIGhhbmRsaW5nIHNwZWNpYWwgY2hhcmFjdGVyczogc2luY2UgbnRvcG5nIHN0cmlwcyBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gX0dFVCBrZXlzLFxuXHQgKiBfR0VUIHZhbHVlcyBtdXN0IGJlIHVzZWQuXG5cdCAqXG5cdCAqIFRoaXMgZnVuY3Rpb24gcGVyZm9ybXMgdGhlIGludmVyc2UgY29udmVyc2lvbiBvZiBsdWEgcGFyYW1zUGFpcnNEZWNvZGUuXG5cdCAqXG5cdCAqL1xuXHRzdGF0aWMgcGFyYW1zUGFpcnNFbmNvZGUocGFyYW1zKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciByZXMgPSB7fTtcblxuXHRcdGZvciAodmFyIGsgaW4gcGFyYW1zKSB7XG5cdFx0XHRyZXNbXCJrZXlfXCIgKyBpXSA9IGs7XG5cdFx0XHRyZXNbXCJ2YWxfXCIgKyBpXSA9IHBhcmFtc1trXTtcblx0XHRcdGkgPSBpICsgMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzO1xuXHR9XG5cblx0c3RhdGljIGhvc3RrZXkyaG9zdEluZm8oaG9zdF9rZXkpIHtcblx0XHR2YXIgaW5mbztcblx0XHR2YXIgaG9zdGluZm8gPSBbXTtcblxuXHRcdGhvc3Rfa2V5ID0gaG9zdF9rZXkucmVwbGFjZSgvX19fXy9nLCBcIjpcIik7XG5cdFx0aG9zdF9rZXkgPSBob3N0X2tleS5yZXBsYWNlKC9fX18vZywgXCIvXCIpO1xuXHRcdGhvc3Rfa2V5ID0gaG9zdF9rZXkucmVwbGFjZSgvX18vZywgXCIuXCIpO1xuXG5cdFx0aW5mbyA9IGhvc3Rfa2V5LnNwbGl0KFwiQFwiKTtcblx0XHRyZXR1cm4gKGluZm8pO1xuXHR9XG5cblx0c3RhdGljIGhhbmRsZV90YWJfc3RhdGUobmF2X29iamVjdCwgZGVmYXVsdF90YWIpIHtcblx0XHQkKCdhJywgbmF2X29iamVjdCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9KTtcblxuXHRcdC8vIHN0b3JlIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFiIGluIHRoZSBoYXNoIHZhbHVlXG5cdFx0JChcIiA+IGxpID4gYVwiLCBuYXZfb2JqZWN0KS5vbihcInNob3duLmJzLnRhYlwiLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0dmFyIGlkID0gJChlLnRhcmdldCkuYXR0cihcImhyZWZcIikuc3Vic3RyKDEpO1xuXHRcdFx0aWYgKGhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG5cdFx0XHRcdC8vIHRoaXMgd2lsbCBwcmV2ZW50IHRoZSAnanVtcCcgdG8gdGhlIGhhc2hcblx0XHRcdFx0aGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgXCIjXCIgKyBpZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBmYWxsYmFja1xuXHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGlkO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gb24gbG9hZCBvZiB0aGUgcGFnZTogc3dpdGNoIHRvIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFiXG5cdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRpZiAoIWhhc2gpIGhhc2ggPSBcIiNcIiArIGRlZmF1bHRfdGFiO1xuXHRcdCQoJ2FbaHJlZj1cIicgKyBoYXNoICsgJ1wiXScsIG5hdl9vYmplY3QpLnRhYignc2hvdycpO1xuXHR9XG5cblx0c3RhdGljIF9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgbmFtZSwgZGF0YSkge1xuXHRcdCQoJzxpbnB1dD4nKS5hdHRyKHtcblx0XHRcdHR5cGU6ICdoaWRkZW4nLFxuXHRcdFx0aWQ6IG5hbWUsXG5cdFx0XHRuYW1lOiBuYW1lLFxuXHRcdFx0dmFsdWU6IGRhdGEsXG5cdFx0fSkuYXBwZW5kVG8oZm9ybSk7XG5cdH1cblxuXHQvKiBVc2VkIHdoaWxlIHNlYXJjaGluZyBob3N0cyBhIGFuZCBtYWNzIHdpdGggdHlwZWFoZWFkICovXG5cdHN0YXRpYyBtYWtlRmluZEhvc3RCZWZvcmVTdWJtaXRDYWxsYmFjayhodHRwX3ByZWZpeCkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoZm9ybSwgZGF0YSkge1xuXHRcdFx0aWYgKGRhdGEuY29udGV4dCAmJiBkYXRhLmNvbnRleHQgPT0gXCJoaXN0b3JpY2FsXCIpIHtcblx0XHRcdFx0Zm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL3Byby9kYl9zZWFyY2gubHVhXCIpO1xuXHRcdFx0XHRpZiAoZGF0YS50eXBlID09IFwiaXBcIikge1xuXHRcdFx0XHRcdE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwiaXBcIiwgZGF0YS5pcCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwibWFjXCIpIHtcblx0XHRcdFx0XHROdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm1hY1wiLCBkYXRhLm1hYyk7XG5cdFx0XHRcdH0gZWxzZSAvKiBcImhvc3RuYW1lXCIgKi8ge1xuXHRcdFx0XHRcdE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibmFtZVwiLCBkYXRhLmhvc3RuYW1lID8gZGF0YS5ob3N0bmFtZSA6IGRhdGEubmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChkYXRhLnR5cGUgPT0gXCJtYWNcIikge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9tYWNfZGV0YWlscy5sdWFcIik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwibmV0d29ya1wiKSB7XG5cdFx0XHRcdFx0Zm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RzX3N0YXRzLmx1YVwiKTtcblx0XHRcdFx0XHROdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm5ldHdvcmtcIiwgZGF0YS5uZXR3b3JrKTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJzbm1wXCIpIHtcblx0XHRcdFx0XHRmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWFcIik7XG5cdFx0XHRcdFx0TnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJzbm1wX3BvcnRfaWR4XCIsIGRhdGEuc25tcF9wb3J0X2lkeCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwic25tcF9kZXZpY2VcIikge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2RldmljZV9kZXRhaWxzLmx1YVwiKTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJhc25cIikge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0c19zdGF0cy5sdWFcIik7XG5cdFx0XHRcdFx0TnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJhc25cIiwgZGF0YS5hc24pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0X2RldGFpbHMubHVhXCIpO1xuXHRcdFx0XHRcdE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibW9kZVwiLCBcInJlc3RvcmVcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIHRzdGFtcFRvRGF0ZVN0cmluZyhodG1sX3RhZywgZm9ybWF0LCB0ZGlmZikge1xuXHRcdHRkaWZmID0gdGRpZmYgfHwgMDtcblx0XHR2YXIgdGltZXN0YW1wID0gcGFyc2VJbnQoaHRtbF90YWcuaHRtbCgpKSArIHRkaWZmO1xuXHRcdHZhciBsb2NhbGl6ZWQgPSBkMy50aW1lLmZvcm1hdChmb3JtYXQpKG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApKTtcblx0XHRodG1sX3RhZy5odG1sKGxvY2FsaXplZCkucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG5cdFx0cmV0dXJuIGxvY2FsaXplZDtcblx0fVxuXG5cdHN0YXRpYyBub0h0bWwocykge1xuXHRcdHJldHVybiBzLnJlcGxhY2UoLzxbXj5dKz4vZywgJycpO1xuXHR9XG5cblx0c3RhdGljIGNsZWFuQ3VzdG9tSG9zdFVybChob3N0KSB7XG5cdFx0LyogUmVtb3ZlIHN0YXJ0aW5nIGh0dHAocykuICovXG5cdFx0cmV0dXJuIGhvc3Rcblx0XHRcdC5yZXBsYWNlKC9eaHR0cDpcXC9cXC8vZ2ksICcnKVxuXHRcdFx0LnJlcGxhY2UoL15odHRwczpcXC9cXC8vZ2ksICcnKVxuXHRcdFx0LyogUmVtb3ZlIHN0YXJ0aW5nIHd3dy4gKi9cblx0XHRcdC5yZXBsYWNlKC9ed3d3XFwuL2dpLCAnJylcblx0XHRcdC8qIFJlbW92ZSBub24tYWxsb3dlZCBjaGFyYWN0ZXJzICovXG5cdFx0XHQucmVwbGFjZSgvW14wLTlhLXpBLVpcXC46XFwvXy1dL2dpLCAnJyk7XG5cdH1cblxuXHQvKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDkwNTUxL3BhcnNlLXF1ZXJ5LXN0cmluZy1pbi1qYXZhc2NyaXB0ICovXG5cdHN0YXRpYyBwYXJzZVF1ZXJ5KHF1ZXJ5U3RyaW5nKSB7XG5cdFx0dmFyIHF1ZXJ5ID0ge307XG5cdFx0dmFyIHBhaXJzID0gKHF1ZXJ5U3RyaW5nWzBdID09PSAnPycgPyBxdWVyeVN0cmluZy5zdWJzdHIoMSkgOiBxdWVyeVN0cmluZykuc3BsaXQoJyYnKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG5cdFx0XHRxdWVyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0gfHwgJycpO1xuXHRcdH1cblx0XHRyZXR1cm4gcXVlcnk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0SGlzdG9yeVBhcmFtZXRlcnMocGFyYW1zKSB7XG5cdFx0dmFyIGN1cl9wYXJhbXMgPSBOdG9wVXRpbHMucGFyc2VRdWVyeSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcblx0XHR2YXIgbmV3X3BhcmFtcyA9ICQuZXh0ZW5kKGN1cl9wYXJhbXMsIHBhcmFtcyk7XG5cdFx0dmFyIG5ld19xdWVyeSA9IFwiP1wiICsgJC5wYXJhbShuZXdfcGFyYW1zLCB0cnVlKTtcblx0XHR2YXIgYmFzZVVybCA9IFtsb2NhdGlvbi5wcm90b2NvbCwgJy8vJywgbG9jYXRpb24uaG9zdCwgbG9jYXRpb24ucGF0aG5hbWVdLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIGJhc2VVcmwgKyBuZXdfcXVlcnk7XG5cdH1cblxuXHQvLyByZXR1cm4gdHJ1ZSBpZiB0aGUgc3RhdHVzIGNvZGUgaXMgZGlmZmVyZW50IGZyb20gMjAwXG5cdHN0YXRpYyBjaGVja19zdGF0dXNfY29kZShzdGF0dXNfY29kZSwgc3RhdHVzX3RleHQsICRlcnJvcl9sYWJlbCkge1xuXG5cdFx0Y29uc3QgaXNfZGlmZmVyZW50ID0gc3RhdHVzX2NvZGUgIT0gMjAwO1xuXG5cdFx0aWYgKGlzX2RpZmZlcmVudCAmJiAkZXJyb3JfbGFiZWwgIT0gbnVsbCkge1xuXG5cdFx0XHRsZXQgbWVzc2FnZSA9IGkxOG5fZXh0LnJlcXVlc3RfZmFpbGVkX21lc3NhZ2U7XG5cdFx0XHRpZiAoc3RhdHVzX2NvZGUgJiYgc3RhdHVzX3RleHQpIHtcblx0XHRcdFx0bWVzc2FnZSArPSBgOiAke3N0YXR1c19jb2RlfSAtICR7c3RhdHVzX3RleHR9YDtcblx0XHRcdH1cblxuXHRcdFx0JGVycm9yX2xhYmVsLnRleHQobWVzc2FnZSkuc2hvdygpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChpc19kaWZmZXJlbnQgJiYgJGVycm9yX2xhYmVsID09IG51bGwpIHtcblx0XHRcdGFsZXJ0KGAke2kxOG5fZXh0LnJlcXVlc3RfZmFpbGVkX21lc3NhZ2V9OiAke3N0YXR1c19jb2RlfSAtICR7c3RhdHVzX3RleHR9YCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlzX2RpZmZlcmVudDtcblx0fVxuXG5cdC8vIFRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBodHRwZG9jcy90ZW1wbGF0ZXMvY29uZmlnX2xpc3RfY29tcG9uZW50cy9pbXBvcnRfbW9kYWwuaHRtbFxuXHRzdGF0aWMgaW1wb3J0TW9kYWxIZWxwZXIocGFyYW1zKSB7XG5cblx0XHRpZiAoIXBhcmFtcy5sb2FkQ29uZmlnWEhSKSB7IHRocm93IChcImltcG9ydE1vZGFsSGVscGVyOjogTWlzc2luZyAnbG9hZENvbmZpZ1hIUicgcGFyYW1cIik7IHJldHVybjsgfVxuXG5cdFx0JChgaW5wdXQjaW1wb3J0LWlucHV0YCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGNvbnN0IGZpbGVuYW1lID0gJCh0aGlzKS52YWwoKS5yZXBsYWNlKFwiQzpcXFxcZmFrZXBhdGhcXFxcXCIsIFwiXCIpO1xuXHRcdFx0JChgI2J0bi1jb25maXJtLWltcG9ydGApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcblx0XHR9KTtcblxuXHRcdCQoYCNpbXBvcnQtbW9kYWxgKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0JChgI2ltcG9ydC1pbnB1dGApLnZhbCgnJyk7XG5cdFx0XHQkKFwiI2ltcG9ydC1lcnJvclwiKS5oaWRlKCkucmVtb3ZlQ2xhc3MoJ3RleHQtd2FybmluZycpLmFkZENsYXNzKCdpbnZhbGlkLWZlZWRiYWNrJyk7XG5cdFx0XHQkKGAjYnRuLWNvbmZpcm0taW1wb3J0YCkuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG5cdFx0fSk7XG5cblx0XHQkKFwiI2ltcG9ydC1tb2RhbFwiKS5vbihcInN1Ym1pdFwiLCBcImZvcm1cIiwgZnVuY3Rpb24gKGUpIHtcblxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRjb25zdCAkYnV0dG9uID0gJCgnI2J0bi1jb25maXJtLWltcG9ydCcpO1xuXHRcdFx0JGJ1dHRvbi5hdHRyKFwiZGlzYWJsZWRcIiwgXCJcIik7XG5cblx0XHRcdC8vIHJlYWQgY29uZmlndXJhdGlvbiBmaWxlXG5cdFx0XHRjb25zdCBmaWxlID0gJCgnI2ltcG9ydC1pbnB1dCcpWzBdLmZpbGVzWzBdO1xuXG5cdFx0XHRpZiAoIWZpbGUpIHtcblx0XHRcdFx0JChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChgJHtpMThuX2V4dC5ub19maWxlfWApLnNob3coKTtcblx0XHRcdFx0JGJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblx0XHRcdHJlYWRlci5yZWFkQXNUZXh0KGZpbGUsIFwiVVRGLThcIik7XG5cblx0XHRcdHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdC8vIENsaWVudC1zaWRlIGNvbmZpZ3VyYXRpb24gZmlsZSBmb3JtYXQgY2hlY2tcblx0XHRcdFx0bGV0IGpzb25Db25maWd1cmF0aW9uID0gbnVsbFxuXHRcdFx0XHR0cnkgeyBqc29uQ29uZmlndXJhdGlvbiA9IEpTT04ucGFyc2UocmVhZGVyLnJlc3VsdCk7IH0gY2F0Y2ggKGUpIHsgfVxuXG5cdFx0XHRcdGlmICghanNvbkNvbmZpZ3VyYXRpb24pIHtcblx0XHRcdFx0XHQkKFwiI2ltcG9ydC1lcnJvclwiKS50ZXh0KGkxOG5fZXh0LnJlc3RfY29uc3RzW3Jlc3BvbnNlSlNPTi5yY19zdHJdIHx8ICdOb3QgSW1wbGVtZW50ZWQgWWV0Jykuc2hvdygpO1xuXHRcdFx0XHRcdCRidXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1Ym1pdCBjb25maWd1cmF0aW9uIGZpbGVcblx0XHRcdFx0cGFyYW1zLmxvYWRDb25maWdYSFIocmVhZGVyLnJlc3VsdClcblx0XHRcdFx0XHQuZG9uZSgocmVzcG9uc2UsIHN0YXR1cywgeGhyKSA9PiB7XG5cblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZS5yYyA8IDApIHtcblx0XHRcdFx0XHRcdFx0JChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChyZXNwb25zZS5yY19zdHIpLnNob3coKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsIGNhbGwgdGhlIHN1Y2Nlc3NDYWxsYmFja1xuXHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5zdWNjZXNzQ2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0cGFyYW1zLnN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQgICAgICAgIGNvbnN0IGtleSA9ICQoYGlucHV0W25hbWU9J2NvbmZpZ3VyYXRpb24nXTpjaGVja2VkYCkudmFsKCk7XG5cblx0XHRcdFx0XHQgICAgICAgIGNvbnN0IGJvZHkgPSAoa2V5ID09ICdhbGwnKVxuXHRcdFx0XHRcdCAgICAgICAgICAgICAgICA/IGkxOG5fZXh0Lm1hbmFnZV9jb25maWd1cmF0aW9ucy5tZXNzYWdnZXMuaW1wb3J0X2FsbF9zdWNjZXNzXG5cdFx0XHRcdFx0XHRcdDogaTE4bl9leHQubWFuYWdlX2NvbmZpZ3VyYXRpb25zLm1lc3NhZ2dlcy5pbXBvcnRfc3VjY2VzcztcblxuXHRcdFx0XHRcdFx0Ly8gc2hvdyBhIHN1Y2Nlc3MgYWxlcnQgbWVzc2FnZVxuXHRcdFx0XHRcdFx0VG9hc3RVdGlscy5zaG93VG9hc3Qoe1xuXHRcdFx0XHRcdFx0XHRpZDogJ2ltcG9ydC1jb25maWd1cmF0aW9uLWFsZXJ0Jyxcblx0XHRcdFx0XHRcdFx0bGV2ZWw6ICdzdWNjZXNzJyxcblx0XHRcdFx0XHRcdFx0dGl0bGU6IGkxOG5fZXh0LnN1Y2Nlc3MsXG5cdFx0XHRcdFx0XHRcdGJvZHk6IGJvZHksXG5cdFx0XHRcdFx0XHRcdGRlbGF5OiAyMDAwXG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0JChcIiNpbXBvcnQtbW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcblxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LmZhaWwoKHsgcmVzcG9uc2VKU09OIH0pID0+IHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgUEFSVElBTF9JTVBPUlRfUkMgPSAtMjg7XG5cblx0XHRcdFx0XHRcdGlmIChwYXJhbXMuZmFpbHVyZUNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdHBhcmFtcy5mYWlsdXJlQ2FsbGJhY2socmVzcG9uc2VKU09OKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlSlNPTiAmJiByZXNwb25zZUpTT04ucmMgPiAwKSByZXR1cm47XG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2VKU09OLnJjID09IFBBUlRJQUxfSU1QT1JUX1JDKVxuXHRcdFx0XHRcdFx0XHQkKGAjaW1wb3J0LWVycm9yYCkucmVtb3ZlQ2xhc3MoJ2ludmFsaWQtZmVlZGJhY2snKS5hZGRDbGFzcygndGV4dC13YXJuaW5nJyk7XG5cblx0XHRcdFx0XHRcdCQoXCIjaW1wb3J0LWVycm9yXCIpLnRleHQoaTE4bl9leHQucmVzdF9jb25zdHNbcmVzcG9uc2VKU09OLnJjX3N0cl0gfHwgaTE4bl9leHQuRkFJTEVEX0hUVFBfUkVRVUVTVCkuc2hvdygpO1xuXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQuYWx3YXlzKCgpID0+IHtcblx0XHRcdFx0XHRcdCRidXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIHNlcmlhbGl6ZUZvcm1BcnJheShzZXJpYWxpemVkQXJyYXkpIHtcblx0XHRjb25zdCBzZXJpYWxpemVkID0ge307XG5cdFx0c2VyaWFsaXplZEFycmF5LmZvckVhY2goKG9iaikgPT4ge1xuXHRcdFx0LyogaWYgdGhlIG9iamVjdCBpcyBhbiBhcnJheSAgKi9cblx0XHRcdGlmIChvYmoubmFtZS5pbmNsdWRlcygnW10nKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblxuXHRcdFx0XHQvLyBjbGVhbiB0aGUgc3RyaW5nXG5cdFx0XHRcdGlmICh0eXBlb2Ygb2JqLnZhbHVlID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0b2JqLnZhbHVlID0gb2JqLnZhbHVlLnRyaW0oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZXJpYWxpemVkW29iai5uYW1lXSA9IG9iai52YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gc2VyaWFsaXplZDtcblx0fVxuXG5cdHN0YXRpYyBjbGVhbkZvcm0oZm9ybVNlbGVjdG9yKSB7XG5cdFx0LyogcmVtb3ZlIHZhbGlkYXRpb24gZmllbGRzIGFuZCB0cmFja3MgKi9cblx0XHQkKGZvcm1TZWxlY3RvcikuZmluZCgnaW5wdXQsc2VsZWN0LHRleHRhcmVhJykuZWFjaChmdW5jdGlvbiAoaSwgaW5wdXQpIHtcblx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoYGlzLXZhbGlkYCkucmVtb3ZlQ2xhc3MoYGlzLWludmFsaWRgKTtcblx0XHR9KTtcblx0XHQvKiByZXNldCBhbGwgdGhlIHZhbHVlcyAqL1xuXHRcdCQoZm9ybVNlbGVjdG9yKVswXS5yZXNldCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2UgYSBmZXRjaCBjYWxsIHdpdGggYSB0aW1lb3V0IG9wdGlvblxuXHQgKi9cblx0c3RhdGljIGZldGNoV2l0aFRpbWVvdXQodXJpLCBvcHRpb25zID0ge30sIHRpbWUgPSA1MDAwKSB7XG5cblx0XHRjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpXG5cdFx0Y29uc3QgY29uZmlnID0geyAuLi5vcHRpb25zLCBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsIH1cblx0XHRjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRjb250cm9sbGVyLmFib3J0KClcblx0XHR9LCB0aW1lKVxuXG5cdFx0cmV0dXJuIGZldGNoKHVyaSwgY29uZmlnKVxuXHRcdFx0LnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdGlmICghcmVzcG9uc2Uub2spIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKChlcnJvcikgPT4ge1xuXHRcdFx0XHRpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdSZXNwb25zZSB0aW1lZCBvdXQnKVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHR9XG5cblx0c3RhdGljIHNldFByZWYoYWN0aW9uLCBjc3JmLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG5cblx0XHRpZiAoYWN0aW9uID09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQW4gYWN0aW9uIGtleSBtdXN0IGJlIGRlZmluZWQgdG8gc2V0IGEgcHJlZmVyZW5jZSFcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZW1wdHkgPSAoKSA9PiB7IH07XG5cdFx0Y29uc3QgcmVxdWVzdCA9ICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL3VwZGF0ZV9wcmVmcy5sdWFgLCB7IGFjdGlvbjogYWN0aW9uLCBjc3JmOiBjc3JmIH0pO1xuXHRcdHJlcXVlc3QuZG9uZShzdWNjZXNzIHx8IGVtcHR5KTtcblx0XHRyZXF1ZXN0LmZhaWwoZmFpbHVyZSB8fCBlbXB0eSk7XG5cdH1cblxuXHQvKipcblx0ICogR2x1ZSBzdHJpbmdzIGNvbnRhaW5lZCBpbiBhcnJheSBzZXBhcmF0ZWQgYnkgYSBjb21tYS5cblx0ICogQHBhcmFtIHthcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIHN0cmluZ3MuIEkuZS4gW1wiSGVsbG9cIiwgXCJXb3JsZFwiXVxuXHQgKiBAcGFyYW0ge251bWJlcn0gbGltaXQgSG93IG1hbnkgd29yZHMgdGhlIHN0cmluZyBjb250YWluc1xuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEEgc3RyaW5nIGJ1aWx0IGJ5IGFycmF5J3MgZWxlbWVudHMuIGkuZTogXCJIZWxsbywgV29ybGRcIlxuXHQgKi9cblx0c3RhdGljIGFycmF5VG9MaXN0U3RyaW5nKGFycmF5LCBsaW1pdCkge1xuXG5cdFx0aWYgKGFycmF5ID09IHVuZGVmaW5lZCkgcmV0dXJuIFwiXCI7XG5cblx0XHRpZiAoYXJyYXkubGVuZ3RoID4gbGltaXQpIHtcblx0XHRcdHJldHVybiBhcnJheS5zbGljZSgwLCBsaW1pdCkuam9pbihcIiwgXCIpICsgYCAke2kxOG5fZXh0LmFuZF94X21vcmUucmVwbGFjZSgnJG51bScsIGFycmF5Lmxlbmd0aCAtIGxpbWl0KX1gO1xuXHRcdH1cblxuXHRcdHJldHVybiBhcnJheS5zbGljZSgwLCBsaW1pdCkuam9pbihcIiwgXCIpO1xuXHR9XG5cblx0c3RhdGljIGJ1aWxkVVJMKGxvY2F0aW9uLCBwYXJhbXMgPSB7fSwgaGFzUmVmZXJlciA9IGZhbHNlLCByZWZlcmVyUGFyYW1zID0ge30pIHtcblxuXHRcdGNvbnN0IHVybCA9IG5ldyBVUkwobG9jYXRpb24sIHdpbmRvdy5sb2NhdGlvbik7XG5cblx0XHRmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKVxuXHRcdFx0ICB1cmwuc2VhcmNoUGFyYW1zLnNldChuYW1lLCB2YWx1ZSk7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoaGFzUmVmZXJlcikge1xuXG5cdFx0XHRjb25zdCByZWZVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblx0XHRcdGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZWZlcmVyUGFyYW1zKSkge1xuXHRcdFx0XHRpZiAoIXZhbHVlKSBjb250aW51ZTtcblx0XHRcdFx0cmVmVXJsLnNlYXJjaFBhcmFtcy5zZXQobmFtZSwgdmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHR1cmwuc2VhcmNoUGFyYW1zLnNldCgncmVmZXJlcicsIHJlZlVybC50b1N0cmluZygpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0RWRpdFBvb2xMaW5rKGhyZWYsIHBvb2xJZCkge1xuXHRcdGNvbnN0IHVybCA9IG5ldyBVUkwoaHJlZiwgd2luZG93LmxvY2F0aW9uKTtcblx0XHR1cmwuc2VhcmNoUGFyYW1zLnNldCgncG9vbF9pZCcsIHBvb2xJZCk7XG5cdFx0cmV0dXJuIHVybC50b1N0cmluZygpO1xuXHR9XG5cblx0c3RhdGljIGdldFBvb2xMaW5rKHBvb2xUeXBlLCBwb29sSWQgPSAwKSB7XG5cdFx0cmV0dXJuIGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvJHtwb29sVHlwZX0vcG9vbHMubHVhP3Bvb2w9JHtwb29sSWR9YDtcblx0fVxuXG5cdHN0YXRpYyBhc3luYyBnZXRQb29sKHBvb2xUeXBlLCBpZCA9IDApIHtcblxuXHRcdGlmIChwb29sVHlwZSA9PT0gbnVsbCkgdGhyb3cgJ0EgcG9vbCB0eXBlIG11c3QgYmUgZGVmaW5lZCEnO1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Y29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKE50b3BVdGlscy5nZXRQb29sTGluayhwb29sVHlwZSwgaWQpKTtcblx0XHRcdGNvbnN0IHBvb2wgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuXHRcdFx0aWYgKHBvb2wucmMgPCAwKSB7XG5cdFx0XHRcdHJldHVybiBbZmFsc2UsIHt9XTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFt0cnVlLCBwb29sLnJzcFswXV07XG5cdFx0fVxuXHRcdGNhdGNoIChlcnIpIHtcblx0XHRcdHJldHVybiBbZmFsc2UsIHt9XTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2F2ZSB0aGUgc2NhbGUgb2YgZWxlbWVudCBpbnNpZGUgdGhlIGxvY2FsIHN0b3JhZ2Vcblx0ICogQHBhcmFtIHtvYmplY3R9ICRlbGVtZW50IFxuXHQgKiBAcGFyYW0ge29iamVjdH0gc2NhbGVcblx0ICovXG5cdHN0YXRpYyBzYXZlRWxlbWVudFNjYWxlKCRlbGVtZW50LCBzY2FsZSA9IHt3aWR0aDogMCwgaGVpZ2h0OiAwfSkge1xuXHRcdFxuXHRcdGNvbnN0IGtleSA9IE50b3BVdGlscy5nZW5lcmF0ZVNjYWxlRWxlbWVudEtleSgkZWxlbWVudCk7XG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShzY2FsZSkpO1xuXHR9XG5cblx0c3RhdGljIGdlbmVyYXRlU2NhbGVFbGVtZW50S2V5KCRlbGVtZW50KSB7XG5cdFx0bGV0IGlkZW50aWZpY2F0b3I7XG5cdFx0Y29uc3QgcGFnZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuXHRcdGNvbnN0IGVsZW1lbnRJZCA9ICRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cblx0XHRpZiAoZWxlbWVudElkICE9PSBcIlwiKSB7XG5cdFx0XHRpZGVudGlmaWNhdG9yID0gZWxlbWVudElkO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGNvbnN0IGNsYXNzTmFtZSA9ICRlbGVtZW50LmF0dHIoJ2NsYXNzJyk7XG5cdFx0XHRpZGVudGlmaWNhdG9yID0gY2xhc3NOYW1lO1xuXHRcdH1cblxuXHRcdGNvbnN0IGtleSA9IGAke2lkZW50aWZpY2F0b3J9LSR7cGFnZX0tc2NhbGVgO1xuXHRcdHJldHVybiBrZXk7XG5cdH1cblxuXHQvKipcblx0ICogTG9hZCB0aGUgb2xkIHNjYWxlIHZhbHVlIG9meCBlbGVtZW50IGZyb20gdGhlIGxvY2FsIHN0b3JhZ2Vcblx0ICogQHBhcmFtIHtvYmplY3R9ICRlbGVtZW50IFxuXHQgKi9cblx0c3RhdGljIGxvYWRFbGVtZW50U2NhbGUoJGVsZW1lbnQpIHtcblxuXHRcdGNvbnN0IGtleSA9IE50b3BVdGlscy5nZW5lcmF0ZVNjYWxlRWxlbWVudEtleSgkZWxlbWVudCk7XG5cdFx0Y29uc3QgY3VycmVudFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblx0XHRpZiAoY3VycmVudFZhbHVlID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRyZXR1cm4gSlNPTi5wYXJzZShjdXJyZW50VmFsdWUpO1xuXHR9XG5cblx0c3RhdGljIGZpbGxGaWVsZElmVmFsaWQoJGZpZWxkLCB2YWx1ZSkge1xuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdCRmaWVsZC52YWwoJycpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdCRmaWVsZC52YWwodmFsdWUpO1xuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIGNvcHlUb0NsaXBib2FyZCh0ZXh0LCBpdGVtKSB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIGVsLnZhbHVlID0gdGV4dDtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJycpO1xuICAgIGVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBlbC5zdHlsZS5sZWZ0ID0gJy05OTk5cHgnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIGVsLnNlbGVjdCgpO1xuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgJChpdGVtKS5hdHRyKFwidGl0bGVcIiwgXCJDb3BpZWQhXCIpLnRvb2x0aXAoXCJkaXNwb3NlXCIpLnRvb2x0aXAoKS50b29sdGlwKFwic2hvd1wiKTtcbiAgICAkKGl0ZW0pLnJlbW92ZUF0dHIoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpXG4gICAgJChpdGVtKS5hdHRyKFwidGl0bGVcIiwgdGV4dClcblx0fVxuXG5cdHN0YXRpYyBzdHJpcFRhZ3MoaHRtbCkge1xuICAgICAgICBcdGxldCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0LmlubmVySFRNTCA9IGh0bWw7XG5cdFx0cmV0dXJuIHQudGV4dENvbnRlbnQgfHwgdC5pbm5lclRleHQgfHwgXCJcIjtcblx0fVxuXG4gIHN0YXRpYyBzaG9ydGVuTGFiZWwobGFiZWwsIGxlbiwgbGFzdF9jaGFyKSB7XG4gICAgbGV0IHNob3J0ZW5lZF9sYWJlbCA9IGxhYmVsXG4gICAgaWYobGFiZWwubGVuZ3RoID4gbGVuICsgNSkge1xuICAgICAgbGV0IGxhc3RfaW5kZXggPSBsZW5cbiAgICAgIGlmKGxhc3RfY2hhcikge1xuICAgICAgICBsYXN0X2luZGV4ID0gbGFiZWwubGFzdEluZGV4T2YobGFzdF9jaGFyKVxuICAgICAgICBjb25zdCByZXF1ZXN0ZWRfbGFiZWwgPSBsYWJlbC5zbGljZShsYXN0X2luZGV4KVxuICAgICAgICBpZihsZW4gPiBsYXN0X2luZGV4KSBcbiAgICAgICAgICBsZW4gPSBsYXN0X2luZGV4XG4gICAgICAgIHNob3J0ZW5lZF9sYWJlbCA9IGxhYmVsLnNsaWNlKDAsIGxlbikgKyBcIi4uLiBcIiArIHJlcXVlc3RlZF9sYWJlbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hvcnRlbmVkX2xhYmVsID0gbGFiZWwuc2xpY2UoMCwgbGVuKSArIFwiLi4uXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3J0ZW5lZF9sYWJlbFxuICB9XG5cdFxuICBzdGF0aWMgc29ydEFscGhhYmV0aWNhbGx5KGEsIGIpIHtcbiAgICBjb25zdCBuYW1lQSA9IGEubGFiZWwudG9VcHBlckNhc2UoKTsgLy8gaWdub3JlIHVwcGVyIGFuZCBsb3dlcmNhc2VcbiAgICBjb25zdCBuYW1lQiA9IGIubGFiZWwudG9VcHBlckNhc2UoKTsgLy8gaWdub3JlIHVwcGVyIGFuZCBsb3dlcmNhc2VcbiAgICBpZiAobmFtZUEgPCBuYW1lQikgeyByZXR1cm4gLTE7IH1cbiAgICBpZiAobmFtZUEgPiBuYW1lQikgeyByZXR1cm4gMTsgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpIHtcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1yb3cgYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOSBwcm9ncmVzc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgYmctd2FybmluZ1wiIGFyaWEtdmFsdWVub3c9XCIke3BlcmNlbnRhZ2V9XCIgYXJpYS12YWx1ZW1pbj1cIjBcIiBhcmlhLXZhbHVlbWF4PVwiMTAwXCIgc3R5bGU9XCJ3aWR0aDogJHtwZXJjZW50YWdlfSU7XCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sXCI+ICR7cGVyY2VudGFnZX0gJTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YFxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlXzEsIHBlcmNlbnRhZ2VfMiwgbGFiZWxfMSwgbGFiZWxfMikge1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LXJvd1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIHByb2dyZXNzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBiZy13YXJuaW5nXCIgYXJpYS12YWx1ZW5vdz1cIiR7cGVyY2VudGFnZV8xfVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6ICR7cGVyY2VudGFnZV8xfSU7XCI+JHtsYWJlbF8xfTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgYmctc3VjY2Vzc1wiIGFyaWEtdmFsdWVub3c9XCIke3BlcmNlbnRhZ2VfMn1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCIxMDBcIiBzdHlsZT1cIndpZHRoOiAke3BlcmNlbnRhZ2VfMn0lO1wiPiR7bGFiZWxfMn08L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gXG4gIH1cblxuICAvKiBSZXR1cm4gdGhlIG51bWJlciBvZiByb3dzIGF2YWlsYWJsZSBpbiBhIHRhYmxlICovXG4gIHN0YXRpYyBnZXROdW1UYWJsZVJvd3MoKSB7XG4gICAgcmV0dXJuIFsxMCwgMjAsIDUwLCAxMDBdO1xuICB9XG5cbiAgc3RhdGljIGZvcm1hdEFwZXhDaGFydExhYmVsRnJvbVhhbmROYW1lKHtzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgd30pIHtcbiAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICBjb25zdCBuYW1lID0gc2VyaWVbXCJuYW1lXCJdXG4gICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgIHJldHVybiAoYFxuICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke25hbWV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGApXG4gIH1cblxuICBzdGF0aWMgYXBleENoYXJ0SnVtcFRvQWxlcnRzKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgIGNvbnN0IHsgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgY29uc3QgeyBzZXJpZXMgfSA9IGNvbmZpZy5jb25maWc7XG4gICAgaWYgKHNlcmllc0luZGV4ID09PSAtMSkgcmV0dXJuO1xuICAgIGlmIChzZXJpZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgc2VyaWUgPSBzZXJpZXNbc2VyaWVzSW5kZXhdO1xuICAgIGNvbnN0IGJhc2VfdXJsID0gc2VyaWUuYmFzZV91cmwgfHwgc2VyaWVzWzBdWydiYXNlX3VybCddXG4gICAgY29uc3QgZGVmYXVsdF91cmwgPSBzZXJpZS5zdGFydF91cmwgfHwgc2VyaWVzWzBdWydzdGFydF91cmwnXVxuICAgIGlmIChiYXNlX3VybCAhPSBudWxsICYmIGRlZmF1bHRfdXJsICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHNlYXJjaCA9IHNlcmllLmRhdGFbZGF0YVBvaW50SW5kZXhdLm1ldGEudXJsX3F1ZXJ5O1xuICAgICAgbG9jYXRpb24uaHJlZiA9IGAke2Jhc2VfdXJsfT8ke2RlZmF1bHRfdXJsfSR7c2VhcmNofWA7XG4gICAgfVxuICB9XG4gIFxuICBzdGF0aWMgZm9ybWF0QXBleENoYXJ0TGFiZWxGcm9tWGFuZFkoe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgIFxuICAgIGNvbnN0IHhfdmFsdWUgPSBzZXJpZVtcInhcIl07XG4gICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgIHJldHVybiAoYFxuICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7eF92YWx1ZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYClcbiAgfVxufVxuXG4kKGZ1bmN0aW9uICgpIHtcblx0Ly8gaWYgdGhlcmUgYXJlIGlucHV0cyB3aXRoICdwYXR0ZXJuJyBkYXRhIGF0dHJpYnV0ZVxuXHQvLyB0aGVuIGluaXRpYWxpemUgdGhlbVxuXHROdG9wVXRpbHMuaW5pdERhdGFQYXR0ZXJucygpO1xufSk7XG5cbiIsIi8vIDIwMTYtMTkgLSBudG9wLm9yZ1xuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3codGFibGUpIHtcbiAgJChcInRib2R5IHRyLmVtcHR5Um93XCIsICQodGFibGUpKS5yZW1vdmUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEVtcHR5Um93KHRhYmxlLCBlbXB0eV9zdHIpIHtcbiAgdmFyIGNvbHVtbnMgPSAkKFwidGhlYWQgdGhcIiwgJCh0YWJsZSkpLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgIHJldHVybiAkKHRoaXMpLmNzcygnZGlzcGxheScpICE9ICdub25lJztcbiAgfSkubGVuZ3RoO1xuICAkKFwidGJvZHlcIiwgJCh0YWJsZSkpLmh0bWwoJzx0ciBjbGFzcz1cImVtcHR5Um93XCI+PHRkIGNvbHNwYW49XCInICsgY29sdW1ucyArICdcIj48aT4nICsgZW1wdHlfc3RyICsgJzwvaT48L3RkPjwvdHI+Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcyh0YWJsZSkge1xuICAgcmV0dXJuICQoXCJ0cjpub3QoLmVtcHR5Um93KVwiLCAkKHRhYmxlKSkubGVuZ3RoIC0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUlzRW1wdHkodGFibGUpIHtcbiAgcmV0dXJuIGRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zKHRhYmxlKSA9PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlR2V0QnlGb3JtKGZvcm0pIHtcbiAgcmV0dXJuICQoXCJ0YWJsZVwiLCAkKFwiI2R0LXRvcC1kZXRhaWxzXCIsICQoZm9ybSkpLnBhcmVudCgpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlVW5kb0FkZFJvdyhuZXdfcm93LCBlbXB0eV9zdHIsIGJ0X3RvX2VuYWJsZSwgY2FsbGJhY2tfc3RyKSB7XG4gIGlmIChidF90b19lbmFibGUpXG4gICAgICQoYnRfdG9fZW5hYmxlKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcblxuICB2YXIgZm9ybSA9ICQobmV3X3JvdykuY2xvc2VzdChcImZvcm1cIik7XG4gICQobmV3X3JvdykucmVtb3ZlKCk7XG4gIGF5c1VwZGF0ZUZvcm0oZm9ybSk7XG4gIHZhciBkdCA9IGRhdGF0YWJsZUdldEJ5Rm9ybShmb3JtKTtcblxuICBpZiAoZGF0YXRhYmxlSXNFbXB0eShkdCkpXG4gICAgIGRhdGF0YWJsZUFkZEVtcHR5Um93KGR0LCBlbXB0eV9zdHIpO1xuXG4gICBpZiAoY2FsbGJhY2tfc3RyKVxuICAgICAgLy8gaW52b2tlXG4gICAgICB3aW5kb3dbY2FsbGJhY2tfc3RyXShuZXdfcm93KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUZvckVhY2hSb3codGFibGUsIGNhbGxiYWNrcykge1xuICAgJChcInRyOm5vdCg6Zmlyc3QpXCIsIHRhYmxlKS5lYWNoKGZ1bmN0aW9uKHJvd19pKSB7XG4gICAgICBpZih0eXBlb2YgY2FsbGJhY2tzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICBjYWxsYmFja3MuYmluZCh0aGlzKShyb3dfaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgdmFyIGk7XG4gICAgICAgICBmb3IgKGk9MDsgaTxjYWxsYmFja3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBjYWxsYmFja3NbaV0uYmluZCh0aGlzKShyb3dfaSk7XG4gICAgICB9XG4gICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgbGFiZWwsIGJzX2NsYXNzLCBjYWxsYmFja19zdHIsIGxpbmssIHZpc2libGUgPSB0cnVlLCB0aXRsZSA9ICcnKSB7XG4gICBpZiAoJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmZpbmQoJ2Rpdi5kLWZsZXgnKS5sZW5ndGggPT0gMCkge1xuICAgICAgJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmVtcHR5KCk7XG4gICAgICAkKFwidGQ6bnRoLWNoaWxkKFwiK3RkX2lkeCtcIilcIiwgJCh0aGlzKSkuYXBwZW5kKCQoXCI8ZGl2IGNsYXNzPSdkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlcic+PC9kaXY+XCIpKTtcbiAgIH1cbiAgICQoXCJ0ZDpudGgtY2hpbGQoXCIrdGRfaWR4K1wiKVwiLCAkKHRoaXMpKS5maW5kKCcuZC1mbGV4JykuYXBwZW5kKCc8YSBocmVmPVwiJyArIGxpbmsgKyBgXCIgdGl0bGU9JyR7dGl0bGV9JyBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBteC0xICR7YnNfY2xhc3N9ICR7IXZpc2libGUgPyAnZGlzYWJsZWQnIDogJyd9XCIgb25jbGljaz1cImAgKyBjYWxsYmFja19zdHIgKyAnXCIgcm9sZT1cImJ1dHRvblwiPicgKyBsYWJlbCArICc8L2E+Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGNhbGxiYWNrX3N0ciwgbGFiZWwpIHtcbiAgICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWRhbmdlclwiLCBjYWxsYmFja19zdHIsIFwiamF2YXNjcmlwdDp2b2lkKDApXCIsIHRydWUsICdEZWxldGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgY2FsbGJhY2tfc3RyLCBsYWJlbCwgdmlzaWJsZSA9IHRydWUsIHRpdGxlID0gJycpIHtcbiAgICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWluZm9cIiwgY2FsbGJhY2tfc3RyLCBcImphdmFzY3JpcHQ6dm9pZCgwKVwiLCB2aXNpYmxlLCB0aXRsZSk7XG59XG4gICAgXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2sodGRfaWR4LCBjYWxsYmFja19zdHIsIGxhYmVsLCB0aXRsZSA9ICcnLCB2aXNpYmxlID0gdHJ1ZSkge1xuICAgIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrLmJpbmQodGhpcykodGRfaWR4LCBsYWJlbCwgXCJidG4td2FybmluZ1wiLCBjYWxsYmFja19zdHIsIFwiamF2YXNjcmlwdDp2b2lkKDApXCIsIHZpc2libGUsIHRpdGxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGxpbmssIGxhYmVsLCB0aXRsZSA9ICcnKSB7XG4gICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWluZm9cIiwgXCJcIiwgbGluaywgdHJ1ZSwgdGl0bGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZSh0cl9vYmosIGFkZGVkX3Jvd3NfcHJlZml4LCBvcHRpb25zKSB7XG4gICBvcHRpb25zID0gTnRvcFV0aWxzLnBhcmFtc0V4dGVuZCh7XG4gICAgICBvbl9jaGFuZ2U6ICQubm9vcCwgICAgICAgICAgICAgICAgICAgICAvKiBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBzZWxlY3QgaW5wdXQgY2hhbmdlcyAqL1xuICAgICAgc2VsZWN0b3JfZm46IGZ1bmN0aW9uKG9iaikgeyAgICAgICAgICAgLyogQSBjYWxsYmFjayB3aGljaCByZWNlaXZlcyBhIHRyIG9iamVjdCBhbmQgcmV0dXJucyBhIHNpbmdsZSBzZWxlY3QgaW5wdXQgKi9cbiAgICAgICAgIHJldHVybiBvYmouZmluZChcInNlbGVjdFwiKS5maXJzdCgpO1xuICAgICAgfSxcbiAgIH0sIG9wdGlvbnMpO1xuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuKHRoaXNfc2VsZWN0LCBhZGRlZF9yb3dzX3ByZWZpeCwgc2VsZWN0b3JfZm4sIGNhbGxiYWNrKSB7XG4gICAgICAkKFwiW2lkXj1cIiArIGFkZGVkX3Jvd3NfcHJlZml4ICsgXCJdXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgIHZhciBvdGhlciA9IHNlbGVjdG9yX2ZuKCQodGhpcykpO1xuICAgICAgICAgaWYgKG90aGVyWzBdICE9IHRoaXNfc2VsZWN0WzBdKVxuICAgICAgICAgICAgY2FsbGJhY2sob3RoZXIpO1xuICAgICAgfSk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyhvcHRpb25fb2JqLCBlbmFibGUpIHtcbiAgICAgIGlmIChlbmFibGUpIHtcbiAgICAgICAgIG9wdGlvbl9vYmoucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHZhciBzZWxlY3Rfb2JqID0gb3B0aW9uX29iai5jbG9zZXN0KFwic2VsZWN0XCIpO1xuICAgICAgICAgdmFyIHNob3VsZF9yZXNldCA9IChzZWxlY3Rfb2JqLnZhbCgpID09IG9wdGlvbl9vYmoudmFsKCkpO1xuICAgICAgICAgb3B0aW9uX29iai5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcblxuICAgICAgICAgaWYoc2hvdWxkX3Jlc2V0KSB7XG4gICAgICAgICAgICB2YXIgbmV3X3ZhbCA9IHNlbGVjdF9vYmouZmluZChcIm9wdGlvbjpub3QoW2Rpc2FibGVkXSlcIikuZmlyc3QoKS52YWwoKTtcbiAgICAgICAgICAgIHNlbGVjdF9vYmoudmFsKG5ld192YWwpO1xuICAgICAgICAgICAgc2VsZWN0X29iai5hdHRyKFwiZGF0YS1vbGQtdmFsXCIsIG5ld192YWwpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVPblNlbGVjdEVudHJ5Q2hhbmdlKGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbiwgY2hhbmdlX2NhbGxiYWNrKSB7XG4gICAgICB2YXIgb2xkX3ZhbHVlID0gJCh0aGlzKS5hdHRyKFwiZGF0YS1vbGQtdmFsXCIpIHx8IFwiXCI7XG4gICAgICB2YXIgbmV3X3ZhbHVlID0gJCh0aGlzKS52YWwoKSB8fCBcIlwiO1xuICAgICAgdmFyIG90aGVycyA9IFtdO1xuXG4gICAgICBpZiAob2xkX3ZhbHVlID09IG5ld192YWx1ZSlcbiAgICAgICAgIG9sZF92YWx1ZSA9IFwiXCI7XG5cbiAgICAgIGRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4oJCh0aGlzKSwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgZGF0YXRhYmxlT3B0aW9uQ2hhbmdlU3RhdHVzKG90aGVyLmZpbmQoXCJvcHRpb25bdmFsdWU9J1wiICsgb2xkX3ZhbHVlICsgXCInXVwiKSwgdHJ1ZSk7XG4gICAgICAgICBkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMob3RoZXIuZmluZChcIm9wdGlvblt2YWx1ZT0nXCIgKyBuZXdfdmFsdWUgKyBcIiddXCIpLCBmYWxzZSk7XG4gICAgICAgICBvdGhlcnMucHVzaChvdGhlcik7XG4gICAgICB9KTtcblxuICAgICAgY2hhbmdlX2NhbGxiYWNrKCQodGhpcyksIG9sZF92YWx1ZSwgbmV3X3ZhbHVlLCBvdGhlcnMsIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyk7XG5cbiAgICAgICQodGhpcykuYXR0cihcImRhdGEtb2xkLXZhbFwiLCBuZXdfdmFsdWUpO1xuICAgfVxuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVPbkFkZFNlbGVjdEVudHJ5KHNlbGVjdF9vYmosIGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbikge1xuICAgICAgc2VsZWN0X29iai52YWwoXCJcIik7XG5cbiAgICAgIC8vIFRyaWdnZXIgYW4gdXBkYXRlIG9uIG90aGVyIGlucHV0cyBpbiBvcmRlciB0byBkaXNhYmxlIGVudHJpZXMgb24gdGhlIHNlbGVjdF9vYmpcbiAgICAgIGRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4oc2VsZWN0X29iaiwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgLy9kYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMoc2VsZWN0X29iai5maW5kKFwib3B0aW9uW3ZhbHVlPSdcIiArIG90aGVyLnZhbCgpICsgXCInXVwiKSwgZmFsc2UpO1xuICAgICAgICAgb3RoZXIudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBzZWxlY3QgZmlyc3QgYXZhaWxhYmxlIGVudHJ5XG4gICAgICB2YXIgbmV3X3NlbCA9IHNlbGVjdF9vYmouZmluZChcIm9wdGlvbjpub3QoW2Rpc2FibGVkXSlcIikuZmlyc3QoKTtcbiAgICAgIHZhciBuZXdfdmFsID0gbmV3X3NlbC52YWwoKTtcblxuICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIG90aGVyIGVudHJpZXNcbiAgICAgIHNlbGVjdF9vYmoudmFsKG5ld192YWwpO1xuICAgICAgc2VsZWN0X29iai50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgfVxuXG4gICB2YXIgc2VsZWN0ID0gb3B0aW9ucy5zZWxlY3Rvcl9mbih0cl9vYmopO1xuICAgc2VsZWN0Lm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKCkgeyBkYXRhdGFibGVPblNlbGVjdEVudHJ5Q2hhbmdlLmJpbmQodGhpcykoYWRkZWRfcm93c19wcmVmaXgsIG9wdGlvbnMuc2VsZWN0b3JfZm4sIG9wdGlvbnMub25fY2hhbmdlKTsgfSk7XG4gICBzZWxlY3Qub24oXCJyZW1vdmVcIiwgZnVuY3Rpb24oKSB7JCh0aGlzKS52YWwoXCJcIikudHJpZ2dlcihcImNoYW5nZVwiKX0pO1xuICAgZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeShzZWxlY3QsIGFkZGVkX3Jvd3NfcHJlZml4LCBvcHRpb25zLnNlbGVjdG9yX2ZuKTtcbn1cblxuZnVuY3Rpb24gZGF0YXRhYmxlT3JkZXJlZEluc2VydCh0YWJsZSwgdGRfaWR4LCB0b19pbnNlcnQsIHRvX2luc2VydF92YWwsIGNtcF9mbikge1xuICAgdmFyIGNtcF9mbiA9IGNtcF9mbiB8fCBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBiIC0gYTsgfTtcbiAgIHZhciBpbnNlcnRlZCA9IGZhbHNlO1xuXG4gICBkYXRhdGFibGVGb3JFYWNoUm93KHRhYmxlLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmKGluc2VydGVkKSByZXR1cm47XG5cbiAgICAgIHZhciB0ciA9ICQodGhpcyk7XG4gICAgICB2YXIgY21wX3ZhbCA9IHBhcnNlSW50KCQoXCJ0ZDpudGgtY2hpbGQoXCIgKyB0ZF9pZHggKyBcIilcIiwgdHIpLmh0bWwoKSk7XG5cbiAgICAgIGlmICgoISBpc05hTihjbXBfdmFsKSkgJiYgKGNtcF9mbihjbXBfdmFsLCB0b19pbnNlcnRfdmFsKSA8IDApKSB7XG4gICAgICAgICB0ci5iZWZvcmUodG9faW5zZXJ0KTtcbiAgICAgICAgIGluc2VydGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgIH0pO1xuXG4gICBpZiAoISBpbnNlcnRlZClcbiAgICAgIC8vIGRlZmF1bHQ6IGFwcGVuZFxuICAgICAgJCh0YWJsZSkuYXBwZW5kKHRvX2luc2VydCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVJc0xhc3RQYWdlKHRhYmxlKSB7XG4gICB2YXIgbGFzdHBhZ2UgPSAkKFwiI2R0LWJvdHRvbS1kZXRhaWxzIC5wYWdpbmF0aW9uIGxpOm50aC1sYXN0LWNoaWxkKDMpXCIsICQodGFibGUpKTtcbiAgIHJldHVybiAhKChsYXN0cGFnZS5sZW5ndGggPT0gMSkgJiYgKGxhc3RwYWdlLmhhc0NsYXNzKFwiYWN0aXZlXCIpID09IGZhbHNlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXRDb2x1bW4odGFibGUsIGlkX2tleSwgaWRfdmFsdWUpIHtcbiAgIHZhciByZXMgPSB0YWJsZS5kYXRhKFwiZGF0YXRhYmxlXCIpLnJlc3VsdHNldC5kYXRhLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbVtpZF9rZXldID09PSBpZF92YWx1ZTtcbiAgIH0pO1xuXG4gICBpZihyZXMpIHJldHVybiByZXNbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXRDb2x1bW5JbmRleCh0YWJsZSwgY29sdW1uX2tleSkge1xuICAgdmFyIGluZGV4ID0gdGFibGUuZGF0YShcImRhdGF0YWJsZVwiKS5vcHRpb25zLmNvbHVtbnMuZmluZEluZGV4KGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmZpZWxkID09PSBjb2x1bW5fa2V5O1xuICAgfSk7XG5cbiAgIHJldHVybihpbmRleCk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gYWRkIHJlZnJlc2hhYmxlIGRhdGF0YWJsZXMgcm93cy5cbiAqXG4gKiB0YWJsZTogdGhlIGRhdGF0YWJsZSBkaXYganF1ZXJ5IG9iamVjdFxuICogY29sdW1uX2lkOiB0aGUgZmllbGQga2V5IHVzZWQgdG8gaW5kZW50aWZ5IHRoZSByb3dzXG4gKiByZWZyZXNoX2ludGVydmFsOiBtaWxsaXNlY29uZHMgcmVmcmVzaCBpbnRlcnZhbCBmb3IgdGhpcyB0YWJsZVxuICogdHJlbmRfY29sdW1uczogKG9wdGlvbmFsKSBhIG1hcCA8ZmllbGQgLT4gZm9ybWF0dGVyX2ZuPiB3aGljaCBpbmRpY2F0ZXMgdGhlIG51bWVyaWMgY29sdW1uc1xuICogd2hpY2ggc2hvdWxkIGJlIHNob3duIHdpdGggdXAvZG93biBhcnJvd3MgdXBvbiByZWZyZXNoLlxuICpcbiAqIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgJChcIiN0YWJsZS1yZWRpcy1zdGF0c1wiKS5kYXRhdGFibGUoe1xuICogICAgIC4uLlxuICogICAgIHRhYmxlQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICogICAgICAgLy8gVGhlIHRhYmxlIHJvd3Mgd2lsbCBiZSBpZGVudGlmaWVkIGJ5IHRoZSBcImNvbHVtbl9rZXlcIixcbiAqICAgICAgIC8vIHJlZnJlc2hlZCBldmVyeSA1IHNlY29uZHMsIHdpdGggdXAvZG93biBhcnJvd3Mgb24gdGhlIFwiY29sdW1uX2hpdHNcIlxuICogICAgICAgZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzKCQoXCIjdGFibGUtcmVkaXMtc3RhdHNcIiksIFwiY29sdW1uX2tleVwiLCA1MDAwLCB7XCJjb2x1bW5faGl0c1wiOiBhZGRDb21tYXN9KTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzKHRhYmxlLCBjb2x1bW5faWQsIHJlZnJlc2hfaW50ZXJ2YWwsIHRyZW5kX2NvbHVtbnMpIHtcbiAgdmFyICRkdCA9IHRhYmxlLmRhdGEoXCJkYXRhdGFibGVcIik7XG4gIHZhciByb3dzID0gJGR0LnJlc3VsdHNldC5kYXRhO1xuICB2YXIgb2xkX3RpbWVyID0gdGFibGUuZGF0YShcImR0LXJyLXRpbWVyXCIpO1xuICB2YXIgb2xkX3JlcSA9IHRhYmxlLmRhdGEoXCJkdC1yci1hamF4XCIpO1xuICB0cmVuZF9jb2x1bW5zID0gdHJlbmRfY29sdW1ucyB8fCB7fTtcblxuICBpZihvbGRfdGltZXIpIHtcbiAgICAvLyBSZW1vdmUgdGhlIHByZXZpb3VzbHkgc2V0IHRpbWVyIHRvIGF2b2lkIGRvdWJsZSBzY2hlZHVsaW5nXG4gICAgY2xlYXJJbnRlcnZhbChvbGRfdGltZXIpO1xuICAgIHRhYmxlLnJlbW92ZURhdGEoXCJkdC1yci10aW1lclwiKTtcbiAgfVxuXG4gIGlmKG9sZF9yZXEpIHtcbiAgICAvLyBBYm9ydCB0aGUgcHJldmlvdXMgcmVxdWVzdCBpZiBhbnlcbiAgICBvbGRfcmVxLmFib3J0KCk7XG4gICAgdGFibGUucmVtb3ZlRGF0YShcImR0LXJyLWFqYXhcIik7XG4gIH1cblxuICB2YXIgaWRzID0gW107XG4gIHZhciBpZF90b19yb3cgPSB7fTtcblxuICBmb3IodmFyIHJvdyBpbiByb3dzKSB7XG4gICAgdmFyIGRhdGEgPSByb3dzW3Jvd107XG5cbiAgICBpZihkYXRhW2NvbHVtbl9pZF0pIHtcbiAgICAgIHZhciBkYXRhX2lkID0gZGF0YVtjb2x1bW5faWRdO1xuICAgICAgaWRfdG9fcm93W2RhdGFfaWRdID0gcm93O1xuICAgICAgaWRzLnB1c2goZGF0YV9pZCk7XG4gICAgfVxuICB9XG5cbiAgaWYoIWlkcylcbiAgICByZXR1cm4oZmFsc2UpO1xuXG4gIC8vIFRoZXNlIHBhcmFtZXRlcnMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIHJlZnJlc2ggZW5kcG9pbnRcbiAgLy8gdGhlIGN1c3RvbV9ob3N0cyBwYXJhbWV0ZXIgd2lsbCBiZSBwYXNzZWQgaW4gdGhlIEFKQVggcmVxdWVzdCBhbmRcbiAgLy8gd2lsbCBjb250YWluIHRoZSBJRHMgdG8gcmVmcmVzaC4gSXQgc2hvdWxkIGJlIHVzZWQgYnkgdGhlIHJlY2VpdmluZ1xuICAvLyBMdWEgc2NyaXB0IGFzIGEgZmlsdGVyXG4gIHZhciBwYXJhbXMgPSB7XG4gICAgXCJjdXN0b21faG9zdHNcIjogaWRzLmpvaW4oXCIsXCIpXG4gIH07XG4gIHZhciB1cmwgPSAkZHQub3B0aW9ucy51cmw7XG4gIHZhciBmaXJzdF9sb2FkID0gdHJ1ZTtcblxuICB2YXIgX3Byb2Nlc3NfcmVzdWx0ID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgaWYodHlwZW9mKHJlc3VsdCkgPT09IFwic3RyaW5nXCIpXG4gICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG5cbiAgICBpZighcmVzdWx0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQmFkIEpTT04gcmVzdWx0XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvcih2YXIgcm93IGluIHJlc3VsdC5kYXRhKSB7XG4gICAgICAgdmFyIGRhdGEgPSByZXN1bHQuZGF0YVtyb3ddO1xuICAgICAgIHZhciBkYXRhX2lkID0gZGF0YVtjb2x1bW5faWRdO1xuXG4gICAgICAgaWYoZGF0YV9pZCAmJiBpZF90b19yb3dbZGF0YV9pZF0pIHtcbiAgICAgICAgICB2YXIgcm93X2lkeCA9IGlkX3RvX3Jvd1tkYXRhX2lkXTtcbiAgICAgICAgICB2YXIgcm93X2h0bWwgPSAkZHQucm93c1tyb3dfaWR4XTtcbiAgICAgICAgICB2YXIgcm93X3RkcyA9ICQoXCJ0ZFwiLCByb3dfaHRtbCk7XG5cbiAgICAgICAgICAvKiBUcnkgdG8gdXBkYXRlIGFsbCB0aGUgZmllbGRzIGZvciB0aGUgY3VycmVudCByb3cgKHJvd19odG1sKSAqL1xuICAgICAgICAgIGZvcih2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICB2YXIgY29sX2lkeCA9IGRhdGF0YWJsZUdldENvbHVtbkluZGV4KHRhYmxlLCBrZXkpO1xuICAgICAgICAgICAgIHZhciBjZWxsID0gcm93X3Rkc1tjb2xfaWR4XTtcbiAgICAgICAgICAgICB2YXIgJGNlbGwgPSAkKGNlbGwpO1xuXG4gICAgICAgICAgICAgdmFyIG9sZF92YWwgPSAkY2VsbC5kYXRhKFwiZHQtcnItY3VyLXZhbFwiKSB8fCAkKGNlbGwpLmh0bWwoKTtcbiAgICAgICAgICAgICB2YXIgdHJlbmRfdmFsdWVfZm9ybWF0dGVyID0gdHJlbmRfY29sdW1uc1trZXldO1xuICAgICAgICAgICAgIHZhciBuZXdfdmFsID0gZGF0YVtrZXldO1xuICAgICAgICAgICAgIHZhciBhcnJvd3MgPSBcIlwiO1xuXG4gICAgICAgICAgICAgaWYodHJlbmRfdmFsdWVfZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgIGlmKHBhcnNlRmxvYXQobmV3X3ZhbCkgIT0gbmV3X3ZhbClcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIG51bWJlcjogXCIgKyBuZXdfdmFsKTtcblxuICAgICAgICAgICAgICBpZighZmlyc3RfbG9hZClcbiAgICAgICAgICAgICAgICBhcnJvd3MgPSBcIiBcIiArIE50b3BVdGlscy5kcmF3VHJlbmQocGFyc2VGbG9hdChuZXdfdmFsKSwgcGFyc2VGbG9hdChvbGRfdmFsKSk7XG5cbiAgICAgICAgICAgICAgLy8gVGhpcyB2YWx1ZSB3aWxsIGJlIG5lZWRlIGluIHRoZSBuZXh0IHJlZnJlc2hcbiAgICAgICAgICAgICAgJGNlbGwuZGF0YShcImR0LXJyLWN1ci12YWxcIiwgbmV3X3ZhbCk7XG5cbiAgICAgICAgICAgICAgbmV3X3ZhbCA9IHRyZW5kX3ZhbHVlX2Zvcm1hdHRlcihuZXdfdmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICQoY2VsbCkuaHRtbCgobmV3X3ZhbCAhPSAwKSA/IChuZXdfdmFsICsgYXJyb3dzKSA6IFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICB9XG4gICAgfVxuXG4gICAgZmlyc3RfbG9hZCA9IGZhbHNlO1xuICAgIHRhYmxlLnJlbW92ZURhdGEoXCJkdC1yci1hamF4XCIpO1xuIH07XG5cbiAgLy8gU2F2ZSB0aGUgdGltZXIgaW50byBcImR0LXJyLXRpbWVyXCIgdG8gYmUgYWJsZSB0byBzdG9wIGl0IGlmXG4gIC8vIGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyBpcyBjYWxsZWQgYWdhaW5cbiAgdGFibGUuZGF0YShcImR0LXJyLXRpbWVyXCIsIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgIC8vIERvdWJsZSBjaGVjayB0aGF0IGEgcmVxdWVzdCBpcyBub3QgcGVuZGluZ1xuICAgIHZhciBvbGRfcmVxID0gdGFibGUuZGF0YShcImR0LXJyLWFqYXhcIik7XG5cbiAgICBpZihvbGRfcmVxKVxuICAgICAgcmV0dXJuO1xuXG4gICAgLy8gU2F2ZSB0aGUgYWpheCByZXF1ZXN0IHRvIHBvc3NpYmx5IGFib3J0IGl0IGlmXG4gICAgLy8gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzIGlzIGNhbGxlZCBhZ2FpblxuICAgIHRhYmxlLmRhdGEoXCJkdC1yci1hamF4XCIsICQuYWpheCh7XG4gICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgdXJsOiB1cmwsXG4gICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICBzdWNjZXNzOiBfcHJvY2Vzc19yZXN1bHQsXG4gICAgfSkpO1xuICB9LCByZWZyZXNoX2ludGVydmFsKSk7XG5cbiAgLy8gRmlyc3QgdXBkYXRlXG4gIF9wcm9jZXNzX3Jlc3VsdCgkZHQucmVzdWx0c2V0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkcmF3X3Byb2Nlc3Nlc19ncmFwaChodHRwX3ByZWZpeCwgZ3JhcGhfZGl2X2lkLCBob3N0KSB7XG4gICAgdmFyIGxpbmtzO1xuICAgIHZhciBub2RlcyA9IHt9O1xuXG4gICAgdmFyIHVybCA9IGh0dHBfcHJlZml4ICsgJy9sdWEvZ2V0X3Byb2Nlc3Nlc19ncmFwaF9kYXRhLmx1YT9ob3N0PScgKyBob3N0O1xuXG4gICAgZDMuanNvbih1cmwsIGZ1bmN0aW9uKGVycm9yLCBqc29uKSB7XG5cdGlmKGVycm9yKVxuXHQgICAgcmV0dXJuIGNvbnNvbGUud2FybihlcnJvcik7XG5cblx0bGlua3MgPSBqc29uO1xuXHR2YXIgX2xpbms7XG5cblx0Ly8gQ29tcHV0ZSB0aGUgZGlzdGluY3Qgbm9kZXMgZnJvbSB0aGUgbGlua3MuXG5cdGxpbmtzLmZvckVhY2goZnVuY3Rpb24obGluaykge1xuXHQgICAgaWYobGluay5zb3VyY2VfcGlkID09IC0xKSB7XG5cdFx0LyogSVAgQWRkcmVzcyAtPiBQSUQgKi9cblx0XHRfbGluayA9IGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD1cIiArIGxpbmsuc291cmNlO1xuXHQgICAgfSBlbHNlIHtcblx0XHQvKiBQSUQgLT4gSVAgQWRkcmVzcyAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvY2Vzc19kZXRhaWxzLmx1YT9waWQ9XCIgKyBsaW5rLnNvdXJjZV9waWQgKyBcIiZwaWRfbmFtZT1cIiArIGxpbmsuc291cmNlX25hbWUgKyBcIiZob3N0PVwiICsgaG9zdCArIFwiJnBhZ2U9Zmxvd3NcIjtcblx0ICAgIH1cblxuXHQgICAgbGluay5zb3VyY2UgPSBub2Rlc1tsaW5rLnNvdXJjZV1cblx0XHR8fCAobm9kZXNbbGluay5zb3VyY2VdID0ge1xuXHRcdCAgICBuYW1lOiBsaW5rLnNvdXJjZV9uYW1lLCBudW06bGluay5zb3VyY2UsXG5cdFx0ICAgIGxpbms6IF9saW5rLCB0eXBlOiBsaW5rLnNvdXJjZV90eXBlLCBwaWQ6IGxpbmsuc291cmNlX3BpZFxuXHRcdH0pO1xuXG5cdCAgICBpZihsaW5rLnRhcmdldF9waWQgPT0gLTEpIHtcblx0XHQvKiBJUCBBZGRyZXNzIC0+IFBJRCAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PVwiICsgbGluay50YXJnZXQ7XG5cdCAgICB9IGVsc2Uge1xuXHRcdC8qIFBJRCAtPiBJUCBBZGRyZXNzICovXG5cdFx0X2xpbmsgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm9jZXNzX2RldGFpbHMubHVhP3BpZD1cIiArIGxpbmsudGFyZ2V0X3BpZCArIFwiJnBpZF9uYW1lPVwiICsgbGluay50YXJnZXRfbmFtZSArIFwiJmhvc3Q9XCIgKyBob3N0ICsgXCImcGFnZT1mbG93c1wiO1xuXHQgICAgfVxuXG5cdCAgICBsaW5rLnRhcmdldCA9IG5vZGVzW2xpbmsudGFyZ2V0XVxuXHRcdHx8IChub2Rlc1tsaW5rLnRhcmdldF0gPSB7XG5cdFx0ICAgIG5hbWU6IGxpbmsudGFyZ2V0X25hbWUsIG51bTogbGluay50YXJnZXQsXG5cdFx0ICAgIGxpbms6IF9saW5rLCB0eXBlOiBsaW5rLnRhcmdldF90eXBlLCBwaWQ6IGxpbmsudGFyZ2V0X3BpZFxuXHRcdH0pO1xuXHR9KTtcblxuXHR2YXIgd2lkdGggPSA5NjAsIGhlaWdodCA9IDUwMCwgYXJyb3dfc2l6ZSA9IDY7XG5cdHZhciBjb2xvciA9IGQzLnNjYWxlLmNhdGVnb3J5MTAoKTtcblxuXHQvKiBTYW1lIGNvbG9ycyBhcyB0aG9zZSB1c2VkIGluIHRoZSBmbG93X2RldGFpbHMubHVhIHBhZ2UgdG8gcmVwcmVzZW50IGhvc3RzIGFuZCBwcm9jZXNzZXMgKi9cblx0Y29sb3JbXCJwcm9jXCJdID0gXCJyZWRcIjtcblx0Y29sb3JbXCJob3N0XCJdID0gXCJsaWdodHN0ZWVsYmx1ZVwiO1xuXG5cdHZhciBmb3JjZSA9IGQzLmxheW91dC5mb3JjZSgpXG5cdCAgICAubm9kZXMoZDMudmFsdWVzKG5vZGVzKSlcblx0ICAgIC5saW5rcyhsaW5rcylcblx0ICAgIC5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcblx0ICAgIC5saW5rRGlzdGFuY2UoMTIwKSAvLyBBcmMgbGVuZ3RoXG5cdCAgICAuY2hhcmdlKC00MDApXG5cdCAgICAub24oXCJ0aWNrXCIsIHRpY2spXG5cdCAgICAuc3RhcnQoKTtcblxuXHR2YXIgc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgZ3JhcGhfZGl2X2lkKS5hcHBlbmQoXCJzdmdcIilcblx0ICAgIC5hdHRyKFwiaWRcIiwgXCJlYnBmX2dyYXBoXCIpXG5cdCAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuXHQgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KTtcblxuXHQvLyBQZXItdHlwZSBtYXJrZXJzLCBhcyB0aGV5IGRvbid0IGluaGVyaXQgc3R5bGVzLlxuXHRzdmcuYXBwZW5kKFwiZGVmc1wiKS5zZWxlY3RBbGwoXCJtYXJrZXJcIilcblx0ICAgIC5kYXRhKFtcInByb2MycHJvY1wiLCBcInByb2MyaG9zdFwiLCBcImhvc3QycHJvY1wiLCBcImhvc3QyaG9zdFwiXSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcIm1hcmtlclwiKVxuXHQgICAgLmF0dHIoXCJpZFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KVxuXHQgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAtNSAyMCAyMFwiKVxuXHQgICAgLmF0dHIoXCJyZWZYXCIsIDE1KVxuXHQgICAgLmF0dHIoXCJyZWZZXCIsIC0xLjUpXG5cdCAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIGFycm93X3NpemUpLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgYXJyb3dfc2l6ZSlcblx0ICAgIC5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKVxuXHQgICAgLmFwcGVuZChcInBhdGhcIilcblx0ICAgIC5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpO1xuXG5cdHZhciBwYXRoID0gc3ZnLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwicGF0aFwiKVxuXHQgICAgLmRhdGEoZm9yY2UubGlua3MoKSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcInBhdGhcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJsaW5rIFwiICsgZC50eXBlOyB9KVxuXHQgICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidXJsKCNcIiArIGQudHlwZSArIFwiKVwiOyB9KTtcblxuXG5cdHZhciBjaXJjbGUgPSBzdmcuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJjaXJjbGVcIilcblx0ICAgIC5kYXRhKGZvcmNlLm5vZGVzKCkpXG5cdCAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJlYnBmX2NpcmNsZVwiKVxuXHQgICAgLmF0dHIoXCJyXCIsIDE1KSAvKiBSYWRpdXMgKi9cblx0ICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY29sb3JbZC50eXBlXTsgfSlcblx0ICAgIC5jYWxsKGZvcmNlLmRyYWcpXG5cdCAgICAub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbihkKSB7XG5cdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSBkLmxpbms7XG5cdCAgICB9ICk7XG5cblx0Ly8gQ2lyY2xlIGxhYmVsXG5cdHZhciB0ZXh0ID0gc3ZnLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwidGV4dFwiKVxuXHQgICAgLmRhdGEoZm9yY2Uubm9kZXMoKSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJlYnBmX3RleHRcIilcblx0ICAgIC5hdHRyKFwieFwiLCAxMilcblx0ICAgIC5hdHRyKFwieVwiLCBcIjAuNXJlbVwiKVxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMXJlbVwiKVxuXHQgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuXHRcdGlmKGQucGlkID49IDApIC8vIFByb2Nlc3Ncblx0XHQgICAgcmV0dXJuKGQubmFtZSArIFwiIFtwaWQ6IFwiK2QucGlkK1wiXVwiKTtcblx0XHRlbHNlIHsgLy8gSG9zdFxuXHRcdCAgICByZXR1cm4oZC5uYW1lKTtcblx0XHR9XG5cdCAgICB9KTtcblxuXHQvLyBVc2UgZWxsaXB0aWNhbCBhcmMgcGF0aCBzZWdtZW50cyB0byBkb3VibHktZW5jb2RlIGRpcmVjdGlvbmFsaXR5LlxuXHRmdW5jdGlvbiB0aWNrKCkge1xuXHQgICAgcGF0aC5hdHRyKFwiZFwiLCBsaW5rQXJjKTtcblx0ICAgIGNpcmNsZS5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG5cdCAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGxpbmtBcmMoZCkge1xuXHQgICAgdmFyIGR4ID0gZC50YXJnZXQueCAtIGQuc291cmNlLngsXG5cdFx0ZHkgPSBkLnRhcmdldC55IC0gZC5zb3VyY2UueSxcblx0XHRkciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdCAgICByZXR1cm4gXCJNXCIgKyBkLnNvdXJjZS54ICsgXCIsXCIgKyBkLnNvdXJjZS55ICsgXCJBXCIgKyBkciArIFwiLFwiICsgZHIgKyBcIiAwIDAsMSBcIiArIGQudGFyZ2V0LnggKyBcIixcIiArIGQudGFyZ2V0Lnk7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm0oZCkge1xuXHQgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcblx0fVxuICAgIH0pO1xufVxuIiwiLy8gMjAxOSAtIG50b3Aub3JnXG5cbnZhciBzY2hlbWFfMl9sYWJlbCA9IHt9O1xudmFyIGRhdGFfMl9sYWJlbCA9IHt9O1xudmFyIGdyYXBoX2kxOG4gPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRMYWJlbE1hcHMoX3NjaGVtYV8yX2xhYmVsLCBfZGF0YV8yX2xhYmVsLCBfZ3JhcGhfaTE4bikge1xuICBzY2hlbWFfMl9sYWJlbCA9IF9zY2hlbWFfMl9sYWJlbDtcbiAgZGF0YV8yX2xhYmVsID0gX2RhdGFfMl9sYWJlbDtcbiAgZ3JhcGhfaTE4biA9IF9ncmFwaF9pMThuO1xufTtcblxuZnVuY3Rpb24gZ2V0U2VyaWVMYWJlbChzY2hlbWEsIHNlcmllLCB2aXN1YWxpemF0aW9uLCBzZXJpZV9pbmRleCkge1xuICB2YXIgZGF0YV9sYWJlbCA9IHNlcmllLmxhYmVsO1xuICB2YXIgbmV3X2xhYmVsID0gZGF0YV8yX2xhYmVsW2RhdGFfbGFiZWxdO1xuXG4gIGlmKHZpc3VhbGl6YXRpb24gJiYgdmlzdWFsaXphdGlvbi5tZXRyaWNzX2xhYmVscyAmJiB2aXN1YWxpemF0aW9uLm1ldHJpY3NfbGFiZWxzW3NlcmllX2luZGV4XSlcbiAgICByZXR1cm4gdmlzdWFsaXphdGlvbi5tZXRyaWNzX2xhYmVsc1tzZXJpZV9pbmRleF07XG5cbiAgICBpZihzZXJpZS5leHRfbGFiZWwpIHtcblx0aWYobmV3X2xhYmVsKVxuXHQgICAgcmV0dXJuIHNlcmllLmV4dF9sYWJlbCArIFwiIChcIiArIG5ld19sYWJlbCArIFwiKVwiO1xuXHRlbHNlXG5cdCAgICByZXR1cm4gc2VyaWUuZXh0X2xhYmVsO1xuICAgIH0gIGVsc2UgaWYoKHNjaGVtYSA9PSBcInRvcDpsb2NhbF9zZW5kZXJzXCIpIHx8IChzY2hlbWEgPT0gXCJ0b3A6bG9jYWxfcmVjZWl2ZXJzXCIpKSB7XG4gICAgaWYoc2VyaWUuZXh0X2xhYmVsKVxuICAgICAgcmV0dXJuIHNlcmllLmV4dF9sYWJlbDtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gc2VyaWUudGFncy5ob3N0XG4gIH0gZWxzZSBpZihzY2hlbWEuc3RhcnRzV2l0aChcInRvcDpcIikpIHsgLy8gdG9wayBncmFwaHNcbiAgICBpZihzZXJpZS50YWdzLnByb3RvY29sKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MucHJvdG9jb2w7XG4gICAgZWxzZSBpZihzZXJpZS50YWdzLmNhdGVnb3J5KVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuY2F0ZWdvcnk7XG4gICAgZWxzZSBpZihzZXJpZS50YWdzLmw0cHJvdG8pXG4gICAgICByZXR1cm4gc2VyaWUudGFncy5sNHByb3RvO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5kc2NwX2NsYXNzKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuZHNjcF9jbGFzcztcbiAgICBlbHNlIGlmKHNlcmllLnRhZ3MuZGV2aWNlICYmIHNlcmllLnRhZ3MuaWZfaW5kZXgpIHsgLy8gU05NUCBpbnRlcmZhY2VcbiAgICAgIGlmKHNlcmllLmV4dF9sYWJlbCAhPSBcIlwiKVxuICAgICAgICAgIHJldHVybiBzZXJpZS5leHRfbGFiZWw7XG5cdGVsc2VcbiAgICAgICAgICByZXR1cm4gXCIoXCIgKyBzZXJpZS50YWdzLmlmX2luZGV4ICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmKHNlcmllLnRhZ3MuZGV2aWNlICYmIHNlcmllLnRhZ3MucG9ydCkgLy8gRmxvdyBkZXZpY2VcbiAgICAgIHJldHVybiBzZXJpZS50YWdzLnBvcnQ7XG4gICAgZWxzZSBpZihzZXJpZS50YWdzLmV4cG9ydGVyICYmIHNlcmllLnRhZ3MuaWZuYW1lKSAvLyBFdmVudCBleHBvcnRlclxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuaWZuYW1lO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5wcm9maWxlKVxuICAgICAgICByZXR1cm4gc2VyaWUudGFncy5wcm9maWxlO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5jaGVjaylcbiAgICAgIHJldHVybiBzZXJpZS50YWdzLmNoZWNrO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5jb21tYW5kKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuY29tbWFuZC5zdWJzdHJpbmcoNCkudG9VcHBlckNhc2UoKTtcbiAgfSBlbHNlIGlmKGRhdGFfbGFiZWwgIT0gXCJieXRlc1wiKSB7IC8vIHNpbmdsZSBzZXJpZXNcbiAgICBpZihzZXJpZS50YWdzLnByb3RvY29sKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MucHJvdG9jb2wgKyBcIiAoXCIgKyBuZXdfbGFiZWwgKyBcIilcIjtcbiAgICBlbHNlIGlmKHNlcmllLnRhZ3MuY2F0ZWdvcnkpXG4gICAgICByZXR1cm4gc2VyaWUudGFncy5jYXRlZ29yeSArIFwiIChcIiArIG5ld19sYWJlbCArIFwiKVwiO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5kZXZpY2UgJiYgc2VyaWUudGFncy5pZl9pbmRleCkgLy8gU05NUCBpbnRlcmZhY2VcbiAgICAgIHJldHVybiBzZXJpZS5leHRfbGFiZWwgKyBcIiAoXCIgKyBuZXdfbGFiZWwgKyBcIilcIjtcbiAgICBlbHNlIGlmKHNlcmllLnRhZ3MuZGV2aWNlICYmIHNlcmllLnRhZ3MucG9ydCkgLy8gRmxvdyBkZXZpY2VcbiAgICAgIHJldHVybiBzZXJpZS50YWdzLnBvcnQgKyBcIiAoXCIgKyBuZXdfbGFiZWwgKyBcIilcIjtcbiAgfSBlbHNlIHtcbiAgICAgIGlmKHNlcmllLnRhZ3MucHJvdG9jb2wpXG4gICAgICAgIHJldHVybiBzZXJpZS50YWdzLnByb3RvY29sO1xuICAgICAgZWxzZSBpZihzZXJpZS50YWdzLmNhdGVnb3J5KVxuICAgICAgICByZXR1cm4gc2VyaWUudGFncy5jYXRlZ29yeTtcbiAgICAgIGVsc2UgaWYoc2VyaWUudGFncy5wcm9maWxlKVxuICAgICAgICByZXR1cm4gc2VyaWUudGFncy5wcm9maWxlO1xuICAgICAgZWxzZSBpZihkYXRhX2xhYmVsID09IFwiYnl0ZXNcIikge1xuICAgICAgICBpZihzY2hlbWEuY29udGFpbnMoXCJ2b2x1bWVcIikpXG4gICAgICAgICAgcmV0dXJuIGdyYXBoX2kxOG4udHJhZmZpY192b2x1bWU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gZ3JhcGhfaTE4bi50cmFmZmljO1xuICAgICAgfVxuICB9XG5cbiAgaWYoc2NoZW1hXzJfbGFiZWxbc2NoZW1hXSlcbiAgICByZXR1cm4gTnRvcFV0aWxzLmNhcGl0YWxpc2VGaXJzdExldHRlcihzY2hlbWFfMl9sYWJlbFtzY2hlbWFdKTtcblxuICBpZihuZXdfbGFiZWwpXG4gICAgcmV0dXJuIE50b3BVdGlscy5jYXBpdGFsaXNlRmlyc3RMZXR0ZXIobmV3X2xhYmVsKTtcblxuICAvLyBkZWZhdWx0XG4gIHJldHVybiBOdG9wVXRpbHMuY2FwaXRhbGlzZUZpcnN0TGV0dGVyKGRhdGFfbGFiZWwpO1xufVxuXG4vLyBWYWx1ZSBmb3JtYXR0ZXJcbmZ1bmN0aW9uIGdldFZhbHVlRm9ybWF0dGVyKHNjaGVtYSwgbWV0cmljX3R5cGUsIHNlcmllcywgY3VzdG9tX2Zvcm1hdHRlciwgc3RhdHMpIHtcbiAgaWYoc2VyaWVzICYmIHNlcmllcy5sZW5ndGggJiYgc2VyaWVzWzBdLmxhYmVsKSB7XG4gICAgaWYoY3VzdG9tX2Zvcm1hdHRlcikge1xuICAgICAgdmFyIGZvcm1hdHRlcnMgPSBbXTtcblxuICAgICAgaWYodHlwZW9mKGN1c3RvbV9mb3JtYXR0ZXIpICE9IFwib2JqZWN0XCIpXG4gICAgICAgIGN1c3RvbV9mb3JtYXR0ZXIgPSBbY3VzdG9tX2Zvcm1hdHRlcl07XG5cbiAgICAgIGZvcih2YXIgaT0wOyBpPGN1c3RvbV9mb3JtYXR0ZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gdHJhbnNsYXRlIGZ1bmN0aW9uIG5hbWUgdG8gYWN0dWFsIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGN1c3RvbV9mb3JtYXR0ZXJbaV0ucmVwbGFjZShcIk50b3BVdGlscy5cIiwgXCJcIilcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyRnVuY3Rpb24gPSBOdG9wVXRpbHNbZnVuY3Rpb25OYW1lXTtcblxuICAgICAgICBpZih0eXBlb2YgZm9ybWF0dGVyRnVuY3Rpb24gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGZpbmQgY3VzdG9tIHZhbHVlIGZvcm1hdHRlciBcXFwiXCIgKyBjdXN0b21fZm9ybWF0dGVyICsgXCJcXFwiXCIpO1xuXG4gICAgICAgIGZvcm1hdHRlcnNbaV0gPSBmb3JtYXR0ZXJGdW5jdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuKGZvcm1hdHRlcnMpO1xuICAgIH1cblxuICAgIHZhciBsYWJlbCA9IHNlcmllc1swXS5sYWJlbDtcblxuICAgIGlmKGxhYmVsLmNvbnRhaW5zKFwiYnl0ZXNcIikpIHtcbiAgICAgIGlmKHNjaGVtYS5jb250YWlucyhcInZvbHVtZVwiKSB8fCBzY2hlbWEuY29udGFpbnMoXCJtZW1vcnlcIikgfHwgc2NoZW1hLmNvbnRhaW5zKFwic2l6ZVwiKSlcbiAgICAgICAgcmV0dXJuIFtOdG9wVXRpbHMuYnl0ZXNUb1NpemUsIE50b3BVdGlscy5ieXRlc1RvU2l6ZV07XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBbTnRvcFV0aWxzLmZiaXRzX2Zyb21fYnl0ZXMsIE50b3BVdGlscy5ieXRlc1RvU2l6ZV07XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwicGFja2V0c1wiKSlcbiAgICAgIHJldHVybiBbTnRvcFV0aWxzLmZwYWNrZXRzLCBOdG9wVXRpbHMuZm9ybWF0UGFja2V0c107XG4gICAgICBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwicG9pbnRzXCIpKVxuICAgICAgcmV0dXJuIFtOdG9wVXRpbHMuZnBvaW50cywgTnRvcFV0aWxzLmZvcm1hdFBvaW50c107XG4gICAgZWxzZSBpZihsYWJlbC5jb250YWlucyhcImZsb3dzXCIpKSB7XG4gICAgICB2YXIgYXNfY291bnRlciA9ICgobWV0cmljX3R5cGUgPT09IFwiY291bnRlclwiKSAmJiAoc2NoZW1hICE9PSBcImN1c3RvbTptZW1vcnlfdnNfZmxvd3NfaG9zdHNcIikpO1xuICAgICAgcmV0dXJuIFthc19jb3VudGVyID8gTnRvcFV0aWxzLmZmbG93cyA6IE50b3BVdGlscy5mb3JtYXRWYWx1ZSwgTnRvcFV0aWxzLmZvcm1hdEZsb3dzLCBhc19jb3VudGVyID8gTnRvcFV0aWxzLmZmbG93cyA6IE50b3BVdGlscy5mb3JtYXRGbG93c107XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwibWlsbGlzXCIpIHx8IGxhYmVsLmNvbnRhaW5zKFwiX21zXCIpKSB7XG4gICAgICByZXR1cm4gW050b3BVdGlscy5mbWlsbGlzLCBOdG9wVXRpbHMuZm1pbGxpc107XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwiYWxlcnRzXCIpICYmIChtZXRyaWNfdHlwZSA9PT0gXCJjb3VudGVyXCIpKSB7XG4gICAgICByZXR1cm4gW050b3BVdGlscy5mYWxlcnRzLCBOdG9wVXRpbHMuZmFsZXJ0c107XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwicGVyY2VudFwiKSkge1xuICAgICAgcmV0dXJuIFtOdG9wVXRpbHMuZnBlcmNlbnQsIE50b3BVdGlscy5mcGVyY2VudF07XG4gICAgfVxuICB9XG5cbiAgLy8gZmFsbGJhY2tcbiAgaWYoc3RhdHMgJiYgKHN0YXRzLm1heF92YWwgPCAxKSkge1xuICAgIC8qIFVzZSB0aGUgZmxvYXQgZm9ybWF0dGVyIHRvIGF2b2lkIGhhdmluZyB0aGUgc2FtZSAwIHZhbHVlIHJlcGVhdGVkIGludG8gdGhlIHNjYWxlICovXG4gICAgcmV0dXJuIFtOdG9wVXRpbHMuZmZsb2F0LCBOdG9wVXRpbHMuZmZsb2F0XTtcbiAgfVxuXG4gIHJldHVybiBbTnRvcFV0aWxzLmZpbnQsTnRvcFV0aWxzLmZpbnRdO1xufVxuXG5mdW5jdGlvbiBtYWtlRmxhdExpbmVWYWx1ZXModHN0YXJ0LCB0c3RlcCwgbnVtLCBkYXRhKSB7XG4gIHZhciB0ID0gdHN0YXJ0O1xuICB2YXIgdmFsdWVzID0gW107XG5cbiAgZm9yKHZhciBpPTA7IGk8bnVtOyBpKyspIHtcbiAgICB2YWx1ZXNbaV0gPSBbdCwgZGF0YSBdO1xuICAgIHQgKz0gdHN0ZXA7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiBjaGVja1Nlcmllc0NvbnNpbnN0ZW5jeShzY2hlbWFfbmFtZSwgY291bnQsIHNlcmllcykge1xuICB2YXIgcnYgPSB0cnVlO1xuXG4gIGZvcih2YXIgaT0wOyBpPHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkYXRhID0gc2VyaWVzW2ldLmRhdGE7XG5cbiAgICBpZihkYXRhLmxlbmd0aCA+IGNvdW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJwb2ludHMgbWlzbWF0Y2g6IHNlcmllICdcIiArIGdldFNlcmllTGFiZWwoc2NoZW1hX25hbWUsIHNlcmllc1tpXSkgK1xuICAgICAgICAgIFwiJyBoYXMgXCIgKyBkYXRhLmxlbmd0aCArIFwiIHBvaW50cywgZXhwZWN0ZWQgXCIgKyBjb3VudCk7XG5cbiAgICAgIHJ2ID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmKGRhdGEubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgIC8qIHVwc2FtcGxlICovXG4gICAgICBzZXJpZXNbaV0uZGF0YSA9IHVwc2FtcGxlU2VyaWUoZGF0YSwgY291bnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBydjtcbn1cblxuZnVuY3Rpb24gdXBzYW1wbGVTZXJpZShzZXJpZSwgbnVtX3BvaW50cykge1xuICBpZihudW1fcG9pbnRzIDw9IHNlcmllLmxlbmd0aClcbiAgICByZXR1cm4gc2VyaWU7XG5cbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaW50ZXJ2YWxzID0gbnVtX3BvaW50cyAvIHNlcmllLmxlbmd0aDtcblxuICBmdW5jdGlvbiBsZXJwKHYwLCB2MSwgdCkge1xuICAgIHJldHVybiAoMSAtIHQpICogdjAgKyB0ICogdjE7XG4gIH1cblxuICBmb3IodmFyIGk9MDsgaTxudW1fcG9pbnRzOyBpKyspIHtcbiAgICB2YXIgaW5kZXggPSBpIC8gaW50ZXJ2YWxzO1xuICAgIHZhciBwcmV2X2kgPSBNYXRoLmZsb29yKGluZGV4KTtcbiAgICB2YXIgbmV4dF9pID0gTWF0aC5taW4oTWF0aC5jZWlsKGluZGV4KSwgc2VyaWUubGVuZ3RoLTEpO1xuICAgIHZhciB0ID0gaW5kZXggJSAxOyAvLyBmcmFjdGlvbmFsIHBhcnRcbiAgICB2YXIgdiA9IGxlcnAoc2VyaWVbcHJldl9pXSwgc2VyaWVbbmV4dF9pXSwgdCk7XG4gICAgLy9jb25zb2xlLmxvZyhwcmV2X2ksIG5leHRfaSwgdCwgXCI+PlwiLCB2KTtcblxuICAgIHJlcy5wdXNoKHYpO1xuICB9XG5cbiAgcmV0dXJuIHJlcy5zbGljZSgwLCBudW1fcG9pbnRzKTtcbn1cblxuLy8gdGhlIHN0YWNrZWQgdG90YWwgc2VyaWVcbmZ1bmN0aW9uIGJ1aWxkVG90YWxTZXJpZShkYXRhX3Nlcmllcykge1xuICB2YXIgc2VyaWVzID0gW107XG5cbiAgZm9yKHZhciBpPTA7IGk8ZGF0YV9zZXJpZXMubGVuZ3RoOyBpKyspXG4gICAgc2VyaWVzLnB1c2goZGF0YV9zZXJpZXNbaV0uZGF0YSk7XG5cbiAgcmV0dXJuIGQzLnRyYW5zcG9zZShzZXJpZXMpLm1hcChmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHgubWFwKGZ1bmN0aW9uKGcpIHtcbiAgICAgIHJldHVybiBnO1xuICAgIH0pO1xuICB9KS5tYXAoZnVuY3Rpb24oeCkge3JldHVybiBkMy5zdW0oeCk7fSk7XG59XG5cbmZ1bmN0aW9uIGFycmF5VG9OdlNlcmllKHNlcmllX2RhdGEsIHN0YXJ0LCBzdGVwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIHQgPSBzdGFydDtcblxuICBmb3IodmFyIGk9MDsgaTxzZXJpZV9kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFsdWVzW2ldID0gW3QsIHNlcmllX2RhdGFbaV1dO1xuICAgIHQgKz0gc3RlcDtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbi8vIGNvbXB1dGVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdmlzdWFsX3RvdGFsIGFuZCB0b3RhbF9zZXJpZVxuZnVuY3Rpb24gYnVpbGRPdGhlclNlcmllKHRvdGFsX3NlcmllLCB2aXN1YWxfdG90YWwpIHtcbiAgaWYodG90YWxfc2VyaWUubGVuZ3RoICE9PSB2aXN1YWxfdG90YWwubGVuZ3RoKSB7XG4gICAgY29uc29sZS53YXJuKFwiVG90YWwvVmlzdWFsIGxlbmd0aCBtaXNtYXRjaDogXCIgKyB0b3RhbF9zZXJpZS5sZW5ndGggKyBcIiB2cyBcIiArIHZpc3VhbF90b3RhbC5sZW5ndGgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIG1heF92YWwgPSAwO1xuXG4gIGZvcih2YXIgaT0wOyBpPHRvdGFsX3NlcmllLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoMCwgdG90YWxfc2VyaWVbaV0gLSB2aXN1YWxfdG90YWxbaV0pO1xuICAgIG1heF92YWwgPSBNYXRoLm1heChtYXhfdmFsLCB2YWx1ZSk7XG5cbiAgICByZXMucHVzaCh2YWx1ZSk7XG4gIH1cblxuICBpZihtYXhfdmFsID4gMC4xKVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVGltZUFycmF5KHN0YXJ0X3RpbWUsIGVuZF90aW1lLCBzdGVwKSB7XG4gIHZhciBhcnIgPSBbXTtcblxuICBmb3IodmFyIHQ9c3RhcnRfdGltZTsgdDxlbmRfdGltZTsgdCs9c3RlcClcbiAgICBhcnIucHVzaCh0KTtcblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBmaXhUaW1lUmFuZ2UoY2hhcnQsIHBhcmFtcywgYWxpZ25fc3RlcCwgYWN0dWFsX3N0ZXApIHtcbiAgdmFyIGRpZmZfZXBvY2ggPSAocGFyYW1zLmVwb2NoX2VuZCAtIHBhcmFtcy5lcG9jaF9iZWdpbik7XG4gIHZhciBmcmFtZSwgYWxpZ24sIHRpY2tfc3RlcCwgcmVzb2x1dGlvbiwgZm10ID0gXCIlSDolTTolU1wiO1xuXG4gIC8vIG11c3QgYmUgc29ydGVkIGJ5IGFzY2VuZGluZyBtYXhfZGlmZlxuICAvLyBtYXhfZGlmZiAvIHRpY2tfc3RlcCBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiB0aWNrcywgd2hpY2ggc2hvdWxkIGJlIDw9IDE1XG4gIC8vIG1heF9kaWZmIC8gcmVzb2x1dGlvbiBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBhY3R1YWwgcG9pbnRzLCB3aGljaCBzaG91bGQgYmUgfjMwMFxuICB2YXIgcmFuZ2VfcGFyYW1zID0gW1xuICAgIC8vIG1heF9kaWZmLCByZXNvbHV0aW9uLCB4X2Zvcm1hdCwgYWxpZ25tZW50LCB0aWNrX3N0ZXBcbiAgICBbMTUsIDEsIFwiJUg6JU06JVNcIiwgMSwgMV0sICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxNSBzZWNcbiAgICBbNjAsIDEsIFwiJUg6JU06JVNcIiwgMSwgNV0sICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxIG1pblxuICAgIFsxMjAsIDEsIFwiJUg6JU06JVNcIiwgMTAsIDEwXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIDw9IDIgbWluXG4gICAgWzMwMCwgMSwgXCIlSDolTTolU1wiLCAxMCwgMzBdLCAgICAgICAgICAgICAgICAgICAgICAgLy8gPD0gNSBtaW5cbiAgICBbNjAwLCA1LCBcIiVIOiVNOiVTXCIsIDMwLCA2MF0sICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxMCBtaW5cbiAgICBbMTIwMCwgNSwgXCIlSDolTTolU1wiLCA2MCwgMTIwXSwgICAgICAgICAgICAgICAgICAgICAvLyA8PSAyMCBtaW5cbiAgICBbMzYwMCwgMTAsIFwiJUg6JU06JVNcIiwgNjAsIDMwMF0sICAgICAgICAgICAgICAgICAgICAvLyA8PSAxIGhcbiAgICBbNTQwMCwgMTUsIFwiJUg6JU1cIiwgMzAwLCA5MDBdLCAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxLjUgaFxuICAgIFsxMDgwMCwgMzAsIFwiJUg6JU1cIiwgMzAwLCA5MDBdLCAgICAgICAgICAgICAgICAgICAgIC8vIDw9IDMgaFxuICAgIFsyMTYwMCwgNjAsIFwiJUg6JU1cIiwgMzYwMCwgMTgwMF0sICAgICAgICAgICAgICAgICAgIC8vIDw9IDYgaFxuICAgIFs0MzIwMCwgMTIwLCBcIiVIOiVNXCIsIDM2MDAsIDM2MDBdLCAgICAgICAgICAgICAgICAgIC8vIDw9IDEyIGhcbiAgICBbODY0MDAsIDI0MCwgXCIlSDolTVwiLCAzNjAwLCA3MjAwXSwgICAgICAgICAgICAgICAgICAvLyA8PSAxIGRcbiAgICBbMTcyODAwLCA0ODAsIFwiJWEsICVIOiVNXCIsIDM2MDAsIDE0NDAwXSwgICAgICAgICAgICAvLyA8PSAyIGRcbiAgICBbNjA0ODAwLCAxODAwLCBcIiVZLSVtLSVkXCIsIDg2NDAwLCA4NjQwMF0sICAgICAgICAgICAvLyA8PSA3IGRcbiAgICBbMTIwOTYwMCwgMzYwMCwgXCIlWS0lbS0lZFwiLCA4NjQwMCwgMTcyODAwXSwgICAgICAgICAvLyA8PSAxNCBkXG4gICAgWzI2Nzg0MDAsIDcyMDAsIFwiJVktJW0tJWRcIiwgODY0MDAsIDI1OTIwMF0sICAgICAgICAgLy8gPD0gMSBtXG4gICAgWzE1NzY4MDAwLCAxNDQwMCwgXCIlWS0lbS0lZFwiLCAyNjc4NDAwLCAxMzE0MDAwXSwgICAgLy8gPD0gNiBtXG4gICAgWzMxNjIyNDAwLCAxNDQwMCwgXCIlWS0lbS0lZFwiLCAyNjc4NDAwLCAyNjc4NDAwXSwgICAgLy8gPD0gMSB5XG4gIF07XG5cbiAgZm9yKHZhciBpPTA7IGk8cmFuZ2VfcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJhbmdlID0gcmFuZ2VfcGFyYW1zW2ldO1xuXG4gICAgaWYoZGlmZl9lcG9jaCA8PSByYW5nZVswXSkge1xuICAgICAgZnJhbWUgPSByYW5nZVswXTtcbiAgICAgIHJlc29sdXRpb24gPSByYW5nZVsxXTtcbiAgICAgIGZtdCA9IHJhbmdlWzJdO1xuICAgICAgYWxpZ24gPSByYW5nZVszXTtcbiAgICAgIHRpY2tfc3RlcCA9IHJhbmdlWzRdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x1dGlvbiA9IE1hdGgubWF4KGFjdHVhbF9zdGVwLCByZXNvbHV0aW9uKTtcblxuICBpZihhbGlnbikge1xuICAgIGFsaWduID0gKGFsaWduX3N0ZXAgJiYgKGZyYW1lICE9IDg2NDAwKSAvKiBkbyBub3QgYWxpZ24gZGFpbHkgdHJhZmZpYyB0byBhdm9pZCBqdW1waW5nIHRvIG90aGVyIFJSQSAqLykgPyBNYXRoLm1heChhbGlnbiwgYWxpZ25fc3RlcCkgOiAxO1xuICAgIHBhcmFtcy5lcG9jaF9iZWdpbiAtPSBwYXJhbXMuZXBvY2hfYmVnaW4gJSBhbGlnbjtcbiAgICBwYXJhbXMuZXBvY2hfZW5kIC09IHBhcmFtcy5lcG9jaF9lbmQgJSBhbGlnbjtcbiAgICBkaWZmX2Vwb2NoID0gKHBhcmFtcy5lcG9jaF9lbmQgLSBwYXJhbXMuZXBvY2hfYmVnaW4pO1xuICAgIHBhcmFtcy5saW1pdCA9IE1hdGguY2VpbChkaWZmX2Vwb2NoIC8gcmVzb2x1dGlvbik7XG5cbiAgICAvLyBhbGlnbiBlcG9jaCBlbmQgd3J0IHBhcmFtcy5saW1pdFxuICAgIHBhcmFtcy5lcG9jaF9lbmQgKz0gTWF0aC5jZWlsKGRpZmZfZXBvY2ggLyBwYXJhbXMubGltaXQpICogcGFyYW1zLmxpbWl0IC0gZGlmZl9lcG9jaDtcbiAgICBjaGFydC5hbGlnbiA9IGFsaWduO1xuICAgIGNoYXJ0LnRpY2tfc3RlcCA9IHRpY2tfc3RlcDtcbiAgfSBlbHNlXG4gICAgY2hhcnQudGlja19zdGVwID0gbnVsbDtcblxuICBjaGFydC54X2ZtdCA9IGZtdDtcbn1cblxuZnVuY3Rpb24gZmluZEFjdHVhbFN0ZXAocmF3X3N0ZXAsIHRzdGFydCkge1xuICBpZih0eXBlb2Ygc3VwcG9ydGVkX3N0ZXBzID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYoc3VwcG9ydGVkX3N0ZXBzW3Jhd19zdGVwXSkge1xuICAgICAgdmFyIHJldGVudGlvbiA9IHN1cHBvcnRlZF9zdGVwc1tyYXdfc3RlcF0ucmV0ZW50aW9uO1xuXG4gICAgICBpZihyZXRlbnRpb24pIHtcbiAgICAgICAgdmFyIG5vd190cyA9IERhdGUubm93KCkgLyAxMDAwO1xuICAgICAgICB2YXIgZGVsdGEgPSBub3dfdHMgLSB0c3RhcnQ7XG5cbiAgICAgICAgZm9yKHZhciBpPTA7IGk8cmV0ZW50aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHBhcnRpYWwgPSByYXdfc3RlcCAqIHJldGVudGlvbltpXS5hZ2dyZWdhdGlvbl9kcDtcbiAgICAgICAgICB2YXIgdGZyYW1lID0gcGFydGlhbCAqIHJldGVudGlvbltpXS5yZXRlbnRpb25fZHA7XG4gICAgICAgICAgZGVsdGEgLT0gdGZyYW1lO1xuXG4gICAgICAgICAgaWYoZGVsdGEgPD0gMClcbiAgICAgICAgICAgIHJldHVybiBwYXJ0aWFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByYXdfc3RlcDtcbn1cblxuZnVuY3Rpb24gaGFzX2luaXRpYWxfem9vbSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBOdG9wVXRpbHMucGFyc2VRdWVyeSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5lcG9jaF9iZWdpbiAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cblxudmFyIGN1cnJlbnRfem9vbV9sZXZlbCA9IChoaXN0b3J5LnN0YXRlKSA/IChoaXN0b3J5LnN0YXRlLnpvb21fbGV2ZWwpIDogMDtcblxuZnVuY3Rpb24gY2FuQ29tcGFyZUJhY2t3YXJkcyhlcG9jaF9iZWdpbiwgZXBvY2hfZW5kKSB7XG4gIHZhciBqdW1wX2R1cmF0aW9uID0gJChcIiNidG4tanVtcC10aW1lLWFoZWFkXCIpLmRhdGEoXCJkdXJhdGlvblwiKTtcbiAgdmFyIGN1cnJlbnRfZHVyYXRpb24gPSBlcG9jaF9lbmQgLSBlcG9jaF9iZWdpbjtcbiAgcmV0dXJuKGp1bXBfZHVyYXRpb24gPT0gY3VycmVudF9kdXJhdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXhKdW1wQnV0dG9ucyhlcG9jaF9iZWdpbiwgZXBvY2hfZW5kKSB7XG4gIHZhciBkdXJhdGlvbiA9ICQoXCIjYnRuLWp1bXAtdGltZS1haGVhZFwiKS5kYXRhKFwiZHVyYXRpb25cIik7XG4gIGlmKChlcG9jaF9lbmQgKyBkdXJhdGlvbikqMTAwMCA+ICQubm93KCkpXG4gICAgJChcIiNidG4tanVtcC10aW1lLWFoZWFkXCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7XG4gIGVsc2VcbiAgICAkKFwiI2J0bi1qdW1wLXRpbWUtYWhlYWRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbn1cblxuZnVuY3Rpb24gc2hvd1F1ZXJ5U2xvdygpIHtcbiAgJChcIiNxdWVyeS1zbG93LWFsZXJ0XCIpLnNob3coKTtcbn1cblxuZnVuY3Rpb24gaGlkZVF1ZXJ5U2xvdygpIHtcbiAgJChcIiNxdWVyeS1zbG93LWFsZXJ0XCIpLmhpZGUoKTtcbn1cblxuZnVuY3Rpb24gY2hhcnRfZGF0YV9zdW0oc2VyaWVzKSB7XG4gIHJldHVybihzZXJpZXMucmVkdWNlKGZ1bmN0aW9uKGFjYywgeCkge1xuICAgIHJldHVybihhY2MgKyB4LnZhbHVlcy5yZWR1Y2UoXG4gICAgICBmdW5jdGlvbihhY2MsIHB0KSB7XG4gICAgICAgIHJldHVybihhY2MgKyBwdFsxXSB8fCAwKTtcbiAgICAgIH0sIDApXG4gICAgKVxuICB9LCAwKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHJhd0V4dHJhTGluZXMoY2hhcnQsIGNoYXJ0X2lkLCBleHRyYV9saW5lcykge1xuICAvKiBSZW1vdmUgdGhlIHByZXZpb3VzIGV4dHJhIGxpbmVzICovXG4gIGQzLnNlbGVjdEFsbChjaGFydF9pZCArIFwiIGxpbmUuZXh0cmEtbGluZVwiKS5yZW1vdmUoKTtcblxuICBpZihleHRyYV9saW5lcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHhWYWx1ZVNjYWxlID0gY2hhcnQueEF4aXMuc2NhbGUoKTtcbiAgICB2YXIgeVZhbHVlU2NhbGUgPSBjaGFydC55QXhpczEuc2NhbGUoKTtcbiAgICB2YXIgZyA9IGQzLnNlbGVjdChjaGFydF9pZCArIFwiIC5zdGFjazFXcmFwXCIpO1xuXG4gICAgZm9yKHZhciBpPTA7IGk8ZXh0cmFfbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkID0gZXh0cmFfbGluZXNbaV07XG5cbiAgICAgIGcuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCIjRkY1QjU2XCIpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjIuNXB4XCIpXG4gICAgICAgIC5hdHRyKFwieDFcIiwgeFZhbHVlU2NhbGUoZFswXSkpXG4gICAgICAgIC5hdHRyKFwieTFcIiwgeVZhbHVlU2NhbGUoZFsyXSkpXG4gICAgICAgIC5hdHRyKFwieDJcIiwgeFZhbHVlU2NhbGUoZFsxXSkpXG4gICAgICAgIC5hdHRyKFwieTJcIiwgeVZhbHVlU2NhbGUoZFszXSkpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJleHRyYS1saW5lXCIpXG4gICAgfVxuICB9XG59XG5cbi8vIGFkZCBhIG5ldyB1cGRhdGVTdGFja2VkQ2hhcnQgZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hTdGFja2VkQ2hhcnRDYWxsYmFjayhjaGFydCwgc2NoZW1hX25hbWUsIGNoYXJ0X2lkLCB6b29tX3Jlc2V0X2lkLCBwYXJhbXMsIHN0ZXAsXG4gICAgICAgICAgbWV0cmljX3R5cGUsIGFsaWduX3N0ZXAsIHNob3dfYWxsX3Ntb290aCwgaW5pdGlhbF9yYW5nZSwgdHNfdGFibGVfc2hvd24pIHtcbiAgdmFyIHBlbmRpbmdfY2hhcnRfcmVxdWVzdCA9IG51bGw7XG4gIHZhciBwZW5kaW5nX3RhYmxlX3JlcXVlc3QgPSBudWxsO1xuICB2YXIgZDNfc2VsID0gZDMuc2VsZWN0KGNoYXJ0X2lkKTtcbiAgdmFyICRjaGFydCA9ICQoY2hhcnRfaWQpO1xuICB2YXIgJHpvb21fcmVzZXQgPSAkKHpvb21fcmVzZXRfaWQpO1xuICB2YXIgJGdyYXBoX3pvb20gPSAkKFwiI2dyYXBoX3pvb21cIik7XG4gIHZhciBtYXhfaW50ZXJ2YWwgPSBmaW5kQWN0dWFsU3RlcChzdGVwLCBwYXJhbXMuZXBvY2hfYmVnaW4pICogODtcbiAgdmFyIGluaXRpYWxfaW50ZXJ2YWwgPSAocGFyYW1zLmVwb2NoX2VuZCAtIHBhcmFtcy5lcG9jaF9iZWdpbik7XG4gIHZhciBpc19tYXhfem9vbSA9IChpbml0aWFsX2ludGVydmFsIDw9IG1heF9pbnRlcnZhbCk7XG4gIHZhciB1cmwgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9yZXN0L3YyL2dldC90aW1lc2VyaWVzL3RzLmx1YVwiO1xuICB2YXIgZmlyc3RfbG9hZCA9IHRydWU7XG4gIHZhciBmaXJzdF90aW1lX2xvYWRlZCA9IHRydWU7XG4gIHZhciBtYW51YWxfdHJpZ2dlcl9leHRyYV9zZXJpZXMgPSB7fTsgLy8ga2VlcHMgdHJhY2sgb2Ygc2VyaWVzIG1hbnVhbGx5IHNob3duL2hpZGRlbiBieSB0aGUgdXNlclxuICB2YXIgZGF0ZXRpbWVfZm9ybWF0ID0gXCJkZC9NTS95eXl5IGhoOm1tOnNzXCI7XG4gIHZhciBtYXhfY21wX292ZXJfdG90YWxfcmF0aW8gPSAzOyAgICAgLy8gaWYgdGhlIGNvbXBhcmlzb24gc2VyaWUgbWF4IHZhbHVlIGlzIHRvbyBiaWcgY29tcGFyZWQgdG8gdGhlIGFjdHVhbCBjaGFydCBzZXJpZXMsIGhpZGUgaXRcbiAgdmFyIG1heF9saW5lX292ZXJfdG90YWxfcmF0aW8gPSAxMDsgICAvLyBpZiB0aGUgZXh0cmEgbGluZSBzZXJpZXMgbWF4IHZhbHVlIGlzIHRvbyBiaWcgY29tcGFyZWQgdG8gdGhlIGFjdHVhbCBjaGFydCBzZXJpZXMsIGhpZGUgdGhlbVxuICB2YXIgcXVlcnlfdGltZXIgPSBudWxsO1xuICB2YXIgc2Vjb25kc19iZWZvcmVfcXVlcnlfc2xvdyA9IDY7XG4gIHZhciBxdWVyeV9jb21wbGV0ZWQgPSAwO1xuICB2YXIgcXVlcnlfd2FzX2Fib3J0ZWQgPSBmYWxzZTtcbiAgbGV0IGxhc3Rfa25vd25fdCA9IG51bGw7IC8vIG9ubHkgc2V0IGlmIHNob3dfdW5yZWFjaGFibGUgaXMgc2V0XG4gIGNvbnN0IHZpc3VhbGl6YXRpb24gPSBjaGFydC52aXN1YWxpemF0aW9uX29wdGlvbnMgfHwge307XG4gIGNoYXJ0LmlzX3pvb21lZCA9ICgoY3VycmVudF96b29tX2xldmVsID4gMCkgfHwgaGFzX2luaXRpYWxfem9vbSgpKTtcblxuICBpZighY2hhcnQpIHJldHVyblxuXG4gIC8qIEV4dHJhIGxpbmVzIHRvIGRyYXcgaW50byB0aGUgY2hhcnQuIEVhY2ggaXRlbSBpcyBpbiB0aGUgZm9ybWF0IFt4X3N0YXJ0LCB4X2VuZCwgeV9zdGFydCwgeV9lbmRdICovXG4gIGxldCBleHRyYV9saW5lcyA9IFtdO1xuICBsZXQgdW5yZWFjaGFibGVfdGltZXN0YW1wcyA9IHt9O1xuXG4gIC8vdmFyIHNwaW5uZXIgPSAkKFwiPGltZyBjbGFzcz0nY2hhcnQtbG9hZGluZy1zcGlubmVyJyBzcmM9J1wiICsgc3Bpbm5lcl91cmwgKyBcIicvPlwiKTtcbiAgdmFyIHNwaW5uZXIgPSAkKCc8aSBjbGFzcz1cImNoYXJ0LWxvYWRpbmctc3Bpbm5lciBmYXMgZmEtc3Bpbm5lciBmYS1sZyBmYS1zcGluXCI+PC9pPicpO1xuICAkY2hhcnQucGFyZW50KCkuY3NzKFwicG9zaXRpb25cIiwgXCJyZWxhdGl2ZVwiKTtcblxuICB2YXIgY2hhcnRfY29sb3JzX2Z1bGwgPSBbXG4gICAgXCIjQzZEOUZEXCIsXG4gICAgXCIjOTBFRTkwXCIsXG4gICAgXCIjNjlCODdGXCIsXG4gICAgXCIjOTRDRkE0XCIsXG4gICAgXCIjQjNERUI2XCIsXG4gICAgXCIjRTVGMUE2XCIsXG4gICAgXCIjRkZGQ0M2XCIsXG4gICAgXCIjRkVERUE1XCIsXG4gICAgXCIjRkZCOTdCXCIsXG4gICAgXCIjRkY4RDZEXCIsXG4gICAgXCIjRTI3Qjg1XCJcbiAgXTtcblxuICB2YXIgY2hhcnRfY29sb3JzX21pbiA9IFtcbiAgICBcIiNDNkQ5RkRcIixcbiAgICBcIiM5MEVFOTBcIixcbiAgICBcIiNFRTg0MzRcIixcbiAgICBcIiNDOTVENjNcIiwgXG4gICAgXCIjQUU4Nzk5XCIsIFxuICAgIFwiIzcxN0VDM1wiLCBcbiAgICBcIiM0OTZEREJcIiwgXG4gICAgXCIjNUE3QURFXCIsIFxuICAgIFwiIzY5ODZFMVwiLCBcbiAgICBcIiM3NzkxRTRcIiwgXG4gICAgXCIjODM5QkU2XCIsXG4gICAgXCIjOEVBNEU4XCJcbiAgXTtcbiAgXG4gIHZhciBzcGxpdF9kaXJlY3Rpb25zX2NvbG9ycyA9IFtcbiAgICBcIiNDNkQ5RkRcIixcbiAgICBcIiM5MEVFOTBcIixcbiAgICBcIiNFRTg0MzRcIixcbiAgICBcIiNDOTVENjNcIiwgXG4gICAgXCIjQUU4Nzk5XCIsIFxuICAgIFwiIzcxN0VDM1wiLCBcbiAgICBcIiM0OTZEREJcIiwgXG4gICAgXCIjNUE3QURFXCIsIFxuICAgIFwiIzY5ODZFMVwiLCBcbiAgICBcIiM3NzkxRTRcIiwgXG4gICAgXCIjODM5QkU2XCIsXG4gICAgXCIjOEVBNEU4XCJcbiAgXTtcblxuICAvKiBUaGlzIGlzIHVzZWQgdG8gc2hvdyB0aGUgXCJ1bnJlYWNoYWJsZVwiIGxhYmVsIHdoZW4gdGhlIGNoYXJ0IFwic2hvd191bnJlYWNoYWJsZVwiXG4gICAqIG9wdGlvbnMgaXMgc2V0LiBTZWUgdGhlIGV4dHJhX2xpbmVzIGNvbXB1dGF0aW9uIGJlbG93LiAqL1xuICBmdW5jdGlvbiBmb3JtYXRfdW5yZWFjaGFibGUoZm9ybWF0dGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHksIGQpIHtcbiAgICAgIGlmKGQgJiYgdW5yZWFjaGFibGVfdGltZXN0YW1wc1tkWzBdXSlcbiAgICAgICAgcmV0dXJuKGkxOG5fZXh0LnVucmVhY2hhYmxlX2hvc3QpO1xuXG4gICAgICAvLyBOb3QgdW5yZWFjaGFibGUsIHVzZSB0aGUgcHJvdmlkZWQgZm9ybWF0dGVyXG4gICAgICByZXR1cm4oZm9ybWF0dGVyKHkpKTtcbiAgICB9XG4gIH1cblxuICAvKiBUaGUgZGVmYXVsdCBudW1iZXIgb2YgeSBwb2ludHMgKi9cbiAgdmFyIG51bV90aWNrc195MSA9IG51bGw7XG4gIHZhciBudW1fdGlja3NfeTIgPSBudWxsO1xuICB2YXIgZG9tYWluX3kxID0gbnVsbDtcbiAgdmFyIGRvbWFpbl95MiA9IG51bGw7XG4gIHZhciBmaXJzdF9ydW4gPSB0cnVlO1xuXG4gIHZhciB1cGRhdGVfY2hhcnRfZGF0YSA9IGZ1bmN0aW9uKG5ld19kYXRhKSB7XG4gICAgLyogcmVzZXQgY2hhcnQgZGF0YSBzbyB0aGF0IHRoZSBuZXh0IHRyYW5zaXRpb24gYW5pbWF0aW9uIHdpbGwgYmUgZ3JhY2VmdWxsICovXG4gICAgZDNfc2VsLmRhdHVtKFtdKS5jYWxsKGNoYXJ0KTtcbiAgICBkM19zZWwuZGF0dW0obmV3X2RhdGEpO1xuXG4gICAgLyogVGhpcyBhZGRpdGlvbmFsIHJlZnJlc2ggaXMgbmVlZGVkIHRvIGRldGVybWluZSB0aGUgeXRpY2tzXG4gICAgICogYW5kIGRvbWFpbiwgbmVlZGVkIGJlbG93LlxuICAgICAqIE5PVEU6IGNhbGxpbmcgdHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkgaXMgaW1wb3J0YW50IHRvIHByb3Blcmx5IHJlZnJlc2hcbiAgICAgKiB0aGUgdG9vbHRpcCBwb3NpdGlvbi4gKi9cbiAgICBkM19zZWwudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuY2FsbChjaGFydCk7XG5cbiAgICBpZihmaXJzdF9ydW4pIHtcbiAgICAgIG51bV90aWNrc195MSA9IGNoYXJ0LnlBeGlzMS50aWNrcygpO1xuICAgICAgbnVtX3RpY2tzX3kyID0gY2hhcnQueUF4aXMyLnRpY2tzKCk7XG4gICAgICBkb21haW5feTEgPSBjaGFydC55RG9tYWluMSgpO1xuICAgICAgZG9tYWluX3kyID0gY2hhcnQueURvbWFpbjIoKTtcbiAgICAgIGZpcnN0X3J1biA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmKG1ldHJpY190eXBlID09PSBcImdhdWdlXCIpIHtcbiAgICAgIHZhciBjdXJfZG9tYWluX3kxID0gY2hhcnQueUF4aXMxLnNjYWxlKCkuZG9tYWluKCk7XG4gICAgICB2YXIgY3VyX2RvbWFpbl95MiA9IGNoYXJ0LnlBeGlzMi5zY2FsZSgpLmRvbWFpbigpO1xuXG4gICAgICBjdXJfZG9tYWluX3kxID0gY3VyX2RvbWFpbl95MVsxXSAtIGN1cl9kb21haW5feTFbMF07XG4gICAgICBjdXJfZG9tYWluX3kyID0gY3VyX2RvbWFpbl95MlsxXSAtIGN1cl9kb21haW5feTJbMF07XG5cbiAgICAgIC8qIElmIHRoZXJlIGFyZSBub3QgZW5vdWdoIHBvaW50cyBhdmFpbGFibGUsIHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICAgKiB0aWNrcyB0byBhdm9pZCByZXBlYXRlZCB0aWNrcyB3aXRoIHNhbWUgaW50ZWdlciB2YWx1ZS5cbiAgICAgICAqIE90aGVyIHNvbHV0aW9ucyAoZG9jdW1lbnRlZCBpbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMTA3NTI0NS9udmQzLXByZXZlbnQtcmVwZWF0ZWQtdmFsdWVzLW9uLXktYXhpcylcbiAgICAgICAqIGFyZSBub3QgZWFzaWx5IGFwcGxpY2FibGUgaW4gdGhpcyBjYXNlLlxuICAgICAgICpcbiAgICAgICAqIE5PVEU6IHRoZSBwcm9ibGVtIHNob3VsZCBub3Qgb2NjdXIgd2hlbiB1c2luZyBOdG9wVXRpbHMuZmZsb2F0XG4gICAgICAgKi9cbiAgICAgIGlmKGNoYXJ0LnlBeGlzMS50aWNrRm9ybWF0KCkgIT0gTnRvcFV0aWxzLmZmbG9hdClcbiAgICAgICAgY2hhcnQueUF4aXMxLnRpY2tzKE1hdGgubWluKGN1cl9kb21haW5feTEsIG51bV90aWNrc195MSkpO1xuICAgICAgaWYoY2hhcnQueUF4aXMyLnRpY2tGb3JtYXQoKSAhPSBOdG9wVXRpbHMuZmZsb2F0KVxuICAgICAgICBjaGFydC55QXhpczIudGlja3MoTWF0aC5taW4oY3VyX2RvbWFpbl95MiwgbnVtX3RpY2tzX3kyKSk7XG4gICAgfVxuXG4gICAgdmFyIHkxX3N1bSA9IGNoYXJ0X2RhdGFfc3VtKG5ld19kYXRhLmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybih4LnlBeGlzID09IDEpOyB9KSlcbiAgICB2YXIgeTJfc3VtID0gY2hhcnRfZGF0YV9zdW0obmV3X2RhdGEuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuKHgueUF4aXMgPT0gMik7IH0pKVxuXG4gICAgLyogRml4IG5lZ2F0aXZlIHlkb21haW4gdmFsdWVzIGFwcGVhcmluZyB3aGVuIGRhdGFzZXQgaXMgZW1wdHkgKi9cbiAgICBpZih5MV9zdW0gPT0gMClcbiAgICAgIGNoYXJ0LnlEb21haW4xKFswLCAxXSk7XG4gICAgZWxzZVxuICAgICAgY2hhcnQueURvbWFpbjEoZG9tYWluX3kxKTtcblxuICAgIGlmKHkyX3N1bSA9PSAwKVxuICAgICAgY2hhcnQueURvbWFpbjIoWzAsIDFdKTtcbiAgICBlbHNlXG4gICAgICBjaGFydC55RG9tYWluMihkb21haW5feTIpO1xuXG4gICAgLyogUmVmcmVzaCB0aGUgY2hhcnQgKi9cbiAgICBkM19zZWwuY2FsbChjaGFydCk7XG4gICAgbnYudXRpbHMud2luZG93UmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgY2hhcnQudXBkYXRlKCk7XG4gICAgICByZWRyYXdFeHRyYUxpbmVzKGNoYXJ0LCBjaGFydF9pZCwgZXh0cmFfbGluZXMpO1xuICAgIH0pXG4gICAgcmVkcmF3RXh0cmFMaW5lcyhjaGFydCwgY2hhcnRfaWQsIGV4dHJhX2xpbmVzKTtcblxuICAgIHNwaW5uZXIucmVtb3ZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0xlZ2VuZERpc2FibGVkKGtleSwgZGVmYXVsdF92YWwpIHtcbiAgICBpZih0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB2YXIgdmFsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjaGFydF9zZXJpZXMuZGlzYWJsZWQuXCIgKyBrZXkpO1xuXG4gICAgICBpZih2YWwgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuKHZhbCA9PT0gXCJ0cnVlXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0X3ZhbDtcbiAgfVxuXG4gIGNoYXJ0LmxlZ2VuZC5kaXNwYXRjaC5vbignbGVnZW5kQ2xpY2snLCBmdW5jdGlvbihkLGkpIHtcbiAgICBtYW51YWxfdHJpZ2dlcl9leHRyYV9zZXJpZXNbZC5sZWdlbmRfa2V5XSA9IHRydWU7XG5cbiAgICBpZih0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjaGFydF9zZXJpZXMuZGlzYWJsZWQuXCIgKyBkLmxlZ2VuZF9rZXksICghZC5kaXNhYmxlZCkgPyB0cnVlIDogZmFsc2UpO1xuICB9KTtcblxuICBjaGFydC5kaXNwYXRjaC5vbihcInpvb21cIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBjdXJfem9vbSA9IFtwYXJhbXMuZXBvY2hfYmVnaW4sIHBhcmFtcy5lcG9jaF9lbmRdO1xuICAgIHZhciB0X3N0YXJ0ID0gTWF0aC5mbG9vcihlLnhEb21haW5bMF0pO1xuICAgIHZhciB0X2VuZCA9IE1hdGguY2VpbChlLnhEb21haW5bMV0pO1xuICAgIHZhciBvbGRfem9vbWVkID0gY2hhcnQuaXNfem9vbWVkO1xuICAgIHZhciBpc191c2VyX3pvb20gPSAodHlwZW9mIGUuaXNfdXNlcl96b29tICE9PSBcInVuZGVmaW5lZFwiKSA/IGUuaXNfdXNlcl96b29tIDogdHJ1ZTtcbiAgICBjaGFydC5pc196b29tZWQgPSB0cnVlO1xuXG4gICAgaWYoY2hhcnQudXBkYXRlU3RhY2tlZENoYXJ0KHRfc3RhcnQsIHRfZW5kLCBmYWxzZSwgaXNfdXNlcl96b29tKSkge1xuICAgICAgaWYoaXNfdXNlcl96b29tIHx8IGUucHVzaF9zdGF0ZSkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiem9vbSBJTiFcIik7XG4gICAgICAgIGN1cnJlbnRfem9vbV9sZXZlbCArPSAxO1xuICAgICAgICB2YXIgdXJsID0gTnRvcFV0aWxzLmdldEhpc3RvcnlQYXJhbWV0ZXJzKHtlcG9jaF9iZWdpbjogdF9zdGFydCwgZXBvY2hfZW5kOiB0X2VuZH0pO1xuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7em9vbV9sZXZlbDogY3VycmVudF96b29tX2xldmVsLCByYW5nZTogW3Rfc3RhcnQsIHRfZW5kXX0sIFwiXCIsIHVybCk7XG4gICAgICB9XG5cbiAgICAgIGNoYXJ0LmZpeENoYXJ0QnV0dG9ucygpO1xuICAgIH0gZWxzZVxuICAgICAgY2hhcnQuaXNfem9vbWVkID0gb2xkX3pvb21lZDtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlWm9vbSh6b29tLCBpc191c2VyX3pvb20sIGZvcmNlKSB7XG4gICAgdmFyIHRfc3RhcnQgPSB6b29tWzBdO1xuICAgIHZhciB0X2VuZCA9IHpvb21bMV07XG5cbiAgICBjaGFydC51cGRhdGVTdGFja2VkQ2hhcnQodF9zdGFydCwgdF9lbmQsIGZhbHNlLCBpc191c2VyX3pvb20sIG51bGwsIGZvcmNlKTtcbiAgICBjaGFydC5maXhDaGFydEJ1dHRvbnMoKTtcbiAgfVxuXG4gIGNoYXJ0Lnpvb21faW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VyX2ludGVydmFsID0gcGFyYW1zLmVwb2NoX2VuZCAtIHBhcmFtcy5lcG9jaF9iZWdpbjtcblxuICAgIGlmKGN1cl9pbnRlcnZhbCA+IDYwKSB7XG4gICAgICB2YXIgZGVsdGEgPSBjdXJfaW50ZXJ2YWwvNDtcbiAgICAgICQoXCIjcGVyaW9kX2JlZ2luXCIpLmRhdGV0aW1lcGlja2VyKFwiZGF0ZVwiLCBuZXcgRGF0ZSgocGFyYW1zLmVwb2NoX2JlZ2luICsgZGVsdGEpICogMTAwMCkpO1xuICAgICAgJChcIiNwZXJpb2RfZW5kXCIpLmRhdGV0aW1lcGlja2VyKFwiZGF0ZVwiLCBuZXcgRGF0ZSgocGFyYW1zLmVwb2NoX2VuZCAtIGRlbHRhKSAqIDEwMDApKTtcbiAgICAgIHVwZGF0ZUNoYXJ0RnJvbVBpY2tlcnMoKTtcbiAgICB9XG4gIH1cblxuICBjaGFydC56b29tX291dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJfaW50ZXJ2YWwgPSBwYXJhbXMuZXBvY2hfZW5kIC0gcGFyYW1zLmVwb2NoX2JlZ2luO1xuXG4gICAgLy9pZihjdXJyZW50X3pvb21fbGV2ZWwpIHtcbiAgICAgIC8vIFpvb20gb3V0IGZyb20gaGlzdG9yeVxuICAgICAgLy9jb25zb2xlLmxvZyhcInpvb20gT1VUXCIpO1xuICAgICAgLy9oaXN0b3J5LmJhY2soKTtcbiAgICAvL30gZWxzZSB7XG4gICAgLy8gWm9vbSBvdXQgd2l0aCBmaXhlZCBpbnRlcnZhbFxuICAgIC8vdmFyIGRlbHRhID0gem9vbV9vdXRfdmFsdWU7XG4gICAgdmFyIGRlbHRhID0gY3VyX2ludGVydmFsLzI7XG4gICAgLy9pZigocGFyYW1zLmVwb2NoX2VuZCArIGRlbHRhKSoxMDAwIDw9ICQubm93KCkpXG4gICAgICAvL2RlbHRhIC89IDI7XG5cbiAgICAkKFwiI3BlcmlvZF9iZWdpblwiKS5kYXRldGltZXBpY2tlcihcImRhdGVcIiwgbmV3IERhdGUoKHBhcmFtcy5lcG9jaF9iZWdpbiAtIGRlbHRhKSAqIDEwMDApKTtcbiAgICAkKFwiI3BlcmlvZF9lbmRcIikuZGF0ZXRpbWVwaWNrZXIoXCJkYXRlXCIsIG5ldyBEYXRlKChwYXJhbXMuZXBvY2hfZW5kICsgZGVsdGEpICogMTAwMCkpO1xuICAgIHVwZGF0ZUNoYXJ0RnJvbVBpY2tlcnMoKTtcbiAgICAvL31cbiAgfVxuXG4gICRjaGFydC5vbignZGJsY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgIGlmKCQoZXZlbnQudGFyZ2V0KS5oYXNDbGFzcyhcIm52LWxlZ2VuZC10ZXh0XCIpKVxuICAgICAgLy8gbGVnZW5kIHdhcyBkb3VibGUtY2xpY2tlZCwga2VlcCB0aGUgb3JpZ2luYWwgYmVoYXZpb3JcbiAgICAgIHJldHVybjtcblxuICAgIGNoYXJ0Lnpvb21fb3V0KCk7XG4gIH0pO1xuXG4gICR6b29tX3Jlc2V0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgaWYoY3VycmVudF96b29tX2xldmVsKSB7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiem9vbSBSRVNFVFwiKTtcbiAgICAgIGhpc3RvcnkuZ28oLWN1cnJlbnRfem9vbV9sZXZlbCk7XG4gICAgfVxuICB9KTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHpvb20gPSBpbml0aWFsX3JhbmdlO1xuICAgIC8vY29uc29sZS5sb2coXCJwb3BzdGF0ZTogXCIsIGUuc3RhdGUpO1xuXG4gICAgaWYoZS5zdGF0ZSkge1xuICAgICAgem9vbSA9IGUuc3RhdGUucmFuZ2U7XG4gICAgICBjdXJyZW50X3pvb21fbGV2ZWwgPSBlLnN0YXRlLnpvb21fbGV2ZWw7XG4gICAgfSBlbHNlXG4gICAgICBjdXJyZW50X3pvb21fbGV2ZWwgPSAwO1xuXG4gICAgdXBkYXRlWm9vbSh6b29tLCB0cnVlLCB0cnVlIC8qIGZvcmNlICovKTtcbiAgfSk7XG5cbiAgY2hhcnQuZml4Q2hhcnRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gICAgaWYoKGN1cnJlbnRfem9vbV9sZXZlbCA+IDApIHx8IGhhc19pbml0aWFsX3pvb20oKSkge1xuICAgICAgJGdyYXBoX3pvb20uZmluZChcIi5idG4td2FybmluZzpub3QoLmN1c3RvbS16b29tLWJ0bilcIilcbiAgICAgICAgLmFkZENsYXNzKFwiaW5pdGlhbC16b29tLXNlbFwiKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJidG4td2FybmluZ1wiKTtcbiAgICAgICRncmFwaF96b29tLmZpbmQoXCIuY3VzdG9tLXpvb20tYnRuXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuXG4gICAgICB2YXIgem9vbV9saW5rID0gJGdyYXBoX3pvb20uZmluZChcIi5jdXN0b20tem9vbS1idG5cIik7XG4gICAgICB2YXIgbGluayA9IHpvb21fbGluay52YWwoKS5yZXBsYWNlKC8mZXBvY2hfYmVnaW49LiovLCBcIlwiKTtcbiAgICAgIGxpbmsgKz0gXCImZXBvY2hfYmVnaW49XCIgKyBwYXJhbXMuZXBvY2hfYmVnaW4gKyBcIiZlcG9jaF9lbmQ9XCIgKyBwYXJhbXMuZXBvY2hfZW5kO1xuICAgICAgem9vbV9saW5rLnZhbChsaW5rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGdyYXBoX3pvb20uZmluZChcIi5pbml0aWFsLXpvb20tc2VsXCIpXG4gICAgICAgIC5hZGRDbGFzcyhcImJ0bi13YXJuaW5nXCIpO1xuICAgICAgJGdyYXBoX3pvb20uZmluZChcIi5jdXN0b20tem9vbS1idG5cIikuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIGNoYXJ0LmlzX3pvb21lZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZpeEp1bXBCdXR0b25zKHBhcmFtcy5lcG9jaF9iZWdpbiwgcGFyYW1zLmVwb2NoX2VuZCk7XG5cbiAgICBpZihjdXJyZW50X3pvb21fbGV2ZWwgPiAwKVxuICAgICAgJHpvb21fcmVzZXQuc2hvdygpO1xuICAgIGVsc2VcbiAgICAgICR6b29tX3Jlc2V0LmhpZGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUXVlcnlDb21wbGV0ZWQoKSB7XG4gICAgdmFyIGZsb3dzX2R0ID0gJChcIiNjaGFydDEtZmxvd3NcIik7XG4gICAgdmFyIHdhaXRfbnVtX3F1ZXJpZXMgPSAodHNfdGFibGVfc2hvd24gJiYgKCQoXCIjY2hhcnQxLWZsb3dzXCIpLmNzcyhcImRpc3BsYXlcIikgIT09IFwibm9uZVwiKSkgPyAyIDogMTtcblxuICAgIHF1ZXJ5X2NvbXBsZXRlZCArPSAxO1xuXG4gICAgaWYocXVlcnlfY29tcGxldGVkID49IHdhaXRfbnVtX3F1ZXJpZXMpIHtcbiAgICAgIGlmKHF1ZXJ5X3RpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocXVlcnlfdGltZXIpO1xuICAgICAgICBxdWVyeV90aW1lciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGhpZGVRdWVyeVNsb3coKTtcbiAgICB9XG4gIH1cblxuICBjaGFydC5xdWVyeVdhc0Fib3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVlcnlfd2FzX2Fib3J0ZWQ7XG4gIH1cblxuICBjaGFydC5hYm9ydFF1ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgcXVlcnlfd2FzX2Fib3J0ZWQgPSB0cnVlO1xuXG4gICAgaWYocGVuZGluZ19jaGFydF9yZXF1ZXN0KSB7XG4gICAgICBwZW5kaW5nX2NoYXJ0X3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgIGNoYXJ0Lm5vRGF0YShpMThuX2V4dC5xdWVyeV93YXNfYWJvcnRlZCk7XG4gICAgICB1cGRhdGVfY2hhcnRfZGF0YShbXSk7XG4gICAgfVxuXG4gICAgaWYocGVuZGluZ190YWJsZV9yZXF1ZXN0KVxuICAgICAgcGVuZGluZ190YWJsZV9yZXF1ZXN0LmFib3J0KCk7XG5cbiAgICBpZihxdWVyeV90aW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbChxdWVyeV90aW1lcik7XG4gICAgICBxdWVyeV90aW1lciA9IG51bGw7XG4gICAgfVxuXG4gICAgaGlkZVF1ZXJ5U2xvdygpO1xuICB9XG5cbiAgY2hhcnQudGFibGVSZXF1ZXN0Q29tcGxldGVkID0gZnVuY3Rpb24oKSB7XG4gICAgY2hlY2tRdWVyeUNvbXBsZXRlZCgpO1xuICAgIHBlbmRpbmdfdGFibGVfcmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBjaGFydC5nZXREYXRhVXJsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGFfcGFyYW1zID0galF1ZXJ5LmV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBkZWxldGUgZGF0YV9wYXJhbXMuem9vbTtcbiAgICBkZWxldGUgZGF0YV9wYXJhbXMudHNfY29tcGFyZTtcbiAgICBkYXRhX3BhcmFtcy5leHRlbmRlZCA9IDE7IC8qIHdpdGggZXh0ZW5kZWQgdGltZXN0YW1wcyAqL1xuICAgIHJldHVybiB1cmwgKyBcIj9cIiArICQucGFyYW0oZGF0YV9wYXJhbXMsIHRydWUpO1xuICB9XG5cbiAgdmFyIG9sZF9zdGFydCwgb2xkX2VuZCwgb2xkX2ludGVydmFsO1xuXG4gIC8qIFJldHVybnMgZmFsc2UgaWYgem9vbSB1cGRhdGUgaXMgcmVqZWN0ZWQuICovXG4gIGNoYXJ0LnVwZGF0ZVN0YWNrZWRDaGFydCA9IGZ1bmN0aW9uICh0c3RhcnQsIHRlbmQsIG5vX3NwaW5uZXIsIGlzX3VzZXJfem9vbSwgb25fbG9hZF9jYWxsYmFjaywgZm9yY2VfdXBkYXRlKSB7XG4gICAgaWYodHN0YXJ0KSBwYXJhbXMuZXBvY2hfYmVnaW4gPSB0c3RhcnQ7XG4gICAgaWYodGVuZCkgcGFyYW1zLmVwb2NoX2VuZCA9IHRlbmQ7XG4gICAgY29uc3Qgc2VyaWVzX2Zvcm1hdHRlZF9sYWJlbHMgPSB7fTtcblxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCkgLyAxMDAwO1xuXG4gICAgdmFyIGN1cl9pbnRlcnZhbCA9IChwYXJhbXMuZXBvY2hfZW5kIC0gcGFyYW1zLmVwb2NoX2JlZ2luKTtcbiAgICB2YXIgYWN0dWFsX3N0ZXAgPSBmaW5kQWN0dWFsU3RlcChzdGVwLCBwYXJhbXMuZXBvY2hfYmVnaW4pO1xuICAgIG1heF9pbnRlcnZhbCA9IGFjdHVhbF9zdGVwICogNjsgLyogaG9zdCB0cmFmZmljIDMwIG1pbiAqL1xuXG4gICAgaWYoY3VyX2ludGVydmFsIDwgbWF4X2ludGVydmFsKSB7XG4gICAgICBpZigoaXNfbWF4X3pvb20gJiYgKGN1cl9pbnRlcnZhbCA8IG9sZF9pbnRlcnZhbCkpICYmICFmb3JjZV91cGRhdGUpIHtcbiAgICAgICAgb2xkX2ludGVydmFsID0gY3VyX2ludGVydmFsO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmKCFmb3JjZV91cGRhdGUpIHtcbiAgICAgICAgLyogRW5zdXJlIHRoYXQgYSBtaW5pbWFsIG51bWJlciBvZiBwb2ludHMgaXMgYXZhaWxhYmxlICovXG4gICAgICAgIHZhciBlcG9jaCA9IHBhcmFtcy5lcG9jaF9iZWdpbiArIChwYXJhbXMuZXBvY2hfZW5kIC0gcGFyYW1zLmVwb2NoX2JlZ2luKSAvIDI7XG4gICAgICAgIHZhciBuZXdfZW5kID0gTWF0aC5mbG9vcihlcG9jaCArIG1heF9pbnRlcnZhbCAvIDIpO1xuXG4gICAgICAgIGlmKG5ld19lbmQgPj0gbm93KSB7XG4gICAgICAgICAgLyogT25seSBleHBhbmQgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgaW50ZXJ2YWwgKi9cbiAgICAgICAgICBwYXJhbXMuZXBvY2hfYmVnaW4gPSBwYXJhbXMuZXBvY2hfZW5kIC0gbWF4X2ludGVydmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmFtcy5lcG9jaF9iZWdpbiA9IE1hdGguZmxvb3IoZXBvY2ggLSBtYXhfaW50ZXJ2YWwgLyAyKTtcbiAgICAgICAgICBwYXJhbXMuZXBvY2hfZW5kID0gTWF0aC5mbG9vcihlcG9jaCArIG1heF9pbnRlcnZhbCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNfbWF4X3pvb20gPSB0cnVlO1xuICAgICAgICBjaGFydC56b29tVHlwZShudWxsKTsgLy8gZGlzYWJsZSB6b29tXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJfaW50ZXJ2YWwgPiBtYXhfaW50ZXJ2YWwpIHtcbiAgICAgIGlzX21heF96b29tID0gZmFsc2U7XG4gICAgICBjaGFydC56b29tVHlwZSgneCcpOyAvLyBlbmFibGUgem9vbVxuICAgIH1cblxuICAgIG9sZF9pbnRlcnZhbCA9IGN1cl9pbnRlcnZhbDtcblxuICAgIGlmKCFmaXJzdF9sb2FkIHx8IGhhc19pbml0aWFsX3pvb20oKSB8fCBmb3JjZV91cGRhdGUpXG4gICAgICBhbGlnbl9zdGVwID0gbnVsbDtcbiAgICBmaXhUaW1lUmFuZ2UoY2hhcnQsIHBhcmFtcywgYWxpZ25fc3RlcCwgYWN0dWFsX3N0ZXApO1xuXG4gICAgaWYoZmlyc3RfbG9hZClcbiAgICAgIGluaXRpYWxfcmFuZ2UgPSBbcGFyYW1zLmVwb2NoX2JlZ2luLCBwYXJhbXMuZXBvY2hfZW5kXTtcblxuICAgIGlmKChvbGRfc3RhcnQgPT0gcGFyYW1zLmVwb2NoX2JlZ2luKSAmJiAob2xkX2VuZCA9PSBwYXJhbXMuZXBvY2hfZW5kKSAmJiAoIWZvcmNlX3VwZGF0ZSkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBvbGRfc3RhcnQgPSBwYXJhbXMuZXBvY2hfYmVnaW47XG4gICAgb2xkX2VuZCA9IHBhcmFtcy5lcG9jaF9lbmQ7XG5cbiAgICBpZihwZW5kaW5nX3RhYmxlX3JlcXVlc3QpXG4gICAgICBwZW5kaW5nX3RhYmxlX3JlcXVlc3QuYWJvcnQoKTtcblxuICAgIGlmKHBlbmRpbmdfY2hhcnRfcmVxdWVzdClcbiAgICAgIHBlbmRpbmdfY2hhcnRfcmVxdWVzdC5hYm9ydCgpO1xuICAgIGVsc2UgaWYoIW5vX3NwaW5uZXIpXG4gICAgICBzcGlubmVyLmFwcGVuZFRvKCRjaGFydC5wYXJlbnQoKSk7XG5cbiAgICAvLyBVcGRhdGUgZGF0ZXRpbWUgc2VsZWN0aW9uXG4gICAgJChcIiNwZXJpb2RfYmVnaW5cIikuZGF0ZXRpbWVwaWNrZXIoXCJkYXRlXCIsIG5ldyBEYXRlKHBhcmFtcy5lcG9jaF9iZWdpbiAqIDEwMDApKTtcbiAgICAkKFwiI3BlcmlvZF9lbmRcIikuZGF0ZXRpbWVwaWNrZXIoXCJkYXRlXCIsIG5ldyBEYXRlKE1hdGgubWluKHBhcmFtcy5lcG9jaF9lbmQgKiAxMDAwLCAkLm5vdygpKSkpO1xuXG4gICAgaWYocXVlcnlfdGltZXIpXG4gICAgICBjbGVhckludGVydmFsKHF1ZXJ5X3RpbWVyKTtcblxuICAgIHF1ZXJ5X3RpbWVyID0gc2V0SW50ZXJ2YWwoc2hvd1F1ZXJ5U2xvdywgc2Vjb25kc19iZWZvcmVfcXVlcnlfc2xvdyAqIDEwMDApO1xuICAgIHF1ZXJ5X2NvbXBsZXRlZCA9IDA7XG4gICAgcXVlcnlfd2FzX2Fib3J0ZWQgPSBmYWxzZTtcbiAgICBjaGFydC5ub0RhdGEoaTE4bl9leHQubm9fZGF0YV9hdmFpbGFibGUpO1xuICAgIGhpZGVRdWVyeVNsb3coKTtcblxuICAgIHZhciByZXFfcGFyYW1zID0gJC5leHRlbmQoe30sIHBhcmFtcyk7XG4gICAgLy8gc2tpcCBwYXN0IHBlcmlvZCBjb21wYXJpc29uIGlmIGEgY3VzdG9tIGludGVydmFsIGlzIHNlbGVjdGVkXG4gICAgaWYoIWNhbkNvbXBhcmVCYWNrd2FyZHMocmVxX3BhcmFtcy5lcG9jaF9iZWdpbiwgcmVxX3BhcmFtcy5lcG9jaF9lbmQpKVxuICAgICAgZGVsZXRlIHJlcV9wYXJhbXMudHNfY29tcGFyZTtcblxuICAgIC8qIERpc2FibGUgdGhlIG51bGwgZGF0YSBmaWxsaW5nIG9ubHkgZm9yIHRoZSBjaGFydHMgd2hpY2ggc3VwcG9ydCB0aGVcbiAgICAgKiBcInVucmVhY2hhYmxlXCIgc3RhdHVzICh1bnJlYWNoYWJsZSByZXBvcnRlZCBhcyBhIDAgdmFsdWUgaW5zdGVhZCBvZiBudWxsKS4gKi9cbiAgICBpZih2aXN1YWxpemF0aW9uLnNob3dfdW5yZWFjaGFibGUpXG4gICAgICByZXFfcGFyYW1zLm5vX2ZpbGwgPSAxO1xuXG4gICAgLy8gTG9hZCBkYXRhIHZpYSBhamF4XG4gICAgcGVuZGluZ19jaGFydF9yZXF1ZXN0ID0gJC5nZXQodXJsLCByZXFfcGFyYW1zLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhLnJzcDsgLyogQWRhcHRzIHRoZSByZXNwb25zZSB0byB0aGUgbmV3IFJFU1QgQVBJIHYxICovXG5cblx0aWYoZGF0YSAmJiBkYXRhLmVycm9yKVxuICAgICAgICBjaGFydC5ub0RhdGEoZGF0YS5lcnJvcik7XG5cbiAgICAgIGlmKCFkYXRhIHx8ICFkYXRhLnNlcmllcyB8fCAhZGF0YS5zZXJpZXMubGVuZ3RoIHx8ICFjaGVja1Nlcmllc0NvbnNpbnN0ZW5jeShzY2hlbWFfbmFtZSwgZGF0YS5jb3VudCwgZGF0YS5zZXJpZXMpKSB7XG4gICAgICAgIHVwZGF0ZV9jaGFydF9kYXRhKFtdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBGaXggeCBheGlzXG4gICAgICB2YXIgdGlja19zdGVwID0gTWF0aC5jZWlsKGNoYXJ0LnRpY2tfc3RlcCAvIGRhdGEuc3RlcCkgKiBkYXRhLnN0ZXA7XG4gICAgICBjaGFydC54QXhpcy50aWNrVmFsdWVzKGJ1aWxkVGltZUFycmF5KGRhdGEuc3RhcnQsIGRhdGEuc3RhcnQgKyBkYXRhLmNvdW50ICogZGF0YS5zdGVwLCB0aWNrX3N0ZXApKTtcbiAgICAgIGNoYXJ0LnhBeGlzLnRpY2tGb3JtYXQoZnVuY3Rpb24oZCkgeyByZXR1cm4gZDMudGltZS5mb3JtYXQoY2hhcnQueF9mbXQpKG5ldyBEYXRlKGQqMTAwMCkpIH0pO1xuXG4gICAgICAvLyBBZGFwdCBkYXRhXG4gICAgICB2YXIgcmVzID0gW107XG4gICAgICB2YXIgc2VyaWVzID0gZGF0YS5zZXJpZXM7XG4gICAgICB2YXIgdG90YWxfc2VyaWU7XG4gICAgICB2YXIgY29sb3JfaSA9IDA7XG4gICAgICBsZXQgdGltZV9lbGFwc2VkID0gMTtcblxuICAgICAgaWYodmlzdWFsaXphdGlvbi50aW1lX2VsYXBzZWQpXG4gICAgICAgIHRpbWVfZWxhcHNlZCA9IHZpc3VhbGl6YXRpb24udGltZV9lbGFwc2VkO1xuXG4gICAgICB2YXIgY2hhcnRfY29sb3JzID0gKHNlcmllcy5sZW5ndGggPD0gY2hhcnRfY29sb3JzX21pbi5sZW5ndGgpID8gY2hhcnRfY29sb3JzX21pbiA6IGNoYXJ0X2NvbG9yc19mdWxsO1xuXG4gICAgICBmb3IodmFyIGo9MDsgajxzZXJpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICB2YXIgc2VyaWVfZGF0YSA9IHNlcmllc1tqXS5kYXRhO1xuXG4gICAgICAgIHZhciB0ID0gZGF0YS5zdGFydDtcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8c2VyaWVfZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhbHVlc1tpXSA9IFt0LCBzZXJpZV9kYXRhW2ldIC8gdGltZV9lbGFwc2VkIF07XG4gICAgICAgICAgdCArPSBkYXRhLnN0ZXA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFiZWwgPSBnZXRTZXJpZUxhYmVsKHNjaGVtYV9uYW1lLCBzZXJpZXNbal0sIHZpc3VhbGl6YXRpb24sIGopO1xuICAgICAgICB2YXIgbGVnZW5kX2tleSA9IHNjaGVtYV9uYW1lICsgXCI6XCIgKyBsYWJlbDtcbiAgICAgICAgY2hhcnQuY3VycmVudF9zdGVwID0gZGF0YS5zdGVwO1xuICAgICAgICBsZXQgc2VyaWVfdHlwZSA9IHNlcmllc1tqXS50eXBlO1xuICAgICAgICBsZXQgc2VyaWVfY29sb3IgPSBjaGFydF9jb2xvcnNbY29sb3JfaSsrXVxuXG4gICAgICAgIGlmKCFzZXJpZV90eXBlKSB7XG4gICAgICAgICAgaWYodmlzdWFsaXphdGlvbi5zcGxpdF9kaXJlY3Rpb25zKSB7XG4gICAgICAgICAgICAvKiBSWCBhbmQgVFggZGlyZWN0aW9ucyBhcmUgc3BsaXR0ZWQsIGRyb3cgdGhlIHNlY29uZCBzZXJpZVxuICAgICAgICAgICAgICogKFRYKSBhcyBhIGxpbmUgKi9cbiAgICAgICAgICAgIHNlcmllX3R5cGUgPSAoaiA9PSAwKSA/IFwiYXJlYVwiIDogXCJsaW5lXCI7XG4gICAgICAgICAgICBzZXJpZV9jb2xvciA9IHNwbGl0X2RpcmVjdGlvbnNfY29sb3JzW2pdIHx8IHNlcmllX2NvbG9yO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgc2VyaWVfdHlwZSA9IFwiYXJlYVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VyaWVzX2Zvcm1hdHRlZF9sYWJlbHNbal0gPSBsYWJlbDtcblxuICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAga2V5OiBsYWJlbCxcbiAgICAgICAgICB5QXhpczogc2VyaWVzW2pdLmF4aXMgfHwgMSxcbiAgICAgICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgICAgICB0eXBlOiBzZXJpZV90eXBlLFxuICAgICAgICAgIGNvbG9yOiBzZXJpZV9jb2xvcixcbiAgICAgICAgICBsZWdlbmRfa2V5OiBsZWdlbmRfa2V5LFxuICAgICAgICAgIGRpc2FibGVkOiBpc0xlZ2VuZERpc2FibGVkKGxlZ2VuZF9rZXksIGZhbHNlKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2aXN1YWxfdG90YWwgPSBidWlsZFRvdGFsU2VyaWUoc2VyaWVzKTtcbiAgICAgIHZhciBoYXNfZnVsbF9kYXRhID0gZmFsc2U7XG5cbiAgICAgIGlmKGRhdGEuYWRkaXRpb25hbF9zZXJpZXMgJiYgZGF0YS5hZGRpdGlvbmFsX3Nlcmllcy50b3RhbCkge1xuICAgICAgICB0b3RhbF9zZXJpZSA9IGRhdGEuYWRkaXRpb25hbF9zZXJpZXMudG90YWw7XG5cbiAgICAgICAgLyogVG90YWwgLT4gT3RoZXIgKi9cbiAgICAgICAgdmFyIG90aGVyX3NlcmllID0gYnVpbGRPdGhlclNlcmllKHRvdGFsX3NlcmllLCB2aXN1YWxfdG90YWwpO1xuXG4gICAgICAgIGlmKG90aGVyX3NlcmllKSB7XG4gICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAga2V5OiBncmFwaF9pMThuLm90aGVyLFxuICAgICAgICAgICAgeUF4aXM6IDEsXG4gICAgICAgICAgICB2YWx1ZXM6IGFycmF5VG9OdlNlcmllKG90aGVyX3NlcmllLCBkYXRhLnN0YXJ0LCBkYXRhLnN0ZXApLFxuICAgICAgICAgICAgdHlwZTogXCJhcmVhXCIsXG4gICAgICAgICAgICBjb2xvcjogY2hhcnRfY29sb3JzW2NvbG9yX2krK10sXG4gICAgICAgICAgICBsZWdlbmRfa2V5OiBcIm90aGVyXCIsXG4gICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcIm90aGVyXCIsIGZhbHNlKSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGhhc19mdWxsX2RhdGEgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3RhbF9zZXJpZSA9IHZpc3VhbF90b3RhbDtcbiAgICAgICAgaGFzX2Z1bGxfZGF0YSA9ICFzY2hlbWFfbmFtZS5zdGFydHNXaXRoKFwidG9wOlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhc3Rfc2VyaWUgPSBudWxsO1xuXG4gICAgICBpZihkYXRhLmFkZGl0aW9uYWxfc2VyaWVzKSB7XG4gICAgICAgIGZvcih2YXIga2V5IGluIGRhdGEuYWRkaXRpb25hbF9zZXJpZXMpIHtcbiAgICAgICAgICBpZihrZXkgPT0gXCJ0b3RhbFwiKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWFudWFsbHkgYXMgXCJvdGhlclwiIGFib3ZlXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2VyaWVfZGF0YSA9IHVwc2FtcGxlU2VyaWUoZGF0YS5hZGRpdGlvbmFsX3Nlcmllc1trZXldLCBkYXRhLmNvdW50KTtcbiAgICAgICAgICB2YXIgcmF0aW9fb3Zlcl90b3RhbCA9IGQzLm1heChzZXJpZV9kYXRhKSAvIGQzLm1heCh2aXN1YWxfdG90YWwpO1xuICAgICAgICAgIHZhciB2YWx1ZXMgPSBhcnJheVRvTnZTZXJpZShzZXJpZV9kYXRhLCBkYXRhLnN0YXJ0LCBkYXRhLnN0ZXApO1xuICAgICAgICAgIHZhciBpc19kaXNhYmxlZCA9IGlzTGVnZW5kRGlzYWJsZWQoa2V5LCBmYWxzZSk7XG4gICAgICAgICAgcGFzdF9zZXJpZSA9IHNlcmllX2RhdGE7IC8vIFRPRE86IG1vcmUgcmVsaWFibGUgd2F5IHRvIGRldGVybWluZSBwYXN0IHNlcmllXG5cbiAgICAgICAgICAvKiBIaWRlIGNvbXBhcmlzb24gc2VyaWUgYXQgZmlyc3QgbG9hZCBpZiBpdCdzIHRvbyBoaWdoICovXG4gICAgICAgICAgaWYoKGZpcnN0X3RpbWVfbG9hZGVkIHx8ICFtYW51YWxfdHJpZ2dlcl9leHRyYV9zZXJpZXNba2V5XSkgJiYgKHJhdGlvX292ZXJfdG90YWwgPiBtYXhfY21wX292ZXJfdG90YWxfcmF0aW8pKVxuICAgICAgICAgICAgaXNfZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAga2V5OiBOdG9wVXRpbHMuY2FwaXRhbGlzZUZpcnN0TGV0dGVyKGtleSksXG4gICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICBjbGFzc2VkOiBcImxpbmUtZGFzaGVkIGxpbmUtYW5pbWF0ZWRcIixcbiAgICAgICAgICAgIGNvbG9yOiBcIiM3RTkxQTBcIixcbiAgICAgICAgICAgIGxlZ2VuZF9rZXk6IGtleSxcbiAgICAgICAgICAgIGRpc2FibGVkOiBpc19kaXNhYmxlZCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBFeHRyYSBob3Jpem9udGFsIHNlcmllcyAqL1xuICAgICAgaWYodmlzdWFsaXphdGlvbiAmJiB2aXN1YWxpemF0aW9uLmV4dHJhX3Nlcmllcykge1xuICAgICAgICBmb3IodmFyIGk9MDsgaTx2aXN1YWxpemF0aW9uLmV4dHJhX3Nlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBzZXJpZSA9IHZpc3VhbGl6YXRpb24uZXh0cmFfc2VyaWVzW2ldO1xuXG4gICAgICAgICAgaWYoIXNlcmllLmxhYmVsKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJNaXNzaW5nIGV4dHJhX3NlcmllcyBsYWJlbFwiKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFzZXJpZS52YWx1ZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTWlzc2luZyBleHRyYV9zZXJpZXMgdmFsdWVcIik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmF0aW9fb3Zlcl90b3RhbCA9IHNlcmllLnZhbHVlIC8gZDMubWF4KHZpc3VhbF90b3RhbCk7XG4gICAgICAgICAgdmFyIGlzX2Rpc2FibGVkID0gaXNMZWdlbmREaXNhYmxlZChzZXJpZS5sYWJlbCwgZmFsc2UpO1xuXG4gICAgICAgICAgLyogSGlkZSB0aGUgbGluZSBzZXJpZSBhdCBmaXJzdCBsb2FkIGlmIGl0J3MgdG9vIGhpZ2ggKi9cbiAgICAgICAgICBpZigoZmlyc3RfdGltZV9sb2FkZWQgfHwgIW1hbnVhbF90cmlnZ2VyX2V4dHJhX3Nlcmllc1tzZXJpZS5sYWJlbF0pICYmIChyYXRpb19vdmVyX3RvdGFsID4gbWF4X2xpbmVfb3Zlcl90b3RhbF9yYXRpbykpXG4gICAgICAgICAgICBpc19kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICBrZXk6IHNlcmllLmxhYmVsLFxuICAgICAgICAgICAgeUF4aXM6IHNlcmllLmF4aXMgfHwgMSxcbiAgICAgICAgICAgIHZhbHVlczogYXJyYXlUb052U2VyaWUodXBzYW1wbGVTZXJpZShbc2VyaWUudmFsdWVdLCBkYXRhLmNvdW50KSwgZGF0YS5zdGFydCwgZGF0YS5zdGVwKSxcbiAgICAgICAgICAgIHR5cGU6IHNlcmllLnR5cGUgfHwgXCJsaW5lXCIsXG4gICAgICAgICAgICBjb2xvcjogc2VyaWUuY29sb3IgfHwgXCJyZWRcIixcbiAgICAgICAgICAgIGNsYXNzZWQ6IHNlcmllLmNsYXNzLFxuICAgICAgICAgICAgbGVnZW5kX2tleTogc2VyaWUubGFiZWwsXG4gICAgICAgICAgICBkaXNhYmxlZDogaXNfZGlzYWJsZWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYoIWRhdGEubm9fdHJlbmQgJiYgaGFzX2Z1bGxfZGF0YSAmJiAodG90YWxfc2VyaWUubGVuZ3RoID49IDMpKSB7XG4gICAgICAgIC8vIFNtb290aGVkIHNlcmllXG4gICAgICAgIC8qIG51bV9zbW9vdGhlZF9wb2ludHMgZGV0ZXJtaW5lcyB0aGUgd2luZG93IHNpemUgdG8gdXNlIHdoaWxlIGNvbXB1dGluZyByb2xsaW5nIGZ1bmN0aW9ucyAqL1xuICAgICAgICB2YXIgbnVtX3Ntb290aGVkX3BvaW50cyA9IE1hdGgubWluKE1hdGgubWF4KE1hdGguZmxvb3IodG90YWxfc2VyaWUubGVuZ3RoIC8gNSksIDMpLCAxMik7XG5cbiAgICAgICAgdmFyIHNtb290aF9mdW5jdGlvbnMgPSB7XG4gICAgICAgICAgLy90cmVuZDogW2dyYXBoX2kxOG4udHJlbmQsIFwiIzYyQURGNlwiLCBzbW9vdGgsIG51bV9zbW9vdGhlZF9wb2ludHNdLFxuICAgICAgICAgIC8vZW1hOiBbXCJFTUFcIiwgXCIjRjk2QkZGXCIsIGV4cG9uZW50aWFsTW92aW5nQXZlcmFnZUFycmF5LCB7cGVyaW9kczogbnVtX3Ntb290aGVkX3BvaW50c31dLFxuICAgICAgICAgIC8vc21hOiBbXCJTTUFcIiwgXCIjQTkwMEZGXCIsIHNpbXBsZU1vdmluZ0F2ZXJhZ2VBcnJheSwge3BlcmlvZHM6IG51bV9zbW9vdGhlZF9wb2ludHN9XSxcbiAgICAgICAgICAvL3JzaTogW1wiUlNJIGN1ciB2cyBwYXN0XCIsIFwiIzAwRkY1RFwiLCByZWxhdGl2ZVN0cmVuZ3RoSW5kZXhBcnJheSwge3BlcmlvZHM6IG51bV9zbW9vdGhlZF9wb2ludHN9XSxcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZF9zbW9vdGhlZF9zZXJpZShmbl90b191c2UpIHtcbiAgICAgICAgICB2YXIgb3B0aW9ucyA9IHNtb290aF9mdW5jdGlvbnNbZm5fdG9fdXNlXTtcbiAgICAgICAgICB2YXIgc21vb3RoZWQ7XG5cbiAgICAgICAgICBpZihmbl90b191c2UgPT0gXCJyc2lcIikge1xuICAgICAgICAgICAgaWYoIXBhc3Rfc2VyaWUpXG4gICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgdmFyIGRlbHRhX3NlcmllID0gW107XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTx0b3RhbF9zZXJpZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBkZWx0YV9zZXJpZVtpXSA9IHRvdGFsX3NlcmllW2ldIC0gcGFzdF9zZXJpZVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNtb290aGVkID0gb3B0aW9uc1syXShkZWx0YV9zZXJpZSwgb3B0aW9uc1szXSk7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBzbW9vdGhlZCA9IG9wdGlvbnNbMl0odG90YWxfc2VyaWUsIG9wdGlvbnNbM10pO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBmaXJzdCBwb2ludCBhcyBpdCdzIHVzZWQgYXMgdGhlIGJhc2Ugd2luZG93IGluIHRoZSByb2xsaW5nIGZ1bmN0aW9uc1xuICAgICAgICAgIGlmKHNtb290aGVkWzBdKVxuICAgICAgICAgICAgZGVsZXRlIHNtb290aGVkWzBdO1xuXG4gICAgICAgICAgdmFyIG1heF92YWwgPSBkMy5tYXgoc21vb3RoZWQpO1xuICAgICAgICAgIGlmKG1heF92YWwgPiAwKSB7XG4gICAgICAgICAgICB2YXIgYWxpZ25lZDtcblxuICAgICAgICAgICAgaWYoKGZuX3RvX3VzZSAhPSBcImVtYVwiKSAmJiAoZm5fdG9fdXNlICE9IFwic21hXCIpICYmIChmbl90b191c2UgIT0gXCJyc2lcIikpIHtcbiAgICAgICAgICAgICAgdmFyIHNjYWxlID0gZDMubWF4KHRvdGFsX3NlcmllKSAvIG1heF92YWw7XG4gICAgICAgICAgICAgIHZhciBzY2FsZWQgPSAkLm1hcChzbW9vdGhlZCwgZnVuY3Rpb24oeCkgeyByZXR1cm4geCAqIHNjYWxlOyB9KTtcbiAgICAgICAgICAgICAgYWxpZ25lZCA9IHVwc2FtcGxlU2VyaWUoc2NhbGVkLCBkYXRhLmNvdW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSAoZGF0YS5jb3VudCAtIHNtb290aGVkLmxlbmd0aCk7XG4gICAgICAgICAgICAgIHZhciB0b19maWxsID0gcmVtYWluaW5nIDwgbnVtX3Ntb290aGVkX3BvaW50cyA/IHJlbWFpbmluZyA6IG51bV9zbW9vdGhlZF9wb2ludHM7XG5cbiAgICAgICAgICAgICAgLyogRmlsbCB0aGUgaW5pdGlhbCBidWZmZXJpbmcgc3BhY2UgKi9cbiAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8dG9fZmlsbDsgaSsrKVxuICAgICAgICAgICAgICAgIHNtb290aGVkLnNwbGljZSgwLCAwLCBzbW9vdGhlZFswXSk7XG5cbiAgICAgICAgICAgICAgYWxpZ25lZCA9IHVwc2FtcGxlU2VyaWUoc21vb3RoZWQsIGRhdGEuY291bnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihmbl90b191c2UgPT0gXCJyc2lcIilcbiAgICAgICAgICAgICAgY2hhcnQueURvbWFpblJhdGlvWTIoMS4wKTtcblxuICAgICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IG9wdGlvbnNbMF0sXG4gICAgICAgICAgICAgIHlBeGlzOiAoZm5fdG9fdXNlICE9IFwicnNpXCIpID8gMSA6IDIsXG4gICAgICAgICAgICAgIHZhbHVlczogYXJyYXlUb052U2VyaWUoYWxpZ25lZCwgZGF0YS5zdGFydCwgZGF0YS5zdGVwKSxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogb3B0aW9uc1sxXSxcbiAgICAgICAgICAgICAgbGVnZW5kX2tleTogZm5fdG9fdXNlLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChmbl90b191c2UsIGZhbHNlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHNob3dfYWxsX3Ntb290aCkge1xuICAgICAgICAgIGZvcihmbl90b191c2UgaW4gc21vb3RoX2Z1bmN0aW9ucylcbiAgICAgICAgICAgIGFkZF9zbW9vdGhlZF9zZXJpZShmbl90b191c2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIEFkZCBleHRyYSBsaW5lcy4gVGhlc2UgYXJlIGRpZmZlcmVudCBmcm9tIHRoZSBleHRyYSBzZXJpZXMgYXNcbiAgICAgICAqIHRoZXkgYXJlIHNpbXBsZSBsaW5lcywgc28gdGhleSBhcmUgbm90IGJvdW5kIHRvIGFuIGF4aXMuICovXG4gICAgICBleHRyYV9saW5lcyA9IFtdO1xuXG4gICAgICBpZigodmlzdWFsaXphdGlvbi5zaG93X3VucmVhY2hhYmxlKSAmJiAocmVzLmxlbmd0aCA+IDApKSB7XG4gICAgICAgIHZhciByZWZfc2VyaWUgPSByZXNbMF0udmFsdWVzO1xuICAgICAgICBsZXQgdG9rID0gcmVmX3NlcmllWzBdWzBdO1xuICAgICAgICBsZXQgd2FzX3VucmVhY2hhYmxlID0gZmFsc2U7XG4gICAgICAgIHVucmVhY2hhYmxlX3RpbWVzdGFtcHMgPSB7fTtcblxuICAgICAgICBmb3IodmFyIGk9MDsgaTxyZWZfc2VyaWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpc191bnJlYWNoYWJsZSA9IChyZWZfc2VyaWVbaV1bMV0gPT09IDApO1xuICAgICAgICAgIGNvbnN0IHR2YWwgPSByZWZfc2VyaWVbaV1bMF07XG5cbiAgICAgICAgICBpZigocmVmX3NlcmllW2ldWzFdID09IHJlZl9zZXJpZVtpXVsxXSkpXG4gICAgICAgICAgICAvKiBUaGUgbW9zdCByZWNlbnQgdGltZSBmb3Igbm9uIE5hTiB2YWx1ZXMgKi9cbiAgICAgICAgICAgIGxhc3Rfa25vd25fdCA9IHR2YWw7XG5cbiAgICAgICAgICBpZighaXNfdW5yZWFjaGFibGUpIHtcbiAgICAgICAgICAgIGlmKHdhc191bnJlYWNoYWJsZSlcbiAgICAgICAgICAgICAgZXh0cmFfbGluZXMucHVzaChbdG9rLCB0dmFsLCAwLCAwXSk7XG5cbiAgICAgICAgICAgIHRvayA9IHR2YWw7XG4gICAgICAgICAgICB3YXNfdW5yZWFjaGFibGUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLyogQ2hhbmdlIHRoZSByZWZlcmVuY2Ugc2VyaWUgcG9pbnQgdG8gbnVsbCB0byBmaXggaW50ZXJwb2xhdGlvbiBpc3N1ZXMgKi9cbiAgICAgICAgICAgIHJlZl9zZXJpZVtpXVsxXSA9IG51bGw7XG4gICAgICAgICAgICB1bnJlYWNoYWJsZV90aW1lc3RhbXBzW3R2YWxdID0gdHJ1ZTtcblxuICAgICAgICAgICAgd2FzX3VucmVhY2hhYmxlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZih3YXNfdW5yZWFjaGFibGUpIHtcbiAgICAgICAgICBjb25zdCB0bGFzdCA9IHJlZl9zZXJpZVtyZWZfc2VyaWUubGVuZ3RoIC0gMV1bMF07XG5cbiAgICAgICAgICBpZih0bGFzdCAhPSB0b2spXG4gICAgICAgICAgICBleHRyYV9saW5lcy5wdXNoKFt0b2ssIHRsYXN0LCAwLCAwXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZ2V0IHRoZSB2YWx1ZSBmb3JtYXR0ZXJcbiAgICAgIHZhciBmb3JtYXR0ZXIxID0gZ2V0VmFsdWVGb3JtYXR0ZXIoc2NoZW1hX25hbWUsIG1ldHJpY190eXBlLCBzZXJpZXMuZmlsdGVyKGZ1bmN0aW9uKGQpIHsgcmV0dXJuKGQuYXhpcyAhPSAyKTsgfSksIHZpc3VhbGl6YXRpb24udmFsdWVfZm9ybWF0dGVyLCBkYXRhLnN0YXRpc3RpY3MpO1xuICAgICAgdmFyIHZhbHVlX2Zvcm1hdHRlciA9IGZvcm1hdHRlcjFbMF07XG4gICAgICB2YXIgdG90X2Zvcm1hdHRlciA9IGZvcm1hdHRlcjFbMV0gfHwgdmFsdWVfZm9ybWF0dGVyO1xuICAgICAgdmFyIHN0YXRzX2Zvcm1hdHRlciA9IGZvcm1hdHRlcjFbMl0gfHwgdmFsdWVfZm9ybWF0dGVyO1xuICAgICAgY2hhcnQueUF4aXMxLnRpY2tGb3JtYXQodmFsdWVfZm9ybWF0dGVyKTtcbiAgICAgIGNoYXJ0LnlBeGlzMV9mb3JtYXR0ZXIgPSB2aXN1YWxpemF0aW9uLnNob3dfdW5yZWFjaGFibGUgPyBmb3JtYXRfdW5yZWFjaGFibGUodmFsdWVfZm9ybWF0dGVyKSA6IHZhbHVlX2Zvcm1hdHRlcjtcblxuICAgICAgdmFyIHNlY29uZF9heGlzX3NlcmllcyA9IHNlcmllcy5maWx0ZXIoZnVuY3Rpb24oZCkgeyByZXR1cm4oZC5heGlzID09IDIpOyB9KTtcbiAgICAgIHZhciBmb3JtYXR0ZXIyID0gZ2V0VmFsdWVGb3JtYXR0ZXIoc2NoZW1hX25hbWUsIG1ldHJpY190eXBlLCBzZWNvbmRfYXhpc19zZXJpZXMsIHZpc3VhbGl6YXRpb24udmFsdWVfZm9ybWF0dGVyMiB8fCB2aXN1YWxpemF0aW9uLnZhbHVlX2Zvcm1hdHRlciwgZGF0YS5zdGF0aXN0aWNzKTtcbiAgICAgIHZhciB2YWx1ZV9mb3JtYXR0ZXIyID0gZm9ybWF0dGVyMlswXTtcbiAgICAgIGNoYXJ0LnlBeGlzMi50aWNrRm9ybWF0KHZhbHVlX2Zvcm1hdHRlcjIpO1xuICAgICAgY2hhcnQueUF4aXMyX2Zvcm1hdHRlciA9IHZhbHVlX2Zvcm1hdHRlcjI7XG5cbiAgICAgIHZhciBzdGF0c190YWJsZSA9ICQoXCIjdHMtY2hhcnQtc3RhdHNcIik7XG4gICAgICB2YXIgc3RhdHMgPSBkYXRhLnN0YXRpc3RpY3M7XG5cbiAgICAgIGlmKHN0YXRzKSB7XG4gICAgICAgIGlmKHN0YXRzLmF2ZXJhZ2UpIHtcblxuXG4gICAgICAgICAgaWYoIXZpc3VhbGl6YXRpb24uc3BsaXRfZGlyZWN0aW9ucykge1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbWFrZUZsYXRMaW5lVmFsdWVzKGRhdGEuc3RhcnQsIGRhdGEuc3RlcCwgZGF0YS5jb3VudCwgc3RhdHMuYXZlcmFnZSk7XG5cblxuICAgICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGdyYXBoX2kxOG4uYXZnLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICAgICAgICBjbGFzc2VkOiBcImxpbmUtZGFzaGVkIGxpbmUtYW5pbWF0ZWRcIixcbiAgICAgICAgICAgICAgY29sb3I6IFwiI0FDOURERlwiLFxuICAgICAgICAgICAgICBsZWdlbmRfa2V5OiBcImF2Z1wiLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcImF2Z1wiLCB0cnVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbGV0IGF2Z19zZW50ID0gbWFrZUZsYXRMaW5lVmFsdWVzKGRhdGEuc3RhcnQsIGRhdGEuc3RlcCwgZGF0YS5jb3VudCwgc3RhdHMuYnlfc2VyaWVbMF1bXCJhdmVyYWdlXCJdKTtcbiAgICAgICAgICAgIGxldCBhdmdfcmN2ZCA9IG1ha2VGbGF0TGluZVZhbHVlcyhkYXRhLnN0YXJ0LCBkYXRhLnN0ZXAsIGRhdGEuY291bnQsIHN0YXRzLmJ5X3NlcmllWzFdW1wiYXZlcmFnZVwiXSk7XG4gICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgIGtleTogZ3JhcGhfaTE4bi5hdmdfc2VudCxcbiAgICAgICAgICAgICAgeUF4aXM6IDEsXG4gICAgICAgICAgICAgIHZhbHVlczogYXZnX3NlbnQsXG4gICAgICAgICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICAgICAgICBjbGFzc2VkOiBcImxpbmUtZGFzaGVkIGxpbmUtYW5pbWF0ZWRcIixcbiAgICAgICAgICAgICAgY29sb3I6IFwiI0FDOURERlwiLFxuICAgICAgICAgICAgICBsZWdlbmRfa2V5OiBcImF2Z19zZW50XCIsXG4gICAgICAgICAgICAgIGRpc2FibGVkOiBpc0xlZ2VuZERpc2FibGVkKFwiYXZnX3NlbnRcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuLmF2Z19yY3ZkLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiBhdmdfcmN2ZCxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1kYXNoZWQgbGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjQUM5RERGXCIsXG4gICAgICAgICAgICAgIGxlZ2VuZF9rZXk6IFwiYXZnX3JjdmRcIixcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzTGVnZW5kRGlzYWJsZWQoXCJhdmdfcmN2ZFwiLCB0cnVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFxuICAgICAgICAgIEZ1bmN0aW9uIHVzZWQgdG8gc3BsaXQgY2hhcnRzIGluZm8sIG90aGVyd2lzZSBncmFwaHMgd2l0aCBtdWx0aXBsZVxuICAgICAgICAgIHRpbWVzZXJpZXMgYXJlIGdvaW5nIHRvIGhhdmUgaW5jb3JyZWN0IHZhbHVlc1xuICAgICAgICAqL1xuICAgICAgICAgIGZ1bmN0aW9uIHNwbGl0U2VyaWVzSW5mbyhzdGF0c19uYW1lLCBjZWxsLCBzaG93X2RhdGUsIGZvcm1hdHRlciwgdG90YWwpIHtcbiAgICAgICAgICBsZXQgdmFsID0gXCJcIjtcbiAgICAgICAgICBsZXQgdGltZV9lbGFwc2VkID0gMTtcbiAgICAgICAgICBjb25zdCB2YWxfZm9ybWF0dGVyID0gKGZvcm1hdHRlciA/IGZvcm1hdHRlciA6IHN0YXRzX2Zvcm1hdHRlcilcblxuICAgICAgICAgIGlmKHZpc3VhbGl6YXRpb24udGltZV9lbGFwc2VkKVxuICAgICAgICAgICAgdGltZV9lbGFwc2VkID0gdmlzdWFsaXphdGlvbi50aW1lX2VsYXBzZWRcbiAgICAgICAgICBcbiAgICAgICAgICBpZih2aXN1YWxpemF0aW9uLmZpcnN0X3RpbWVzZXJpZXNfb25seSkge1xuICAgICAgICAgICAgdmFsID0gdmFsX2Zvcm1hdHRlcihzdGF0cy5ieV9zZXJpZVswXVtzdGF0c19uYW1lXSAvIHRpbWVfZWxhcHNlZCkgKyAoc2hvd19kYXRlID8gKFwiIChcIiArIChuZXcgRGF0ZShyZXNbMF0udmFsdWVzW3N0YXRzW3N0YXRzX25hbWUgKyBcIl9pZHhcIl1dWzBdICogMTAwMCkpLmZvcm1hdChkYXRldGltZV9mb3JtYXQpICsgXCIpXCIpIDogXCJcIik7XG4gICAgICAgICAgfSBlbHNlIGlmKHZpc3VhbGl6YXRpb24uc3BsaXRfZGlyZWN0aW9ucyAmJiBzdGF0cy5ieV9zZXJpZSAmJiAhdG90YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuXG4gICAgICAgICAgICAvKiBGb3JtYXQgZWFjaCBzcGxpdHRlZCBpbmZvICovXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYoc3RhdHMuYnlfc2VyaWVbaV0pXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsX2Zvcm1hdHRlcihzdGF0cy5ieV9zZXJpZVtpXVtzdGF0c19uYW1lXSAvIHRpbWVfZWxhcHNlZCkgK1xuICAgICAgICAgICAgICAgICAgXCIgW1wiICsgc2VyaWVzX2Zvcm1hdHRlZF9sYWJlbHNbaV0gKyBcIl1cIiArXG4gICAgICAgICAgICAgICAgICAvKiBBZGQgdGhlIGRhdGUgKi9cbiAgICAgICAgICAgICAgICAgIChzaG93X2RhdGUgPyAoXCIgKFwiICsgKG5ldyBEYXRlKHJlc1tpXS52YWx1ZXNbc3RhdHMuYnlfc2VyaWVbaV1bc3RhdHNfbmFtZSArIFwiX2lkeFwiXSArIDFdWzBdICogMTAwMCkpLmZvcm1hdChkYXRldGltZV9mb3JtYXQpICsgXCIpXCIpIDogXCJcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBKb2luIHRoZW0gdXNpbmcgYSBuZXcgbGluZSAqL1xuICAgICAgICAgICAgdmFsID0gdmFsdWVzLmpvaW4oXCI8YnIgLz5cIik7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICB2YWwgPSB2YWxfZm9ybWF0dGVyKHN0YXRzW3N0YXRzX25hbWVdIC8gdGltZV9lbGFwc2VkKSArIChzaG93X2RhdGUgPyAoXCIgKFwiICsgKG5ldyBEYXRlKHJlc1swXS52YWx1ZXNbc3RhdHNbc3RhdHNfbmFtZSArIFwiX2lkeFwiXV1bMF0gKiAxMDAwKSkuZm9ybWF0KGRhdGV0aW1lX2Zvcm1hdCkgKyBcIilcIikgOiBcIlwiKTtcblxuICAgICAgICAgIC8qIEFkZCB0aGUgc3RyaW5nIHRvIHRoZSBzcGFuICovXG4gICAgICAgICAgaWYodmFsKVxuICAgICAgICAgICAgY2VsbC5zaG93KCkuZmluZChcInNwYW5cIikuaHRtbCh2YWwpO1xuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbF9jZWxsID0gc3RhdHNfdGFibGUuZmluZChcIi5ncmFwaC12YWwtdG90YWxcIik7XG4gICAgICAgIHZhciBhdmVyYWdlX2NlbGwgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1hdmVyYWdlXCIpO1xuICAgICAgICB2YXIgbWluX2NlbGwgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1taW5cIik7XG4gICAgICAgIHZhciBtYXhfY2VsbCA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLW1heFwiKTtcbiAgICAgICAgdmFyIHBlcmNfY2VsbCA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLTk1cGVyY2VudGlsZVwiKTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0b3RhbF9jZWxsX3RpdGxlID0gc3RhdHNfdGFibGUuZmluZChcIi5ncmFwaC12YWwtdG90YWwtdGl0bGVcIik7XG4gICAgICAgIHZhciBhdmVyYWdlX2NlbGxfdGl0bGUgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1hdmVyYWdlLXRpdGxlXCIpO1xuICAgICAgICB2YXIgbWF4X2NlbGxfdGl0bGUgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1tYXgtdGl0bGVcIik7XG4gICAgICAgIHZhciBtaW5fY2VsbF90aXRsZSA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLW1pbi10aXRsZVwiKTtcbiAgICAgICAgdmFyIHBlcmNfY2VsbF90aXRsZSA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLTk1cGVyY2VudGlsZS10aXRsZVwiKTtcblxuXG4gICAgICAgIC8vIGZpbGwgdGhlIHN0YXRzXG4gICAgICAgIGlmKHN0YXRzLnRvdGFsIHx8IHRvdGFsX2NlbGxfdGl0bGUuaXMoJzp2aXNpYmxlJykpXG4gICAgICAgICAgc3BsaXRTZXJpZXNJbmZvKFwidG90YWxcIiwgdG90YWxfY2VsbF90aXRsZSwgZmFsc2UsIHRvdF9mb3JtYXR0ZXIsIHRydWUpO1xuICAgICAgICBpZihzdGF0cy5hdmVyYWdlIHx8IGF2ZXJhZ2VfY2VsbF90aXRsZS5pcygnOnZpc2libGUnKSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJhdmVyYWdlXCIsIGF2ZXJhZ2VfY2VsbF90aXRsZSwgZmFsc2UsIHN0YXRzX2Zvcm1hdHRlcik7XG4gICAgICAgIGlmKChzdGF0cy5tYXhfdmFsIHx8IG1heF9jZWxsX3RpdGxlLmlzKCc6dmlzaWJsZScpKSAmJiByZXNbMF0udmFsdWVzW3N0YXRzLm1heF92YWxfaWR4XSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJtYXhfdmFsXCIsIG1heF9jZWxsX3RpdGxlLCB0cnVlLCBzdGF0c19mb3JtYXR0ZXIpO1xuICAgICAgICBpZigoc3RhdHMubWluX3ZhbCB8fCBtaW5fY2VsbF90aXRsZS5pcygnOnZpc2libGUnKSkgJiYgcmVzWzBdLnZhbHVlc1tzdGF0cy5taW5fdmFsX2lkeF0pXG4gICAgICAgICAgc3BsaXRTZXJpZXNJbmZvKFwibWluX3ZhbFwiLCBtaW5fY2VsbF90aXRsZSwgdHJ1ZSwgc3RhdHNfZm9ybWF0dGVyKTtcbiAgICAgICAgaWYoc3RhdHNbXCI5NXRoX3BlcmNlbnRpbGVcIl0gfHwgcGVyY19jZWxsLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgc3BsaXRTZXJpZXNJbmZvKFwiOTV0aF9wZXJjZW50aWxlXCIsIHBlcmNfY2VsbF90aXRsZSwgZmFsc2UsIHN0YXRzX2Zvcm1hdHRlcik7XG5cblxuXG5cblxuICAgICAgICAgIGlmKCF2aXN1YWxpemF0aW9uLnNwbGl0X2RpcmVjdGlvbnMpIHtcbiAgICAgICAgICAgIC8qIFdoZW4gZGlyZWN0aW9ucyBhcmUgc3BsaXQsIGhpZGUgdGhlIHRvdGFsIHN0YXQgKi9cbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBtYWtlRmxhdExpbmVWYWx1ZXMoZGF0YS5zdGFydCwgZGF0YS5zdGVwLCBkYXRhLmNvdW50LCBzdGF0c1tcIjk1dGhfcGVyY2VudGlsZVwiXSk7XG5cbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuW1wiOTVfcGVyY1wiXSxcbiAgICAgICAgICAgICAgeUF4aXM6IDEsXG4gICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgICAgICAgY2xhc3NlZDogXCJsaW5lLWRhc2hlZCBsaW5lLWFuaW1hdGVkXCIsXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM0NzZERkZcIixcbiAgICAgICAgICAgICAgbGVnZW5kX2tleTogXCI5NXBlcmNcIixcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzTGVnZW5kRGlzYWJsZWQoXCI5NXBlcmNcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGxldCBwZXJjU2VudCA9IG1ha2VGbGF0TGluZVZhbHVlcyhkYXRhLnN0YXJ0LCBkYXRhLnN0ZXAsIGRhdGEuY291bnQsIHN0YXRzLmJ5X3NlcmllWzBdW1wiOTV0aF9wZXJjZW50aWxlXCJdKTtcbiAgICAgICAgICAgIGxldCBwZXJjUmN2ZCA9IG1ha2VGbGF0TGluZVZhbHVlcyhkYXRhLnN0YXJ0LCBkYXRhLnN0ZXAsIGRhdGEuY291bnQsIHN0YXRzLmJ5X3NlcmllWzFdW1wiOTV0aF9wZXJjZW50aWxlXCJdKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuW1wiOTVfcGVyY19zZW50XCJdLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiBwZXJjU2VudCxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1kYXNoZWQgbGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjNDc2REZGXCIsXG4gICAgICAgICAgICAgIGxlZ2VuZF9rZXk6IFwiOTVwZXJjU2VudFwiLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcIjk1cGVyY1NlbnRcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuW1wiOTVfcGVyY19yY3ZkXCJdLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiBwZXJjUmN2ZCxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1kYXNoZWQgbGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjNDc2REZGXCIsXG4gICAgICAgICAgICAgIGxlZ2VuZF9rZXk6IFwiOTVwZXJjUmN2ZFwiLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcIjk1cGVyY1JjdmRcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gZmlsbCB0aGUgc3RhdHNcbiAgICAgICAgaWYoc3RhdHMudG90YWwgfHwgdG90YWxfY2VsbC5pcygnOnZpc2libGUnKSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJ0b3RhbFwiLCB0b3RhbF9jZWxsLCBmYWxzZSwgdG90X2Zvcm1hdHRlciwgdHJ1ZSk7XG4gICAgICAgIGlmKHN0YXRzLmF2ZXJhZ2UgfHwgYXZlcmFnZV9jZWxsLmlzKCc6dmlzaWJsZScpKVxuICAgICAgICAgIHNwbGl0U2VyaWVzSW5mbyhcImF2ZXJhZ2VcIiwgYXZlcmFnZV9jZWxsLCBmYWxzZSwgc3RhdHNfZm9ybWF0dGVyKTtcbiAgICAgICAgaWYoKHN0YXRzLm1pbl92YWwgfHwgbWluX2NlbGwuaXMoJzp2aXNpYmxlJykpICYmIHJlc1swXS52YWx1ZXNbc3RhdHMubWluX3ZhbF9pZHhdKVxuICAgICAgICAgIHNwbGl0U2VyaWVzSW5mbyhcIm1pbl92YWxcIiwgbWluX2NlbGwsIHRydWUsIHN0YXRzX2Zvcm1hdHRlcik7XG4gICAgICAgIGlmKChzdGF0cy5tYXhfdmFsIHx8IG1heF9jZWxsLmlzKCc6dmlzaWJsZScpKSAmJiByZXNbMF0udmFsdWVzW3N0YXRzLm1heF92YWxfaWR4XSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJtYXhfdmFsXCIsIG1heF9jZWxsLCB0cnVlLCBzdGF0c19mb3JtYXR0ZXIpO1xuICAgICAgICBpZihzdGF0c1tcIjk1dGhfcGVyY2VudGlsZVwiXSB8fCBwZXJjX2NlbGwuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCI5NXRoX3BlcmNlbnRpbGVcIiwgcGVyY19jZWxsLCBmYWxzZSwgc3RhdHNfZm9ybWF0dGVyKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIHZpc2libGUgZWxlbWVudHNcbiAgICAgICAgLy9pZihzdGF0c190YWJsZS5maW5kKFwidGRcIikuZmlsdGVyKGZ1bmN0aW9uKCl7IHJldHVybiAkKHRoaXMpLmNzcyhcImRpc3BsYXlcIikgIT0gXCJub25lXCI7IH0pLmxlbmd0aCA+IDApXG4gICAgICB9XG4gICAgICBzdGF0c190YWJsZS5zaG93KCk7XG5cbiAgICAgIGlmKHZpc3VhbGl6YXRpb24uc2hvd191bnJlYWNoYWJsZSAmJiBsYXN0X2tub3duX3QgJiZcbiAgICAgICAgICAobGFzdF9rbm93bl90ICsgZGF0YS5zdGVwID4gbm93KSAmJiAobm93IDwgbGFzdF9rbm93bl90ICsgMipkYXRhLnN0ZXApKSB7XG4gICAgICAgIC8qIEZvciB0aGUgYWN0aXZlIG1vbml0b3JpbmcgY2hhcnQsIHdlIHNob3cgYW4gYWRkaXRpb25hbCBwb2ludCB3aXRoIHRoZVxuICAgICAgICAgKiBsYXN0IHZhbHVlIGFuZCB0aGUgbm93IHRpbWVzdGFtcCBhcyByZXF1ZXN0ZWQgZm9yXG4gICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9udG9wL250b3BuZy9pc3N1ZXMvMzgyMiAqL1xuICAgICAgICBmb3IodmFyIGo9MDsgajxyZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zdCBzZXJpZSA9IHJlc1tqXS52YWx1ZXM7XG5cbiAgICAgICAgICBpZihzZXJpZS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgc2VyaWVbc2VyaWUubGVuZ3RoXSA9IFtub3csIHNlcmllW3NlcmllLmxlbmd0aCAtIDFdWzFdXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZW5hYmxlZF9zZXJpZXMgPSByZXMuZmlsdGVyKGZ1bmN0aW9uKGQpIHsgcmV0dXJuKGQuZGlzYWJsZWQgIT09IHRydWUpOyB9KTtcblxuICAgICAgaWYoc2Vjb25kX2F4aXNfc2VyaWVzLmxlbmd0aCA+IDAgfHwgZW5hYmxlZF9zZXJpZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgLy8gRW5hYmxlIGFsbCB0aGUgc2VyaWVzXG4gICAgICAgIGZvcih2YXIgaT0wOyBpPHJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICByZXNbaV0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYoc2Vjb25kX2F4aXNfc2VyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gRG9uJ3QgYWxsb3cgc2VyaWVzIHRvZ2dsZSBieSBkaXNhYmxpbmcgbGVnZW5kIGNsaWNrc1xuICAgICAgICBjaGFydC5sZWdlbmQudXBkYXRlU3RhdGUoZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVfY2hhcnRfZGF0YShyZXMpO1xuICAgICAgZmlyc3RfdGltZV9sb2FkZWQgPSBmYWxzZTtcblxuICAgICAgaWYoZGF0YS5zb3VyY2VfYWdncmVnYXRpb24pXG4gICAgICAgICQoXCIjZGF0YS1hZ2dyLWRyb3Bkb3duID4gYnV0dG9uID4gc3BhbjpmaXJzdFwiKS5odG1sKGRhdGEuc291cmNlX2FnZ3JlZ2F0aW9uKTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgaWYgKHhoci5zdGF0dXNUZXh0ID09J2Fib3J0Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSByZXRyaWV2aW5nIHRoZSB0aW1lc2VyaWVzIGRhdGEgW1wiICsgc3RhdHVzICsgXCJdOiBcIiArIGVycm9yKTtcbiAgICAgIGNoYXJ0Lm5vRGF0YShlcnJvcik7XG4gICAgICB1cGRhdGVfY2hhcnRfZGF0YShbXSk7XG4gICAgfSkuYWx3YXlzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgeGhyKSB7XG4gICAgICBjaGVja1F1ZXJ5Q29tcGxldGVkKCk7XG4gICAgICBwZW5kaW5nX2NoYXJ0X3JlcXVlc3QgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgaWYoZmlyc3RfbG9hZCkge1xuICAgICAgZmlyc3RfbG9hZCA9IGZhbHNlO1xuXG4gICAgICAvKiBXYWl0IGZvciBwYWdlIGxvYWQgYmVjYXVzZSBkYXRhdGFibGUgaXMgbm90IGluc3RhbnRpYXRlZCB5ZXQgcmlnaHQgbm93ICovXG4gICAgICAkKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZmxvd3NfZHQgPSAkKFwiI2NoYXJ0MS1mbG93c1wiKS5kYXRhKFwiZGF0YXRhYmxlXCIpO1xuICAgICAgICBpZihmbG93c19kdClcbiAgICAgICAgICBwZW5kaW5nX3RhYmxlX3JlcXVlc3QgPSBmbG93c19kdC5wZW5kaW5nUmVxdWVzdDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZmxvd3NfZHQgPSAkKFwiI2NoYXJ0MS1mbG93c1wiKTtcblxuICAgICAgLyogUmVsb2FkIGRhdGF0YWJsZSAqL1xuICAgICAgaWYodHNfdGFibGVfc2hvd24pIHtcbiAgICAgICAgLyogbm90ZTogZmxvd3NfZHQuZGF0YShcImRhdGF0YWJsZVwiKSB3aWxsIGNoYW5nZSBhZnRlciB0aGlzIGNhbGwgKi9cbiAgICAgICAgdXBkYXRlR3JhcGhzVGFibGVWaWV3KG51bGwsIHBhcmFtcyk7XG5cbiAgICAgICAgaWYoJChcIiNjaGFydDEtZmxvd3NcIikuY3NzKFwiZGlzcGxheVwiKSAhPT0gXCJub25lXCIpXG4gICAgICAgICAgcGVuZGluZ190YWJsZV9yZXF1ZXN0ID0gZmxvd3NfZHQuZGF0YShcImRhdGF0YWJsZVwiKS5wZW5kaW5nUmVxdWVzdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0eXBlb2Ygb25fbG9hZF9jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgb25fbG9hZF9jYWxsYmFjayhjaGFydCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG52YXIgZ3JhcGhfb2xkX3ZpZXcgPSBudWxsO1xudmFyIGdyYXBoX29sZF9oYXNfbmluZGV4ID0gbnVsbDtcbnZhciBncmFwaF9vbGRfbmluZGV4X3F1ZXJ5ID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIHRzUXVlcnlUb1RhZ3ModHNfcXVlcnkpIHtcbiAgcmV0dXJuIHRzX3F1ZXJ5LnNwbGl0KFwiLFwiKS5cbiAgICByZWR1Y2UoZnVuY3Rpb24ocGFyYW1zLCB2YWx1ZSkge1xuICAgICAgdmFyIHBvcyA9IHZhbHVlLmluZGV4T2YoXCI6XCIpO1xuXG4gICAgICBpZihwb3MgIT0gLTEpIHtcbiAgICAgICAgdmFyIGsgPSB2YWx1ZS5zbGljZSgwLCBwb3MpO1xuICAgICAgICB2YXIgdiA9IHZhbHVlLnNsaWNlKHBvcysxKTtcbiAgICAgICAgcGFyYW1zW2tdID0gdjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgfSwge30pO1xufVxuXG4vKiBIaWRlIG9yIHNob3cgdGhlIHRpbWVzZXJpZXMgdGFibGUgaXRlbXMgYmFzZWQgb24gdGhlIGN1cnJlbnQgdGltZSByYW5nZSAqL1xuZnVuY3Rpb24gcmVjaGVja0dyYXBoVGFibGVFbnRyaWVzKCkge1xuICB2YXIgdGRpZmYgPSAoZ3JhcGhfcGFyYW1zLmVwb2NoX2VuZCAtIGdyYXBoX3BhcmFtcy5lcG9jaF9iZWdpbik7XG4gIHZhciByZXNldF9zZWxlY3Rpb24gPSBmYWxzZTtcbiAgJChcIiNjaGFydDEtZmxvd3NcIikuc2hvdygpO1xuICAkKFwiI2dyYXBocy10YWJsZS1zZWxlY3RvclwiKS5zaG93KCk7XG5cbiAgZm9yKGxldCB2aWV3X2lkIGluIGdyYXBoX3RhYmxlX3ZpZXdzKSB7XG4gICAgdmFyIHZpZXcgPSBncmFwaF90YWJsZV92aWV3c1t2aWV3X2lkXTtcbiAgICB2YXIgZWxlbSA9ICQoXCIjXCIgKyB2aWV3Lmh0bWxfaWQpO1xuXG4gICAgaWYodGRpZmYgPD0gdmlldy5taW5fc3RlcCkge1xuICAgICAgaWYoZ3JhcGhfb2xkX3ZpZXcuaWQgPT09IHZpZXdfaWQpXG4gICAgICAgIHJlc2V0X3NlbGVjdGlvbiA9IHRydWU7XG5cbiAgICAgIGVsZW0uaGlkZSgpO1xuICAgIH0gZWxzZVxuICAgICAgZWxlbS5zaG93KCk7XG4gIH1cblxuICAvKiBIaWRlL3Nob3cgdGhlIGhlYWRlcnMgKi9cbiAgdmFyIGl0ZW1zX3VsID0gJChcIiNncmFwaHMtdGFibGUtYWN0aXZlLXZpZXdcIikuY2xvc2VzdChcIi5idG4tZ3JvdXBcIikuZmluZChcInVsOmZpcnN0XCIpO1xuXG4gIGl0ZW1zX3VsLmZpbmQoXCJsaS5kcm9wZG93bi1oZWFkZXJcIikuZWFjaChmdW5jdGlvbihpZHgsZSkge1xuICAgIHZhciBuZXh0X2l0ZW0gPSAkKGUpLm5leHRBbGwoXCJsaVwiKS5maWx0ZXIoZnVuY3Rpb24oaWR4LGUpIHtcbiAgICAgIHJldHVybigoJChlKS5jc3MoXCJkaXNwbGF5XCIpICE9PSBcIm5vbmVcIikgfHwgKCEkKGUpLmF0dHIoXCJkYXRhLXZpZXctaWRcIikpKTtcbiAgICB9KS5maXJzdCgpO1xuICAgIHZhciBkaXZpZGVyID0gJChlKS5uZXh0QWxsKFwiLmRpdmlkZXJcIikuZmlyc3QoKTtcblxuICAgIGlmKCFuZXh0X2l0ZW0uYXR0cihcImRhdGEtdmlldy1pZFwiKSkge1xuICAgICAgJChlKS5oaWRlKCk7XG4gICAgICBkaXZpZGVyLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChlKS5zaG93KCk7XG4gICAgICBkaXZpZGVyLnNob3coKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmKHJlc2V0X3NlbGVjdGlvbikge1xuICAgIC8qIFNlbGVjdCB0aGUgZmlyc3QgYXZhaWxhYmxlIHZpZXcgKi9cbiAgICB2YXIgZmlyc3RfdmlldyA9IGl0ZW1zX3VsLmZpbmQoXCJsaVtkYXRhLXZpZXctaWRdXCIpLmZpbHRlcihmdW5jdGlvbihpZHgsZSkge1xuICAgICAgICByZXR1cm4oJChlKS5jc3MoXCJkaXNwbGF5XCIpICE9PSBcIm5vbmVcIik7XG4gICAgICB9KS5maXJzdCgpO1xuXG4gICAgaWYoZmlyc3Rfdmlldy5sZW5ndGgpXG4gICAgICBzZXRBY3RpdmVHcmFwaHNUYWJsZVZpZXcoZmlyc3Rfdmlldy5hdHRyKFwiZGF0YS12aWV3LWlkXCIpKTtcbiAgICBlbHNlIHtcbiAgICAgICQoXCIjY2hhcnQxLWZsb3dzXCIpLmhpZGUoKTtcbiAgICAgICQoXCIjZ3JhcGhzLXRhYmxlLXNlbGVjdG9yXCIpLmhpZGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUdyYXBoc1RhYmxlVmlldyh2aWV3LCBncmFwaF9wYXJhbXMsIGhhc19uaW5kZXgsIG5pbmRleF9xdWVyeSwgcGVyX3BhZ2UpIHtcbiAgaWYodmlldylcbiAgICBncmFwaF9vbGRfdmlldyA9IHZpZXc7XG5cbiAgaWYoIXJlY2hlY2tHcmFwaFRhYmxlRW50cmllcyhncmFwaF9wYXJhbXMpKSB7XG4gICAgLyogaGFuZGxlZCBieSBzZXRBY3RpdmVHcmFwaHNUYWJsZVZpZXcgKi9cbiAgICByZXR1cm47XG4gIH1cblxuICBpZih2aWV3KSB7XG4gICAgZ3JhcGhfb2xkX2hhc19uaW5kZXggPSBoYXNfbmluZGV4O1xuICAgIGdyYXBoX29sZF9uaW5kZXhfcXVlcnkgPSBuaW5kZXhfcXVlcnk7XG4gIH0gZWxzZSB7XG4gICAgdmlldyA9IGdyYXBoX29sZF92aWV3O1xuICAgIGhhc19uaW5kZXggPSBncmFwaF9vbGRfaGFzX25pbmRleDtcbiAgICBuaW5kZXhfcXVlcnkgPSBncmFwaF9vbGRfbmluZGV4X3F1ZXJ5O1xuICB9XG5cbiAgdmFyIGdyYXBoX3RhYmxlID0gJChcIiNjaGFydDEtZmxvd3NcIik7XG4gIG5pbmRleF9xdWVyeSA9IG5pbmRleF9xdWVyeSArIFwiJmJlZ2luX3RpbWVfY2xhdXNlPVwiICsgZ3JhcGhfcGFyYW1zLmVwb2NoX2JlZ2luICsgXCImZW5kX3RpbWVfY2xhdXNlPVwiICsgZ3JhcGhfcGFyYW1zLmVwb2NoX2VuZDtcbiAgdmFyIG5pbmRleF9idXR0b25zID0gXCJcIjtcbiAgdmFyIHBhcmFtc19vYmogPSB0c1F1ZXJ5VG9UYWdzKGdyYXBoX3BhcmFtcy50c19xdWVyeSk7XG5cbiAgLy8gVE9ETyBsb2NhbGl6ZVxuXG4gIC8qIEhpZGUgSVAgdmVyc2lvbiBzZWxlY3RvciB3aGVuIGEgaG9zdCBpcyBzZWxlY3RlZCAqL1xuICBpZighcGFyYW1zX29iai5ob3N0KSB7XG4gICAgbmluZGV4X2J1dHRvbnMgKz0gJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIj4nO1xuICAgIG5pbmRleF9idXR0b25zICs9IFwiSVAgVmVyc2lvblwiO1xuICAgIG5pbmRleF9idXR0b25zICs9ICc8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPjwvYnV0dG9uPjx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiPic7XG4gICAgbmluZGV4X2J1dHRvbnMgKz0gJzxsaT48YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI1wiIG9uY2xpY2s9XCJyZXR1cm4gb25HcmFwaE1lbnVDbGljayhudWxsLCA0KVwiPjQ8L2E+PC9saT4nO1xuICAgIG5pbmRleF9idXR0b25zICs9ICc8bGk+PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNcIiBvbmNsaWNrPVwicmV0dXJuIG9uR3JhcGhNZW51Q2xpY2sobnVsbCwgNilcIj42PC9hPjwvbGk+JztcbiAgICBuaW5kZXhfYnV0dG9ucyArPSAnPC9zcGFuPjwvZGl2Pic7XG4gIH1cbiAgXG4gIGlmKHZpZXcuY29sdW1ucykge1xuICAgIHZhciB1cmwgPSBodHRwX3ByZWZpeCArICh2aWV3Lm5pbmRleF92aWV3ID8gXCIvbHVhL3Byby9nZXRfbmluZGV4X2Zsb3dzLmx1YVwiIDogXCIvbHVhL3Byby9nZXRfdHNfdGFibGUubHVhXCIpO1xuXG4gICAgdmFyIGNvbHVtbnMgPSB2aWV3LmNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGNvbFsxXSxcbiAgICAgICAgZmllbGQ6IGNvbFswXSxcbiAgICAgICAgICBjc3M6IHtcblx0ICAgICAgdGV4dEFsaWduOiBjb2xbMl0sIHdpZHRoOiBjb2xbM10sLy9cblx0ICB9LFxuICAgICAgICBoaWRkZW46IGNvbFs0XSA/IHRydWUgOiBmYWxzZSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgdGl0bGU6IGkxOG5fZXh0LmFjdGlvbnMsXG4gICAgICBmaWVsZDogXCJkcmlsbGRvd25cIixcbiAgICAgIGNzczoge3dpZHRoOiBcIjElXCIsIFwidGV4dC1hbGlnblwiOiBcImNlbnRlclwifSxcbiAgICB9KTtcblxuICAgIHZhciBvbGRfZHQgPSBncmFwaF90YWJsZS5kYXRhKFwiZGF0YXRhYmxlXCIpO1xuICAgIGlmKG9sZF9kdCAmJiBvbGRfZHQucGVuZGluZ1JlcXVlc3QpXG4gICAgICBvbGRfZHQucGVuZGluZ1JlcXVlc3QuYWJvcnQoKTtcblxuICAgIC8qIEZvcmNlIHJlaW5zdGFudGlhdGlvbiAqL1xuICAgIGdyYXBoX3RhYmxlLnJlbW92ZURhdGEoJ2RhdGF0YWJsZScpO1xuICAgIGdyYXBoX3RhYmxlLmh0bWwoXCJcIik7XG5cbiAgICBncmFwaF90YWJsZS5kYXRhdGFibGUoe1xuICAgICAgdGl0bGU6IFwiXCIsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIHBlclBhZ2U6IHBlcl9wYWdlLFxuICAgICAgbm9SZXN1bHRzTWVzc2FnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKHRzX2NoYXJ0LnF1ZXJ5V2FzQWJvcnRlZCgpKVxuICAgICAgICAgIHJldHVybiBpMThuX2V4dC5xdWVyeV93YXNfYWJvcnRlZDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiBpMThuX2V4dC5ub19yZXN1bHRzX2ZvdW5kO1xuICAgICAgfSxcbiAgICAgIHBvc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW1zID0gJC5leHRlbmQoe30sIGdyYXBoX3BhcmFtcyk7XG4gICAgICAgIGRlbGV0ZSBwYXJhbXMudHNfY29tcGFyZTtcbiAgICAgICAgZGVsZXRlIHBhcmFtcy5pbml0aWFsX3BvaW50O1xuICAgICAgICBwYXJhbXMubGltaXQgPSAxOyAvLyBUT0RPIG1ha2Ugc3BlY2lmaWMgcXVlcnlcbiAgICAgICAgLy8gVE9ETyBjaGFuZ2UgdG9wa1xuICAgICAgICAvLyBUT0RPIGRpc2FibGUgc3RhdGlzdGljc1xuICAgICAgICBwYXJhbXMuZGV0YWlsX3ZpZXcgPSB2aWV3LmlkO1xuXG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICB9LFxuICAgICAgbG9hZGluZ1lPZmZzZXQ6IDQwLFxuICAgICAgY29sdW1uczogY29sdW1ucyxcbiAgICAgIGJ1dHRvbnM6IHZpZXcubmluZGV4X3ZpZXcgPyBbbmluZGV4X2J1dHRvbnMsIF0gOiBbXSxcbiAgICAgIHRhYmxlQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMucmVzdWx0c2V0O1xuICAgICAgICB0c19jaGFydC50YWJsZVJlcXVlc3RDb21wbGV0ZWQoKTtcblxuICAgICAgICBpZighZGF0YSkge1xuICAgICAgICAgIC8vIGVycm9yXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogVGhlIHVzZXIgY2hhbmdlZCBwYWdlICovXG4gICAgICAgIGlmKGRhdGEuY3VycmVudFBhZ2UgPiAxKVxuICAgICAgICAgIGdyYXBoX3RhYmxlLmRhdGEoXCJoYXNfaW50ZXJhY3Rpb25cIiwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIHN0YXRzX2RpdiA9ICQoXCIjY2hhcnQxLWZsb3dzLXN0YXRzXCIpO1xuICAgICAgICB2YXIgaGFzX2RyaWxsZG93biA9IChkYXRhICYmIGRhdGEuZGF0YS5zb21lKGZ1bmN0aW9uKHJvdykgeyByZXR1cm4gcm93LmRyaWxsZG93bjsgfSkpO1xuXG4gICAgICAgIC8qIFJlbW92ZSB0aGUgZHJpbGxkb3duIGNvbHVtbiBpZiBubyBkcmlsbGRvd24gaXMgYXZhaWxhYmxlICovXG4gICAgICAgIGlmKCFoYXNfZHJpbGxkb3duKVxuICAgICAgICAgICQoXCJ0YWJsZSB0ZDpsYXN0LWNoaWxkLCB0aDpsYXN0LWNoaWxkXCIsIGdyYXBoX3RhYmxlKS5yZW1vdmUoKTtcblxuICAgICAgICBpZihkYXRhICYmIGRhdGEudG90YWxSb3dzID4gMCAmJiBkYXRhLnN0YXRzICYmIGRhdGEuc3RhdHMucXVlcnlfZHVyYXRpb25fbXNlYykge1xuICAgICAgICAgICBsZXQgdGltZV9lbGFwc2VkID0gZGF0YS5zdGF0cy5xdWVyeV9kdXJhdGlvbl9tc2VjLzEwMDAuMDtcbiAgICAgICAgICAgaWYodGltZV9lbGFwc2VkIDwgMC4xKVxuICAgICAgICAgICAgdGltZV9lbGFwc2VkID0gXCI8IDAuMVwiXG4gICAgICAgICAgICQoXCIjZmxvd3MtcXVlcnktdGltZVwiKS5odG1sKHRpbWVfZWxhcHNlZCk7XG4gICAgICAgICAgICQoXCIjZmxvd3MtcHJvY2Vzc2VkLXJlY29yZHNcIikuaHRtbChkYXRhLnN0YXRzLm51bV9yZWNvcmRzX3Byb2Nlc3NlZCk7XG4gICAgICAgICAgIHN0YXRzX2Rpdi5zaG93KCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHN0YXRzX2Rpdi5oaWRlKCk7XG4gICAgICB9LCByb3dDYWxsYmFjazogZnVuY3Rpb24ocm93LCByb3dfZGF0YSkge1xuICAgICAgICBpZigodHlwZW9mIHJvd19kYXRhLnRhZ3MgPT09IFwib2JqZWN0XCIpICYmIChcbiAgICAgICAgICAocGFyYW1zX29iai5jYXRlZ29yeSAmJiAocm93X2RhdGEudGFncy5jYXRlZ29yeSA9PT0gcGFyYW1zX29iai5jYXRlZ29yeSkpIHx8XG4gICAgICAgICAgKHBhcmFtc19vYmoucHJvdG9jb2wgJiYgKHJvd19kYXRhLnRhZ3MucHJvdG9jb2wgPT09IHBhcmFtc19vYmoucHJvdG9jb2wpKVxuICAgICAgICApKSB7XG4gICAgICAgICAgLyogSGlnaGxpZ2h0IHRoZSByb3cgKi9cbiAgICAgICAgICByb3cuYWRkQ2xhc3MoXCJpbmZvXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvdztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiLyogVXNlIHdpdGg6XG4gICpcbiAgKiAkKCcjZWRpdC1yZWNpcGllbnQtbW9kYWwgZm9ybScpLm1vZGFsSGFuZGxlcih7IC4uLiB9KVxuICAqL1xuY2xhc3MgTW9kYWxIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGZvcm0sIG9wdGlvbnMpIHtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY3NyZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWxIYW5kbGVyOjpNaXNzaW5nIENTUkYgdG9rZW4hXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZm9ybTtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSAkKGZvcm0pLmNsb3Nlc3QoXCIubW9kYWxcIik7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jc3JmID0gb3B0aW9ucy5jc3JmO1xuICAgICAgICB0aGlzLmRvbnREaXNhYmxlU3VibWl0ID0gb3B0aW9ucy5kb250RGlzYWJsZVN1Ym1pdDtcblxuICAgICAgICB0aGlzLm9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGxpc3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmluZEZvcm1WYWxpZGF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG4gICAgICAgICAgICB0aGlzLmluaXREYXRhUGF0dGVybnMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudFswXSwge1xuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5maXJzdENsb3NlQXR0ZW1wdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3VibWl0dGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J11gKTtcbiAgICAgICAgaWYgKHN1Ym1pdEJ1dHRvbi5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWxIYW5kbGVyOjpUaGUgc3VibWl0IGJ1dHRvbiB3YXMgbm90IGZvdW5kIGluc2lkZSB0aGUgZm9ybSFcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG5cbiAgICB9XG5cbiAgICBpbml0RGF0YVBhdHRlcm5zKCkge1xuICAgICAgICBOdG9wVXRpbHMuaW5pdERhdGFQYXR0ZXJucygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZvcm0ncyBzbmFwc2hvdCB0byBzYXZlIGEgZm9ybSBzdGF0ZVxuICAgICAqL1xuICAgIGNyZWF0ZUZvcm1TbmFwc2hvdCgpIHtcblxuICAgICAgICBjb25zdCBzbmFwc2hvdCA9IHtcbiAgICAgICAgICAgIGlucHV0czoge30sXG4gICAgICAgICAgICBoaWRkZW46IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ3RleHRhcmVhLHNlbGVjdCxpbnB1dFt0eXBlIT1cInJhZGlvXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAkKHRoaXMpLnByb3AoJ25vZGVOYW1lJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAkKHRoaXMpLmF0dHIoJ25hbWUnKTtcbiAgICAgICAgICAgIHNuYXBzaG90LmlucHV0c1tgJHt0eXBlfVtuYW1lPScke25hbWV9J11gXSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKGBbc3R5bGU9J2Rpc3BsYXk6IG5vbmU7J10sIHNwYW4uaW52YWxpZC1mZWVkYmFja2ApLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc25hcHNob3QuaGlkZGVuLnB1c2goJCh0aGlzKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICB9XG5cbiAgICBjb21wYXJlRm9ybVNuYXBoc290KHMxLCBzMikge1xuXG4gICAgICAgIGlmIChzMSA9PSBudWxsIHx8IHMyID09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzMS5pbnB1dHMpKSB7XG4gICAgICAgICAgICBpZiAoczIuaW5wdXRzW2tleV0gIT0gdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGRlbGVnYXRlTW9kYWxDbG9zaW5nKCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICQodGhpcy5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5jYW5jZWwnKS5vZmYoJ2NsaWNrJykuY2xpY2soZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAkKHNlbGYuZWxlbWVudClbMF0ucmVwb3J0VmFsaWRpdHkoKTtcbiAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJy5jb25maXJtLWNsb3NpbmcnKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5idG4tY2xvc2UnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMuZGlhbG9nKS5vZmYoJ2hpZGUuYnMubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2VsZi5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlIGZvcm0gc3RhdGUgaGFzbid0IGNoYW5nZWQgdGhlbiBkb24ndCBzaG93IHRoZSBtZXNzYWdlXG4gICAgICAgICAgICBpZiAoc2VsZi5jb21wYXJlRm9ybVNuYXBoc290KHNlbGYuY3VycmVudFN0YXRlLCBzZWxmLmluaXRpYWxTdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0KSByZXR1cm47XG4gICAgICAgICAgICAvLyBhYm9ydCB0aGUgbW9kYWwgY2xvc2luZyBldmVudFxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gZmxhZyBhIGNsb3NlIGF0dGVtcHQgaGFzIGJlZW4gaW52b2tlZFxuICAgICAgICAgICAgc2VsZi5maXJzdENsb3NlQXR0ZW1wdCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHNob3cgYW4gYWxlcnQgdG8gaW5mb3JtIHRoZSB1c2VyXG4gICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCdidXR0b24uYnRuLWNsb3NlJykuZmFkZU91dCgxMDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCcuY29uZmlybS1jbG9zaW5nJykuZmFkZUluKDEwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcy5kaWFsb2cpLm9mZignaGlkZGVuLmJzLm1vZGFsJykub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAvLyBmb3IgZWFjaCBpbnB1dCBpbnNpZGUgdGhlIGZvcm0gcmVzdG9yZSB0aGUgaW5pdGlhbCB2YWx1ZVxuICAgICAgICAgICAgLy8gZnJvbSB0aGUgc25hcHNob3QgdGFrZW4gYXQgaW5pdFxuICAgICAgICAgICAgZm9yIChjb25zdCBbc2VsZWN0b3IsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzZWxmLmluaXRpYWxTdGF0ZS5pbnB1dHMpKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZChzZWxlY3RvcikudmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKHNlbGVjdG9yKS5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBzaHdvbiBlbGVtZW50c1xuICAgICAgICAgICAgc2VsZi5pbml0aWFsU3RhdGUuaGlkZGVuLmZvckVhY2goKCRoaWRkZW4pID0+IHtcbiAgICAgICAgICAgICAgICAkaGlkZGVuLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzZWxmLmVsZW1lbnQuZmluZChgW3R5cGU9J3N1Ym1pdCddYCkuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJy5jb25maXJtLWNsb3NpbmcnKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5idG4tY2xvc2UnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBjbGVhbiB0aGUgZm9ybSB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWRcbiAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdGhlIGZpZWxkcyBmbGlja2VyaW5nXG4gICAgICAgICAgICBzZWxmLmNsZWFuRm9ybSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmaWxsRm9ybU1vZGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxvYWRGb3JtRGF0YSgpO1xuICAgIH1cblxuICAgIGludm9rZU1vZGFsSW5pdChkYXRhID0ge30pIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyByZXNldCBmb3JtIHZhbHVlcyB3aGVuIHRoZSBtb2RhbCBjbG9zZXNcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZU1vZGFsQ2xvc2luZygpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHRoaXMuZmlsbEZvcm1Nb2RhbCgpO1xuICAgICAgICB0aGlzLm9wdGlvbnMub25Nb2RhbEluaXQodGhpcy5kYXRhLCB0aGlzKTtcblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkucGFyZW50cygnLm1vZGFsJykub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMub25Nb2RhbFNob3coKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGEgaW5pdGlhbCBmb3JtIHNuYXBzaG90IHRvIHJlc3RvcmUgZWxlbWVudHMgb24gY2xvc2luZ1xuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IHRoaXMuY3JlYXRlRm9ybVNuYXBzaG90KCk7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmRlbGVnYXRlUmVzZXRCdXR0b24oKTsgICBcbiAgICB9XG5cbiAgICBkZWxlZ2F0ZVN1Ym1pdCgpIHtcblxuICAgICAgICB0aGlzLmJpbmRGb3JtVmFsaWRhdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuc3VibWl0SGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYub3B0aW9ucy5pc1N5bmNSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5tYWtlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbignc3VibWl0JywgdGhpcy5zdWJtaXRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBiaW5kRm9ybVZhbGlkYXRpb24oKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gaGFuZGxlIGlucHV0IHZhbGlkYXRpb25cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoYGlucHV0LHNlbGVjdCx0ZXh0YXJlYWApLmVhY2goYXN5bmMgZnVuY3Rpb24gKGksIGlucHV0KSB7XG5cbiAgICAgICAgICAgIC8vIGpRdWVyeSBvYmplY3Qgb2YgdGhlIGN1cnJlbnQgaW5wdXRcbiAgICAgICAgICAgIGNvbnN0ICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAvLyBpZCB0byBoYW5kbGUgdGhlIGN1cnJlbnQgdGltZW91dCBzZXQgdG8gc2hvdyBlcnJvcnNcbiAgICAgICAgICAgIGxldCB0aW1lb3V0SWQgPSAtMTtcblxuICAgICAgICAgICAgY29uc3QgdmFsaWRIb3N0bmFtZSA9IGFzeW5jICgpID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIHNob3cgdGhlIHNwaW5uZXIgdG8gdGhlIHVzZXIgYW5kIHNldCB0aGUgaW5wdXQgdG8gcmVhZG9ubHlcbiAgICAgICAgICAgICAgICBjb25zdCAkc3Bpbm5lciA9ICRpbnB1dC5wYXJlbnQoKS5maW5kKCcuc3Bpbm5lci1ib3JkZXInKTtcbiAgICAgICAgICAgICAgICAkaW5wdXQuYXR0cihcInJlYWRvbmx5XCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICRzcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgTnRvcFV0aWxzLnJlc29sdmVETlMoJChpbnB1dCkudmFsKCkpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgc3Bpbm5lciBhbmQgcmVuYWJsZSB3cml0ZSB0byB0aGUgaW5wdXRcbiAgICAgICAgICAgICAgICAkaW5wdXQucmVtb3ZlQXR0cihcInJlYWRvbmx5XCIpO1xuICAgICAgICAgICAgICAgICRzcGlubmVyLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSByZXNwb25zZSB3YXMgbmVnYXRpdmUgdGhlbiBhbGVydCB0aGUgdXNlclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkocmVzcG9uc2UucmNfc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgcmVzcG9uc2UucmNfc3RyX2hyXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gc3VjY2VzcyBmb3IgdmFsaWQgcmVzb2x2ZWQgaG9zdG5tYWVcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgXCJTdWNjZXNzXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB2YWxpZElucHV0ID0gYXN5bmMgKHZhbGlkYXRpb24pID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBpbnB1dCByZXF1aXJlIHRvIHZhbGlkYXRlIGhvc3QgbmFtZSB0aGVuIHBlcmZvcm0gYSBETlMgcmVzb2x2ZVxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uLmRhdGEucmVzb2x2ZUROUyAmJiAkaW5wdXQudmFsKCkubWF0Y2goTnRvcFV0aWxzLlJFR0VYRVMuZG9tYWluTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHZhbGlkSG9zdG5hbWUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbi5kYXRhLmNhbm5vdEJlRW1wdHkgJiYgdmFsaWRhdGlvbi5pc0lucHV0RW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBpbnB1dCB2YWxpZGF0aW9uIGZsYWdcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJQbGVhc2UgZmlsbCB0aGUgaW5wdXQuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB2YWxpZGF0aW9uLmRhdGEudmFsaWRhdGlvbkVtcHR5TWVzc2FnZSB8fCBpMThuX2V4dC5taXNzaW5nX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucGF0dGVybk1pc21hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiUGF0dGVybiBtaXNtYXRjaC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS52YWxpZGF0aW9uTWVzc2FnZSB8fCBpMThuX2V4dC5pbnZhbGlkX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucmFuZ2VPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlZhbHVlIGV4Y2VlZCB0aGUgbWF4aW11bSB2YWx1ZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS5yYW5nZU92ZXJmbG93TWVzc2FnZSB8fCBpMThuX2V4dC5pbnZhbGlkX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucmFuZ2VVbmRlcmZsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJWYWx1ZSBpcyB1bmRlciB0aGUgbWluaW11bSB2YWx1ZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS5yYW5nZVVuZGVyZmxvd01lc3NhZ2UgfHwgaTE4bl9leHQuaW52YWxpZF9maWVsZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHZhbGlkYXRpb24gdG8gdHJ1ZVxuICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgXCJTdWNjZXNzXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjaGVja1ZhbGlkYXRpb24gPSBhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25NZXNzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRW1wdHlNZXNzYWdlOiAkaW5wdXQuZGF0YSgndmFsaWRhdGlvbkVtcHR5TWVzc2FnZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2Fubm90QmVFbXB0eTogKCRpbnB1dC5hdHRyKCdyZXF1aXJlZCcpID09PSBcInJlcXVpcmVkXCIpIHx8ICgkaW5wdXQuZGF0YShcInZhbGlkYXRpb25Ob3RFbXB0eVwiKSA9PSB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVETlM6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uUmVzb2x2ZWRucycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VPdmVyZmxvd01lc3NhZ2U6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uUmFuZ2VPdmVyZmxvd01lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlVW5kZXJmbG93TWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25VbmRlcmZsb3dPdmVyZmxvd01lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaXNJbnB1dEVtcHR5OiAodHlwZW9mKCRpbnB1dC52YWwoKSkgPT09IFwic3RyaW5nXCIgPyAkaW5wdXQudmFsKCkudHJpbSgpID09IFwiXCIgOiBmYWxzZSlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgW2lzVmFsaWQsIG1lc3NhZ2VUb1Nob3ddID0gYXdhaXQgdmFsaWRJbnB1dCh2YWxpZGF0aW9uKTtcbiAgICAgICAgICAgICAgICBsZXQgJGVycm9yID0gJGlucHV0LnBhcmVudCgpLmZpbmQoYC5pbnZhbGlkLWZlZWRiYWNrYCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZXJyb3IgZWxlbWVudCBkb2Vzbid0IGV4aXN0IHRoZW4gY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIGlmICgkZXJyb3IubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gJChgPHNwYW4gY2xhc3M9J2ludmFsaWQtZmVlZGJhY2snPjwvc3Bhbj5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBkaXNwbGF5IHRoZSBlcnJvcnMgYW5kIGNvbG9yIHRoZSBpbnB1dCBib3hcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LmFkZENsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5wYXJlbnQoKS5hcHBlbmQoJGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgJGVycm9yLnRleHQobWVzc2FnZVRvU2hvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiB0aGUgdmFsaWRhdGlvbiBtZXNzYWdlIGFuZCByZW1vdmUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICAkZXJyb3IuZmFkZU91dCg1MDAsIGZ1bmN0aW9uICgpIHsgJCh0aGlzKS5yZW1vdmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKHRoaXMpLm9mZignaW5wdXQnKS5vbignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBzZWxmLmNyZWF0ZUZvcm1TbmFwc2hvdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgZXhpc3RzIGFscmVhZHkgYSBUaW1lb3V0IHRoZW4gY2xlYXIgaXRcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dElkICE9IC0xKSBjbGVhclRpbWVvdXQodGltZW91dElkKTtcblxuICAgICAgICAgICAgICAgIGlmICghJGlucHV0LmF0dHIoXCJmb3Jtbm92YWxpZGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGlucHV0IHZhbGlkYXRpb24gYWZ0ZXIgMzAwbXNlY1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBmb3JtIHZhbGlkYXRpb24gdG8gZW5hYmxlIHRoZSBzdWJtaXQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIGhhcyBjaGFuZ2VkIHRoZSBpbnB1dCwgd2UgY2FuIGFib3J0IHRoZSBmaXJzdCBjbG9zZSBhdHRlbXB0XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZmlyc3RDbG9zZUF0dGVtcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCh0aGlzKS5vZmYoJ2ludmFsaWQnKS5vbignaW52YWxpZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICghJGlucHV0LmF0dHIoXCJmb3Jtbm92YWxpZGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbGlkYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBnZXRNb2RhbElEKCkge1xuICAgICAgICByZXR1cm4gJCh0aGlzLmVsZW1lbnQpLnBhcmVudHMoJy5tb2RhbCcpLmF0dHIoJ2lkJyk7XG4gICAgfVxuXG4gICAgdG9nZ2xlRm9ybVN1Ym1pc3Npb24oKSB7XG5cbiAgICAgICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIGlmIGVhY2ggaW5wdXQgaXMgbWFya2VkIGFzIHZhbGlkIHRoZW4gZW5hYmxlIHRoZSBmb3JtIHN1Ym1pdCBidXR0b25cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ2lucHV0Om5vdCg6ZGlzYWJsZWQpLHNlbGVjdDpub3QoOmRpc2FibGVkKSx0ZXh0YXJlYTpub3QoOmRpc2FibGVkKScpLmVhY2goZnVuY3Rpb24gKGlkeCwgaW5wdXQpIHtcbiAgICAgICAgICAgIC8vIG1ha2UgYSBjb25jYXRlbmF0ZSAmIGJldHdlZW4gdmFsaWQgZmxhZ3NcbiAgICAgICAgICAgIGlzVmFsaWQgJj0gaW5wdXQudmFsaWRpdHkudmFsaWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlzVmFsaWRcbiAgICAgICAgICAgID8gJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFt0eXBlPSdzdWJtaXQnXSxbdHlwZT0ndGVzdCddYCkucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgICAgICAgICA6ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J10sW3R5cGU9J3Rlc3QnXWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuICAgIH1cblxuICAgIGNsZWFuRm9ybSgpIHtcbiAgICAgICAgLyogcmVtb3ZlIHZhbGlkYXRpb24gY2xhc3MgZnJvbSBmaWVsZHMgKi9cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ2lucHV0LHRleHRhcmVhLHNlbGVjdCcpLmVhY2goZnVuY3Rpb24gKGksIGlucHV0KSB7XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGBpcy12YWxpZGApLnJlbW92ZUNsYXNzKGBpcy1pbnZhbGlkYCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKiByZXNldCBhbGwgdGhlIHZhbHVlcyAqL1xuICAgICAgICAkKHRoaXMuZWxlbWVudClbMF0ucmVzZXQoKTtcbiAgICB9XG5cbiAgICBtYWtlUmVxdWVzdCgpIHtcblxuICAgICAgICBjb25zdCAkZmVlZGJhY2tMYWJlbCA9ICQodGhpcy5lbGVtZW50KS5maW5kKGAuaW52YWxpZC1mZWVkYmFja2ApO1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSAkKHRoaXMuZWxlbWVudCkuZmluZChgW3R5cGU9J3N1Ym1pdCddYCk7XG4gICAgICAgIGxldCBkYXRhVG9TZW5kID0gdGhpcy5vcHRpb25zLmJlZm9yZVN1bWJpdCh0aGlzLmRhdGEpO1xuXG4gICAgICAgIGRhdGFUb1NlbmQuY3NyZiA9IHRoaXMuY3NyZjtcbiAgICAgICAgZGF0YVRvU2VuZCA9ICQuZXh0ZW5kKGRhdGFUb1NlbmQsIHRoaXMub3B0aW9ucy5zdWJtaXRPcHRpb25zKTtcblxuICAgICAgICAvKiBjbGVhbiBwcmV2aW91cyBzdGF0ZSBhbmQgZGlzYWJsZSBidXR0b24gKi9cbiAgICAgICAgc3VibWl0QnV0dG9uLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5kcG9pbnQpIHtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0O1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1ldGhvZCA9PSBcInBvc3RcIikge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHRoaXMub3B0aW9ucy5lbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YVRvU2VuZCksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogc2VsZi5vcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAkLmdldCh0aGlzLm9wdGlvbnMuZW5kcG9pbnQsIGRhdGFUb1NlbmQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzU3VibWl0dGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIHJlcXVlc3QuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UsIHRleHRTdGF0dXMpIHtcblxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBjdXJyZW50IGZvcm0gc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLnJlc2V0QWZ0ZXJTdWJtaXQpIHNlbGYuY2xlYW5Gb3JtKCk7XG4gICAgICAgICAgICAgICAgJGZlZWRiYWNrTGFiZWwuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHNlbGYub3B0aW9ucy5vblN1Ym1pdFN1Y2Nlc3MocmVzcG9uc2UsIGRhdGFUb1NlbmQsIHNlbGYpO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdWJtaXQgcmV0dXJuIGEgdHJ1ZSBib29sZWFuIHRoZW4gY2xvc2UgdGhlIG1vZGFsXG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgIGlmKHNlbGYuZGlhbG9nLm1vZGFsKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpYWxvZy5tb2RhbCgnaGlkZScpXG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2dbMF0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJChgLm1vZGFsLWJhY2tkcm9wLmZhZGUuc2hvd2ApLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyogdW5iaW5kIHRoZSBvbGQgY2xvc3VyZSBvbiBzdWJtaXQgZXZlbnQgYW5kIGJpbmQgYSBuZXcgb25lICovXG4gICAgICAgICAgICAgICAgJChzZWxmLmVsZW1lbnQpLm9mZignc3VibWl0Jywgc2VsZi5zdWJtaXRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBzZWxmLmRlbGVnYXRlU3VibWl0KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuXG4gICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGpxeGhyLnJlc3BvbnNlSlNPTjtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmMgIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGZlZWRiYWNrTGFiZWwuaHRtbChyZXNwb25zZS5yY19zdHJfaHIpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMub25TdWJtaXRFcnJvcihyZXNwb25zZSwgZGF0YVRvU2VuZCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gbm8gZW5kcG9pbnRcblxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBjdXJyZW50IGZvcm0gc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvL2lmIChzZWxmLm9wdGlvbnMucmVzZXRBZnRlclN1Ym1pdCkgc2VsZi5jbGVhbkZvcm0oKTtcbiAgICAgICAgICAgICAgICAkZmVlZGJhY2tMYWJlbC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gc2VsZi5vcHRpb25zLm9uU3VibWl0U3VjY2Vzcyh7fSwgZGF0YVRvU2VuZCwgc2VsZik7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN1Ym1pdCByZXR1cm4gYSB0cnVlIGJvb2xlYW4gdGhlbiBjbG9zZSB0aGUgbW9kYWxcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgaWYoc2VsZi5kaWFsb2cubW9kYWwpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlhbG9nLm1vZGFsKCdoaWRlJylcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2dbMF0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiB1bmJpbmQgdGhlIG9sZCBjbG9zdXJlIG9uIHN1Ym1pdCBldmVudCBhbmQgYmluZCBhIG5ldyBvbmUgKi9cbiAgICAgICAgICAgICAgICAkKHNlbGYuZWxlbWVudCkub2ZmKCdzdWJtaXQnLCBzZWxmLnN1Ym1pdEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVTdWJtaXQoKTtcblxuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxlZ2F0ZVJlc2V0QnV0dG9uKCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0ncmVzZXQnXWApO1xuICAgICAgICBpZiAocmVzZXRCdXR0b24ubGVuZ3RoID09IDApIHJldHVybjtcblxuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVzID0gTnRvcFV0aWxzLnNlcmlhbGl6ZUZvcm1BcnJheSgkKHRoaXMuZWxlbWVudCkuc2VyaWFsaXplQXJyYXkoKSk7XG5cbiAgICAgICAgcmVzZXRCdXR0b24uY2xpY2soZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyByZXNldCB0aGUgcHJldmlvdXMgdmFsdWVzXG4gICAgICAgICAgICAkKHNlbGYuZWxlbWVudCkuZmluZCgnaW5wdXQ6dmlzaWJsZSxzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uIChpLCBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9ICQoaW5wdXQpLmF0dHIoJ25hbWUnKTtcbiAgICAgICAgICAgICAgICAkKGlucHV0KS52YWwoZGVmYXVsdFZhbHVlc1trZXldKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLWludmFsaWQnKS5yZW1vdmVDbGFzcygnaXMtdmFsaWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IG1vZGFsSGFuZGxlciA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggIT0gMSkgdGhyb3cgbmV3IEVycm9yKFwiT25seSBhIGZvcm0gZWxlbWVudCBjYW4gYnkgaW5pdGlhbGl6ZWQhXCIpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgY3NyZjogJycsXG4gICAgICAgIGVuZHBvaW50OiAnJyxcbiAgICAgICAgcmVzZXRBZnRlclN1Ym1pdDogdHJ1ZSxcbiAgICAgICAgLyogVHJ1ZSB0byBza2lwIHRoZSBhcmUteW91LXN1cmUgY2hlY2sgb24gdGhlIGRpYWxvZyAqL1xuICAgICAgICBkb250RGlzYWJsZVN1Ym1pdDogZmFsc2UsXG4gICAgICAgIC8qIFRydWUgaWYgdGhlIHJlcXVlc3QgaXNuJ3QgZG9uZSBieSBBSkFYIHJlcXVlc3QgKi9cbiAgICAgICAgaXNTeW5jUmVxdWVzdDogZmFsc2UsXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaCBkYXRhIGFzeW5jaHJvbnVzbHkgZnJvbSB0aGUgc2VydmVyIG9yXG4gICAgICAgICAqIGxvYWRzIGRhdGEgZGlyZWN0bHkgZnJvbSB0aGUgY3VycmVudCBwYWdlLlxuICAgICAgICAgKiBUaGUgZnVuY3Rpb24gbXVzdCByZXR1cm5zIHRoZSBmZXRjaGVkIGRhdGEuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIFJldHVybnMgdGhlIGZldGNoZWQgZGF0YS5cbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nXG4gICAgICAgICAqIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uIHdoZW4gZmV0Y2hpbmcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIGxvYWRGb3JtRGF0YTogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoKGBlbmRwb2ludC90by9kYXRhYCk7XG4gICAgICAgICAqICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGRhdGEuanNvbigpO1xuICAgICAgICAgKiAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgbG9hZEZvcm1EYXRhOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG9uTW9kYWxJbml0KCkgaXMgaW52b2tlZCB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBsb2FkIHRoZSBmZXRjaGVkIGRhdGEgZnJvbSBgbG9hZEZvcm1EYXRhKClgXG4gICAgICAgICAqIGluc2lkZSB0aGUgZm9ybSBtb2RhbCBpbnB1dHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBsb2FkZWREYXRhIFRoaXMgYXJndW1lbnQgY29udGFpbnMgdGhlIGZldGNoZWQgZGF0YSBvYnRhaW5lZFxuICAgICAgICAgKiBmcm9tIGBsb2FkRm9ybURhdGEoKWBcbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nIGhvdyB0byB1c2VcbiAgICAgICAgICogdGhlIGZ1bmN0aW9uICh3ZSBzdXBwb3NlIHRoYXQgbG9hZEZvcm1EYXRhKCkgcmV0dXJucyB0aGUgZm9sbG93aW5nXG4gICAgICAgICAqIG9iamVjdDogYGxvYWRlZFVzZXIgPSB7Zmlyc3RuYW1lOiAnRm9vJywgbGFzdG5hbWU6ICdCYXInLCBpZDogMTQyODEwM31gKVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25Nb2RhbEluaXQ6IGZ1bmN0aW9uKGxvYWRlZFVzZXIpIHtcbiAgICAgICAgICogICAgICAkKGAjdXNlck1vZGFsIGZvcm0gaW5wdXQjZmlyc3RuYW1lYCkudmFsKGxvYWRlZFVzZXIuZmlyc3RuYW1lKTtcbiAgICAgICAgICogICAgICAkKGAjdXNlck1vZGFsIGZvcm0gaW5wdXQjbGFzdG5hbWVgKS52YWwobG9hZGVkVXNlci5sYXN0bmFtZSk7XG4gICAgICAgICAqICAgICAgJChgI3VzZXJNb2RhbCBmb3JtIGlucHV0I2lkYCkudmFsKGxvYWRlZFVzZXIuaWQpO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25Nb2RhbEluaXQ6IGZ1bmN0aW9uIChsb2FkZWREYXRhKSB7IH0sXG5cbiAgICAgICAgb25Nb2RhbFNob3c6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZ1bmN0aW9uIGJlZm9yZVN1Ym1pdCgpIGlzIGludm9rZWQgYWZ0ZXIgdGhlIHVzZXJcbiAgICAgICAgICogc3VibWl0IHRoZSBmb3JtLiBUaGUgZnVuY3Rpb24gbXVzdCByZXR1cm4gdGhlIGRhdGEgdG9cbiAgICAgICAgICogc2VuZCB0byB0aGUgZW5kcG9pbnQuIElmIHRoZSBjaG9zZW4gbWV0aG9kIGlzIGBwb3N0YFxuICAgICAgICAgKiBhIGNzcmYgd2lsbCBiZSBhZGQgdG8gdGhlIHJldHVybmVkIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGUgV2Ugc2hvdyBiZWxvdyBhIHNpbXBsZSBleGFtcGxlIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogYmVmb3JlU3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICogICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgKiAgICAgICAgICBhY3Rpb246ICdlZGl0JyxcbiAgICAgICAgICogICAgICAgICAgSlNPTjogSlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplQXJyYXlGb3JtKCQoYGZvcm1gKS5zZXJpYWxpemVBcnJheSgpKSlcbiAgICAgICAgICogICAgICB9O1xuICAgICAgICAgKiAgICAgIHJldHVybiBib2R5O1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgYmVmb3JlU3VtYml0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB7fSB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGludm9rZWQgd2hlbiB0aGUgcmVxdWVzdCB0byB0aGUgZW5kcG9pbnRcbiAgICAgICAgICogdGVybWluYXRlcyBzdWNjZXNzZnVsbHkgKDIwMCkuIEJlZm9yZSB0aGUgY2FsbCBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgICAqIGEgbmV3IGNzcmYgcmV0cml2ZWQgZnJvbSB0aGUgc2VydmVyIHdpbGwgYmUgc2V0IGZvclxuICAgICAgICAgKiBmdXR1cmUgY2FsbHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGlzIG9iamVjdCBjb250YWlucyB0aGUgcmVzcG9uc2VcbiAgICAgICAgICogZnJvbSB0aGUgc2VydmVyXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZyBhIHNpbXBsZSB1c2VyIGNhc2U6XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvblN1Ym1pdFN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAqICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICogICAgICAgICAgY29uc29sZS5sb2coYFRoZSB1c2VyIGluZm8gaGFzIGJlZW4gZWRpdCB3aXRoIHN1Y2Nlc3MhYCk7XG4gICAgICAgICAqICAgICAgfVxuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25TdWJtaXRTdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gdGhlIHJlcXVlc3QgdG8gdGhlIGVuZHBvaW50XG4gICAgICAgICAqIHRlcm1pbmF0ZXMgd2l0aCBmYWlsdXJlICghPSAyMDApLiBCZWZvcmUgdGhlIGNhbGwgb2YgdGhpcyBmdW5jdGlvblxuICAgICAgICAgKiBhIG5ldyBjc3JmIHJldHJpdmVkIGZyb20gdGhlIHNlcnZlciB3aWxsIGJlIHNldCBmb3JcbiAgICAgICAgICogZnV0dXJlIGNhbGxzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VudCBUaGlzIG9iamVjdCBjb250YWlucyB0aGUgc2VudCBkYXRhIHRvIHRoZSBlbmRwb2ludFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFN0YXR1cyBJdCBjb250YWlucyB0aGUgZXJyb3IgdGV4dCBzdGF0dXMgb2J0YWluZWRcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVycm9yVGhyb3duIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGluZm8gYWJvdXQgdGhlIGVycm9yXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZyBhIHNpbXBsZSB1c2VyIGNhc2U6XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvblN1Ym1pdEVycm9yOiBmdW5jdGlvbihzZW50LCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgKiAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmVycm9yKGBPcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nIWApO1xuICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcbiAgICAgICAgICogICAgICB9XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvblN1Ym1pdEVycm9yOiBmdW5jdGlvbiAoc2VudCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2sgdGhlIHJlc2V0IGlucHV0XG4gICAgICAgICAqIGluc2lkZSB0aGUgZm9ybS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHREYXRhIEl0IGNvbnRhaW5zIHRoZSBmZXRjaGVkIGRhdGEgZnJvbVxuICAgICAgICAgKiBgbG9hZEZvcm1EYXRhKClgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZSBCZWxvdyB0aGVyZSBpcyBhbiBleGFtcGxlIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25Nb2RhbFJlc2V0OiBmdW5jdGlvbihkZWZhdWx0RGF0YSkge1xuICAgICAgICAgKiAgICAgICQoYGlucHV0I2lkYCkudmFsKGRlZmF1bHREYXRhLmlkKTtcbiAgICAgICAgICogICAgICAkKGBpbnB1dCNuYW1lYCkudmFsKGRlZmF1bHREYXRhLm5hbWUpO1xuICAgICAgICAgKiAgICAgICQoYGlucHV0I2FkZHJlc3NgKS52YWwoZGVmYXVsdERhdGEuYWRkcmVzcyk7XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvbk1vZGFsUmVzZXQ6IGZ1bmN0aW9uIChkZWZhdWx0RGF0YSkgeyB9LFxuICAgIH0sIGFyZ3MpO1xuXG4gICAgY29uc3QgbWggPSBuZXcgTW9kYWxIYW5kbGVyKHRoaXMsIG9wdGlvbnMpO1xuICAgIG1oLmRlbGVnYXRlU3VibWl0KCk7XG5cbiAgICByZXR1cm4gbWg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGFsSGFuZGxlclxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmNvbnN0IHR5cGVzID0ge1xuICAgIG5vX2Zvcm1hdHRpbmc6IHtcblx0aWQ6IFwibm9fZm9ybWF0dGluZ1wiLFxuXHR1bTogbnVsbCxcblx0c3RlcDogbnVsbCxcblx0ZGVjaW1hbDogbnVsbCxcblx0c2NhbGVfdmFsdWVzOiBudWxsLFxuICAgIH0sXG4gICAgbnVtYmVyOiB7XG5cdGlkOiBcIm51bWJlclwiLFxuXHR1bTogW1wiXCIsIFwiS1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogbnVsbCxcblx0c2NhbGVfdmFsdWVzOiBudWxsLFxuICAgIH0sXG4gICAgYnl0ZXM6IHtcblx0aWQ6IFwiYnl0ZXNcIixcblx0dW06IFtcIkJcIiwgXCJLQlwiLCBcIk1CXCIsIFwiR0JcIiwgXCJUQlwiLCBcIlBCXCIsIFwiRUJcIl0sXG5cdHN0ZXA6IDEwMjQsXG5cdGRlY2ltYWw6IDIsXG5cdHNjYWxlX3ZhbHVlczogbnVsbCxcblx0YWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBicHM6IHtcblx0aWQ6IFwiYnBzXCIsXG5cdHVtOiBbXCJicHNcIiwgXCJLYnBzXCIsIFwiTWJwc1wiLCBcIkdicHNcIiwgXCJUYnBzXCIsIFwiUGJwc1wiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogMixcblx0c2NhbGVfdmFsdWVzOiA4LFx0XG5cdGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgZnBzOiB7XG5cdGlkOiBcImZwc1wiLFxuXHR1bTogW1wiZmxvd3Mvc1wiLCBcIktmbG93cy9zXCIsIFwiTWZsb3dzL3NcIiwgXCJHZmxvd3Mvc1wiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogMixcblx0c2NhbGVfdmFsdWVzOiBudWxsLFx0XG5cdGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgcHBzOiB7XG5cdGlkOiBcInBwc1wiLFxuXHR1bTogW1wicHBzXCIsIFwiS3Bwc1wiLCBcIk1wcHNcIiwgXCJHcHBzXCIsIFwiVHBwc1wiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogMixcblx0c2NhbGVfdmFsdWVzOiBudWxsLFx0XG5cdGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgbXM6IHtcblx0aWQ6IFwibXNcIixcblx0dW06IFtcIm1zXCIsIFwic1wiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogMixcblx0c2NhbGVfdmFsdWVzOiBudWxsLFx0XG5cdGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgcGVyY2VudGFnZToge1xuXHRpZDogXCJwZXJjZW50YWdlXCIsXG5cdHVtOiBbXCIlXCJdLFxuXHRzdGVwOiAxMDEsXG5cdGRlY2ltYWw6IDAsXG5cdHNjYWxlX3ZhbHVlczogbnVsbCxcdFxuXHRtYXhfdmFsdWU6IDEwMCxcblx0YWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbn07XG5cbmZ1bmN0aW9uIGdldFVuaXRNZWFzdXJlTGVuKHR5cGUpIHtcbiAgICAvLyAwMDAuMDBcbiAgICBsZXQgdCA9IHR5cGVzW3R5cGVdO1xuICAgIGxldCBzcGFjZVZhbHVlID0gMztcbiAgICBpZiAodC5kZWNpbWFsICE9IG51bGwgJiYgdC5kZWNpbWFsID4gMCkge1x0XG5cdHNwYWNlVmFsdWUgPSA2O1xuICAgIH1cbiAgICBsZXQgc3BhY2VVbSA9IDA7XG4gICAgaWYgKHQudW0gIT0gbnVsbCkge1xuXHRzcGFjZVVtID0gTWF0aC5tYXgoLi4udC51bS5tYXAoKHVtKSA9PiB1bS5sZW5ndGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIChzcGFjZVZhbHVlICsgMSArIHNwYWNlVW0pO1xufVxuXG5mdW5jdGlvbiBnZXRTY2FsZUZhY3RvckluZGV4KHR5cGUsIHZhbHVlKSB7XG4gICBsZXQgdHlwZU9wdGlvbnMgPSB0eXBlc1t0eXBlXTtcbiAgICBpZiAodHlwZSA9PSB0eXBlcy5ub19mb3JtYXR0aW5nLmlkIHx8IHZhbHVlID09IG51bGwpIHtcblx0cmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXMgIT0gbnVsbCkge1xuXHR2YWx1ZSAqPSB0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXM7XG4gICAgfVxuICAgIGxldCBzdGVwID0gdHlwZU9wdGlvbnMuc3RlcDtcbiAgICBsZXQgbmVnYXRpdmVWYWx1ZSA9IHZhbHVlIDwgMDtcbiAgICBpZiAobmVnYXRpdmVWYWx1ZSkgeyB2YWx1ZSAqPSAtMTsgfVxuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbWVhc3VyZXMgPSB0eXBlT3B0aW9ucy51bTtcbiAgICB3aGlsZSAodmFsdWUgPj0gc3RlcCAmJiBpIDwgbWVhc3VyZXMubGVuZ3RoKSB7XG5cdHZhbHVlID0gdmFsdWUgLyBzdGVwO1xuXHRpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xufVxuXG5mdW5jdGlvbiBnZXRGb3JtYXR0ZXIodHlwZSwgYWJzb2x1dGVWYWx1ZSwgc2NhbGVGYWN0b3JJbmRleCkge1xuICAgIGxldCB0eXBlT3B0aW9ucyA9IHR5cGVzW3R5cGVdO1xuICAgIGxldCBtYXhMZW5WYWx1ZSA9IDY7IC8vIDAwMC4wMFxuICAgIGxldCBtYXhMZW5VbSA9IDg7IC8vIE1mbG93cy9zXG4gICAgYWJzb2x1dGVWYWx1ZSB8PSB0eXBlT3B0aW9ucy5hYnNvbHV0ZV92YWx1ZTsgXG4gICAgbGV0IGZvcm1hdHRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdCAgICByZXR1cm4gJyc7XG5cdH1cblx0aWYgKHR5cGUgPT0gdHlwZXMubm9fZm9ybWF0dGluZy5pZCkge1xuXHQgICAgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICh0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXMgIT0gbnVsbCkge1xuXHQgICAgdmFsdWUgKj0gdHlwZU9wdGlvbnMuc2NhbGVfdmFsdWVzO1xuXHR9XG5cdGxldCBuZWdhdGl2ZVZhbHVlID0gdmFsdWUgPCAwO1xuXHRpZiAobmVnYXRpdmVWYWx1ZSkgeyB2YWx1ZSAqPSAtMTsgfVxuXHRcblx0bGV0IHN0ZXAgPSB0eXBlT3B0aW9ucy5zdGVwO1xuXHRsZXQgZGVjaW1hbCA9IHR5cGVPcHRpb25zLmRlY2ltYWw7XG5cdGxldCBtZWFzdXJlcyA9IHR5cGVPcHRpb25zLnVtO1xuXHRsZXQgaSA9IDA7XG4gIGlmICh0eXBlT3B0aW9ucy5tYXhfdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA+IHR5cGVPcHRpb25zLm1heF92YWx1ZSkge1xuICAgIHZhbHVlID0gdHlwZU9wdGlvbnMubWF4X3ZhbHVlXG4gIH1cblxuXHR3aGlsZSAoKHZhbHVlID49IHN0ZXAgJiYgaSA8IG1lYXN1cmVzLmxlbmd0aCAmJiAhc2NhbGVGYWN0b3JJbmRleCkgfHwgKHNjYWxlRmFjdG9ySW5kZXggIT0gbnVsbCAmJiBpIDwgc2NhbGVGYWN0b3JJbmRleCkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlIC8gc3RlcDtcbiAgICBpICs9IDE7XG5cdH1cblxuXHRpZiAoZGVjaW1hbCAhPSBudWxsICYmIGRlY2ltYWwgPiAwKSB7XHQgICAgXG5cdCAgICB2YWx1ZSA9IHZhbHVlICogTWF0aC5wb3coMTAsIGRlY2ltYWwpO1xuXHQgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKTtcblx0ICAgIHZhbHVlID0gdmFsdWUgLyBNYXRoLnBvdygxMCwgZGVjaW1hbCk7XG5cdCAgICB2YWx1ZSA9IHZhbHVlLnRvRml4ZWQoZGVjaW1hbCk7XG5cdH0gZWxzZSB7XG5cdCAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xuXHR9XG5cdFxuXHRpZiAobmVnYXRpdmVWYWx1ZSAmJiAhYWJzb2x1dGVWYWx1ZSkgeyB2YWx1ZSAqPSAtMTsgfVxuXHRsZXQgdmFsU3RyaW5nID0gYCR7dmFsdWV9YDtcblx0Ly8gaWYgKHZhbFN0cmluZy5sZW5ndGggPCBtYXhMZW5WYWx1ZSkge1xuXHQvLyAgICAgdmFsU3RyaW5nID0gdmFsU3RyaW5nLnBhZEVuZChtYXhMZW5WYWx1ZSAtIHZhbFN0cmluZy5sZW5ndGgsIFwiIFwiKTtcblx0Ly8gfVxuXHRsZXQgbVN0cmluZyA9IGAke21lYXN1cmVzW2ldfWA7XG5cdC8vIGlmIChtU3RyaW5nLmxlbmd0aCA8IG1heExlblVtKSB7XG5cdC8vICAgICBtU3RyaW5nID0gbVN0cmluZy5wYWRTdGFydChtYXhMZW5VbSAtIG1TdHJpbmcubGVuZ3RoLCBcIl9cIik7XG5cdC8vIH1cblx0bGV0IHRleHQgPSBgJHt2YWxTdHJpbmd9ICR7bVN0cmluZ31gO1xuXHRyZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cblxuY29uc3QgZm9ybWF0dGVyVXRpbHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuXHR0eXBlcyxcblx0Z2V0VW5pdE1lYXN1cmVMZW4sXG5cdGdldEZvcm1hdHRlcixcblx0Z2V0U2NhbGVGYWN0b3JJbmRleCxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJVdGlscztcbiIsImltcG9ydCBOdG9wVXRpbHMgZnJvbSAnLi9udG9wLXV0aWxzJ1xud2luZG93Lk50b3BVdGlscyA9IE50b3BVdGlsc1xuXG5pbXBvcnQgeyBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3MsIGRhdGF0YWJsZUZvckVhY2hSb3csIGRhdGF0YWJsZUlzRW1wdHksIGRhdGF0YWJsZVJlbW92ZUVtcHR5Um93LCBkYXRhdGFibGVBZGRFbXB0eVJvdywgZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXMsIGRhdGF0YWJsZUdldEJ5Rm9ybSwgZGF0YXRhYmxlVW5kb0FkZFJvdywgZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZUFkZERlbGV0ZUJ1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVBZGRBY3Rpb25CdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZSwgZGF0YXRhYmxlSXNMYXN0UGFnZSwgZGF0YXRhYmxlR2V0Q29sdW1uLCBkYXRhdGFibGVHZXRDb2x1bW5JbmRleCB9IGZyb20gJy4vZGF0YXRhYmxlL2Jvb3RzdHJhcC1kYXRhdGFibGUtdXRpbHMnXG5cbndpbmRvdy5kYXRhdGFibGVJbml0UmVmcmVzaFJvd3MgPSBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3NcbndpbmRvdy5kYXRhdGFibGVGb3JFYWNoUm93ID0gZGF0YXRhYmxlRm9yRWFjaFJvd1xud2luZG93LmRhdGF0YWJsZUlzRW1wdHkgPSBkYXRhdGFibGVJc0VtcHR5XG53aW5kb3cuZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3cgPSBkYXRhdGFibGVSZW1vdmVFbXB0eVJvd1xud2luZG93LmRhdGF0YWJsZUFkZEVtcHR5Um93ID0gZGF0YXRhYmxlQWRkRW1wdHlSb3dcbndpbmRvdy5kYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcyA9IGRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zXG53aW5kb3cuZGF0YXRhYmxlR2V0QnlGb3JtID0gZGF0YXRhYmxlR2V0QnlGb3JtXG53aW5kb3cuZGF0YXRhYmxlVW5kb0FkZFJvdyA9IGRhdGF0YWJsZVVuZG9BZGRSb3dcbndpbmRvdy5kYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlQWRkRGVsZXRlQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFja1xud2luZG93LmRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkQWN0aW9uQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVBZGRGaWx0ZXJCdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZEZpbHRlckJ1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlQWRkTGlua0J1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkTGlua0J1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZSA9IGRhdGF0YWJsZU1ha2VTZWxlY3RVbmlxdWVcbndpbmRvdy5kYXRhdGFibGVJc0xhc3RQYWdlID0gZGF0YXRhYmxlSXNMYXN0UGFnZVxud2luZG93LmRhdGF0YWJsZUdldENvbHVtbiA9IGRhdGF0YWJsZUdldENvbHVtblxud2luZG93LmRhdGF0YWJsZUdldENvbHVtbkluZGV4ID0gZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXhcblxuaW1wb3J0ICcuL2VicGYtdXRpbHMnXG5pbXBvcnQgJy4vZ3JhcGgvZ3JhcGgtdXRpbHMnXG5pbXBvcnQgbW9kYWxIYW5kbGVyIGZyb20gJy4vbW9kYWwvbW9kYWwtdXRpbHMnXG5cbndpbmRvdy4kLmZuLm1vZGFsSGFuZGxlciA9IG1vZGFsSGFuZGxlclxuXG5pbXBvcnQgJy4vc2VxdWVuY2Vfc3VuYnVyc3QnXG5pbXBvcnQgKiBhcyBlYnBmVXRpbHMgZnJvbSAnLi9lYnBmLXV0aWxzJ1xuXG53aW5kb3cuZWJwZlV0aWxzID0gZWJwZlV0aWxzXG5cbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi9mb3JtYXR0ZXItdXRpbHNcIjtcbndpbmRvdy5udG9wRm9ybWF0dGVyVXRpbHMgPSBmb3JtYXR0ZXJVdGlscztcbiIsImV4cG9ydCBmdW5jdGlvbiBtYWtlVW5pcXVlVmFsaWRhdG9yKGl0ZW1zX2Z1bmN0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciBjbXBfbmFtZSA9IGZpZWxkLnZhbCgpO1xuICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAvLyB0aGlzIHdpbGwgYmUgY2hlY2tlZCBzZXBhcmF0ZWx5LCB3aXRoICdyZXF1aXJlZCcgYXJndW1lbnRcbiAgICBpZighIGNtcF9uYW1lKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpdGVtc19mdW5jdGlvbihmaWVsZCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBuYW1lID0gJCh0aGlzKS52YWwoKTtcbiAgICAgIGlmIChuYW1lID09IGNtcF9uYW1lKVxuICAgICAgICBjb3VudCA9IGNvdW50ICsgMTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjb3VudCA9PSAxO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW1iZXJWYWx1ZVZhbGlkYXRvcihpbnB1dCkge1xuICB2YXIgbWVtYmVyID0gaW5wdXQudmFsKCk7XG4gIGlmIChtZW1iZXIgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBOdG9wVXRpbHMuaXNfbWFjX2FkZHJlc3MobWVtYmVyKSB8fCBOdG9wVXRpbHMuaXNfbmV0d29ya19tYXNrKG1lbWJlciwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yKHBhdHRlcm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHBhc3N3b3JkUGF0dGVyblZhbGlkYXRvcihpbnB1dCkge1xuICAgIC8vIHJlcXVpcmVkIGlzIGNoZWNrZWQgc2VwYXJhdGVseVxuICAgIGlmKCFpbnB1dC52YWwoKSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICQoaW5wdXQpLnZhbCgpLm1hdGNoKHBhdHRlcm4pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXNzd29yZE1hdGNoVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBvdGhlcl9pbnB1dCA9ICQoaW5wdXQpLmNsb3Nlc3QoXCJmb3JtXCIpLmZpbmQoXCJbZGF0YS1wYXNzd29yZG1hdGNoXVwiKS5ub3QoaW5wdXQpO1xuICBpZighaW5wdXQudmFsKCkgfHwgIW90aGVyX2lucHV0LnZhbCgpKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIG90aGVyX2lucHV0LnZhbCgpID09PSBpbnB1dC52YWwoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvb2xuYW1lVmFsaWRhdG9yKGlucHV0KSB7XG4gIC8vIHJlcXVpcmVkIGlzIGNoZWNrZWQgc2VwYXJhdGVseVxuICBpZighaW5wdXQudmFsKCkpIHJldHVybiB0cnVlO1xuICByZXR1cm4gJChpbnB1dCkudmFsKCkubWF0Y2goL15bYS16MC05X10qJC8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFzc3dvcmRNYXRjaFJlY2hlY2soZm9ybSkge1xuICB2YXIgaXRlbXMgPSAkKGZvcm0pLmZpbmQoXCJbZGF0YS1wYXNzd29yZG1hdGNoXVwiKTtcbiAgdmFyIG5vdF9lbXB0eSA9IDA7XG5cbiAgaXRlbXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpZigkKHRoaXMpLnZhbCgpICE9IFwiXCIpIG5vdF9lbXB0eSsrO1xuICB9KTtcblxuICBpZihub3RfZW1wdHkgPT0gaXRlbXMubGVuZ3RoKSBpdGVtcy50cmlnZ2VyKCdpbnB1dCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaG9zdE9yTWFjVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBob3N0ID0gaW5wdXQudmFsKCk7XG5cbiAgLyogSGFuZGxlZCBzZXBhcmF0ZWx5ICovXG4gIGlmIChob3N0ID09PSBcIlwiKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gTnRvcFV0aWxzLmlzX21hY19hZGRyZXNzKGhvc3QpIHx8IE50b3BVdGlscy5pc19nb29kX2lwdjQoaG9zdCkgfHwgTnRvcFV0aWxzLmlzX2dvb2RfaXB2Nihob3N0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlwQWRkcmVzc1ZhbGlkYXRvcihpbnB1dCkge1xuICB2YXIgaG9zdCA9IGlucHV0LnZhbCgpO1xuXG4gIC8qIEhhbmRsZWQgc2VwYXJhdGVseSAqL1xuICBpZiAoaG9zdCA9PT0gXCJcIikgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIE50b3BVdGlscy5pc19nb29kX2lwdjQoaG9zdCkgfHwgTnRvcFV0aWxzLmlzX2dvb2RfaXB2Nihob3N0KTtcbn1cblxudmFyIGZpbHRlcnNfdG9fdmFsaWRhdGUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJwZlZhbGlkYXRvcihmaWx0ZXJfZmllbGQsIHN5bmMgPSBmYWxzZSkge1xuICB2YXIgZmlsdGVyID0gZmlsdGVyX2ZpZWxkLnZhbCgpO1xuXG4gIGlmIChmaWx0ZXIudHJpbSgpID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIga2V5ID0gZmlsdGVyX2ZpZWxkLmF0dHIoXCJuYW1lXCIpO1xuICB2YXIgdGltZW91dCA9IDI1MDtcblxuICBpZiAoIWZpbHRlcnNfdG9fdmFsaWRhdGVba2V5XSlcbiAgICAgZmlsdGVyc190b192YWxpZGF0ZVtrZXldID0ge2FqYXhfb2JqOm51bGwsIHZhbGlkOnRydWUsIHRpbWVyOm51bGwsIHN1Ym1pdF9yZW1pbmQ6ZmFsc2UsIGxhc3RfdmFsOm51bGx9O1xuICB2YXIgc3RhdHVzID0gZmlsdGVyc190b192YWxpZGF0ZVtrZXldO1xuXG4gIHZhciBzZW5kQWpheCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzdGF0dXMudGltZXIgPSBudWxsO1xuXG4gICAgdmFyIGZpbmFsbHlfY2hlY2sgPSBmdW5jdGlvbiAodmFsaWQpIHtcbiAgICAgIHN0YXR1cy5hamF4X29iaiA9IG51bGw7XG4gICAgICBzdGF0dXMudmFsaWQgPSB2YWxpZDtcbiAgICAgIHN0YXR1cy5sYXN0X3ZhbCA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzLmxhc3RfdmFsICE9PSBmaWx0ZXIpIHtcbiAgICAgIGlmIChzdGF0dXMuYWpheF9vYmopXG4gICAgICAgIHN0YXR1cy5hamF4X29iai5hYm9ydCgpO1xuXG4gICAgICBzdGF0dXMuYWpheF9vYmogPSAkLmFqYXgoe1xuICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvY2hlY2svZmlsdGVyLmx1YWAsXG4gICAgICAgIGFzeW5jOiAhc3luYyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHF1ZXJ5OiBmaWx0ZXIsXG4gICAgICAgIH0sIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBmaW5hbGx5X2NoZWNrKHN0YXR1cy52YWxpZCk7XG4gICAgICAgIH0sIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBkYXRhLnJlc3BvbnNlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgIGZpbmFsbHlfY2hlY2sodmFsaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcG9zc2libHkgcHJvY2VzcyB0aGUgcmVtaW5kZXJcbiAgICAgIGZpbmFsbHlfY2hlY2soc3RhdHVzLnZhbGlkKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3luYykge1xuICAgIHNlbmRBamF4KCk7XG4gIH0gZWxzZSBpZiAoc3RhdHVzLmxhc3RfdmFsID09PSBmaWx0ZXIpIHtcbiAgICAvLyBJZ25vcmluZ1xuICB9IGVsc2Uge1xuICAgIGlmIChzdGF0dXMudGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGF0dXMudGltZXIpO1xuICAgICAgc3RhdHVzLnN1Ym1pdF9yZW1pbmQgPSBmYWxzZTtcbiAgICB9XG4gICAgc3RhdHVzLnRpbWVyID0gc2V0VGltZW91dChzZW5kQWpheCwgdGltZW91dCk7XG4gIH1cblxuICByZXR1cm4gc3RhdHVzLnZhbGlkO1xufVxuXG4iLCJpbXBvcnQgeyBtYWtlVW5pcXVlVmFsaWRhdG9yLCBtZW1iZXJWYWx1ZVZhbGlkYXRvciwgbWFrZVBhc3N3b3JkUGF0dGVyblZhbGlkYXRvciwgcGFzc3dvcmRNYXRjaFZhbGlkYXRvciwgcG9vbG5hbWVWYWxpZGF0b3IsIHBhc3N3b3JkTWF0Y2hSZWNoZWNrLCBob3N0T3JNYWNWYWxpZGF0b3IsIGlwQWRkcmVzc1ZhbGlkYXRvciwgYnBmVmFsaWRhdG9yIH0gZnJvbSAnLi9udG9wbmctdmFsaWRhdG9ycy11dGlscydcblxud2luZG93Lm1ha2VVbmlxdWVWYWxpZGF0b3IgPSBtYWtlVW5pcXVlVmFsaWRhdG9yXG53aW5kb3cubWVtYmVyVmFsdWVWYWxpZGF0b3IgPSBtZW1iZXJWYWx1ZVZhbGlkYXRvclxud2luZG93Lm1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IgPSBtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yXG53aW5kb3cucGFzc3dvcmRNYXRjaFZhbGlkYXRvciA9IHBhc3N3b3JkTWF0Y2hWYWxpZGF0b3JcbndpbmRvdy5wb29sbmFtZVZhbGlkYXRvciA9IHBvb2xuYW1lVmFsaWRhdG9yXG53aW5kb3cucGFzc3dvcmRNYXRjaFJlY2hlY2sgPSBwYXNzd29yZE1hdGNoUmVjaGVja1xud2luZG93Lmhvc3RPck1hY1ZhbGlkYXRvciA9IGhvc3RPck1hY1ZhbGlkYXRvclxud2luZG93LmlwQWRkcmVzc1ZhbGlkYXRvciA9IGlwQWRkcmVzc1ZhbGlkYXRvclxud2luZG93LmJwZlZhbGlkYXRvciA9IGJwZlZhbGlkYXRvclxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cbmV4cG9ydCBjb25zdCBudG9wbmdfc3luYyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBjb21wb25lbnRzX3JlYWR5ID0ge307XG4gICAgbGV0IHN1YnNjcmliZXJzID0gW107ICAgICAgICBcbiAgICByZXR1cm4ge1xuXHRyZWFkeTogZnVuY3Rpb24oY29tcG9uZW50X25hbWUpIHtcblx0ICAgIGNvbXBvbmVudHNfcmVhZHlbY29tcG9uZW50X25hbWVdID0gdHJ1ZTtcblx0ICAgIHN1YnNjcmliZXJzLmZpbHRlcigocykgPT4gcy5jb21wb25lbnRfbmFtZSA9PSBjb21wb25lbnRfbmFtZSkuZm9yRWFjaCgocykgPT4gcy5yZXNvbHZlKCkpO1xuXHQgICAgc3Vic2NyaWJlcnMgPSBzdWJzY3JpYmVycy5maWx0ZXIoKHMpID0+IHMuY29tcG9uZW50X25hbWUgIT0gY29tcG9uZW50X25hbWUpO1xuXHR9LFxuXHRvbl9yZWFkeTogZnVuY3Rpb24oY29tcG9uZW50X25hbWUpIHtcblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZXZ0KSA9PiB7XG5cdFx0aWYgKGNvbXBvbmVudHNfcmVhZHlbY29tcG9uZW50X25hbWVdKSB7XG5cdFx0ICAgIHJlc29sdmUoKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRzdWJzY3JpYmVycy5wdXNoKHtyZXNvbHZlLCBjb21wb25lbnRfbmFtZSwgY29tcGxldGVkOiBmYWxzZX0pO1xuXHQgICAgfSk7XG5cdH0sXG4gICAgfTtcbn0oKTtcblxuLyoqXG4qIFV0aWxpdHkgZ2xvYmFscyBmdW5jdGlvbnMuXG4qL1xuZXhwb3J0IGNvbnN0IG50b3BuZ191dGlsaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGdsb2JhbF9odHRwX2hlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4ge1xuXHRpc19hcnJheTogZnVuY3Rpb24oZSkge1xuXHQgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZSk7XG5cdH0sXG5cdGlzX29iamVjdDogZnVuY3Rpb24oZSkge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBlID09PSAnb2JqZWN0J1xuXHRcdCYmICF0aGlzLmlzX2FycmF5KGUpXG5cdFx0JiYgZSAhPT0gbnVsbDtcblx0fSxcblx0LyoqXG5cdCAqIERlZXAgY29weSBvZiBhIG9iamVjdC5cblx0ICogQHBhcmFtIHtvYmplY3R9IG9iai5cblx0ICogQHJldHVybnMge29iamVjdH0uXG5cdCAqL1xuXHRjbG9uZTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzX29iamVjdChvYmopKSB7XG5cdFx0LyogVGhpcyBkb2VzIHRoZSBkZWVwIGNvcHkgdXNpbmcganF1ZXJ5IGZvciBvYmplY3RzICovXG5cdFx0cmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCBvYmopO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpe1xuXHRcdC8qIFRoaXMgZG9lcyB0aGUgZGVlcCBjb3B5IHVzaW5nIGpxdWVyeSBmb3Igb3RoZXIgdHlwZXMgKi9cblx0XHRsZXQgcmVzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpICs9IDEpIHtcblx0XHQgICAgbGV0IGVsID0gdGhpcy5jbG9uZShvYmpbaV0pO1xuXHRcdCAgICByZXMucHVzaChlbCk7XG5cdFx0fVxuXHRcdHJldHVybiByZXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXHRcdC8vIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpXG5cdFx0cmV0dXJuIG9iajtcblx0ICAgIH1cblx0fSwgICAgICBcblx0b2JqZWN0X3RvX2FycmF5OiBmdW5jdGlvbihvYmopIHtcblx0ICAgIGlmIChvYmogPT0gbnVsbCkgeyByZXR1cm4gW107IH1cblx0ICAgIGxldCBhcnJheSA9IFtdO1xuXHQgICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuXHRcdGFycmF5LnB1c2gob2JqW2tleV0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGFycmF5O1xuXHR9LFxuXHRjaGVja19hbmRfc2V0X2RlZmF1bHRfaW50ZXJ2YWxfdGltZTogZnVuY3Rpb24oc2V0X3N0YXR1cykge1xuXHQgICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIikgPT0gbnVsbFxuICAgICAgXHRcdHx8IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpID09IG51bGwpIHtcblx0XHRsZXQgZGVmYXVsdF9lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludCgoRGF0ZS5ub3coKSAtIDEwMDAgKiAzMCAqIDYwKSAvIDEwMDApO1xuXHRcdGxldCBkZWZhdWx0X2Vwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG5cdFx0bnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiZXBvY2hfYmVnaW5cIiwgZGVmYXVsdF9lcG9jaF9iZWdpbik7XG5cdFx0bnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiZXBvY2hfZW5kXCIsIGRlZmF1bHRfZXBvY2hfZW5kKTtcblx0ICAgIH1cblx0ICAgIGlmIChzZXRfc3RhdHVzID09IHRydWUpIHtcblx0XHRcblx0ICAgIH1cblx0fSxcblx0ZnJvbV91dGNfc190b19zZXJ2ZXJfZGF0ZTogZnVuY3Rpb24odXRjX3NlY29uZHMpIHtcblx0ICAgIGxldCB1dGMgPSB1dGNfc2Vjb25kcyAqIDEwMDA7XG5cdCAgICBsZXQgZF9sb2NhbCA9IG5ldyBEYXRlKHV0Yyk7XG5cdCAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZF9sb2NhbC5nZXRUaW1lem9uZU9mZnNldCgpO1xuXHQgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9taW51dGVzID0gIHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG5cdCAgICB2YXIgZF9zZXJ2ZXIgPSBuZXcgRGF0ZSh1dGMgKyBvZmZzZXRfbXMpO1xuXHQgICAgcmV0dXJuIGRfc2VydmVyO1xuXHR9LFxuXHRmcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQ6IGZ1bmN0aW9uKHV0Y19tcywgZm9ybWF0KSB7XG5cdCAgICBpZiAoZm9ybWF0ID09IG51bGwpIHsgZm9ybWF0ID0gXCJERC9NTU0vWVlZWSBISDptbVwiOyB9XG5cdCAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0ICAgIC8vIGxldCBlcG9jaF9iZWdpbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIik7XG5cdCAgICAvLyBsZXQgZXBvY2hfZW5kID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIik7XG5cdCAgICBsZXQgZXBvY2hfYmVnaW4gPSBzdGF0dXMuZXBvY2hfYmVnaW47XG5cdCAgICBsZXQgZXBvY2hfZW5kID0gc3RhdHVzLmVwb2NoX2VuZDtcblx0ICAgIGlmIChlcG9jaF9iZWdpbiAhPSBudWxsICYmIGVwb2NoX2VuZCAhPSBudWxsKSB7XG5cdFx0bGV0IGJlZ2luID0gTnVtYmVyLnBhcnNlSW50KGVwb2NoX2JlZ2luKTtcblx0XHRsZXQgZW5kID0gTnVtYmVyLnBhcnNlSW50KGVwb2NoX2VuZCk7XG5cdFx0aWYgKGVuZCAtIGJlZ2luIDw9IDMwMCApIHtcblx0XHQgICAgZm9ybWF0ID0gXCJERC9NTU0vWVlZWSBISDptbTpzc1wiO1xuXHRcdH1cblx0ICAgIH1cblx0ICAgIFxuXHQgICAgbGV0IG0gPSBtb21lbnQudHoodXRjX21zLCBudG9wX3pvbmVpbmZvKTtcblx0ICAgIGxldCBtX2xvY2FsID0gbW9tZW50KHV0Y19tcyk7XG5cdCAgICBsZXQgdHpfbG9jYWwgPSBtX2xvY2FsLmZvcm1hdChmb3JtYXQpO1xuXHQgICAgbGV0IHR6X3NlcnZlciA9IG0uZm9ybWF0KGZvcm1hdCk7XG5cdCAgICByZXR1cm4gdHpfc2VydmVyO1xuXHR9LFxuXHRjb3B5X29iamVjdF9rZXlzOiBmdW5jdGlvbihzb3VyY2Vfb2JqLCBkZXN0X29iaiwgcmVjdXJzaXZlX29iamVjdCA9IGZhbHNlKSB7XG5cdCAgICBpZiAoc291cmNlX29iaiA9PSBudWxsKSB7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgZm9yIChsZXQga2V5IGluIHNvdXJjZV9vYmopIHtcblx0ICAgIFx0aWYgKHNvdXJjZV9vYmpba2V5XSA9PSBudWxsKSB7IGNvbnRpbnVlOyB9XG5cdCAgICBcdGlmIChyZWN1cnNpdmVfb2JqZWN0ID09IHRydWUgJiYgdGhpcy5pc19vYmplY3Qoc291cmNlX29ialtrZXldKSAmJiB0aGlzLmlzX29iamVjdChkZXN0X29ialtrZXldKSkge1xuXHQgICAgXHQgICAgdGhpcy5jb3B5X29iamVjdF9rZXlzKHNvdXJjZV9vYmpba2V5XSwgZGVzdF9vYmpba2V5XSwgcmVjdXJzaXZlX29iamVjdCk7XG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdCAgICBkZXN0X29ialtrZXldID0gc291cmNlX29ialtrZXldO1xuXHQgICAgXHR9XG5cdCAgICB9XG5cdH0sXG5cdHNldF9odHRwX2dsb2JhbHNfaGVhZGVycyhoZWFkZXJzKSB7XG5cdCAgICBnbG9iYWxfaHR0cF9oZWFkZXJzID0gaGVhZGVycztcblx0fSxcblx0aHR0cF9yZXF1ZXN0OiBhc3luYyBmdW5jdGlvbih1cmwsIG9wdGlvbnMsIHRocm93X2V4Y2VwdGlvbiwgbm90X3Vud3JhcCkge1xuXHQgICAgdHJ5IHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7XG5cdFx0ICAgIG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnMuaGVhZGVycyA9PSBudWxsKSB7XG5cdFx0ICAgIG9wdGlvbnMuaGVhZGVycyA9IHt9O1xuXHRcdH1cblx0XHRpZiAob3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMuaGVhZGVycyAhPSBudWxsICYmIGdsb2JhbF9odHRwX2hlYWRlcnMgIT0gbnVsbCkge1xuXHRcdCAgICBvcHRpb25zLmhlYWRlcnMgPSB7XG5cdFx0XHQuLi5vcHRpb25zLmhlYWRlcnMsXG5cdFx0XHQuLi5nbG9iYWxfaHR0cF9oZWFkZXJzLFxuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRsZXQgcmVzID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKTtcblx0XHRpZiAocmVzLm9rID09IGZhbHNlKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoYGh0dHBfcmVxdWVzdCAke3VybH1cXG4gb2sgPT0gZmFsc2VgKTtcblx0XHQgICAgY29uc29sZS5lcnJvcihyZXMpO1xuXHRcdCAgICByZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0bGV0IGpzb25fcmVzID0gYXdhaXQgcmVzLmpzb24oKTtcblx0XHRpZiAobm90X3Vud3JhcCA9PSB0cnVlKSB7IHJldHVybiBqc29uX3JlczsgfVxuXHRcdHJldHVybiBqc29uX3Jlcy5yc3A7XG5cdCAgICB9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0aWYgKHRocm93X2V4Y2VwdGlvbiA9PSB0cnVlKSB7IHRocm93IGVycjsgfVxuXHRcdHJldHVybiBudWxsO1xuXHQgICAgfVxuXHR9LFxuXHRkb3dubG9hZF9VUkk6IGZ1bmN0aW9uKHVyaSwgbmFtZSkge1xuXHQgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblx0ICAgIGxpbmsuZG93bmxvYWQgPSBuYW1lO1xuXHQgICAgbGluay5ocmVmID0gdXJpO1xuXHQgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcblx0ICAgIGxpbmsuY2xpY2soKTtcblx0ICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG5cdH0sXG5cdGdldF9yYW5kb21fc3RyaW5nOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMiwgOCk7XG5cdH0sXG5cdHN0cmluZ19oYXNoX2NvZGU6IGZ1bmN0aW9uKHMpIHtcblx0ICAgIGxldCBoYXNoID0gMCwgaSwgY2hyO1xuXHQgICAgaWYgKHMubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2hyICAgPSBzLmNoYXJDb2RlQXQoaSk7XG5cdFx0aGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcblx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGhhc2g7XG5cdH0sXG5cdG1vZDogZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgeCA9IHggJSB5O1xuXHQgICAgaWYgKHggPCAwKSB7IHggKz0geTsgfVxuXHQgICAgcmV0dXJuIHg7XG5cdH1cbiAgICB9XG59KCk7XG5cbi8qKlxuKiBBbGxvd3MgdG8gbWFuYWdlIHRoZSBhcHBsaWNhdGlvbiBnbG9iYWwgc3RhdHVzLlxuKiBUaGUgc3RhdHVzIGlzIGluY2Fwc3VsYXRlZCBpbnRvIHRoZSB1cmwuXG4qL1xuZXhwb3J0IGNvbnN0IG50b3BuZ19zdGF0dXNfbWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBnbG9hYmFsX3N0YXR1cyA9IHt9O1xuICAgIC8qKiBAdHlwZSB7eyBbaWQ6IHN0cmluZ106IChzdGF0dXM6IG9iamVjdCkgPT4gdm9pZH19ICovXG4gICAgbGV0IHN1YnNjcmliZXJzID0ge307IC8vIGRpY3Rpb25hcnkgb2YgeyBbaWQ6IHN0cmluZ106IGZfb25fbnRvcG5nX3N0YXR1c19jaGFuZ2UoKSB9XG4gICAgY29uc3QgY2xvbmUgPSAoZSkgPT4gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZSk7XG5cbiAgICBjb25zdCByZWxwbGFjZV9nbG9iYWxfc3RhdHVzID0gZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgIGdsb2FiYWxfc3RhdHVzID0gc3RhdHVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIHRoZSBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzIHdpdGggaWQgZGlmZmVyZW50IGZyb20gc2tpcF9pZC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdHVzIG9iamVjdCB0aGF0IHJlcHJlc2VudCB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAqL1xuICAgIGNvbnN0IG5vdGlmeV9zdWJzY3JpYmVycyA9IGZ1bmN0aW9uKHN0YXR1cywgc2tpcF9pZCkge1xuICAgICAgICBmb3IgKGxldCBpZCBpbiBzdWJzY3JpYmVycykge1xuICAgICAgICAgICAgaWYgKGlkID09IHNraXBfaWQpIHsgY29udGludWU7IH1cbiAgICAgICAgICAgIGxldCBmX29uX2NoYW5nZSA9IHN1YnNjcmliZXJzW2lkXTtcbiAgICAgICAgICAgIGZfb25fY2hhbmdlKGNsb25lKHN0YXR1cykpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGdsb2JhbCBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRfc3RhdHVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZShnbG9hYmFsX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlX3N1YnNjcmliZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgbm90aWZ5X3N1YnNjcmliZXJzKHN0YXR1cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbG93cyB0byBzdWJzY3JpYmVycyBmX29uX2NoYW5nZSBjYWxsYmFjayBvbiBzdGF0dXMgY2hhbmdlIGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgYW4gaWRlbnRpZmllciBvZiB0aGUgc3Vic2NyaWJ0aW9uLiBcbiAgICAgICAgICogQHBhcmFtIHsoc3RhdHVzOm9iamVjdCkgPT4gdm9pZH0gZl9vbl9jaGFuZ2UgY2FsbGJhY2sgdGhhdCB0YWtlIG9iamVjdCBzdGF0dXMgYXMgcGFyYW0uXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0X2luaXRfbm90aWZ5IGlmIHRydWUgdGhlIGNhbGxiYWNrIGl0J3MgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIGxhc3Qgc3RhdHVzIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIG9uX3N0YXR1c19jaGFuZ2U6IGZ1bmN0aW9uKGlkLCBmX29uX2NoYW5nZSwgZ2V0X2luaXRfbm90aWZ5KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyc1tpZF0gPSBmX29uX2NoYW5nZTtcbiAgICAgICAgICAgIGlmIChnZXRfaW5pdF9ub3RpZnkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGxldCBzdGF0dXMgPSB0aGlzLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgICAgICBmX29uX2NoYW5nZShjbG9uZShzdGF0dXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmFwbGFjZXMgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cyBhbmQgbm90aWZpZXMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgICAgICAgKiBOb3RpZmllcyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0dXMgb2JqZWN0IHRoYXQgcmVwcmVzZW50IHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVwbGFjZV9zdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgc2tpcF9pZCkge1xuICAgICAgICAgICAgcmVscGxhY2VfZ2xvYmFsX3N0YXR1cyhzdGF0dXMpO1xuICAgICAgICAgICAgbm90aWZ5X3N1YnNjcmliZXJzKHN0YXR1cywgc2tpcF9pZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgb3IgcmVwbGFjZXMgYWxsIG9iaiBwYXJhbSBrZXlzIHRvIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIE5vdGlmaWVzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iaiBvYmplY3QgdG8gYWRkIG9yIGVkaXQgdG8gdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy4gXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkX29ial90b19zdGF0dXM6IGZ1bmN0aW9uKG9iaiwgc2tpcF9pZCkge1xuICAgICAgICAgICAgbGV0IG5ld19zdGF0dXMgPSB0aGlzLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMob2JqLCBuZXdfc3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV9zdGF0dXMobmV3X3N0YXR1cywgc2tpcF9pZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgb3IgcmVwbGFjZXMgdGhlIHZhbHVlIGtleSB0byB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAgICAgKiBOb3RpZmllcyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkga2V5IHRvIGFkZHMgb3IgcmVwbGFjZXMuXG4gICAgICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZSB2YWx1ZSB0byBhZGRzIG9yIHJlcGxhY2VzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRfdmFsdWVfdG9fc3RhdHVzOiBmdW5jdGlvbihrZXksIHZhbHVlLCBza2lwX2lkKSB7XG4gICAgICAgICAgICBsZXQgbmV3X3N0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgbmV3X3N0YXR1c1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAvLyAvKiBUaGlzIGlzIG5lZWRlZCB0byBoYXZlIG11bGlwbGUgZmlsdGVycyBmb3IgdGhlIHNhbWUga2V5ICovXG4gICAgICAgICAgICAvLyAobmV3X3N0YXR1c1trZXldICYmIG5ld19zdGF0dXNba2V5XS5zZWFyY2godmFsdWUpID09PSAtMSkgPyBuZXdfc3RhdHVzW2tleV0gKz0gXCIsXCIgKyB2YWx1ZSA6IG5ld19zdGF0dXNba2V5XSA9IHZhbHVlXG4gICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2Vfc3RhdHVzKG5ld19zdGF0dXMsIHNraXBfaWQpO1xuICAgICAgICB9LFxuICAgIH1cbn0oKTtcblxuY29uc3QgbnRvcG5nX3BhcmFtc191cmxfc2VyaWFsaXplciA9IHtcbiAgLy8gZmlsdGVyczogZnVuY3Rpb24oa2V5LCBmaWx0ZXJzKSB7XG4gIC8vIFx0aWYgKGZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm4gXCJcIjsgfVxuICAvLyBcdGxldCBmaWx0ZXJzX2dyb3VwcyA9IHt9O1xuICAvLyBcdGZpbHRlcnMuZm9yRWFjaCgoZikgPT4ge1xuICAvLyBcdCAgICBsZXQgZ3JvdXAgPSBmaWx0ZXJzX2dyb3Vwc1tmLmlkXTtcbiAgLy8gXHQgICAgaWYgKGdyb3VwID09IG51bGwpIHtcbiAgLy8gXHRcdGdyb3VwID0gW107XG4gIC8vIFx0XHRmaWx0ZXJzX2dyb3Vwc1tmLmlkXSA9IGdyb3VwO1xuICAvLyBcdCAgICB9XG4gIC8vIFx0ICAgIGdyb3VwLnB1c2goZik7XG4gIC8vIFx0fSk7XG4gIC8vIFx0bGV0IHVybF9wYXJhbXNfYXJyYXkgPSBbXTtcbiAgLy8gXHRmb3IgKGxldCBmX2lkIGluIGZpbHRlcnNfZ3JvdXBzKSB7XG4gIC8vIFx0ICAgIGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2ZfaWRdO1xuICAvLyBcdCAgICBsZXQgdXJsX3ZhbHVlcyA9IGdyb3VwLmZpbHRlcigoZikgPT4gZi52YWx1ZSAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gbnVsbCAmJiBmLm9wZXJhdG9yICE9IFwiXCIpLm1hcCgoZikgPT4gYCR7Zi52YWx1ZX07JHtmLm9wZXJhdG9yfWApLmpvaW4oXCIsXCIpO1xuICAvLyBcdCAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oZl9pZCwgdXJsX3ZhbHVlcyk7XG4gIC8vIFx0ICAgIHVybF9wYXJhbXNfYXJyYXkucHVzaCh1cmxfcGFyYW1zKTtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIHVybF9wYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG4gIC8vIH0sXG59O1xuXG5leHBvcnQgY29uc3QgbnRvcG5nX3VybF9tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgLyoqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IChvYmo6IGFueSkgPT4gc3RyaW5nfX0gKi9cbiAgICBsZXQgY3VzdG9tX3BhcmFtc19zZXJpYWxpemVyID0ge307XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhudG9wbmdfcGFyYW1zX3VybF9zZXJpYWxpemVyLCBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXIpO1xuICBcbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGdldF91cmxfcGFyYW1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX3NlYXJjaF9wYXJhbXM6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gdGhpcy5nZXRfdXJsX3BhcmFtcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCB1cmxfcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh1cmwpO1xuICAgICAgICAgICAgcmV0dXJuIHVybF9wYXJhbXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0X3VybF9lbnRyaWVzOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybF9wYXJhbXMgPSB0aGlzLmdldF91cmxfc2VhcmNoX3BhcmFtcyh1cmwpO1xuICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IHVybF9wYXJhbXMuZW50cmllcygpO1xuICAgICAgICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0X3VybF9lbnRyeTogZnVuY3Rpb24ocGFyYW1fbmFtZSwgdXJsKSB7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IHRoaXMuZ2V0X3VybF9lbnRyaWVzKHVybCk7XG4gICAgICAgICAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09IHBhcmFtX25hbWUpIHsgcmV0dXJuIHZhbHVlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX29iamVjdDogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IHRoaXMuZ2V0X3VybF9lbnRyaWVzKHVybCk7XG4gICAgICAgICAgICBsZXQgb2JqID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVsb2FkX3VybDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH0sXG5cblx0Z29fdG9fdXJsOiBmdW5jdGlvbih1cmwpIHtcblx0ICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHdpbmRvdy5sb2NhdGlvbik7XG5cdCAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh1cmwpO1xuXHR9LFxuXG4gICAgICAgIHJlcGxhY2VfdXJsOiBmdW5jdGlvbih1cmxfcGFyYW1zKSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIG51bGwsIGA/JHt1cmxfcGFyYW1zfWApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcGxhY2VfdXJsX2FuZF9yZWxvYWQ6IGZ1bmN0aW9uKHVybF9wYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwodXJsX3BhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZF91cmwoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXJpYWxpemVfcGFyYW06IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGAke2tleX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWA7XG4gICAgICAgIH0sXHRcblxuICAgICAgICBzZXRfY3VzdG9tX2tleV9zZXJpYWxpemVyOiBmdW5jdGlvbihrZXksIGZfZ2V0X3VybF9wYXJhbSkge1xuICAgICAgICAgICAgY3VzdG9tX3BhcmFtc19zZXJpYWxpemVyW2tleV0gPSBmX2dldF91cmxfcGFyYW07XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnQganMgb2JqZWN0IGludG8gYSBzdHJpbmcgdGhhdCByZXByZXNlbnQgdXJsIHBhcmFtcy5cbiAgICAgICAgICogVXNlcyBjdXN0b20gc2VyaWFsaXplciBpZiBzZXQuXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmouXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9LlxuICAgICAgICAgKi9cbiAgICAgICAgb2JqX3RvX3VybF9wYXJhbXM6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgbGV0IHBhcmFtcyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdF9zZXJpYWxpemVyID0gdGhpcy5zZXJpYWxpemVfcGFyYW07XG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcmlhbGl6ZXIgPSBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXJba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoc2VyaWFsaXplciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZXIgPSBkZWZhdWx0X3NlcmlhbGl6ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwYXJhbSA9IHNlcmlhbGl6ZXIoa2V5LCBvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHVybF9wYXJhbXMgPSBwYXJhbXMuam9pbihcIiZcIik7XG4gICAgICAgICAgICByZXR1cm4gdXJsX3BhcmFtcztcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVfcGFyYW1zOiBmdW5jdGlvbihwYXJhbXNfa2V5KSB7XG4gICAgICAgICAgICBsZXQgc2VhcmNoX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKCk7XG4gICAgICAgICAgICBwYXJhbXNfa2V5LmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICAgICAgICBzZWFyY2hfcGFyYW1zLmRlbGV0ZShwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybChzZWFyY2hfcGFyYW1zLnRvU3RyaW5nKCkpO1x0ICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIHNldF9rZXlfdG9fdXJsOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyB2YWx1ZSA9IFwiXCI7IH1cdCAgXG4gICAgICAgICAgICBsZXQgc2VhcmNoX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKCk7XG4gICAgICAgICAgICBzZWFyY2hfcGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwoc2VhcmNoX3BhcmFtcy50b1N0cmluZygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRfb2JqX3RvX3VybDogZnVuY3Rpb24odXJsX3BhcmFtc19vYmosIHVybCkge1xuICAgICAgICAgICAgbGV0IG5ld191cmxfcGFyYW1zID0gdGhpcy5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcGFyYW1zX29iaik7XG4gICAgICAgICAgICBsZXQgc2VhcmNoX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKHVybCk7XG4gICAgICAgICAgICBsZXQgbmV3X2VudHJpZXMgPSB0aGlzLmdldF91cmxfZW50cmllcyhuZXdfdXJsX3BhcmFtcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBuZXdfZW50cmllcykge1xuICAgICAgICBcdHNlYXJjaF9wYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5ld191cmwgPSBzZWFyY2hfcGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAodXJsICE9IG51bGwpIHsgcmV0dXJuIG5ld191cmw7IH1cbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwobmV3X3VybCk7XG4gICAgICAgIH0sXG4gICAgfVxufSgpO1xuXG4vLyBleHBvcnQgY29uc3QgbnRvcG5nX3BhcmFtc19tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgY29uc3QgbmV3ID0gZnVuY3Rpb24ocGFyYW1zX2luX3VybCkge1xuLy8gICAgIH1cbi8vICAgICByZXR1cm4ge1xuLy8gICAgIH1cbi8vIH1cblxuLyoqXG4qIE9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mIHByZWZlZGVmaW5lZCBldmVudHMgdGhhdCByZXByZXNlbnQgdGhlIHN0YXR1cy5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX2V2ZW50cyA9IHtcbiAgRVBPQ0hfQ0hBTkdFOiBcImVwb2NoX2NoYW5nZVwiLCAvLyB7IGVwb2NoX2JlZ2luOiBudW1iZXIsIGVwb2NoX2VuZDogbnVtYmVyIH1cbiAgRklMVEVSU19DSEFOR0U6IFwiZmlsdGVyc19jaGFuZ2VcIiwgLy8ge2ZpbHRlcnM6IHtpZDogc3RyaW5nLCBvcGVyYXRvcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfVtdIH1cbn07XG5cbmNvbnN0IG50b3BuZ19ldmVudHNfY29tcGFyZSA9IHtcbiAgRVBPQ0hfQ0hBTkdFOiBmdW5jdGlvbihuZXdfc3RhdHVzLCBvbGRfc3RhdHVzKSB7XG5yZXR1cm4gbmV3X3N0YXR1cy5lcG9jaF9iZWdpbiAhPSBvbGRfc3RhdHVzLmVwb2NoX2JlZ2luXG4gICAgfHwgbmV3X3N0YXR1cy5lcG9jaF9lbmQgIT0gb2xkX3N0YXR1cy5lcG9jaF9lbmQ7XG4gIH0sXG4gIEZJTFRFUlNfQ0hBTkdFOiBmdW5jdGlvbihuZXdfc3RhdHVzLCBvbGRfc3RhdHVzKSB7XHRcbnJldHVybiAobmV3X3N0YXR1cy5maWx0ZXJzID09IG51bGwgJiYgb2xkX3N0YXR1cy5maWx0ZXJzICE9IG51bGwpXG4gICAgfHwgKG5ld19zdGF0dXMuZmlsdGVycyAhPSBudWxsICYmIG9sZF9zdGF0dXMuZmlsdGVycyA9PSBudWxsKVxuICAgIHx8IChuZXdfc3RhdHVzLmZpbHRlcnMgIT0gbnVsbCAmJiBvbGRfc3RhdHVzLmZpbHRlcnMgIT0gbnVsbCAmJlxuICAoXG4gICAgICAobmV3X3N0YXR1cy5maWx0ZXJzLmxlbmd0aCAhPSBvbGRfc3RhdHVzLmZpbHRlcnMubGVuZ3RoKVxuICAgIHx8IChuZXdfc3RhdHVzLmZpbHRlcnMuc29tZSgoZl9uZXcpID0+IG9sZF9zdGF0dXMuZmlsdGVycy5maW5kKChmX29sZCkgPT4gZl9vbGQuaWQgPT0gZl9uZXcuaWQpID09IG51bGwpKVxuICApXG4gICAgICAgKTtcbiAgfSxcbn07XG5cbi8qKlxuKiBPYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbGlzdCBvZiBwcmVmZWRlZmluZWQgY3VzdG9tIGV2ZW50cy5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX2N1c3RvbV9ldmVudHMgPSB7XG4gIFNIT1dfTU9EQUxfRklMVEVSUzogXCJzaG93X21vZGFsX2ZpbHRlcnNcIiwgLy8ge2lkOiBzdHJpbmcsIG9wZXJhdG9yOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9XG4gIE1PREFMX0ZJTFRFUlNfQVBQTFk6IFwibW9kYWxfZmlsdGVyc19hcHBseVwiLCAvLyB7aWQ6IHN0cmluZywgbGFiZWw6IHN0cmluZywgb3BlcmF0b3I6IHN0cmluZywgdmFsdWU6IHN0cmluZywgdmFsdWVfbGFiZWw6IHN0cmluZ31cbiAgU0hPV19HTE9CQUxfQUxFUlRfSU5GTzogXCJzaG93X2dsb2JhbF9hbGVydF9pbmZvXCIsIC8vIGh0bWxfdGV4dDogc3RyaW5nXG4gIFZJU19EQVRBX0xPQURFRDogXCJ2aXNfZGF0YV9sb2FkZWRcIiwgXG4gIENIQU5HRV9QQUdFX1RJVExFOiBcImNoYW5nZV9wYWdlX3RpdGxlXCIsIFxuICAgIERBVEFUQUJMRV9MT0FERUQ6IFwiZGF0YXRhYmxlX2xvYWRlZFwiLFxuICAgIEdFVF9JTlRFUkZBQ0VfRkFUQTogXCJnZXRfaW50ZXJmYWNlX2RhdGFcIiwgLy8gb2JqZWN0IHJldHVybmVkIGJ5IC9sdWEvcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2RhdGEubHVhXG59O1xuXG5cbi8qKlxuKiBBIGdsb2JhbCBldmVudHMgc2VydmljZSB0aGF0IGFsbG93cyB0byBtYW5hZ2UgdGhlIGFwcGxpY2F0aW9uIGdsb2JhbCBzdGF0dXMuXG4qIFRoZSBzdGF0dXMgaXMgaW5jYXBzdWxhdGVkIGludG8gdGhlIHVybC5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX2V2ZW50c19tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGV2ZW50c19tYW5hZ2VyX2lkID0gXCJldmVudHNfbWFuYWdlclwiO1xuICBsZXQgc3RhdHVzID0ge307XG5cbiAgLyoqIEB0eXBlIHt7IFtldmVudF9uYW1lOiBzdHJpbmddOiB7IFtpZDogc3RyaW5nXTogKHN0YXR1czogb2JqZWN0KSA9PiB2b2lkfX19ICovXG4gIGxldCBldmVudHNfc3Vic2NyaWJlcnMgPSB7fTsgLy8gZGljdGlvbmFyeSBvZiB7IFtldmVudF9uYW1lOiBzdHJpbmddOiB7IFtpZDogc3RyaW5nXTogZl9vbl9ldmVudCB9XG5cbiAgICBjb25zdCBjbG9uZSA9IChlKSA9PiBudG9wbmdfdXRpbGl0eS5jbG9uZShlKTtcblxuICAvKipcbiAgICogTm90aWZpZXMgdGhlIHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMgd2l0aCBpZCBkaWZmZXJlbnQgZnJvbSBza2lwX2lkLlxuICAgKiBAcGFyYW0ge3sgW2lkOiBzdHJpbmddOiAoc3RhdHVzOiBvYmplY3QpID0+IHZvaWR9fSBzdWJzY3JpYmVycyBkaWN0aW9uYXJ5IG9mIGlkID0+IGZfb25fZXZlbnQoKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0YXR1cyBvYmplY3QgdGhhdCByZXByZXNlbnQgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAqL1xuICBjb25zdCBub3RpZnlfc3Vic2NyaWJlcnMgPSBmdW5jdGlvbihzdWJzY3JpYmVycywgc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgICBmb3IgKGxldCBpZCBpbiBzdWJzY3JpYmVycykge1xuICAgICAgICAgIGlmIChpZCA9PSBza2lwX2lkKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgbGV0IGZfb25fY2hhbmdlID0gc3Vic2NyaWJlcnNbaWRdO1xuICAgICAgICAgIGZfb25fY2hhbmdlKGNsb25lKHN0YXR1cykpO1xuICAgICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIHRoYXQgZGlzcGF0Y2hlcyBlYWNoIGV2ZW50IHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld19zdGF0dXMgXG4gICAqL1xuICBjb25zdCBvbl9zdGF0dXNfY2hhbmdlID0gZnVuY3Rpb24obmV3X3N0YXR1cykge1xuZm9yIChsZXQgZXZlbnRfbmFtZSBpbiBudG9wbmdfZXZlbnRzKSB7XG4gICAgbGV0IGZfY29tcGFyZSA9IG50b3BuZ19ldmVudHNfY29tcGFyZVtldmVudF9uYW1lXTtcbiAgICBpZiAoZl9jb21wYXJlKG5ld19zdGF0dXMsIHN0YXR1cykgPT0gdHJ1ZSkge1xuICBsZXQgc3Vic2NyaWJlcnMgPSBldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRfbmFtZV07XG4gIG5vdGlmeV9zdWJzY3JpYmVycyhzdWJzY3JpYmVycywgbmV3X3N0YXR1cyk7XG4gICAgfVxufVxuXG4gICAgICBzdGF0dXMgPSBuZXdfc3RhdHVzO1xuICB9O1xuXG4gIG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKGV2ZW50c19tYW5hZ2VyX2lkLCBvbl9zdGF0dXNfY2hhbmdlLCB0cnVlKTtcblxuICBjb25zdCBlbWl0ID0gZnVuY3Rpb24oZXZlbnQsIHBhcmFtcywgc2tpcF9pZCkge1xubGV0IHN1YnNjcmliZXJzID0gZXZlbnRzX3N1YnNjcmliZXJzW2V2ZW50XTtcbmlmIChzdWJzY3JpYmVycyA9PSBudWxsKSB7IHJldHVybjsgfVxubm90aWZ5X3N1YnNjcmliZXJzKHN1YnNjcmliZXJzLCBwYXJhbXMsIHNraXBfaWQpO1xuICB9O1xuXG4gIGNvbnN0IG9uX2V2ZW50ID0gZnVuY3Rpb24oaWQsIGV2ZW50LCBmX29uX2V2ZW50LCBnZXRfaW5pdF9ub3RpZnkpIHtcbiAgICAgIGlmIChldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRdID09IG51bGwpIHtcbiAgICAgICAgICBldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRdID0ge307ICAgICAgICBcbiAgICAgIH1cbiAgICAgIGlmIChnZXRfaW5pdF9ub3RpZnkgPT0gdHJ1ZSkge1xuICAgICAgICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpOyAgICAgICAgXG4gICAgICAgICAgZl9vbl9ldmVudChjbG9uZShzdGF0dXMpKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF1baWRdID0gZl9vbl9ldmVudDtcbiAgfTtcblxuICByZXR1cm4ge1xuZW1pdF9jdXN0b21fZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMpIHtcbiAgICBlbWl0KGV2ZW50LCBwYXJhbXMpO1xufSxcbm9uX2N1c3RvbV9ldmVudDogZnVuY3Rpb24oaWQsIGV2ZW50LCBmX29uX2V2ZW50KSB7XG4gICAgb25fZXZlbnQoaWQsIGV2ZW50LCBmX29uX2V2ZW50KTtcbn0sXG4gICAgICAvKipcbiAgICAgICAqIENoYW5nZXMgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cyBhbmQgZW1pdHMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YmNyaWJlcnMgcmVnaXN0ZXJlZCB0byB0aGUgZXZlbnQuIFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IGV2ZW50IG5hbWUuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV3X3N0YXR1cyBvYmplY3QgdG8gYWRkIG9yIGVkaXQgdG8gdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAgICovXG4gICAgICBlbWl0X2V2ZW50OiBmdW5jdGlvbihldmVudCwgbmV3X3N0YXR1cywgc2tpcF9pZCkge1xuICAgIGVtaXQoZXZlbnQsIG5ld19zdGF0dXMsIHNraXBfaWQpXG4gICAgICAgICAgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmFkZF9vYmpfdG9fc3RhdHVzKG5ld19zdGF0dXMsIGV2ZW50c19tYW5hZ2VyX2lkKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIEFsbG93cyB0byBzdWJzY3JpYmVycyBmX29uX2V2ZW50IGNhbGxiYWNrIG9uIHN0YXR1cyBjaGFuZ2Ugb24gZXZlbnQgZXZlbnRfbmFtZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBhbiBpZGVudGlmaWVyIG9mIHRoZSBzdWJzY3JpYnRpb24uIFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IGV2ZW50IG5hbWUuIFxuICAgICAgICogQHBhcmFtIHsoc3RhdHVzOm9iamVjdCkgPT4gdm9pZH0gZl9vbl9ldmVudCBjYWxsYmFjayB0aGF0IHRha2Ugb2JqZWN0IHN0YXR1cyBhcyBwYXJhbS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0X2luaXRfbm90aWZ5IGlmIHRydWUgdGhlIGNhbGxiYWNrIGl0J3MgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIGxhc3Qgc3RhdHVzIGF2YWlsYWJsZS5cbiAgICAgICAqL1xuICAgICAgb25fZXZlbnRfY2hhbmdlOiBmdW5jdGlvbihpZCwgZXZlbnQsIGZfb25fZXZlbnQsIGdldF9pbml0X25vdGlmeSkge1xuICAgIG9uX2V2ZW50KGlkLCBldmVudCwgZl9vbl9ldmVudCwgZ2V0X2luaXRfbm90aWZ5KTtcbiAgICAgIH0sXG4gIH0gICAgXG59KCk7XG4iLCIvLyBodHRwOi8vanNmaWRkbGUubmV0L3N0ZXBoZW5ib2FrL2hZdVBiL1xuXG4vLyBXcmFwcGVyIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gZG9fcGllKG5hbWUsIHVwZGF0ZV91cmwsIHVybF9wYXJhbXMsIHVuaXRzLCByZWZyZXNoKSB7XG5cdHZhciBwaWUgPSBuZXcgUGllQ2hhcnQobmFtZSwgdXBkYXRlX3VybCwgdXJsX3BhcmFtcywgdW5pdHMsIHJlZnJlc2gpO1xuXHRpZiAocmVmcmVzaClcblx0XHRwaWUuc2V0SW50ZXJ2YWwoc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyBwaWUudXBkYXRlKCk7IH0sIHJlZnJlc2gpKTtcblxuXHQvLyBSZXR1cm4gbmV3IGNsYXNzIGluc3RhbmNlLCB3aXRoXG5cdHJldHVybiBwaWU7XG59XG5cbmZ1bmN0aW9uIFBpZUNoYXJ0KG5hbWUsIHVwZGF0ZV91cmwsIHVybF9wYXJhbXMsIHVuaXRzLCByZWZyZXNoKSB7XG5cblx0Ly8gQWRkIG9iamVjdCBwcm9wZXJ0aWVzIGxpa2UgdGhpc1xuXHR0aGlzLm5hbWUgPSBuYW1lO1xuXHR0aGlzLnVwZGF0ZV91cmwgPSB1cGRhdGVfdXJsO1xuXHR0aGlzLnVybF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuXHR0aGlzLnVuaXRzID0gdW5pdHM7XG5cdHRoaXMucmVmcmVzaCA9IHJlZnJlc2g7XG5cdHRoaXMucGllSW50ZXJ2YWw7XG5cbiAgbGV0IHN0cmVha2VyRGF0YUFkZGVkID0gW11cbiAgbGV0IHBhdGhzID0gXCJcIlxuICBsZXQgbGluZXMgPSBbXVxuICBsZXQgdmFsdWVMYWJlbHMgPSBbXVxuICBsZXQgbmFtZUxhYmVscyA9IFtdXG5cblx0dmFyIHBpZURhdGEgPSBbXTtcblx0dmFyIG9sZFBpZURhdGEgPSBbXTtcblx0dmFyIGZpbHRlcmVkUGllRGF0YSA9IFtdO1xuXHR2YXIgcnNwID0gY3JlYXRlX3BpZV9jaGFydChuYW1lLCB1bml0cyk7XG5cdHZhciBhcmNfZ3JvdXAgPSByc3BbMF07XG5cdHZhciBkb251dCA9IHJzcFsxXTtcblx0dmFyIHRvdGFsVmFsdWUgPSByc3BbMl07XG5cdHZhciB0b3RhbFVuaXRzID0gcnNwWzNdO1xuXHR2YXIgY29sb3IgPSByc3BbNF07XG5cdHZhciB0d2VlbkR1cmF0aW9uID0gcnNwWzVdO1xuXHR2YXIgYXJjID0gcnNwWzZdO1xuXHR2YXIgbGFiZWxfZ3JvdXAgPSByc3BbN107XG5cdHZhciBjZW50ZXJfZ3JvdXAgPSByc3BbOF07XG5cdHZhciByID0gcnNwWzldO1xuXHR2YXIgdGV4dE9mZnNldCA9IHJzcFsxMF07XG5cblxuXHQvLyB0byBydW4gZWFjaCB0aW1lIGRhdGEgaXMgZ2VuZXJhdGVkXG5cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gY29uc29sZS5sb2codGhpcy5uYW1lKTtcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLnVybF9wYXJhbXMpO1xuXHRcdCQuYWpheCh7XG5cdFx0XHR0eXBlOiAnR0VUJyxcblx0XHRcdHVybDogdGhpcy51cGRhdGVfdXJsLFxuXHRcdFx0ZGF0YTogdGhpcy51cmxfcGFyYW1zLFxuXHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKGNvbnRlbnQpIHtcblx0XHRcdFx0bGV0IHBhcnNlZF9jb250ZW50O1xuXG5cdFx0XHRcdGlmICh0eXBlb2YgKGNvbnRlbnQpID09IFwib2JqZWN0XCIpXG5cdFx0XHRcdFx0cGFyc2VkX2NvbnRlbnQgPSBjb250ZW50O1xuXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgKGNvbnRlbnQpID09IFwic3RyaW5nXCIpXG5cdFx0XHRcdFx0cGFyc2VkX2NvbnRlbnQgPSBqUXVlcnkucGFyc2VKU09OKGNvbnRlbnQpO1xuXG5cdFx0XHRcdGlmIChwYXJzZWRfY29udGVudClcblx0XHRcdFx0XHR1cGRhdGVfcGllX2NoYXJ0KHBhcnNlZF9jb250ZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIFNUUkVBS0VSIENPTk5FQ1RJT04gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly8gTmVlZGVkIHRvIGRyYXcgdGhlIHBpZSBpbW1lZGlhdGVseVxuXHR0aGlzLnVwZGF0ZSgpO1xuXHR0aGlzLnVwZGF0ZSgpO1xuXG5cdC8vIHZhciB1cGRhdGVJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh1cGRhdGUsIHJlZnJlc2gpO1xuXG5cdGZ1bmN0aW9uIGNvbXBhcmVfYnlfbGFiZWwoYSwgYikge1xuXHRcdGlmIChhLmxhYmVsIDwgYi5sYWJlbCkge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH0gZWxzZSBpZiAoYS5sYWJlbCA+IGIubGFiZWwpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVfcGllX2NoYXJ0KGRhdGEpIHtcblx0XHRpZiAoZGF0YS5yc3ApIC8vIGRldGVjdCBSRVNUIEFQSSB2MVxuXHRcdFx0ZGF0YSA9IGRhdGEucnNwO1xuXG5cdFx0ZGF0YS5zb3J0KGNvbXBhcmVfYnlfbGFiZWwpO1xuXHRcdHN0cmVha2VyRGF0YUFkZGVkID0gZGF0YTtcblx0XHRvbGRQaWVEYXRhID0gZmlsdGVyZWRQaWVEYXRhO1xuXHRcdHBpZURhdGEgPSBkb251dChzdHJlYWtlckRhdGFBZGRlZCk7XG5cblx0XHR2YXIgdG90YWxPY3RldHMgPSAwO1xuXHRcdGZpbHRlcmVkUGllRGF0YSA9IHBpZURhdGEuZmlsdGVyKGZpbHRlckRhdGEpO1xuXHRcdGZ1bmN0aW9uIGZpbHRlckRhdGEoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG5cdFx0XHRlbGVtZW50Lm5hbWUgPSBzdHJlYWtlckRhdGFBZGRlZFtpbmRleF0ubGFiZWw7XG5cdFx0XHRlbGVtZW50LnZhbHVlID0gc3RyZWFrZXJEYXRhQWRkZWRbaW5kZXhdLnZhbHVlO1xuXHRcdFx0ZWxlbWVudC51cmwgPSBzdHJlYWtlckRhdGFBZGRlZFtpbmRleF0udXJsO1xuXHRcdFx0dG90YWxPY3RldHMgKz0gZWxlbWVudC52YWx1ZTtcblx0XHRcdHJldHVybiAoZWxlbWVudC52YWx1ZSA+IDApO1xuXHRcdH1cblxuXHRcdGlmICgoZmlsdGVyZWRQaWVEYXRhLmxlbmd0aCA+IDApICYmIChvbGRQaWVEYXRhLmxlbmd0aCA+IDApKSB7XG5cdFx0XHQvL1JFTU9WRSBQTEFDRUhPTERFUiBDSVJDTEVcblx0XHRcdGFyY19ncm91cC5zZWxlY3RBbGwoXCJjaXJjbGVcIikucmVtb3ZlKCk7XG5cblx0XHRcdGlmICh0b3RhbFZhbHVlKSB7XG5cdFx0XHRcdHRvdGFsVmFsdWUudGV4dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dmFyIGtiID0gdG90YWxPY3RldHMgLyAxMDI0O1xuXHRcdFx0XHRcdHJldHVybiBrYi50b0ZpeGVkKDEpO1xuXHRcdFx0XHRcdC8vcmV0dXJuIGJjaGFydC5sYWJlbC5hYmJyZXZpYXRlZCh0b3RhbE9jdGV0cyo4KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vRFJBVyBBUkMgUEFUSFNcblx0XHRcdHBhdGhzID0gYXJjX2dyb3VwLnNlbGVjdEFsbChcInBhdGhcIikuZGF0YShmaWx0ZXJlZFBpZURhdGEpO1xuXHRcdFx0cGF0aHMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6cGF0aFwiKVxuXHRcdFx0XHQuYXR0cihcInN0cm9rZVwiLCBcIndoaXRlXCIpXG5cdFx0XHRcdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDAuNSlcblx0XHRcdFx0LmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uIChkLCBpKSB7IHJldHVybiBjb2xvcihpKTsgfSlcblx0XHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHJUd2VlbihcImRcIiwgcGllVHdlZW4pO1xuXHRcdFx0cGF0aHNcblx0XHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHJUd2VlbihcImRcIiwgcGllVHdlZW4pO1xuXHRcdFx0cGF0aHMuZXhpdCgpXG5cdFx0XHRcdC50cmFuc2l0aW9uKClcblx0XHRcdFx0LmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pXG5cdFx0XHRcdC5hdHRyVHdlZW4oXCJkXCIsIHJlbW92ZVBpZVR3ZWVuKVxuXHRcdFx0XHQucmVtb3ZlKCk7XG5cblx0XHRcdC8vRFJBVyBUSUNLIE1BUksgTElORVMgRk9SIExBQkVMU1xuXHRcdFx0bGluZXMgPSBsYWJlbF9ncm91cC5zZWxlY3RBbGwoXCJsaW5lXCIpLmRhdGEoZmlsdGVyZWRQaWVEYXRhKTtcblx0XHRcdGxpbmVzLmVudGVyKCkuYXBwZW5kKFwic3ZnOmxpbmVcIilcblx0XHRcdFx0LmF0dHIoXCJ4MVwiLCAwKVxuXHRcdFx0XHQuYXR0cihcIngyXCIsIDApXG5cdFx0XHRcdC5hdHRyKFwieTFcIiwgLXIgLSAzKVxuXHRcdFx0XHQuYXR0cihcInkyXCIsIC1yIC0gOClcblx0XHRcdFx0LmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG5cdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwicm90YXRlKFwiICsgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiAqICgxODAgLyBNYXRoLlBJKSArIFwiKVwiO1xuXHRcdFx0XHR9KTtcblx0XHRcdGxpbmVzLnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJyb3RhdGUoXCIgKyAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyICogKDE4MCAvIE1hdGguUEkpICsgXCIpXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0bGluZXMuZXhpdCgpLnJlbW92ZSgpO1xuXG5cdFx0XHQvL0RSQVcgTEFCRUxTIFdJVEggUEVSQ0VOVEFHRSBWQUxVRVNcblx0XHRcdHZhbHVlTGFiZWxzID0gbGFiZWxfZ3JvdXAuc2VsZWN0QWxsKFwidGV4dC52YWx1ZVwiKS5kYXRhKGZpbHRlcmVkUGllRGF0YSlcblx0XHRcdFx0LmF0dHIoXCJkeVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyID4gTWF0aC5QSSAvIDIgJiYgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkgKiAxLjUpIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLTc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJiZWdpbm5pbmdcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiZW5kXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQudGV4dChmdW5jdGlvbiAoZCkge1xuXG5cdFx0XHRcdFx0Y29uc3QgcGVyY2VudGFnZSA9IChkLnZhbHVlIC8gdG90YWxPY3RldHMpICogMTAwO1xuXHRcdFx0XHRcdC8vIGFwcHJvc3NpbWF0ZSB0aGUgbnVtYmVyIHRvIHRoZSB0aGlyZCBkZWNpYW1sIGRpZ2l0IGFuZCBzaG93IG9ubHkgdGhlIGZpcnN0IGRlY2ltYWxcblx0XHRcdFx0XHRsZXQgcGVyY2VudGFnZUxhYmVsID0gcGVyY2VudGFnZS50b0ZpeGVkKDEpICsgXCIlXCI7XG5cdFx0XHRcdFx0cmV0dXJuIHBlcmNlbnRhZ2VMYWJlbDtcblx0XHRcdFx0fSk7XG5cblx0XHRcdHZhbHVlTGFiZWxzLmVudGVyKCkuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInZhbHVlXCIpXG5cdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgTWF0aC5jb3MoKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSkgKiAociArIHRleHRPZmZzZXQpICsgXCIsXCIgKyBNYXRoLnNpbigoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMikgKiAociArIHRleHRPZmZzZXQpICsgXCIpXCI7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA+IE1hdGguUEkgLyAyICYmIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJICogMS41KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gNTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC03O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiYmVnaW5uaW5nXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImVuZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkudGV4dChmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICh0b3RhbE9jdGV0cyA8PSAxKSByZXR1cm4gXCJcIjtcblx0XHRcdFx0XHRjb25zdCBwZXJjZW50YWdlID0gKGQudmFsdWUgLyB0b3RhbE9jdGV0cykgKiAxMDA7XG5cdFx0XHRcdFx0bGV0IHBlcmNlbnRhZ2VMYWJlbCA9IHBlcmNlbnRhZ2UudG9GaXhlZCgxKSArIFwiJVwiO1xuXHRcdFx0XHRcdHJldHVybiBwZXJjZW50YWdlTGFiZWw7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR2YWx1ZUxhYmVscy50cmFuc2l0aW9uKCkuZHVyYXRpb24odHdlZW5EdXJhdGlvbikuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIHRleHRUd2Vlbik7XG5cdFx0XHR2YWx1ZUxhYmVscy5leGl0KCkucmVtb3ZlKCk7XG5cblx0XHRcdC8vRFJBVyBMQUJFTFMgV0lUSCBFTlRJVFkgTkFNRVNcblx0XHRcdG5hbWVMYWJlbHMgPSBsYWJlbF9ncm91cC5zZWxlY3RBbGwoXCJ0ZXh0LnVuaXRzXCIpLmRhdGEoZmlsdGVyZWRQaWVEYXRhKVxuXHRcdFx0XHQuYXR0cihcImR5XCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPiBNYXRoLlBJIC8gMiAmJiAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSAqIDEuNSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE3O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gNTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImJlZ2lubmluZ1wiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJlbmRcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLnRleHQoZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZC5uYW1lO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZCkgeyBpZiAoZC51cmwpIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZC51cmw7IH0pO1xuXG5cdFx0XHRuYW1lTGFiZWxzLmVudGVyKCkuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInVuaXRzXCIpXG5cdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgTWF0aC5jb3MoKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSkgKiAociArIHRleHRPZmZzZXQpICsgXCIsXCIgKyBNYXRoLnNpbigoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMikgKiAociArIHRleHRPZmZzZXQpICsgXCIpXCI7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA+IE1hdGguUEkgLyAyICYmIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJICogMS41KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMTc7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiYmVnaW5uaW5nXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImVuZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkudGV4dChmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBkLm5hbWU7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChkKSB7IGlmIChkLnVybCkgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkLnVybDsgfSk7XG5cblx0XHRcdG5hbWVMYWJlbHMudHJhbnNpdGlvbigpLmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCB0ZXh0VHdlZW4pO1xuXG5cdFx0XHRuYW1lTGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblx0XHR9XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBGVU5DVElPTlMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vIEludGVycG9sYXRlIHRoZSBhcmNzIGluIGRhdGEgc3BhY2UuXG5cdGZ1bmN0aW9uIHBpZVR3ZWVuKGQsIGkpIHtcblx0XHR2YXIgczA7XG5cdFx0dmFyIGUwO1xuXHRcdGlmIChvbGRQaWVEYXRhW2ldKSB7XG5cdFx0XHRzMCA9IG9sZFBpZURhdGFbaV0uc3RhcnRBbmdsZTtcblx0XHRcdGUwID0gb2xkUGllRGF0YVtpXS5lbmRBbmdsZTtcblx0XHR9IGVsc2UgaWYgKCEob2xkUGllRGF0YVtpXSkgJiYgb2xkUGllRGF0YVtpIC0gMV0pIHtcblx0XHRcdHMwID0gb2xkUGllRGF0YVtpIC0gMV0uZW5kQW5nbGU7XG5cdFx0XHRlMCA9IG9sZFBpZURhdGFbaSAtIDFdLmVuZEFuZ2xlO1xuXHRcdH0gZWxzZSBpZiAoIShvbGRQaWVEYXRhW2kgLSAxXSkgJiYgb2xkUGllRGF0YS5sZW5ndGggPiAwKSB7XG5cdFx0XHRzMCA9IG9sZFBpZURhdGFbb2xkUGllRGF0YS5sZW5ndGggLSAxXS5lbmRBbmdsZTtcblx0XHRcdGUwID0gb2xkUGllRGF0YVtvbGRQaWVEYXRhLmxlbmd0aCAtIDFdLmVuZEFuZ2xlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzMCA9IDA7XG5cdFx0XHRlMCA9IDA7XG5cdFx0fVxuXHRcdHZhciBpID0gZDMuaW50ZXJwb2xhdGUoeyBzdGFydEFuZ2xlOiBzMCwgZW5kQW5nbGU6IGUwIH0sIHsgc3RhcnRBbmdsZTogZC5zdGFydEFuZ2xlLCBlbmRBbmdsZTogZC5lbmRBbmdsZSB9KTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHQpIHtcblx0XHRcdHZhciBiID0gaSh0KTtcblx0XHRcdHJldHVybiBhcmMoYik7XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlbW92ZVBpZVR3ZWVuKGQsIGkpIHtcblx0XHRzMCA9IDIgKiBNYXRoLlBJO1xuXHRcdGUwID0gMiAqIE1hdGguUEk7XG5cdFx0dmFyIGkgPSBkMy5pbnRlcnBvbGF0ZSh7IHN0YXJ0QW5nbGU6IGQuc3RhcnRBbmdsZSwgZW5kQW5nbGU6IGQuZW5kQW5nbGUgfSwgeyBzdGFydEFuZ2xlOiBzMCwgZW5kQW5nbGU6IGUwIH0pO1xuXHRcdHJldHVybiBmdW5jdGlvbiAodCkge1xuXHRcdFx0dmFyIGIgPSBpKHQpO1xuXHRcdFx0cmV0dXJuIGFyYyhiKTtcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dFR3ZWVuKGQsIGkpIHtcblx0XHR2YXIgYTtcblx0XHRpZiAob2xkUGllRGF0YVtpXSkge1xuXHRcdFx0YSA9IChvbGRQaWVEYXRhW2ldLnN0YXJ0QW5nbGUgKyBvbGRQaWVEYXRhW2ldLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyO1xuXHRcdH0gZWxzZSBpZiAoIShvbGRQaWVEYXRhW2ldKSAmJiBvbGRQaWVEYXRhW2kgLSAxXSkge1xuXHRcdFx0YSA9IChvbGRQaWVEYXRhW2kgLSAxXS5zdGFydEFuZ2xlICsgb2xkUGllRGF0YVtpIC0gMV0uZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cdFx0fSBlbHNlIGlmICghKG9sZFBpZURhdGFbaSAtIDFdKSAmJiBvbGRQaWVEYXRhLmxlbmd0aCA+IDApIHtcblx0XHRcdGEgPSAob2xkUGllRGF0YVtvbGRQaWVEYXRhLmxlbmd0aCAtIDFdLnN0YXJ0QW5nbGUgKyBvbGRQaWVEYXRhW29sZFBpZURhdGEubGVuZ3RoIC0gMV0uZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGEgPSAwO1xuXHRcdH1cblx0XHR2YXIgYiA9IChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyO1xuXG5cdFx0dmFyIGZuID0gZDMuaW50ZXJwb2xhdGVOdW1iZXIoYSwgYik7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHR2YXIgdmFsID0gZm4odCk7XG5cdFx0XHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBNYXRoLmNvcyh2YWwpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiLFwiICsgTWF0aC5zaW4odmFsKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIilcIjtcblx0XHR9O1xuXHR9XG5cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFBVQkxJQyBGVU5DSU9OVFMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cblBpZUNoYXJ0LnByb3RvdHlwZS5zZXRVcmxQYXJhbXMgPSBmdW5jdGlvbiAodXJsX3BhcmFtcykge1xuXHR0aGlzLnVybF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuXHR0aGlzLmZvcmNlVXBkYXRlKCk7XG59XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICh1cmxfcGFyYW1zKSB7XG5cdHRoaXMuc3RvcEludGVydmFsKCk7XG5cdHRoaXMudXBkYXRlKCk7XG5cdHRoaXMuc3RhcnRJbnRlcnZhbCgpO1xufVxuXG5QaWVDaGFydC5wcm90b3R5cGUuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbiAocF9waWVJbnRlcnZhbCkge1xuXHR0aGlzLnBpZUludGVydmFsID0gcF9waWVJbnRlcnZhbDtcbn1cblxuUGllQ2hhcnQucHJvdG90eXBlLnN0b3BJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcblx0Ly9kaXNhYmxlZCBncmFwaCBpbnRlcnZhbFxuXHRjbGVhckludGVydmFsKHRoaXMucGllSW50ZXJ2YWwpO1xufVxuXG5QaWVDaGFydC5wcm90b3R5cGUuc3RhcnRJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5waWVJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMudXBkYXRlKCksIHRoaXMucmVmcmVzaClcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJTklUIEZVTkNJT05UUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIGNyZWF0ZV9waWVfY2hhcnQobmFtZSwgdW5pdHMpIHtcblx0dmFyIHcgPSA1MDA7IC8vMzgwIC0gUGxlYXNlIGtlZXAgaW4gc3luYyB3aXRoIHBpZS1jaGFydC5jc3Ncblx0dmFyIGggPSAzMjU7IC8vMjgwXG5cdHZhciBpciA9IDUyOyAvLzQ1XG5cdHZhciB0ZXh0T2Zmc2V0ID0gMTQ7XG5cdHZhciB0d2VlbkR1cmF0aW9uID0gMjUwO1xuXHR2YXIgciA9IDExNjsgLy8xMDA7XG5cblx0aWYgKCQobmFtZSkuaGFzQ2xhc3MoXCJwaWUtY2hhcnQtc21hbGxcIikpIHtcblx0XHR3ID0gMzMwO1xuXHRcdGggPSAyNTA7XG5cdFx0ciA9IHcgLyA1ICsgMTU7XG5cdFx0aXIgPSByIC8gMjtcblx0fVxuXG5cdC8vRDMgaGVscGVyIGZ1bmN0aW9uIHRvIHBvcHVsYXRlIHBpZSBzbGljZSBwYXJhbWV0ZXJzIGZyb20gYXJyYXkgZGF0YVxuXHR2YXIgZG9udXQgPSBkMy5sYXlvdXQucGllKCkudmFsdWUoZnVuY3Rpb24gKGQpIHtcblx0XHRpZiAoZC52YWx1ZSA9PSAwKSB7IGQudmFsdWUgPSAxOyB9IC8vIEZvcmNlIHRvIDEsIGluIG9yZGVyIHRvIHVwZGF0ZSB0aGUgZ3JhcGhcblx0XHRyZXR1cm4gZC52YWx1ZTtcblx0fSk7XG5cblx0Ly9EMyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGNvbG9ycyBmcm9tIGFuIG9yZGluYWwgc2NhbGVcblx0dmFyIGNvbG9yID0gZDMuc2NhbGUuY2F0ZWdvcnkyMCgpO1xuXG5cdC8vRDMgaGVscGVyIGZ1bmN0aW9uIHRvIGRyYXcgYXJjcywgcG9wdWxhdGVzIHBhcmFtZXRlciBcImRcIiBpbiBwYXRoIG9iamVjdFxuXHR2YXIgYXJjID0gZDMuc3ZnLmFyYygpXG5cdFx0LnN0YXJ0QW5nbGUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuc3RhcnRBbmdsZTsgfSlcblx0XHQuZW5kQW5nbGUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZW5kQW5nbGU7IH0pXG5cdFx0LmlubmVyUmFkaXVzKGlyKVxuXHRcdC5vdXRlclJhZGl1cyhyKTtcblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBDUkVBVEUgVklTICYgR1JPVVBTIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHZhciB2aXMgPSBkMy5zZWxlY3QobmFtZSkuYXBwZW5kKFwic3ZnOnN2Z1wiKVxuXHRcdC5hdHRyKFwid2lkdGhcIiwgdylcblx0XHQuYXR0cihcImhlaWdodFwiLCBoKVxuXHRcdC5hdHRyKFwidmlld0JveFwiLCBcIjAgMCBcIiArIHcgKyBcIiBcIiArIGgpXG5cdFx0LmF0dHIoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pZFlNaWRcIik7XG5cblx0Ly9HUk9VUCBGT1IgQVJDUy9QQVRIU1xuXHR2YXIgYXJjX2dyb3VwID0gdmlzLmFwcGVuZChcInN2ZzpnXCIpXG5cdFx0LmF0dHIoXCJjbGFzc1wiLCBcImFyY1wiKVxuXHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHcgLyAyKSArIFwiLFwiICsgKGggLyAyKSArIFwiKVwiKTtcblxuXHQvL0dST1VQIEZPUiBMQUJFTFNcblx0dmFyIGxhYmVsX2dyb3VwID0gdmlzLmFwcGVuZChcInN2ZzpnXCIpXG5cdFx0LmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsX2dyb3VwXCIpXG5cdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAodyAvIDIpICsgXCIsXCIgKyAoaCAvIDIpICsgXCIpXCIpO1xuXG5cdC8vR1JPVVAgRk9SIENFTlRFUiBURVhUXG5cdHZhciBjZW50ZXJfZ3JvdXAgPSB2aXMuYXBwZW5kKFwic3ZnOmdcIilcblx0XHQuYXR0cihcImNsYXNzXCIsIFwiY2VudGVyX2dyb3VwXCIpXG5cdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAodyAvIDIpICsgXCIsXCIgKyAoaCAvIDIpICsgXCIpXCIpO1xuXG5cdC8vUExBQ0VIT0xERVIgR1JBWSBDSVJDTEVcblx0dmFyIHBhdGhzID0gYXJjX2dyb3VwLmFwcGVuZChcInN2ZzpjaXJjbGVcIilcblx0XHQuYXR0cihcImZpbGxcIiwgXCIjRUZFRkVGXCIpXG5cdFx0LmF0dHIoXCJyXCIsIHIpO1xuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIENFTlRFUiBURVhUIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly9XSElURSBDSVJDTEUgQkVISU5EIExBQkVMU1xuXHR2YXIgd2hpdGVDaXJjbGUgPSBjZW50ZXJfZ3JvdXAuYXBwZW5kKFwic3ZnOmNpcmNsZVwiKVxuXHRcdC5hdHRyKFwiZmlsbFwiLCBcIndoaXRlXCIpXG5cdFx0LmF0dHIoXCJyXCIsIGlyKTtcblxuXHR2YXIgdG90YWxVbml0cyA9IG51bGw7XG5cdHZhciB0b3RhbExhYmVsID0gbnVsbDtcblx0dmFyIHRvdGFsVmFsdWUgPSBudWxsO1xuXG5cdGlmICh1bml0cykge1xuXHRcdC8vIFwiVE9UQUxcIiBMQUJFTFxuXHRcdHRvdGFsTGFiZWwgPSBjZW50ZXJfZ3JvdXAuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbFwiKVxuXHRcdFx0LmF0dHIoXCJkeVwiLCAtMTUpXG5cdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpIC8vIHRleHQtYWxpZ246IHJpZ2h0XG5cdFx0XHQudGV4dChcIlRPVEFMXCIpO1xuXG5cdFx0Ly9UT1RBTCBUUkFGRklDIFZBTFVFXG5cdFx0dG90YWxWYWx1ZSA9IGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInRvdGFsXCIpXG5cdFx0XHQuYXR0cihcImR5XCIsIDcpXG5cdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpIC8vIHRleHQtYWxpZ246IHJpZ2h0XG5cdFx0XHQudGV4dChcIldhaXRpbmcuLi5cIik7XG5cblx0XHQvL1VOSVRTIExBQkVMXG5cdFx0dG90YWxVbml0cyA9IGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInVuaXRzXCIpXG5cdFx0XHQuYXR0cihcImR5XCIsIDIxKVxuXHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKSAvLyB0ZXh0LWFsaWduOiByaWdodFxuXHRcdFx0LnRleHQodW5pdHMpO1xuXHR9XG5cblx0cmV0dXJuIChbYXJjX2dyb3VwLCBkb251dCwgdG90YWxWYWx1ZSwgdG90YWxVbml0cywgY29sb3IsIHR3ZWVuRHVyYXRpb24sIGFyYywgbGFiZWxfZ3JvdXAsIGNlbnRlcl9ncm91cCwgciwgdGV4dE9mZnNldF0pO1xufVxuIiwiaW1wb3J0IHsgbnRvcG5nX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIsIG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zeW5jLCBudG9wbmdfY3VzdG9tX2V2ZW50cyB9IGZyb20gJy4vY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcydcblxud2luZG93Lm50b3BuZ19ldmVudHMgPSBudG9wbmdfZXZlbnRzXG53aW5kb3cubnRvcG5nX2V2ZW50c19tYW5hZ2VyID0gbnRvcG5nX2V2ZW50c19tYW5hZ2VyXG53aW5kb3cubnRvcG5nX3N0YXR1c19tYW5hZ2VyID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyXG53aW5kb3cubnRvcG5nX3V0aWxpdHkgPSBudG9wbmdfdXRpbGl0eVxud2luZG93Lm50b3BuZ191cmxfbWFuYWdlciA9IG50b3BuZ191cmxfbWFuYWdlclxud2luZG93Lm50b3BuZ19zeW5jID0gbnRvcG5nX3N5bmNcbndpbmRvdy5udG9wbmdfY3VzdG9tX2V2ZW50cyA9IG50b3BuZ19jdXN0b21fZXZlbnRzXG4iLCIvKipcbiAqIChDKSAyMDEzLTIxIC0gbnRvcC5vcmdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERFRklORURfV0lER0VUUyA9IHt9O1xuLyogVXNlZCB0byBpbXBsZW1lbnQgdGhlIG9uIGNsaWNrIGV2ZW50cyBvbnRvIHRoZSBncmFwaCAqL1xuY29uc3QgREVGSU5FRF9FVkVOVFMgPSB7XG4gICAgLyogT24gY2xpY2sgZXZlbnQgdXNlZCBieSB0aGUgZmxvdyBhbmFseXplIHNlY3Rpb24sIHJlZGlyZWN0IHRvIHRoZSBjdXJyZW50IHVybCArIGEgc2luZ2xlIGZpbHRlciAqL1xuICAgIFwiZGJfYW5hbHl6ZVwiIDogZnVuY3Rpb24gKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgICAgICBjb25zdCB7IGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgICAgIGNvbnN0IHsgZmlsdGVyIH0gPSBjb25maWcudy5jb25maWc7XG4gICAgICAgIGxldCB2YWx1ZSwgdmFsdWVfbGFiZWwsIGxhYmVsO1xuXG4gICAgICAgIGlmKGNvbmZpZy53LmNvbmZpZy5maWx0ZXJpbmdfbGFiZWxzKVxuICAgICAgICAgICAgdmFsdWUgPSBjb25maWcudy5jb25maWcuZmlsdGVyaW5nX2xhYmVsc1tkYXRhUG9pbnRJbmRleF07XG5cbiAgICAgICAgaWYoY29uZmlnLncuY29uZmlnLmxhYmVscylcbiAgICAgICAgICAgIHZhbHVlX2xhYmVsID0gY29uZmlnLncuY29uZmlnLmxhYmVsc1tkYXRhUG9pbnRJbmRleF07XG5cbiAgICAgICAgaWYoZmlsdGVyLmxlbmd0aCA9PSAwIHx8IHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgIGZpbHRlcnMucHVzaCh7aWQ6IGZpbHRlclswXSwgb3BlcmF0b3I6IFwiZXFcIiwgdmFsdWU6IHZhbHVlfSk7XG4gICAgICAgIC8vIG5vdGlmeSB0aGF0IGZpbHRlcnMgc3RhdHVzIGlzIHVwZGF0ZWRcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwge2ZpbHRlcnN9KTtcbiAgICB9LFxuXG4gICAgXCJub25lXCIgOiBmdW5jdGlvbiAoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9LFxuICAgIFxuICAgIC8qIFN0YW5kYXJkIG9uIGNsaWNrIGV2ZW50LCByZWRpcmVjdCB0byB0aGUgdXJsICovXG4gICAgXCJzdGFuZGFyZFwiIDogZnVuY3Rpb24gKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgICAgICBjb25zdCB7IHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9ID0gY29uZmlnO1xuICAgICAgICBjb25zdCB7IHNlcmllcyB9ID0gY29uZmlnLncuY29uZmlnO1xuICAgICAgICBpZiAoc2VyaWVzSW5kZXggPT09IC0xKSByZXR1cm47XG4gICAgICAgIGlmIChzZXJpZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHNlcmllID0gc2VyaWVzW3Nlcmllc0luZGV4XTtcbiAgICAgICAgaWYgKHNlcmllLmJhc2VfdXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRfdXJsID0gKHNlcmllLnN0YXJ0X3VybCB8fCAnJykgXG4gICAgICAgICAgICBjb25zdCBzZWFyY2ggPSBzZXJpZS5kYXRhW2RhdGFQb2ludEluZGV4XS5tZXRhLnVybF9xdWVyeTtcbiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBgJHtzZXJpZS5iYXNlX3VybH0/JHtkZWZhdWx0X3VybH0ke3NlYXJjaH1gO1xuICAgICAgICB9XG4gICAgfSxcbn1cblxuY29uc3QgREVGSU5FRF9UT09MVElQID0ge1xuICAgIC8qIE9uIGNsaWNrIGV2ZW50IHVzZWQgYnkgdGhlIGZsb3cgYW5hbHl6ZSBzZWN0aW9uLCByZWRpcmVjdCB0byB0aGUgY3VycmVudCB1cmwgKyBhIHNpbmdsZSBmaWx0ZXIgKi9cbiAgICBcImZvcm1hdF9ieXRlc1wiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgXCJmb3JtYXRfcGt0c1wiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFBhY2tldHModmFsdWUpO1xuICAgIH0sXG5cbiAgICAvKiBPbiBjbGljayBldmVudCB1c2VkIGJ5IHRoZSBmbG93IGFuYWx5emUgc2VjdGlvbiwgcmVkaXJlY3QgdG8gdGhlIGN1cnJlbnQgdXJsICsgYSBzaW5nbGUgZmlsdGVyICovXG4gICAgXCJmb3JtYXRfdmFsdWVcIiA6IGZ1bmN0aW9uKHZhbHVlLCB7IGNvbmZpZywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0pIHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZSh2YWx1ZSk7XG4gICAgfSxcblxuICAgIFwiZm9ybWF0X211bHRpcGxlX2RhdGVcIiA6IGZ1bmN0aW9uKHZhbHVlLCB7IGNvbmZpZywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlWzBdKSArIFwiIC0gXCIgKyBuZXcgRGF0ZSh2YWx1ZVsxXSlcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiAgVGhpcyBmb3JtYXR0ZXIgaXMgdXNlZCBieSB0aGUgYnViYmxlIGhvc3QgbWFwLCBmcm9tIHRoZSB5IGF4aXMsXG4gICAgICogIHVzZWQgdG8gc2hvdyB0aGUgSG9zdHMsIHdpdGggdGhlaXIgcmVzcGVjdGl2ZSB2YWx1ZXMgXG4gICAgICovXG4gICAgXCJmb3JtYXRfbGFiZWxfZnJvbV94eVwiIDogZnVuY3Rpb24oe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgICAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHhfdmFsdWUgPSBzZXJpZVtcInhcIl07XG4gICAgICAgIGNvbnN0IHlfdmFsdWUgPSBzZXJpZVtcInlcIl07XG4gICAgICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgICAgIGNvbnN0IHlfYXhpc190aXRsZSA9IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQ7XG5cbiAgICAgICAgcmV0dXJuIChgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHt4X3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gKVxuICAgIH0sXG4gICAgXCJmb3JtYXRfbGFiZWxfZnJvbV94bmFtZVwiIDogZnVuY3Rpb24oe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgICAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHNlcmllW1wibmFtZVwiXVxuICAgICAgICBjb25zdCB5X3ZhbHVlID0gc2VyaWVbXCJ5XCJdO1xuICAgICAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgICAgICBjb25zdCB4X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0O1xuICAgICAgICBjb25zdCB5X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy55YXhpc1swXS50aXRsZS50ZXh0O1xuXG4gICAgICAgIHJldHVybiAoYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7bmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YClcbiAgICB9LFxufVxuXG4vKiBTdGFuZGFyZCBGb3JtYXR0ZXIgKi9cbmNvbnN0IERFRkFVTFRfRk9STUFUVEVSID0gREVGSU5FRF9UT09MVElQW1wiZm9ybWF0X3ZhbHVlXCJdO1xuXG5leHBvcnQgY2xhc3MgV2lkZ2V0VXRpbHMge1xuXG4gICAgc3RhdGljIHJlZ2lzdGVyV2lkZ2V0KHdpZGdldCkge1xuICAgICAgICBpZiAod2lkZ2V0ID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoYFRoZSBwYXNzZWQgd2lkZ2V0IHJlZmVyZW5jZSBpcyBudWxsIWApO1xuICAgICAgICBpZiAod2lkZ2V0Lm5hbWUgaW4gREVGSU5FRF9XSURHRVRTKSB0aHJvdyBuZXcgRXJyb3IoYFRoZSB3aWRnZXQgJHt3aWRnZXQubmFtZX0gaXMgYWxyZWFkeSBkZWZpbmVkIWApO1xuICAgICAgICBERUZJTkVEX1dJREdFVFNbd2lkZ2V0Lm5hbWVdID0gd2lkZ2V0O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRXaWRnZXRCeU5hbWUod2lkZ2V0TmFtZSkge1xuICAgICAgICBpZiAod2lkZ2V0TmFtZSBpbiBERUZJTkVEX1dJREdFVFMpIHtcbiAgICAgICAgICAgIHJldHVybiBERUZJTkVEX1dJREdFVFNbd2lkZ2V0TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXaWRnZXQgJHt3aWRnZXROYW1lfSBub3QgZm91bmQhYClcbiAgICB9XG59XG5cbi8qKlxuICogRGVmaW5lIGEgc2ltcGxlIHdyYXBwZXIgY2xhc3MgZm9yIHRoZSB3aWRnZXRzLlxuICovXG5jbGFzcyBXaWRnZXQge1xuXG4gICAgY29uc3RydWN0b3IobmFtZSwgZGF0YXNvdXJjZSA9IHt9LCB1cGRhdGVUaW1lID0gMCwgYWRkaXRpb25hbFBhcmFtcyA9IHt9KSB7XG5cbiAgICAgICAgLy8gZmllbGQgY29udGFpbmluZyB0aGUgZGF0YSBmZXRjaGVkIGZyb20gdGhlIGRhdGFzb3VyY2VzIHByb3ZpZGVkXG4gICAgICAgIHRoaXMuX2ZldGNoZWREYXRhID0gW107XG5cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcblxuICAgICAgICAvLyBpZiAwIHRoZW4gZG9uJ3QgdXBkYXRlIHRoZSBjaGFydCBhdXRvbWF0aWNhbGx5LCB0aGUgdGltZVxuICAgICAgICAvLyBpcyBleHByZXNzZWQgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgIHRoaXMuX3VwZGF0ZVRpbWUgPSB1cGRhdGVUaW1lO1xuXG4gICAgICAgIHRoaXMuX2RhdGFzb3VyY2UgPSBkYXRhc291cmNlO1xuICAgICAgICB0aGlzLl9hZGRpdGlvbmFsUGFyYW1zID0gYWRkaXRpb25hbFBhcmFtcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0IHRoZSB3aWRnZXQuXG4gICAgICovXG4gICAgYXN5bmMgaW5pdCgpIHtcblxuICAgICAgICAvLyByZWdpc3RlciB0aGUgd2lkZ2V0IHRvIHRoZSBERUZJTkVEX1dJREdFVFMgb2JqZWN0XG4gICAgICAgIFdpZGdldFV0aWxzLnJlZ2lzdGVyV2lkZ2V0KHRoaXMpO1xuICAgICAgICB0aGlzLl9mZXRjaGVkRGF0YSA9IGF3YWl0IHRoaXMuX2ZldGNoRGF0YSgpO1xuXG4gICAgICAgIGlmICh0aGlzLl91cGRhdGVUaW1lID4gMCkge1xuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4geyBhd2FpdCB0aGlzLnVwZGF0ZSh0aGlzLl9kYXRhc291cmNlLnBhcmFtcyk7IH0sIHRoaXMuX3VwZGF0ZVRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgd2lkZ2V0IGZyZWVpbmcgdGhlIHJlc291cmNlcyB1c2VkLlxuICAgICAqL1xuICAgIGFzeW5jIGRlc3Ryb3koKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEZvcmNlIHRoZSB3aWRnZXQgdG8gcmVsb2FkIGl0J3MgZGF0YS5cbiAgICAgKi9cbiAgICBhc3luYyBkZXN0cm95QW5kVXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoZGF0YXNvdXJjZVBhcmFtcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlQnlVcmwodXJsKSB7XG4gICAgICBjb25zdCB1ID0gbmV3IFVSTChgJHtsb2NhdGlvbi5vcmlnaW59JHt0aGlzLl9kYXRhc291cmNlLm5hbWV9YCk7XG4gICAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXModXJsKTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICB1LnNlYXJjaFBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kYXRhc291cmNlLmVuZHBvaW50ID0gdS5wYXRobmFtZSArIHUuc2VhcmNoO1xuICAgICAgdGhpcy5fZmV0Y2hlZERhdGEgPSBhd2FpdCB0aGlzLl9mZXRjaERhdGEoKTtcbiAgICB9XG4gIFxuICAgIGFzeW5jIHVwZGF0ZShkYXRhc291cmNlUGFyYW1zID0ge30pIHtcblx0Ly8gYnVpbGQgdGhlIG5ldyBlbmRwb2ludFxuICAgICAgICBjb25zdCB1ID0gbmV3IFVSTChgJHtsb2NhdGlvbi5vcmlnaW59JHt0aGlzLl9kYXRhc291cmNlLm5hbWV9YCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YXNvdXJjZVBhcmFtcykpIHtcbiAgICAgICAgICAgIHUuc2VhcmNoUGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RhdGFzb3VyY2UuZW5kcG9pbnQgPSB1LnBhdGhuYW1lICsgdS5zZWFyY2g7XG4gICAgICAgIHRoaXMuX2ZldGNoZWREYXRhID0gYXdhaXQgdGhpcy5fZmV0Y2hEYXRhKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZGF0YXNvdXJjZXMgcHJvdmlkZWQgdG8gdGhlIGNvbnN0cnVjdG9yLFxuICAgICAqIGRvIGEgR0VUIHJlcXVlc3QgdG8gYSBSRVNUIGVuZHBvaW50LlxuICAgICAqL1xuICAgIGFzeW5jIF9mZXRjaERhdGEoKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IGZldGNoKGAke2h0dHBfcHJlZml4fSR7dGhpcy5fZGF0YXNvdXJjZS5lbmRwb2ludH1gKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJlcS5qc29uKCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBDaGFydFdpZGdldCBleHRlbmRzIFdpZGdldCB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB0eXBlID0gJ2xpbmUnLCBkYXRhc291cmNlID0ge30sIHVwZGF0ZVRpbWUgPSAwLCBhZGRpdGlvbmFsUGFyYW1zID0ge30pIHtcbiAgICAgICAgc3VwZXIobmFtZSwgZGF0YXNvdXJjZSwgdXBkYXRlVGltZSwgYWRkaXRpb25hbFBhcmFtcyk7XG5cbiAgICAgICAgdGhpcy5fY2hhcnRUeXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5fY2hhcnQgPSB7fTtcbiAgICAgICAgdGhpcy5fJGh0bWxDaGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNjYW52YXMtd2lkZ2V0LSR7bmFtZX1gKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVnaXN0ZXJFdmVudENhbGxiYWNrKHdpZGdldE5hbWUsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpZGdldCA9IFdpZGdldFV0aWxzLmdldFdpZGdldEJ5TmFtZSh3aWRnZXROYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtldmVudE5hbWVdOiBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhd2FpdCB3aWRnZXQuX2NoYXJ0LnVwZGF0ZU9wdGlvbnModXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVDb25maWcoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW10sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZE9uU2VyaWVzOiBbMF0sXG4gICAgICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICdkZC9NTS95eXl5IEhIOm1tOnNzJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWx1ZSwgeyBzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgdyB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuX2NoYXJ0VHlwZSxcbiAgICAgICAgICAgICAgICBldmVudHM6IHt9LFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgemF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cdCAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgICAgICBvbkl0ZW1DbGljazoge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVEYXRhU2VyaWVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub0RhdGE6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTm8gRGF0YScsXG4gICAgICAgICAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMjRweCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGFkZGl0aW9uYWxQYXJhbXMgZmllbGQgY29udGFpbnMgYW4gYXBleCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gdGhlbiBtZXJnZSB0aGUgdHdvIGNvbmZpZ3VyYXRpb25zIGdpdmluZyBwcmlvcml0eSB0byB0aGUgY3VzdG9tIG9uZVxuICAgICAgICBpZiAodGhpcy5fYWRkaXRpb25hbFBhcmFtcyAmJiB0aGlzLl9hZGRpdGlvbmFsUGFyYW1zLmFwZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oY29uZmlnLCB0aGlzLl9hZGRpdGlvbmFsUGFyYW1zLmFwZXgpO1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZENvbmZpZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgX2J1aWxkVG9vbHRpcChjb25maWcsIHJzcCkge1xuICAgICAgICAvKiBCeSBkZWZhdWx0IHRoZSBhcmVhQ2hhcnQgdG9vbHRpcFt5XSBpcyBvdmVyd3JpdHRlbiAqL1xuICAgICAgICBjb25maWdbXCJ0b29sdGlwXCJdW1wieVwiXSA9IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsdWUsIHsgc2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHcgfSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKiBDaGFuZ2luZyBldmVudHMgaWYgZ2l2ZW4gKi9cbiAgICAgICAgaWYgKHJzcFsndG9vbHRpcCddKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF4aXMgaW4gcnNwWyd0b29sdGlwJ10pIHtcbiAgICAgICAgICAgICAgICBpZiAoYXhpcyA9PT0gXCJ4XCIgfHwgYXhpcyA9PT0gXCJ5XCIgfHwgYXhpcyA9PT0gXCJ6XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gcnNwWyd0b29sdGlwJ11bYXhpc11bJ2Zvcm1hdHRlciddO1xuICAgICAgICAgICAgICAgICAgICBpZighY29uZmlnWyd0b29sdGlwJ11bYXhpc10pXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWdbJ3Rvb2x0aXAnXVtheGlzXSA9IHt9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnWyd0b29sdGlwJ11bYXhpc11bJ2Zvcm1hdHRlciddID0gREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzW2Zvcm1hdHRlcl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIEN1c3RvbWl6YWJsZSB0b29sdGlwIHJlcXVlc3RlZCAqL1xuICAgICAgICAgICAgaWYocnNwWyd0b29sdGlwJ11bJ2N1c3RvbSddKVxuICAgICAgICAgICAgICAgIGNvbmZpZ1sndG9vbHRpcCddWydjdXN0b20nXSA9IERFRklORURfVE9PTFRJUFtyc3BbJ3Rvb2x0aXAnXVsnY3VzdG9tJ11dIHx8IE50b3BVdGlsc1tyc3BbJ3Rvb2x0aXAnXVsnY3VzdG9tJ11dXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGRBeGlzRm9ybWF0dGVyKGNvbmZpZywgYXhpc05hbWUpIHtcblxuICAgICAgICBjb25zdCBheGlzID0gY29uZmlnW2F4aXNOYW1lXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChheGlzID09PSB1bmRlZmluZWQgfHwgYXhpcy5sYWJlbHMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgLy8gZW5hYmxlIGZvcm1hdHRlcnNcbiAgICAgICAgaWYgKGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyICE9PSB1bmRlZmluZWQgJiYgYXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIgIT09ICdub25lJykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZvcm1hdHRlciA9IGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyO1xuXG4gICAgICAgICAgICBpZiAoTnRvcFV0aWxzW3NlbGVjdGVkRm9ybWF0dGVyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgeGF4aXM6IEZvcm1hdHRpbmcgZnVuY3Rpb24gJyR7c2VsZWN0ZWRGb3JtYXR0ZXJ9JyBkaWRuJ3QgZm91bmQgaW5zaWRlIE50b3BVdGlscy5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tzZWxlY3RlZEZvcm1hdHRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGREYXRhTGFiZWxzKGNvbmZpZywgcnNwKSB7XG4gICAgICAgIGlmIChyc3BbXCJkYXRhTGFiZWxzXCJdKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtkYXRhTGFiZWxzT3B0cywgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMocnNwW1wiZGF0YUxhYmVsc1wiXSkpIHtcbiAgICAgICAgICAgICAgICBjb25maWdbXCJkYXRhTGFiZWxzXCJdW2RhdGFMYWJlbHNPcHRzXSA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICBcblxuICAgICAgICBsZXQgZm9ybWF0dGVyID0gY29uZmlnW1wiZGF0YUxhYmVsc1wiXVtcImZvcm1hdHRlclwiXTtcbiAgICAgICAgXG4gICAgICAgIGlmKGZvcm1hdHRlciAmJiBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXSkge1xuICAgICAgICAgICAgY29uZmlnW1wiZGF0YUxhYmVsc1wiXVtcImZvcm1hdHRlclwiXSA9IERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2J1aWxkQ29uZmlnKCkge1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2dlbmVyYXRlQ29uZmlnKCk7XG4gICAgICAgIGNvbnN0IHJzcCA9IHRoaXMuX2ZldGNoZWREYXRhLnJzcDtcbiAgICAgICAgXG4gICAgICAgIC8vIGFkZCBhZGRpdGlvbmFsIHBhcmFtcyBmZXRjaGVkIGZyb20gdGhlIGRhdGFzb3VyY2VcbiAgICAgICAgY29uc3QgYWRkaXRpb25hbHMgPSBbJ3NlcmllcycsICd4YXhpcycsICd5YXhpcycsICdjb2xvcnMnLCAnbGFiZWxzJywgJ2ZpbGwnLCAnZmlsdGVyJywgJ2ZpbHRlcmluZ19sYWJlbHMnXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgYWRkaXRpb25hbCBvZiBhZGRpdGlvbmFscykge1xuXG4gICAgICAgICAgICBpZiAocnNwW2FkZGl0aW9uYWxdID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnW2FkZGl0aW9uYWxdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25maWdbYWRkaXRpb25hbF0gPSBPYmplY3QuYXNzaWduKGNvbmZpZ1thZGRpdGlvbmFsXSwgcnNwW2FkZGl0aW9uYWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1thZGRpdGlvbmFsXSA9IHJzcFthZGRpdGlvbmFsXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLyogQ2hhbmdpbmcgZXZlbnRzIGlmIGdpdmVuICovXG4gICAgICAgIGlmIChyc3BbJ2V2ZW50cyddKSB7XG4gICAgICAgICAgICAvKiBKdXN0IHBhc3MgYSB0YWJsZSBvZiBldmVudHMuIGUuZy4geyBldmVudHMgPSB7IGNsaWNrID0gXCJkYl9hbmFseXplXCIsIHVwZGF0ZWQgPSBcInN0YW5kYXJkXCIgfSB9Ki9cbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgaW4gcnNwWydldmVudHMnXSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1snY2hhcnQnXVsnZXZlbnRzJ11bZXZlbnRdID0gREVGSU5FRF9FVkVOVFNbcnNwWydldmVudHMnXVtldmVudF1dXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocnNwWydob3Jpem9udGFsX2NoYXJ0J10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uZmlnWydwbG90T3B0aW9ucyddWydiYXInXVsnaG9yaXpvbnRhbCddID0gcnNwWydob3Jpem9udGFsX2NoYXJ0J107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9idWlsZFRvb2x0aXAoY29uZmlnLCByc3ApXG4gICAgICAgIHRoaXMuX2J1aWxkQXhpc0Zvcm1hdHRlcihjb25maWcsICd4YXhpcycpO1xuICAgICAgICB0aGlzLl9idWlsZEF4aXNGb3JtYXR0ZXIoY29uZmlnLCAneWF4aXMnKTtcbiAgICAgICAgdGhpcy5fYnVpbGREYXRhTGFiZWxzKGNvbmZpZywgcnNwKTtcblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIF9pbml0aWFsaXplQ2hhcnQoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2J1aWxkQ29uZmlnKCk7XG4gICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl9jaGFydCA9IG5ldyBBcGV4Q2hhcnRzKHRoaXMuXyRodG1sQ2hhcnQsIHRoaXMuX2NoYXJ0Q29uZmlnKTtcbiAgICAgICAgdGhpcy5fY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplQ2hhcnQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZXN0cm95KCkge1xuICAgICAgICBhd2FpdCBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX2NoYXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fY2hhcnQgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZShkYXRhc291cmNlUGFyYW1zID0ge30pIHtcbiAgICAgICAgaWYodGhpcy5fY2hhcnRDb25maWcgIT09IHVuZGVmaW5lZCkge1x0ICAgIFxuICAgICAgICAgIGlmIChkYXRhc291cmNlUGFyYW1zKSB7XG4gICAgICAgICAgICBhd2FpdCBzdXBlci51cGRhdGUoZGF0YXNvdXJjZVBhcmFtcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGVyLnVwZGF0ZUJ5VXJsKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGlmICh0aGlzLl9jaGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwZWN0aW5nIHRoYXQgcnNwIGNvbnRhaW5zIGFuIG9iamVjdCBjYWxsZWQgc2VyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb2xvcnMsIHNlcmllcywgZGF0YUxhYmVscywgbGFiZWxzLCB4YXhpcywgZmlsdGVyaW5nX2xhYmVscyB9ID0gdGhpcy5fZmV0Y2hlZERhdGEucnNwO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgY29sb3JzIGxpc3RcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5jb2xvcnMgPSBjb2xvcnM7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuc2VyaWVzID0gc2VyaWVzO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHhheGlzICYmIHhheGlzLmNhdGVnb3JpZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLnhheGlzLmNhdGVnb3JpZXMgPSB4YXhpcy5jYXRlZ29yaWVzO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGZpbHRlcmluZ19sYWJlbHMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmZpbHRlcmluZ19sYWJlbHMgPSBmaWx0ZXJpbmdfbGFiZWxzO1xuXG4gICAgICAgICAgICAgICAgaWYoZGF0YUxhYmVscykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWF0dGVyID0gdGhpcy5fY2hhcnRDb25maWcuZGF0YUxhYmVscy5mb3JtYXR0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmKGZvcm1hdHRlciAmJiBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmRhdGFMYWJlbHMuZm9ybWF0dGVyID0gREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmRhdGFMYWJlbHMuZm9ybWF0dGVyID0gREVGQVVMVF9GT1JNQVRURVI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihsYWJlbHMpIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5sYWJlbHMgPSBsYWJlbHM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFydC51cGRhdGVPcHRpb25zKHRoaXMuX2NoYXJ0Q29uZmlnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRlc3Ryb3lBbmRVcGRhdGUoZGF0YXNvdXJjZSA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmRlc3Ryb3lBbmRVcGRhdGUoZGF0YXNvdXJjZSk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVDaGFydCgpO1xuICAgIH1cblxufVxuIiwiY29uc3QgZml4U3ViTWVudVBvc2l0aW9uID0gKCRzdWJtZW51LCAkaG92ZXJCdXR0b24pID0+IHtcblxuICAgIGNvbnN0IE1JTl9TUEFDRSA9IDIwO1xuICAgIGNvbnN0IE1JTl9IRUlHSFQgPSAxNTA7XG5cbiAgICBsZXQgZGlzdEZyb21BYm92ZSA9ICRob3ZlckJ1dHRvbi5wb3NpdGlvbigpLnRvcDtcbiAgICBjb25zdCBzdWJtZW51SGVpZ2h0ID0gJHN1Ym1lbnUuaGVpZ2h0KCk7XG4gICAgY29uc3QgZG9jdW1lbnRIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG5cbiAgICAvLyBpZiB0aGUgc3VibWVudSBpcyB0b28gaGlnaCB0byBiZSBzaG93biB0aGVuIHNldFxuICAgIC8vIHRoZSBvdmVyZmxvdyBvbiB5IGF4aXNcbiAgICBpZiAoc3VibWVudUhlaWdodCArIGRpc3RGcm9tQWJvdmUgPj0gZG9jdW1lbnRIZWlnaHQpIHtcblxuICAgICAgICBjb25zdCBjdXJyZW50U3VibWVudUhlaWdodCA9IGRvY3VtZW50SGVpZ2h0IC0gZGlzdEZyb21BYm92ZTtcbiAgICAgICAgaWYgKGN1cnJlbnRTdWJtZW51SGVpZ2h0IDw9IE1JTl9IRUlHSFQpIHtcbiAgICAgICAgICAgIGRpc3RGcm9tQWJvdmUgPSBkaXN0RnJvbUFib3ZlIC0gc3VibWVudUhlaWdodCArICRob3ZlckJ1dHRvbi5vdXRlckhlaWdodCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJHN1Ym1lbnUuY3NzKHsnbWF4LWhlaWdodCc6IGN1cnJlbnRTdWJtZW51SGVpZ2h0IC0gTUlOX1NQQUNFLCAnb3ZlcmZsb3cteSc6ICdhdXRvJ30pXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIHNldCB0aGUgc3VibWVudSBoZWlnaHRcbiAgICAkc3VibWVudS5jc3MoJ3RvcCcsIGAke2Rpc3RGcm9tQWJvdmV9cHhgKTtcblxufTtcblxuJCh3aW5kb3cpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbigpe1xuXG4gICAgY29uc3QgVVBQRVJfTElNSVQgPSAzMjtcbiAgICBjb25zdCBuYXZiYXJIZWlnaHQgPSAkKGAjbi1uYXZiYXJgKS5oZWlnaHQoKTtcbiAgICBjb25zdCB3aW5kb3dTY3JvbGxUb3AgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xuXG4gICAgaWYgKHdpbmRvd1Njcm9sbFRvcCA+PSBVUFBFUl9MSU1JVCkge1xuICAgICAgICAkKGAjbi1uYXZiYXJgKS5hZGRDbGFzcyhcInNjcm9sbGVkIGJnLWxpZ2h0XCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJChgI24tbmF2YmFyYCkucmVtb3ZlQ2xhc3MoXCJzY3JvbGxlZCBiZy1saWdodFwiKTtcbiAgICB9XG5cbn0pO1xuXG4kKCgpID0+IHtcblxuICAgIGNvbnN0IHRvZ2dsZVNpZGViYXIgPSAoKSA9PiB7XG4gICAgICAgIC8vIGlmIHRoZSBsYXllciBkb2Vzbid0IGV4aXN0cyB0aGVuIGNyZWF0ZSBpdFxuICAgICAgICBpZiAoJChgLnNpZGViYXItY2xvc2UtbGF5ZXJgKS5sZW5ndGggPT0gMCkge1xuXG4gICAgICAgICAgICBjb25zdCAkbGF5ZXIgPSAkKGA8ZGl2IGNsYXNzPSdzaWRlYmFyLWNsb3NlLWxheWVyJyBzdHlsZT0nZGlzcGxheTpub25lJz48L2Rpdj5gKTtcbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBsYXllclxuICAgICAgICAgICAgJGxheWVyLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFjdGl2ZSBjbGFzcyBmcm9tIHNpZGViYXJcbiAgICAgICAgICAgICAgICAkKGAjbi1zaWRlYmFyYCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIC8vIGhpZGUgdGhlIGxheWVyIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgRE9NXG4gICAgICAgICAgICAgICAgJGxheWVyLmZhZGVPdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSBsYXllciB0byB0aGUgd3JhcHBlclxuICAgICAgICAgICAgJChgI3dyYXBwZXJgKS5hcHBlbmQoJGxheWVyKTtcbiAgICAgICAgICAgIC8vIHNob3cgdGhlIGxheWVyIGluc2lkZSB0aGUgcGFnZVxuICAgICAgICAgICAgJGxheWVyLmZhZGVJbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaGlkZSB0aGUgZXhpc3RpbmcgbGF5ZXIgYW5kIGRlc3Ryb3kgaXRcbiAgICAgICAgICAgICQoYC5zaWRlYmFyLWNsb3NlLWxheWVyYCkuZmFkZU91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93L2hpZGUgdGhlIHNpZGViYXJcbiAgICAgICAgJChgI24tc2lkZWJhcmApLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG5cbiAgICAkKCcjbi1zaWRlYmFyIGEuc3VibWVudScpLmJpbmQoe1xuICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBzdWJtZW51ID0gJCh0aGlzKS5wYXJlbnQoKS5maW5kKGBkaXZbaWQkPSdzdWJtZW51J11gKTtcbiAgICAgICAgICAgIGZpeFN1Yk1lbnVQb3NpdGlvbihzdWJtZW51LCAkKHRoaXMpKTtcbiAgICAgICAgICAgIHN1Ym1lbnUuc2hvdygpXG4gICAgICAgIH0sXG4gICAgICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHN1Ym1lbnUgPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoYGRpdltpZCQ9J3N1Ym1lbnUnXWApO1xuICAgICAgICAgICAgc3VibWVudS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoYGRpdltpZCQ9J3N1Ym1lbnUnXWApLmJpbmQoe1xuICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykuc2hvdygpXG4gICAgICAgIH0sXG4gICAgICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qIHRvZ2dsZSBzaWRlYmFyIGRpc3BsYXkgKi9cbiAgICAkKGBidXR0b25bZGF0YS1icy10b2dnbGU9J3NpZGViYXInXWApLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0b2dnbGVTaWRlYmFyKCk7XG4gICAgfSk7XG59KTtcblxuJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcblxuICAgIC8vIHJlLWNhbGMgc3VibWVudSBoZWlnaHRcbiAgICBjb25zdCAkY3VycmVudFN1Ym1lbnUgPSAkKCcjbi1zaWRlYmFyJykuZmluZChgZGl2LnNob3dbaWQkPSdzdWJtZW51J11gKTtcblxuICAgIGlmICgkY3VycmVudFN1Ym1lbnUubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIGNvbnN0ICRob3ZlckJ1dHRvbiA9ICRjdXJyZW50U3VibWVudS5wYXJlbnQoKS5maW5kKGBhW2RhdGEtYnMtdG9nZ2xlPSdjb2xsYXBzZSddYCk7XG4gICAgICAgIGZpeFN1Yk1lbnVQb3NpdGlvbigkY3VycmVudFN1Ym1lbnUsICRob3ZlckJ1dHRvbik7XG4gICAgfVxuXG59KTtcbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgbnRvcENoYXJ0QXBleCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYWxsIGNoYXJ0IHR5cGUuXG4gICAgY29uc3QgX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMgPSB7XG5cdHNlcmllczogW10sXG5cdGNoYXJ0OiB7XG5cdCAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuXHQgICAgd2lkdGg6IFwiMTAwJVwiLFxuXHQgICAgdG9vbGJhcjoge1xuXHRcdHRvb2xzOiB7XG5cdFx0ICAgIHpvb21vdXQ6IGZhbHNlLFxuXHRcdCAgICBkb3dubG9hZDogZmFsc2UsXG5cdFx0ICAgIHpvb21pbjogZmFsc2UsXG5cdFx0ICAgIHpvb206IFwiIFwiLFxuXHRcdCAgICBzZWxlY3Rpb246IGZhbHNlLFxuXHRcdCAgICBwYW46IGZhbHNlLFxuXHRcdCAgICByZXNldDogZmFsc2Vcblx0XHR9XG5cdCAgICB9LFxuXHQgICAgZXZlbnRzOiB7fVxuXHR9LFxuXHR4YXhpczoge1xuXHQgICAgdG9vbHRpcDoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHQgICAgfSxcblx0fSxcblx0eWF4aXM6IHtcblx0ICAgIGxhYmVsczoge1xuXHRcdHNob3c6IHRydWUsXG5cdFx0c3R5bGU6IHtcblx0XHQgICAgY29sb3JzOiBbXSxcblx0XHQgICAgZm9udFNpemU6IFwiMTFweFwiLFxuXHRcdCAgICBmb250V2VpZ2h0OiA0MDAsXG5cdFx0ICAgIGNzc0NsYXNzOiBcIlwiXG5cdFx0fVxuXHQgICAgfSxcblx0ICAgIHRpdGxlOiB7XG5cdFx0cm90YXRlOiAtOTAsXG5cdFx0b2Zmc2V0WTogMCxcblx0XHRvZmZzZXRYOiAwLFxuXHRcdHN0eWxlOiB7XG5cdFx0ICAgIGZvbnRTaXplOiBcIjExcHhcIixcblx0XHQgICAgZm9udFdlaWdodDogOTAwLFxuXHRcdCAgICBjc3NDbGFzczogXCJcIlxuXHRcdH1cblx0ICAgIH0sXG5cdCAgICB0b29sdGlwOiB7XG5cdFx0ZW5hYmxlZDogZmFsc2UsXG5cdCAgICB9LFxuXHR9LFxuICAgIFx0Z3JpZDoge1xuICAgIFx0ICAgIHNob3c6IGZhbHNlLFxuICAgIFx0fSxcblx0bGVnZW5kOiB7XG5cdCAgICBzaG93OiB0cnVlXG5cdH0sXG4gICAgfTtcblxuICAgIC8vIGRlZmluZSBkZWZhdWx0IHhheGlzIGZvcm1hdHRlciBmb3IgY2hhcnQgd2l0aCBkYXRldGltZSBvbiB4YXhpcy5cbiAgICBjb25zdCBfc2V0WFRpbWVGb3JtYXR0ZXIgPSBmdW5jdGlvbihjaGFydE9wdGlvbnMpIHtcblx0Y2hhcnRPcHRpb25zLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBmdW5jdGlvbih2YWx1ZSwgeyBzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgdyB9KSB7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHZhbHVlKTtcblx0fTtcbiAgICB9O1xuXG4gICAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gICAgY29uc3QgX2RlZmF1bHRfVFNfQ09MVU1OX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICAgIGxldCBUU19DT0xVTU5fQ2hhcnRPcHRpb25zID0ge1xuICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwiYmFyXCIsXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBcInhcIixcbiAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgLy8gc2hhcmVkOiB0cnVlLFxuICAgICAgICB4OiB7XG4gICAgICAgICAgICBmb3JtYXQ6IFwiZGQgTU1NIHl5eXkgSEg6bW06c3NcIlxuICAgICAgICB9LFxuICAgICAgICB5OiB7fVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgZGF0ZXRpbWVVVEM6IGZhbHNlLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcImRhdGV0aW1lXCIsXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRlZENhdFRvTnVtZXJpYzogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19DT0xVTU5fQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgICAgICAgfSgpO1xuICAgIFxuICAgIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICAgIGNvbnN0IF9kZWZhdWx0X1RTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgICAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwiYXJlYVwiLFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogXCJ4XCIsXG4gICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgIC8vIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgeDoge1xuICAgICAgICAgICAgZm9ybWF0OiBcImRkIE1NTSB5eXl5IEhIOm1tOnNzXCJcbiAgICAgICAgfSxcbiAgICAgICAgeToge31cbiAgICAgICAgICB9LFxuICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGV0aW1lVVRDOiBmYWxzZSxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0ZWRDYXRUb051bWVyaWM6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICAgICAgICB9KCk7XG4gICAgXG4gICAgICAgIFxuICAgIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICAgIGNvbnN0IF9kZWZhdWx0X1RTX1BJRV9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgICBsZXQgVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiBcInBpZVwiLFxuICAgICAgICAgIGhlaWdodDogNDAwXG4gICAgICAgIH0sXG4gICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwsIG9wdHMpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsID8gYCR7dmFsLnRvRml4ZWQoMSl9JWAgOiBgMCVgKVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgICB9LFxuICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgICB9LFxuICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICB5OiB7XG4gICAgICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXHRudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuXHRyZXR1cm4gY2hhcnRPcHRpb25zO1xuICAgIH0oKTtcblxuLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG5jb25zdCBfZGVmYXVsdF9UU19ET05VVF9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgdHlwZTogXCJkb251dFwiLFxuICAgICAgaGVpZ2h0OiA0MDBcbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICBzaG93OiB0cnVlLFxuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICB9XG4gICAgfSxcbiAgICBkYXRhTGFiZWxzOiB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsLCBvcHRzKSB7XG4gICAgICAgIHJldHVybiAodmFsID8gYCR7dmFsLnRvRml4ZWQoMSl9JWAgOiBgMCVgKVxuICAgICAgfSxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICB9LFxuICAgIHN0cm9rZToge1xuICAgICAgc2hvdzogZmFsc2UsXG4gICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgIH0sXG4gICAgZmlsbDoge1xuICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICB5OiB7XG4gICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5udG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xucmV0dXJuIGNoYXJ0T3B0aW9ucztcbn0oKTtcblxuLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG5jb25zdCBfZGVmYXVsdF9UU19QT0xBUl9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgdHlwZTogXCJwb2xhckFyZWFcIixcbiAgICAgIGhlaWdodDogNDAwXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YUxhYmVsczoge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCwgb3B0cykge1xuICAgICAgICByZXR1cm4gKHZhbCA/IGAke3ZhbC50b0ZpeGVkKDEpfSVgIDogYDAlYClcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgfSxcbiAgICBzdHJva2U6IHtcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICB9LFxuICAgIGZpbGw6IHtcbiAgICAgIHR5cGU6IFwic29saWRcIlxuICAgIH0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgeToge1xuICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xubnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbnJldHVybiBjaGFydE9wdGlvbnM7XG59KCk7XG5cbiAgICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGxpbmUgY2hhcnQgdHlwZS5cbiAgICBjb25zdCBfZGVmYXVsdF9UU19MSU5FX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuXHRsZXQgVFNfTElORV9DaGFydE9wdGlvbnMgPSB7XG5cdCAgICBjaGFydDoge1xuXHRcdHR5cGU6IFwibGluZVwiLFxuXHRcdHpvb206IHtcblx0XHQgICAgZW5hYmxlZDogdHJ1ZSxcblx0XHQgICAgdHlwZTogXCJ4XCIsXG5cdFx0fSxcblx0ICAgIH0sXG5cdCAgICB0b29sdGlwOiB7XG5cdFx0c2hhcmVkOiB0cnVlLFxuXHRcdHg6IHtcblx0XHQgICAgZm9ybWF0OiBcImRkIE1NTSB5eXl5IEhIOm1tOnNzXCJcblx0XHR9LFxuXHRcdHk6IHt9XG5cdCAgICB9LFxuXHQgICAgeGF4aXM6IHtcblx0XHRsYWJlbHM6IHtcblx0XHQgICAgc2hvdzogZmFsc2UsXG5cdFx0ICAgIGRhdGV0aW1lVVRDOiBmYWxzZSxcblx0XHQgICAgZm9ybWF0dGVyOiBudWxsLFxuXHRcdH0sXG5cdFx0YXhpc1RpY2tzOiB7XG5cdFx0ICAgIHNob3c6IHRydWVcblx0XHR9LFxuXHRcdHR5cGU6IFwiZGF0ZXRpbWVcIixcblx0XHRheGlzQm9yZGVyOiB7XG5cdFx0ICAgIHNob3c6IHRydWVcblx0XHR9LFxuXHRcdGNvbnZlcnRlZENhdFRvTnVtZXJpYzogZmFsc2Vcblx0ICAgIH0sXG4gICAgXHQgICAgc3Ryb2tlOiB7XG4gICAgXHQgICAgXHRzaG93OiB0cnVlLFxuXHRcdHdpZHRoOiAyLFxuICAgIFx0ICAgIFx0Y3VydmU6IFwic21vb3RoXCJcbiAgICBcdCAgICB9LFxuICAgIFx0ICAgIGdyaWQ6IHtcbiAgICBcdCAgICBcdHNob3c6IHRydWUsXG4gICAgXHQgICAgfSxcbiAgICBcdCAgICBkYXRhTGFiZWxzOiB7XG4gICAgXHRcdGVuYWJsZWQ6IGZhbHNlXG4gICAgXHQgICAgfSxcblx0fTtcblx0bnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19MSU5FX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcblx0cmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgICB9KCk7XG5cbiAgICBjb25zdCBmb3JtYXRfbGFiZWxfZnJvbV94bmFtZSA9IGZ1bmN0aW9uKHsgc2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHcgfSkge1xuICAgICAgY29uc3Qgc2VyaWUgPSB3LmNvbmZpZy5zZXJpZXNbc2VyaWVzSW5kZXhdW1wiZGF0YVwiXVtkYXRhUG9pbnRJbmRleF07XG4gICAgICBjb25zdCBuYW1lID0gc2VyaWVbXCJuYW1lXCJdXG4gICAgICBjb25zdCB5X3ZhbHVlID0gc2VyaWVbXCJ5XCJdO1xuICAgICAgY29uc3QgaG9zdF9uYW1lID0gc2VyaWVbXCJtZXRhXCJdW1wibGFiZWxcIl07XG5cbiAgICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgICBjb25zdCB5X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy55YXhpc1swXS50aXRsZS50ZXh0O1xuXG4gICAgICByZXR1cm4gKGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgICAgICR7aG9zdF9uYW1lfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHtuYW1lfVxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5gKVxuICAgIH1cblxuICAgIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgbGluZSBjaGFydCB0eXBlLlxuICAgIGNvbnN0IF9kZWZhdWx0X1RTX0JVQkJMRV9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcblx0bGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgbGV0IFRTX0JVQkJMRV9DaGFydE9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICB0eXBlOiBcImJ1YmJsZVwiLFxuICAgICAgem9vbToge1xuICAgICAgICBhdXRvU2NhbGVZYXhpczogdHJ1ZVxuICAgICAgfSxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICB9LFxuICAgIHN0cm9rZToge1xuICAgICAgc2hvdzogZmFsc2UsXG4gICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgIH0sXG4gICAgZmlsbDoge1xuICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgIGRhdGFQb2ludFNlbGVjdGlvbjogXCJzdGFuZGFyZFwiLFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgcGFkZGluZzoge1xuICAgICAgICBsZWZ0OiA2XG4gICAgICB9LFxuICAgIH0sXG4gICAgeGF4aXM6IHtcbiAgICAgIHR5cGU6ICdudW1lcmljJyxcbiAgICAgIGxhYmVsczoge31cbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICB0eXBlOiAnbnVtZXJpYycsXG4gICAgICBmb3JjZU5pY2VTY2FsZTogdHJ1ZSxcbiAgICAgIGxhYmVsczoge31cbiAgICB9LFxuICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICBjdXN0b206IGZvcm1hdF9sYWJlbF9mcm9tX3huYW1lLFxuICAgIH1cbiAgfTtcblx0bnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19CVUJCTEVfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuXHRyZXR1cm4gY2hhcnRPcHRpb25zO1xuICAgIH0oKTtcbiAgICBcbiAgICByZXR1cm4ge1xuXHR0eXBlQ2hhcnQ6IHtcblx0ICAgIFRTX0xJTkU6IFwiVFNfTElORVwiLFxuXHQgICAgVFNfU1RBQ0tFRDogXCJUU19TVEFDS0VEXCIsXG5cdCAgICBUU19DT0xVTU46IFwiVFNfQ09MVU1OXCIsXG5cdCAgICBQSUU6IFwiUElFXCIsXG5cdCAgICBET05VVDogXCJET05VVFwiLFxuXHQgICAgUE9MQVI6IFwiUE9MQVJcIixcbiAgICAgIEJVQkJMRTogXCJCVUJCTEVcIixcblx0ICAgIEJBU0U6IFwiQkFTRVwiLFxuXHR9LFxuXHRuZXdDaGFydDogZnVuY3Rpb24odHlwZSkge1xuXHQgICAgbGV0IF9jaGFydE9wdGlvbnMgPSB7fTtcblx0ICAgIGxldCBfY2hhcnQ7XG5cdCAgICBsZXQgX2NoYXJ0SHRtbEVsZW1lbnQ7XG5cblx0ICAgIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlRTX1NUQUNLRUQpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX1NUQUNLRURfQ2hhcnRPcHRpb25zKTtcbiAgICAgICAgX3NldFhUaW1lRm9ybWF0dGVyKF9jaGFydE9wdGlvbnMpO1xuXHQgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlRTX0xJTkUpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX0xJTkVfQ2hhcnRPcHRpb25zKTtcbiAgICAgICAgX3NldFhUaW1lRm9ybWF0dGVyKF9jaGFydE9wdGlvbnMpO1xuXHQgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlRTX0NPTFVNTikge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfQ09MVU1OX0NoYXJ0T3B0aW9ucyk7XG4gICAgICAgIF9zZXRYVGltZUZvcm1hdHRlcihfY2hhcnRPcHRpb25zKTtcblx0ICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5QSUUpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX1BJRV9DaGFydE9wdGlvbnMpO1xuXHQgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LkRPTlVUKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19ET05VVF9DaGFydE9wdGlvbnMpO1xuXHQgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlBPTEFSKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19QT0xBUl9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LkJVQkJMRSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9ICBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LkJBU0UpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG5cdFx0dGhyb3cgYG50b3BDaGFydEFwZXg6Om5ld0NoYXJ0OiBjaGFydCB0eXBlID0gJHt0eXBlfSB1bnN1cHBvcnRlZGA7XG5cdCAgICB9XG5cdCAgICBcblx0ICAgIHJldHVybiB7XG5cdFx0ZHJhd0NoYXJ0OiBmdW5jdGlvbihodG1sRWxlbWVudCwgY2hhcnRPcHRpb25zKSB7XG5cdFx0ICAgIC8vIGFkZC9yZXBsYWNlIGNoYXJ0T3B0aW9ucyBmaWVsZHMgaW4gX2NoYXJ0T3B0aW9uc1xuXHRcdCAgICBpZihjaGFydE9wdGlvbnMueWF4aXMgJiYgY2hhcnRPcHRpb25zLnlheGlzLmxhYmVscyAmJiBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlcikge1xuICAgICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IGNoYXJ0T3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyXG4gICAgICAgICAgaWYoZm9ybWF0dGVyID09IFwiZm9ybWF0VmFsdWVcIikge1xuICAgICAgICAgICAgY2hhcnRPcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHMuZm9ybWF0VmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihmb3JtYXR0ZXIgPT0gXCJieXRlc1RvU2l6ZVwiKSB7XG4gICAgICAgICAgICBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKGNoYXJ0T3B0aW9ucywgX2NoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgICAgIF9jaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGh0bWxFbGVtZW50LCBfY2hhcnRPcHRpb25zKTtcblx0XHQgICAgX2NoYXJ0SHRtbEVsZW1lbnQgPSBodG1sRWxlbWVudDtcblx0XHQgICAgX2NoYXJ0LnJlbmRlcigpO1xuXHRcdH0sXG5cdFx0dG9fZGF0YV91cmk6IGFzeW5jIGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHQgICAgaWYgKF9jaGFydCA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdCAgICBsZXQgcmVzID0gYXdhaXQgX2NoYXJ0LmRhdGFVUkkob3B0aW9ucyk7XG5cdFx0ICAgIHJldHVybiByZXMuaW1nVVJJO1xuXHRcdH0sXG5cdFx0ZGVzdHJveUNoYXJ0OiBmdW5jdGlvbigpIHtcblx0XHQgICAgaWYgKF9jaGFydCA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdCAgICBfY2hhcnQuZGVzdHJveSgpO1xuXHRcdH0sXG5cdFx0dXBkYXRlQ2hhcnQ6IGZ1bmN0aW9uKGNoYXJ0T3B0aW9ucykge1xuXHRcdCAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdFx0ICAgIF9jaGFydC51cGRhdGVPcHRpb25zKGNoYXJ0T3B0aW9ucywgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG5cdFx0fSxcblx0XHR1cGRhdGVTZXJpZXM6IGZ1bmN0aW9uKHNlcmllcykge1xuXHRcdCAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdFx0ICAgIF9jaGFydC51cGRhdGVTZXJpZXMoc2VyaWVzKTtcblx0XHR9LFxuXHRcdHJlZ2lzdGVyRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHVwZGF0ZUNoYXJ0ID0gZmFsc2UpIHtcblx0XHQgICAgX2NoYXJ0T3B0aW9ucy5jaGFydC5ldmVudHNbZXZlbnROYW1lXSA9IGNhbGxiYWNrO1xuXHRcdCAgICBpZiAodXBkYXRlQ2hhcnQgPT0gdHJ1ZSkge1xuXHRcdFx0X2NoYXJ0LnVwZGF0ZU9wdGlvbnMoX2NoYXJ0T3B0aW9ucyk7XHQgICAgXG5cdFx0ICAgIH1cblx0XHR9LFxuXHQgICAgfTtcblx0fSxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgeyBudG9wQ2hhcnRBcGV4IH07XG4iLCIvKipcbiAqIChDKSAyMDIwLTIxIC0gbnRvcC5vcmdcbiAqIFRoaXMgZmlsZSBjb250YWlucyB1dGlsaXRpZXMgdXNlZCBieSB0aGUgKm5ldyogZGF0YXRhYmxlcy5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi9udG9wLXV0aWxzXCI7XG5cblxuY29uc3QgRGF0YVRhYmxlSGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgaGFuZGxlcnNJZERpY3QgPSB7fTtcbiAgICByZXR1cm4ge1xuXHRhZGRIYW5kbGVyOiBmdW5jdGlvbihoKSB7XG5cdCAgICBsZXQgaGFuZGxlcnMgPSBoYW5kbGVyc0lkRGljdFtoLmhhbmRsZXJJZF07XG5cdCAgICBpZiAoaGFuZGxlcnMgPT0gbnVsbCkge1xuXHRcdGhhbmRsZXJzID0gW107XG5cdFx0aGFuZGxlcnNJZERpY3RbaC5oYW5kbGVySWRdID0gaGFuZGxlcnM7XG5cdCAgICB9XG5cdCAgICBoYW5kbGVycy5wdXNoKCgpID0+IHtcblx0XHRoLm9uQ2xpY2soKTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIGB3aW5kb3dbJ19EYXRhVGFibGVCdXR0b25zT25DbGljayddKCcke2guaGFuZGxlcklkfScsICcke2hhbmRsZXJzLmxlbmd0aCAtIDF9JylgO1xuXHR9LFxuXHRnZXRIYW5kbGVyOiBmdW5jdGlvbihoYW5kbGVySWQsIHJvd0lkKSB7XG5cdCAgICBsZXQgaGFuZGxlcnMgPSBoYW5kbGVyc0lkRGljdFtoYW5kbGVySWRdO1xuXHQgICAgaWYgKGhhbmRsZXJzID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblx0ICAgIHJldHVybiBoYW5kbGVyc1tyb3dJZF07XG5cdH0sXG5cdGRlbGV0ZUhhbmRsZXJzQnlJZDogZnVuY3Rpb24oaGFuZGxlcklkKSB7XG5cdCAgICBoYW5kbGVyc0lkRGljdFtoYW5kbGVySWRdID0gbnVsbDtcblx0fSxcbiAgICB9XG59KCk7XG4gICAgXG5sZXQgRGF0YVRhYmxlQnV0dG9uQ2xpY2tIYW5kbGVycyA9IHt9O1xuXG53aW5kb3dbXCJfRGF0YVRhYmxlQnV0dG9uc09uQ2xpY2tcIl0gPSBmdW5jdGlvbihoYW5kbGVySWQsIHJvd0lkKSB7XG4gICAgbGV0IG9uQ2xpY2sgPSBEYXRhVGFibGVIYW5kbGVycy5nZXRIYW5kbGVyKGhhbmRsZXJJZCwgcm93SWQpO1xuICAgIGlmIChvbkNsaWNrICE9IG51bGwpIHtcblx0b25DbGljaygpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZUZpbHRlcnNNZW51IHtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvcHRpb25zfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHsgdGFibGVBUEksIGZpbHRlck1lbnVLZXksIGZpbHRlclRpdGxlLCBmaWx0ZXJzLCBjb2x1bW5JbmRleCwgaWNvbiA9IG51bGwsIGV4dHJhQXR0cmlidXRlcyA9IFwiXCIsIGlkID0gbnVsbCwgdXJsID0gbnVsbCwgdXJsUGFyYW1zID0gbnVsbCwgcmVtb3ZlQWxsRW50cnkgPSBmYWxzZSwgY2FsbGJhY2tGdW5jdGlvbiA9IG51bGwgfSkge1xuICAgICAgICB0aGlzLnJhd0ZpbHRlcnMgPSBmaWx0ZXJzO1xuICAgICAgICB0aGlzLnRhYmxlQVBJID0gdGFibGVBUEk7XG4gICAgICAgIHRoaXMuZmlsdGVyVGl0bGUgPSBmaWx0ZXJUaXRsZTtcbiAgICAgICAgdGhpcy5pY29uID0gaWNvbjtcbiAgICAgICAgdGhpcy5maWx0ZXJNZW51S2V5ID0gZmlsdGVyTWVudUtleTtcbiAgICAgICAgdGhpcy5jb2x1bW5JbmRleCA9IGNvbHVtbkluZGV4O1xuICAgICAgICB0aGlzLnByZXZlbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyU2VsZWN0ZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGRhdGF0YWJsZVdyYXBwZXIgPSAkKHRhYmxlQVBJLmNvbnRleHRbMF0ublRhYmxlV3JhcHBlcik7XG4gICAgICAgIHRoaXMuZXh0cmFBdHRyaWJ1dGVzID0gZXh0cmFBdHRyaWJ1dGVzO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLnVybFBhcmFtcztcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxFbnRyeSA9IHJlbW92ZUFsbEVudHJ5O1xuICAgICAgICB0aGlzLmNhbGxiYWNrRnVuY3Rpb24gPSBjYWxsYmFja0Z1bmN0aW9uXG4gICAgICB9XG5cbiAgICBnZXQgc2VsZWN0ZWRGaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRGaWx0ZXJTZWxlY3RlZDtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIC8vIHdoZW4gdGhlIGRhdGF0YWJsZSBoYXMgYmVlbiBpbml0aWFsaXplZCByZW5kZXIgdGhlIGRyb3Bkb3duXG4gICAgICAgIHRoaXMuJGRhdGF0YWJsZVdyYXBwZXIub24oJ2luaXQuZHQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5fcmVuZGVyKHNlbGYucmF3RmlsdGVycyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG9uIGFqYXggcmVsb2FkIHRoZW4gdXBkYXRlIHRoZSBkYXRhdGFibGUgZW50cmllc1xuICAgICAgICB0aGlzLnRhYmxlQVBJLm9uKCdkcmF3JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuX3VwZGF0ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICBfY291bnRFbnRyaWVzKHJlZ2V4LCBkYXRhID0gW10pIHtcblxuICAgICAgICBpZiAocmVnZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkRhdGFUYWJsZUZpbHRlcnNNZW51OjpfY291bnRFbnRyaWVzKCkgPT4gdGhlIHBhc3NlZCByZWdleCBpcyB1bmRlZmluZWQhXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cChyZWdleCk7XG4gICAgICAgIHJldHVybiBkYXRhLmZpbHRlcihjZWxsVmFsdWUgPT4gcmVnLnRlc3QoY2VsbFZhbHVlKSkubGVuZ3RoO1xuICAgIH1cblxuICAgIF9jcmVhdGVNZW51RW50cnkoZmlsdGVyKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCAkZW50cnkgPSAkKGA8bGkgY2xhc3M9J2Ryb3Bkb3duLWl0ZW0gcG9pbnRlcic+JHtmaWx0ZXIubGFiZWx9IDwvbGk+YCk7XG4gICAgICAgIFxuICAgICAgICBpZihzZWxmLnVybCkge1xuICAgICAgICAgICRlbnRyeSA9ICQoYDxsaSBjbGFzcz0nZHJvcGRvd24taXRlbSBwb2ludGVyJz48YSBocmVmPSMgY2xhc3M9J3AtMSBzdGFuZGFyZC1jb2xvcic+JHtmaWx0ZXIubGFiZWx9IDwvbGk+YClcblxuICAgICAgICAgIGlmKGZpbHRlci5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIHNldCBhY3RpdmUgZmlsdGVyIHRpdGxlIGFuZCBrZXlcbiAgICAgICAgICAgIGlmIChzZWxmLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5maW5kKGBpLmZhc2ApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLnByZXBlbmQoYDxpIGNsYXNzPSdmYXMgZmEtZmlsdGVyJz48L2k+YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSAkZW50cnkuaHRtbCgpO1xuICAgICAgICAgICAgc2VsZi4kZHJvcGRvd24udGl0bGUuaHRtbChuZXdDb250ZW50KTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgYWN0aXZlIGNsYXNzIGZyb20gdGhlIGxpIGVsZW1lbnRzXG4gICAgICAgICAgICBzZWxmLiRkcm9wZG93bi5jb250YWluZXIuZmluZCgnbGknKS5yZW1vdmVDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgICAvLyBhZGQgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgZW50cnlcbiAgICAgICAgICAgIGlmKGZpbHRlci5rZXkgIT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlci5yZWdleCAhPT0gdW5kZWZpbmVkICYmIChmaWx0ZXIuY291bnRhYmxlID09PSB1bmRlZmluZWQgfHwgZmlsdGVyLmNvdW50YWJsZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnRhYmxlQVBJLmNvbHVtbnModGhpcy5jb2x1bW5JbmRleCkuZGF0YSgpWzBdO1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLl9jb3VudEVudHJpZXMoZmlsdGVyLnJlZ2V4LCBkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0ICRjb3VudGVyID0gJChgPHNwYW4gY2xhc3M9J2NvdW50ZXInPigke2NvdW50fSk8L3NwYW4+YCk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBjb3VudCBpcyAwIHRoZW4gaGlkZSB0aGUgbWVudSBlbnRyeVxuICAgICAgICAgICAgaWYgKGNvdW50ID09IDApICRlbnRyeS5oaWRlKCk7XG5cbiAgICAgICAgICAgIC8vYXBwZW5kIHRoZSAkY291bnRlciBvYmplY3QgaW5zaWRlIHRoZSAkZW50cnlcbiAgICAgICAgICAgICRlbnRyeS5hcHBlbmQoJGNvdW50ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVudHJ5Lm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgLy8gc2V0IGFjdGl2ZSBmaWx0ZXIgdGl0bGUgYW5kIGtleVxuICAgICAgICAgIGlmIChzZWxmLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5maW5kKGBpLmZhc2ApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBzZWxmLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5wcmVwZW5kKGA8aSBjbGFzcz0nZmFzIGZhLWZpbHRlcic+PC9pPmApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSAkZW50cnkuaHRtbCgpO1xuICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLnRpdGxlLmh0bWwobmV3Q29udGVudCk7XG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBhY3RpdmUgY2xhc3MgZnJvbSB0aGUgbGkgZWxlbWVudHNcbiAgICAgICAgICBzZWxmLiRkcm9wZG93bi5jb250YWluZXIuZmluZCgnbGknKS5yZW1vdmVDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgLy8gYWRkIGFjdGl2ZSBjbGFzcyB0byBjdXJyZW50IGVudHJ5XG4gICAgICAgICAgaWYoZmlsdGVyLmtleSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoc2VsZi5jYWxsYmFja0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICBzZWxmLmNhbGxiYWNrRnVuY3Rpb24oc2VsZi50YWJsZUFQSSwgZmlsdGVyKTtcbiAgICAgICAgICAgIGlmKGZpbHRlci5jYWxsYmFjaykgZmlsdGVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIXNlbGYudXJsKSB7XG4gICAgICAgICAgICBzZWxmLnByZXZlbnRVcGRhdGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgZmlsdGVyIGhhdmUgYSBjYWxsYmFjayB0aGVuIGNhbGwgaXRcbiAgICAgICAgICAgIGlmIChmaWx0ZXIuY2FsbGJhY2spIGZpbHRlci5jYWxsYmFjaygpO1xuICAgICAgICAgICAgLy8gcGVyZm9ybSB0aGUgdGFibGUgZmlsdGVyaW5nXG4gICAgICAgICAgICBzZWxmLnRhYmxlQVBJLmNvbHVtbihzZWxmLmNvbHVtbkluZGV4KS5zZWFyY2goZmlsdGVyLnJlZ2V4LCB0cnVlLCBmYWxzZSkuZHJhdygpO1xuICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgZmlsdGVyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRGaWx0ZXJTZWxlY3RlZCA9IGZpbHRlcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi51cmxQYXJhbXMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gICAgICAgICAgICBjb25zdCBuZXdVcmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlbGYudXJsUGFyYW1zKVxuICAgICAgICAgICAgbmV3VXJsUGFyYW1zLnNldChzZWxmLmZpbHRlck1lbnVLZXksICh0eXBlb2YoZmlsdGVyLmlkKSAhPSB1bmRlZmluZWQpID8gZmlsdGVyLmlkIDogJycpXG4gICAgICAgICAgICBjb25zdCBuZXdVcmwgPSBzZWxmLnVybCArICc/JyArIG5ld1VybFBhcmFtcy50b1N0cmluZygpXG5cbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSgnJywgJycsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICc/JyArIG5ld1VybFBhcmFtcy50b1N0cmluZygpKVxuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAkZW50cnk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUZpbHRlcnMoZmlsdGVycykge1xuXG4gICAgICAgIGNvbnN0IGZpbHRlcnNDcmVhdGVkID0ge307XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggZmlsdGVyIGRlZmluZWQgaW4gdGhpcy5maWx0ZXJzXG4gICAgICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIGZpbHRlcnMpIHtcblxuICAgICAgICAgICAgY29uc3QgJGZpbHRlciA9IHRoaXMuX2NyZWF0ZU1lbnVFbnRyeShmaWx0ZXIpO1xuICAgICAgICAgICAgLy8gc2F2ZSB0aGUgZmlsdGVyIGluc2lkZSB0aGUgJGZpbHRlcnMgb2JqZWN0XG4gICAgICAgICAgICBmaWx0ZXJzQ3JlYXRlZFtmaWx0ZXIua2V5XSA9IHsgZmlsdGVyOiBmaWx0ZXIsICRub2RlOiAkZmlsdGVyIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlsdGVyc0NyZWF0ZWQ7XG4gICAgfVxuXG4gICAgX3JlbmRlcihmaWx0ZXJzKSB7XG4gICAgICBpZih0eXBlb2YgdGhpcy5jb2x1bW5JbmRleCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAkKGA8c3BhbiBpZD1cIiR7dGhpcy5pZH1cIiAke3RoaXMuZXh0cmFBdHRyaWJ1dGVzfSB0aXRsZT1cIiR7dGhpcy5maWx0ZXJUaXRsZX1cIj4ke3RoaXMuaWNvbiB8fCB0aGlzLmZpbHRlclRpdGxlfTwvc3Bhbj5gKS5pbnNlcnRCZWZvcmUodGhpcy4kZGF0YXRhYmxlV3JhcHBlci5maW5kKCcuZGF0YVRhYmxlc19maWx0ZXInKS5wYXJlbnQoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCAkZHJvcGRvd25Db250YWluZXIgPSAkKGA8ZGl2IGlkPScke3RoaXMuZmlsdGVyTWVudUtleX1fZHJvcGRvd24nIGNsYXNzPSdkcm9wZG93biBkLWlubGluZSc+PC9kaXY+YCk7XG4gICAgICAgIGNvbnN0ICRkcm9wZG93bkJ1dHRvbiA9ICQoYDxidXR0b24gY2xhc3M9J2J0bi1saW5rIGJ0biBkcm9wZG93bi10b2dnbGUnIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiB0eXBlPSdidXR0b24nPjwvYnV0dG9uPmApO1xuICAgICAgICBjb25zdCAkZHJvcGRvd25UaXRsZSA9ICQoYDxzcGFuIGNsYXNzPSdmaWx0ZXItdGl0bGUnPiR7dGhpcy5maWx0ZXJUaXRsZX08L3NwYW4+YCk7XG4gICAgICAgICRkcm9wZG93bkJ1dHRvbi5hcHBlbmQoJGRyb3Bkb3duVGl0bGUpO1xuXG4gICAgICAgIHRoaXMuJGRyb3Bkb3duID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogJGRyb3Bkb3duQ29udGFpbmVyLFxuICAgICAgICAgIHRpdGxlOiAkZHJvcGRvd25UaXRsZSxcbiAgICAgICAgICBidXR0b246ICRkcm9wZG93bkJ1dHRvblxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZmlsdGVycyA9IHRoaXMuX2NyZWF0ZUZpbHRlcnMoZmlsdGVycyk7XG5cbiAgICAgICAgY29uc3QgJG1lbnVDb250YWluZXIgPSAkKGA8dWwgY2xhc3M9J2Ryb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1sZy1lbmQgc2Nyb2xsYWJsZS1kcm9wZG93bicgaWQ9JyR7dGhpcy5maWx0ZXJNZW51S2V5fV9kcm9wZG93bl9tZW51Jz48L3VsPmApO1xuICAgICAgICBmb3IgKGNvbnN0IFtfLCBmaWx0ZXJdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuZmlsdGVycykpIHtcbiAgICAgICAgICAgICRtZW51Q29udGFpbmVyLmFwcGVuZChmaWx0ZXIuJG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIEFsbCBlbnRyeSBpcyBjcmVhdGVkIGJ5IHRoZSBvYmplY3RcbiAgICAgICAgaWYoIXRoaXMucmVtb3ZlQWxsRW50cnkpIHtcbiAgICAgICAgICBjb25zdCBhbGxGaWx0ZXIgPSB0aGlzLl9nZW5lcmF0ZUFsbEZpbHRlcigpO1xuICAgICAgICAgICRtZW51Q29udGFpbmVyLnByZXBlbmQodGhpcy5fY3JlYXRlTWVudUVudHJ5KGFsbEZpbHRlcikpOyAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGFwcGVuZCB0aGUgY3JlYXRlZCBkcm9wZG93biBpbnNpZGVcbiAgICAgICAgJGRyb3Bkb3duQ29udGFpbmVyLmFwcGVuZCgkZHJvcGRvd25CdXR0b24pO1xuICAgICAgICAkZHJvcGRvd25Db250YWluZXIuYXBwZW5kKCRtZW51Q29udGFpbmVyKTtcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBkcm9wZG93biBtZW51IGluc2lkZSB0aGUgZmlsdGVyIHdyYXBwZXJcbiAgICAgICAgJGRyb3Bkb3duQ29udGFpbmVyLmluc2VydEJlZm9yZSh0aGlzLiRkYXRhdGFibGVXcmFwcGVyLmZpbmQoJy5kYXRhVGFibGVzX2ZpbHRlcicpLnBhcmVudCgpKTtcblxuICAgICAgICB0aGlzLl9zZWxlY3RGaWx0ZXJGcm9tU3RhdGUodGhpcy5maWx0ZXJNZW51S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfc2VsZWN0RmlsdGVyRnJvbVN0YXRlKGZpbHRlcktleSkge1xuXG4gICAgICAgIGlmICghdGhpcy50YWJsZUFQSS5zdGF0ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMudGFibGVBUEkuc3RhdGUubG9hZGVkKCkpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLnRhYmxlQVBJLnN0YXRlLmxvYWRlZCgpLmZpbHRlcnMpIHJldHVybjtcblxuICAgICAgICAvLyBzYXZlIHRoZSBjdXJyZW50IHRhYmxlIHN0YXRlXG4gICAgICAgIHRhYmxlQVBJLnN0YXRlLnNhdmUoKTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVBbGxGaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6ICdhbGwnLFxuICAgICAgICAgICAgbGFiZWw6IGkxOG5fZXh0LmFsbCxcbiAgICAgICAgICAgIHJlZ2V4OiAnJyxcbiAgICAgICAgICAgIGNvdW50YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLmZpbmQoJ2kuZmFzLmZhLWZpbHRlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGRyb3Bkb3duLnRpdGxlLmh0bWwoYCR7dGhpcy5maWx0ZXJUaXRsZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfdXBkYXRlKCkge1xuXG4gICAgICAgIC8vIGlmIHRoZSBmaWx0ZXJzIGhhdmUgbm90IGJlZW4gaW5pdGlhbGl6ZWQgYnkgX3JlbmRlciB0aGVuIHJldHVyblxuICAgICAgICBpZiAodGhpcy5maWx0ZXJzID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMucHJldmVudFVwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5wcmV2ZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IFtfLCBmaWx0ZXJdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuZmlsdGVycykpIHtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIuY291bnRhYmxlID09IGZhbHNlIHx8IGZpbHRlci5maWx0ZXIuY291bnRhYmxlID09IGZhbHNlKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMudGFibGVBUEkuY29sdW1ucyh0aGlzLmNvbHVtbkluZGV4KS5kYXRhKClbMF07XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX2NvdW50RW50cmllcyhmaWx0ZXIuZmlsdGVyLnJlZ2V4LCBkYXRhKTtcblxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgZmlsdGVyIGlmIHRoZSBjb3VudCBpcyB6ZXJvXG4gICAgICAgICAgICAoY291bnQgPT0gMCkgPyBmaWx0ZXIuJG5vZGUuaGlkZSgpIDogZmlsdGVyLiRub2RlLnNob3coKTtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgY291bnRlciBsYWJlbFxuICAgICAgICAgICAgZmlsdGVyLiRub2RlLmZpbmQoJy5jb3VudGVyJykudGV4dChgKCR7Y291bnR9KWApO1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzZWxlY3RlZCBidXR0b24gY291bnRlclxuICAgICAgICAgICAgdGhpcy4kZHJvcGRvd24uYnV0dG9uLmZpbmQoJy5jb3VudGVyJykudGV4dChgKCR7Y291bnR9KWApO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVVdGlscyB7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBzdGFuZGFyZCBjb25maWcgZm9yIHRoZSBTcHJ5bWVkaWEgKGMpIERhdGFUYWJsZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U3RkRGF0YXRhYmxlQ29uZmlnKGR0QnV0dG9ucyA9IFtdLCBkb20gPSBcIjwncm93JzwnY29sLXNtLTIgZC1pbmxpbmUtYmxvY2snbD48J2NvbC1zbS0xMCB0ZXh0LWVuZCBkLWlubGluZS1ibG9jayc8J2R0LXNlYXJjaCdmPkI+cnRpcD5cIikge1xuXG4gICAgICAgIC8vIGhpZGUgdGhlIGJ1dHRvbnMgc2VjdGlvbiBpZiB0aGVyZSBhcmVuJ3QgYnV0dG9ucyBpbnNpZGUgdGhlIGFycmF5XG4gICAgICAgIGlmIChkdEJ1dHRvbnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGRvbSA9IFwiZkJydGlwXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9tOiBkb20sXG4gICAgICAgICAgICBwYWdpbmdUeXBlOiAnZnVsbF9udW1iZXJzJyxcbiAgICAgICAgICAgIGxlbmd0aE1lbnU6IFtbMTAsIDIwLCA1MCwgMTAwXSwgWzEwLCAyMCwgNTAsIDEwMF1dLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IHtcbiAgICAgICAgICAgICAgICBzZWFyY2g6IGkxOG4uc2NyaXB0X3NlYXJjaCxcbiAgICAgICAgICAgICAgICBwYWdpbmF0ZToge1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogJyZsdDsnLFxuICAgICAgICAgICAgICAgICAgICBuZXh0OiAnJmd0OycsXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0OiAnwqsnLFxuICAgICAgICAgICAgICAgICAgICBsYXN0OiAnwrsnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhdmVTdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uczogZHRCdXR0b25zLFxuICAgICAgICAgICAgICAgIGRvbToge1xuICAgICAgICAgICAgICAgICAgICBidXR0b246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0biBidG4tbGluaydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdkLWlubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVMaW5rQ2FsbGJhY2soYWN0aW9uKSB7XG5cdGxldCBoYW5kbGVyID0gXCJcIjtcblx0bGV0IGZPbkNsaWNrID0gRGF0YVRhYmxlSGFuZGxlcnMuYWRkSGFuZGxlcihhY3Rpb24uaGFuZGxlcik7XG5cdGhhbmRsZXIgPSBgb25jbGljaz1cIiR7Zk9uQ2xpY2t9XCJgO1xuXHRyZXR1cm4gYDxhIGhyZWY9I1xuICAgICAgICAgICAgICAgICAgICR7aGFuZGxlcn0+XG4gICAgICAgICAgICAgICAgICAgJHthY3Rpb24udGV4dCB8fCAnJ31cbiAgICAgICAgICAgICAgICA8L2E+YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGFtcGxlIG9mIGFjdGlvbjpcbiAgICAgKiB7XG4gICAgICogIGNsYXNzOiBzdHJpbmcsXG4gICAgICogIGRhdGE6IG9iamVjdCxcbiAgICAgKiAgaWNvbjogc3RyaW5nLFxuICAgICAqICBtb2RhbDogc3RyaW5nLFxuICAgICAqICBocmVmOiBzdHJpbmcsXG4gICAgICogIGhpZGRlbjogYm9vbCxcbiAgICAgKiB9XG4gICAgICogQHBhcmFtIHsqfSBhY3Rpb25zXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUFjdGlvbkJ1dHRvbnMoYWN0aW9ucyA9IFtdKSB7XG5cbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IFtdO1xuICAgICAgICBjb25zdCBkcm9wZG93bkJ1dHRvbiA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeSBkcm9wZG93bi10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+PGkgY2xhc3M9XCJmYXMgZmEtYWxpZ24tanVzdGlmeVwiPjwvaT48L2J1dHRvbj4nXG5cbiAgICAgICAgYWN0aW9ucy5mb3JFYWNoKChhY3Rpb24sIGkpID0+IHtcblx0ICAgIGxldCBoYW5kbGVyID0gXCJcIjtcblx0ICAgIGlmIChhY3Rpb24uaGFuZGxlcikge1xuXHRcdGxldCBmT25DbGljayA9IERhdGFUYWJsZUhhbmRsZXJzLmFkZEhhbmRsZXIoYWN0aW9uLmhhbmRsZXIpO1xuXHRcdGhhbmRsZXIgPSBgb25jbGljaz1cIiR7Zk9uQ2xpY2t9XCJgO1xuXHQgICAgfVxuICAgICAgICAgICAgbGV0IGJ1dHRvbiA9IChgXG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgJHsoYWN0aW9uLmhyZWYgfHwgYWN0aW9uLm1vZGFsKSA/IGBocmVmPScke2FjdGlvbi5ocmVmIHx8IGFjdGlvbi5tb2RhbH0nYCA6IGBgfVxuICAgICAgICAgICAgICAgICAgICAke2hhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICR7KGFjdGlvbi5vbmNsaWNrKSA/IGBvbmNsaWNrPScke2FjdGlvbi5vbmNsaWNrfSdgIDogYGB9XG4gICAgICAgICAgICAgICAgICAgICR7YWN0aW9uLm1vZGFsID8gXCJkYXRhLWJzLXRvZ2dsZT0nbW9kYWwnXCIgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9J2Ryb3Bkb3duLWl0ZW0gJHthY3Rpb24uY2xhc3MgPyBhY3Rpb24uY2xhc3MgOiBgYH0nXG4gICAgICAgICAgICAgICAgICAgICR7YWN0aW9uLmhpZGRlbiA/IFwic3R5bGU9J2Rpc3BsYXk6IG5vbmUnXCIgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgJHthY3Rpb24uZXh0ZXJuYWwgPyBcInRhcmdldD0nX2Fib3V0J1wiIDogYGB9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyAke2FjdGlvbi5pY29ufSc+PC9pPiAke2FjdGlvbi50aXRsZSB8fCAnJ31cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICBidXR0b25zLnB1c2goYnV0dG9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbGlzdCA9IGA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+JHtidXR0b25zLmpvaW4oJycpfTwvdWw+YFxuXG4gICAgICAgIHJldHVybiAoYDxkaXYgY2xhc3M9J2Ryb3Bkb3duJz4ke2Ryb3Bkb3duQnV0dG9ufSR7bGlzdH08L2Rpdj5gKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVsZXRlQnV0dG9uSGFuZGxlcnMoaGFuZGxlcklkKSB7XG5cdERhdGFUYWJsZUhhbmRsZXJzLmRlbGV0ZUhhbmRsZXJzQnlJZChoYW5kbGVySWQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRBamF4Q29uZmlnKGNvbmZpZywgdXJsLCBkYXRhU3JjID0gJycsIG1ldGhvZCA9IFwiZ2V0XCIsIHBhcmFtcyA9IHt9KSB7XG5cbiAgICAgICAgY29uZmlnLmFqYXggPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIHR5cGU6IG1ldGhvZCxcbiAgICAgICAgICAgIGRhdGFTcmM6IGRhdGFTcmMsXG4gICAgICAgICAgICBkYXRhOiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgZCwgcGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgc3RhdGljIGV4dGVuZENvbmZpZyhjb25maWcsIGV4dGVuc2lvbikge1xuXG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBjdXN0b20gZmlsdGVycyB0aGVuIG1hbmFnZSBzdGF0ZSBpbiB0aGlzIHdheVxuICAgICAgICBpZiAoZXh0ZW5zaW9uLmhhc0ZpbHRlcnMpIHtcblxuICAgICAgICAgICAgZXh0ZW5zaW9uLnN0YXRlU2F2ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHNldHRpbmdzLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0RhdGFUYWJsZXNfJyArIHNldHRpbmdzLnNJbnN0YW5jZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBleHRlbnNpb24uc3RhdGVMb2FkQ2FsbGJhY2sgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRGF0YVRhYmxlc18nICsgc2V0dGluZ3Muc0luc3RhbmNlKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBvbiBzYXZpbmcgdGhlIHRhYmxlIHN0YXRlIHN0b3JlIHRoZSBzZWxlY3RlZCBmaWx0ZXJzXG4gICAgICAgICAgICBleHRlbnNpb24uc3RhdGVTYXZlUGFyYW1zID0gZnVuY3Rpb24gKHNldHRpbmdzLCBkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBzYXZlIHRoZSBmaWx0ZXJzIHNlbGVjdGVkIGZyb20gdGhlIHVzZXIgaW5zaWRlIHRoZSBzdGF0ZVxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLWZpbHRlcl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVGaWx0ZXIgPSAkKHRoaXMpLmZpbmQoYGxpLmFjdGl2ZWApLmRhdGEoJ2ZpbHRlci1rZXknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY3RpdmVGaWx0ZXIpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmlsdGVycyBvYmplY3QgaXMgbm90IGFsbG9jYXRlZCB0aGVuIGluaXRpemlhbGl6ZXMgaXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLmZpbHRlcnMpIGRhdGEuZmlsdGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbHRlcnNbJCh0aGlzKS5kYXRhKCdmaWx0ZXInKV0gPSBhY3RpdmVGaWx0ZXI7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zdCB1c2VySW5pdENvbXBsZXRlID0gZXh0ZW5zaW9uLmluaXRDb21wbGV0ZTtcblxuICAgICAgICAvLyBjb25zdCBpbml0Q29tcGxldGUgPSAoc2V0dGluZ3MsIGpzb24pID0+IHtcbiAgICAgICAgLy8gICAgIGlmICh1c2VySW5pdENvbXBsZXRlICE9PSB1bmRlZmluZWQpIHVzZXJJbml0Q29tcGxldGUoc2V0dGluZ3MsIGpzb24pO1xuICAgICAgICAvLyAgICAgLy8gdHVybiBvbiB0b29sdGlwc1xuICAgICAgICAvLyAgICAgJChgLmFjdGlvbnMtZ3JvdXAgW3RpdGxlXWApLnRvb2x0aXAoJ2VuYWJsZScpO1xuICAgICAgICAvLyB9O1xuXG4gICAgICAgIC8vIC8vIG92ZXJyaWRlIGluaXRDb21wbGV0ZSBmdW5jdGlvblxuICAgICAgICAvLyBleHRlbnNpb24uaW5pdENvbXBsZXRlID0gaW5pdENvbXBsZXRlO1xuXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgY29uZmlnLCBleHRlbnNpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcm1hdCB0aGUgcGFzc2VkIHNlY29uZHMgaW50byB0aGUgXCJISDpNTTpTU1wiIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kc1xuICAgICAqL1xuICAgIHN0YXRpYyBzZWNvbmRzVG9ISE1NU1Moc2Vjb25kcykge1xuXG4gICAgICAgIGNvbnN0IHBhZFplcm9lcyA9IG4gPT4gYCR7bn1gLnBhZFN0YXJ0KDIsICcwJyk7XG5cbiAgICAgICAgY29uc3Qgc2VjID0gc2Vjb25kcyAlIDYwO1xuICAgICAgICBjb25zdCBtaW5zID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApICUgNjA7XG4gICAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7XG5cbiAgICAgICAgcmV0dXJuIGAke3BhZFplcm9lcyhob3Vycyl9OiR7cGFkWmVyb2VzKG1pbnMpfToke3BhZFplcm9lcyhzZWMpfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBPcGVuIHRoZSBwb29sIGVkaXQgbW9kYWwgb2YgYSBjaG9zZW4gcG9vbCBpZiB0aGUgcXVlcnkgcGFyYW1zIGNvbnRhaW5zIHRoZSBwb29sIHBhcmFtYXRlclxuICAgICogQHBhcmFtIHRhYmxlQVBJXG4gICAgKi9cbiAgICBzdGF0aWMgb3BlbkVkaXRNb2RhbEJ5UXVlcnkocGFyYW1zKSB7XG5cbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgaWYgKCF1cmxQYXJhbXMuaGFzKHBhcmFtcy5wYXJhbU5hbWUpKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZGF0YUlEID0gdXJsUGFyYW1zLmdldChwYXJhbXMucGFyYW1OYW1lKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHBhcmFtcy5kYXRhdGFibGVJbnN0YW5jZS5kYXRhKCkudG9BcnJheSgpLmZpbmQoKGRhdGEgPT4gZGF0YVtwYXJhbXMucGFyYW1OYW1lXSA9PSBkYXRhSUQpKTtcblxuICAgICAgICAvLyBpZiB0aGUgY2FuY2VsSWYgcGFyYW0gaGFzIGJlZW4gcGFzc2VkXG4gICAgICAgIC8vIHRoZW4gdGVzdCB0aGUgY2FuY2VsSWYgZnVuY3Rpb24sIGlmIHRoZSByZXR1cm4gdmFsdWVcbiAgICAgICAgLy8gaXMgdHJ1ZSB0aGVuIGNhbmNlbCB0aGUgbW9kYWwgb3BlbmluZ1xuICAgICAgICBpZiAodHlwZW9mIChwYXJhbXMuY2FuY2VsSWYpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmNhbmNlbElmKGRhdGEpKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCAkbW9kYWwgPSAkKGAjJHtwYXJhbXMubW9kYWxIYW5kbGVyLmdldE1vZGFsSUQoKX1gKTtcblxuICAgICAgICAvLyBpZiB0aGUgcG9vbCBpZCBpcyB2YWxpZCB0aGVuIG9wZW4gdGhlIGVkaXQgbW9kYWxcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zLm1vZGFsSGFuZGxlci5pbnZva2VNb2RhbEluaXQoZGF0YSk7XG4gICAgICAgICAgICAkbW9kYWwubW9kYWwoJ3Nob3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXJsUGFyYW1zLmhhcygncmVmZXJlcicpKSB7XG4gICAgICAgICAgICAkbW9kYWwub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmRlbGV0ZShwYXJhbXMucGFyYW1OYW1lKTtcblxuICAgICAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVmZXJlciA9IHVybFBhcmFtcy5nZXQoJ3JlZmVyZXInKTtcblxuICAgICAgICAkbW9kYWwub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSByZWZlcmVyO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkVG9nZ2xlQ29sdW1uc0Ryb3Bkb3duKHRhYmxlQVBJLCB0b2dnbGVDYWxsYmFjayA9IChjb2wsIHZpc2libGUpID0+IHt9KSB7XG5cbiAgICAgICAgaWYgKHRhYmxlQVBJID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93ICdUaGUgJHRhYmxlIGlzIHVuZGVmaW5lZCEnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFibGVJRCA9IHRhYmxlQVBJLnRhYmxlKCkubm9kZSgpLmlkO1xuXG4gICAgICAgIERhdGFUYWJsZVV0aWxzLl9sb2FkQ29sdW1uc1Zpc2liaWxpdHkodGFibGVBUEkpLnRoZW4oZnVuY3Rpb24gKGZldGNoZWREYXRhKSB7XG5cbiAgICAgICAgICAgIGxldCBzYXZlZENvbHVtbnMgPSBbLTFdO1xuICAgICAgICAgICAgaWYgKGZldGNoZWREYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBzYXZlZENvbHVtbnMgPSBmZXRjaGVkRGF0YS5jb2x1bW5zLm1hcChpID0+IHBhcnNlSW50KGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihmZXRjaGVkRGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgaWdub3JlZENvbHVtbnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0ICRkYXRhdGFibGVXcmFwcGVyID0gJCh0YWJsZUFQSS5jb250ZXh0WzBdLm5UYWJsZVdyYXBwZXIpO1xuXG4gICAgICAgICAgICAvLyBnZXQgdGhlIHRhYmxlIGhlYWRlcnMgXG4gICAgICAgICAgICB0YWJsZUFQSS5jb2x1bW5zKCkuZXZlcnkoZnVuY3Rpb24gKGkpIHtcblxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIGFscmVhZHkgaGlkZGVuIGNvbHVtbnNcbiAgICAgICAgICAgICAgICBpZiAoIXRhYmxlQVBJLmNvbHVtbihpKS52aXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZENvbHVtbnMucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7IGluZGV4OiBpLCBuYW1lOiB0aGlzLmhlYWRlcigpLnRleHRDb250ZW50LCBsYWJlbDogdGhpcy5pMThuLm5hbWUgLyogSHVtYW4tcmVhZGFibGUgY29sdW1uIG5hbWUgKi8gfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgJGJ0bkdyb3VwID0gJChgXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGluayBkcm9wZG93bi10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV5ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBgKTtcblxuICAgICAgICAgICAgY29uc3QgJGRyb3Bkb3duTWVudSA9ICQoYDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIiBzdHlsZT0nd2lkdGg6IG1heC1jb250ZW50Oyc+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+U2hvdyBDb2x1bW5zPC9oNj48L2Rpdj5gKTtcbiAgICAgICAgICAgIGNvbnN0ICRjaGVja2JveGVzID0gJChgPGRpdiBjbGFzcz0ncHgtNCc+PC9kaXY+YCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IGNvbHVtbnNbaV07XG5cblx0XHQvLyBQcmV2ZW50cyBjb2x1bW5zIHdpdGggbm8gbmFtZXMgdG8gYmUgc2VsZWN0aXZlbHkgaGlkZGVuIChlLmcuLCB0aGUgZW50aXR5IHVuZGVyIHRoZSBhbGwgYWxlcnRzIHBhZ2UpXG5cdFx0aWYoY29sdW1uLm5hbWUgPT0gXCJcIilcblx0XHQgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBjaGVja2JveCBhbmQgZGVsZWdhdGUgYSBjaGFuZ2UgZXZlbnRcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGB0b2dnbGUtJHtjb2x1bW4ubmFtZS5zcGxpdCgpLmpvaW4oJ18nKX1gOyBcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjb2x1bW4gaWQgaXQncyBpbnNpZGUgdGhlIHNhdmVkQ29sdW1ucyBhcnJheVxuICAgICAgICAgICAgICAgIC8vIGlmIHRvZ2dsZWQgaXMgdHJ1ZSB0aGVuIHRoZSBjb2x1bW4gaXMgbm90IGhpZGRlblxuICAgICAgICAgICAgICAgIGNvbnN0IHRvZ2dsZWQgPSBzYXZlZENvbHVtbnMuaW5kZXhPZihjb2x1bW4uaW5kZXgpID09PSAtMTtcbiAgICAgICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gdGFibGVBUEkuY29sdW1uKGNvbHVtbi5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbC52aXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCAkY2hlY2tib3ggPSAkKGA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgJHsodG9nZ2xlZCA/ICdjaGVja2VkJyA6ICcnKX0gdHlwZT1cImNoZWNrYm94XCIgaWQ9XCIke2lkfVwiPmApXG4gICAgICAgICAgICAgICAgY29uc3QgJHdyYXBwZXIgPSAkKGBcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCIke2lkfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7Y29sdW1uLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBgKTtcblxuICAgICAgICAgICAgICAgICRjaGVja2JveC5vbignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJChgLm92ZXJsYXlgKS50b2dnbGUoNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgY29sdW1uIEFQSSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gdGFibGVBUEkuY29sdW1uKGNvbHVtbi5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICBjb2wudmlzaWJsZSghY29sLnZpc2libGUoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzaWJsZSA9IGNvbC52aXNpYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlkZGVuQ29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvLyBpbnNlcnQgaW5zaWRlIHRoZSBhcnJheSBvbmx5IHRoZSBoaWRkZW4gY29sdW1uc1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUFQSS5jb2x1bW5zKCkuZXZlcnkoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlQVBJLmNvbHVtbihpKS52aXNpYmxlKCkgfHwgaWdub3JlZENvbHVtbnMuaW5kZXhPZihpKSAhPT0gLTEpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbkNvbHVtbnMucHVzaChpKTsgXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgdGhlIHRhYmxlIHZpZXcgaW5zaWRlIHJlZGlzXG4gICAgICAgICAgICAgICAgICAgICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL2RhdGF0YWJsZV9jb2x1bW5zLmx1YWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NhdmUnLCB0YWJsZTogdGFibGVJRCwgY29sdW1uczogaGlkZGVuQ29sdW1ucy5qb2luKCcsJyksIGNzcmY6IHdpbmRvdy5fX0NTUkZfREFUQVRBQkxFX19cbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvZ2dsZUNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNhbGxiYWNrKGNvbCwgdmlzaWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJHdyYXBwZXIucHJlcGVuZCgkY2hlY2tib3gpO1xuICAgICAgICAgICAgICAgICRjaGVja2JveGVzLmFwcGVuZCgkd3JhcHBlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRkcm9wZG93bk1lbnUub24oXCJjbGljay5icy5kcm9wZG93blwiLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpOyB9KTtcblxuICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSBuZXcgbm9kZSBpbnNpZGUgdGhlIGRhdGF0YWJsZVxuICAgICAgICAgICAgJGJ0bkdyb3VwLmFwcGVuZCgkZHJvcGRvd25NZW51LmFwcGVuZCgkY2hlY2tib3hlcykpO1xuICAgICAgICAgICAgJGRhdGF0YWJsZVdyYXBwZXIuZmluZCgnLmR0LXNlYXJjaCcpLnBhcmVudCgpLmFwcGVuZCgkYnRuR3JvdXApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgX2xvYWRDb2x1bW5zVmlzaWJpbGl0eSh0YWJsZUFQSSkge1xuICAgICAgICBjb25zdCB0YWJsZUlEID0gdGFibGVBUEkudGFibGUoKS5ub2RlKCkuaWQ7XG4gICAgICAgIHJldHVybiAkLmdldChgJHtodHRwX3ByZWZpeH0vbHVhL2RhdGF0YWJsZV9jb2x1bW5zLmx1YT90YWJsZT0ke3RhYmxlSUR9JmFjdGlvbj1sb2FkYCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVSZW5kZXJzIHtcblxuICAgIHN0YXRpYyBhbGVydFNldmVyaXR5QW5kVHlwZShzZXZlcml0eSwgdHlwZSwgYWxlcnQpIHtcbiAgICAgICAgcmV0dXJuIGAke0RhdGFUYWJsZVJlbmRlcnMuZm9ybWF0VmFsdWVMYWJlbChzZXZlcml0eSwgdHlwZSwgYWxlcnQpfSAke0RhdGFUYWJsZVJlbmRlcnMuZm9ybWF0VmFsdWVMYWJlbChhbGVydC5hbGVydF9pZCwgdHlwZSwgYWxlcnQpfWA7XG4gICAgfVxuXG4gICAgc3RhdGljIGhpZGVJZlplcm8ob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgbGV0IGNvbG9yID0gKG9iai5jb2xvciAhPT0gdW5kZWZpbmVkID8gb2JqLmNvbG9yIDogXCIjYWFhXCIpO1xuICAgICAgICBsZXQgdmFsdWUgPSAob2JqLnZhbHVlICE9PSB1bmRlZmluZWQgPyBvYmoudmFsdWUgOiBvYmopO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJkaXNwbGF5XCIgJiYgcGFyc2VJbnQodmFsdWUpID09PSAwKSBjb2xvciA9IFwiI2FhYVwiO1xuICAgICAgICBsZXQgc3BhbiA9IGA8c3BhbiBzdHlsZT0nY29sb3I6ICR7Y29sb3J9Jz4ke050b3BVdGlscy5maW50KHZhbHVlKX08L3NwYW4+YDtcbiAgICAgICAgaWYgKG9iai51cmwgIT09IHVuZGVmaW5lZCkgc3BhbiA9IGA8YSBocmVmPVwiJHtvYmoudXJsfVwiPiR7c3Bhbn08L2E+YDtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuXG4gICAgc3RhdGljIHNlY29uZHNUb1RpbWUoc2Vjb25kcywgdHlwZSwgcm93KSB7XG4gICAgICAgIGlmICh0eXBlID09PSBcImRpc3BsYXlcIikgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKHNlY29uZHMpO1xuICAgICAgICByZXR1cm4gc2Vjb25kcztcbiAgICB9XG5cbiAgICBzdGF0aWMgZmlsdGVyaXplKGtleSwgdmFsdWUsIGxhYmVsLCB0YWdfbGFiZWwsIHRpdGxlLCBodG1sKSB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9J3RhZy1maWx0ZXInIGRhdGEtdGFnLWtleT0nJHtrZXl9JyB0aXRsZT0nJHt0aXRsZSB8fCB2YWx1ZX0nIGRhdGEtdGFnLXZhbHVlPScke3ZhbHVlfScgZGF0YS10YWctbGFiZWw9JyR7dGFnX2xhYmVsIHx8IGxhYmVsIHx8IHZhbHVlfScgaHJlZj0nIyc+JHtodG1sIHx8IGxhYmVsIHx8IHZhbHVlfTwvYT5gO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRWYWx1ZUxhYmVsKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgbGV0IGNlbGwgPSBvYmoubGFiZWw7XG4gICAgICAgIGlmIChvYmouY29sb3IpIGNlbGwgPSBgPHNwYW4gY2xhc3M9J2ZvbnQtd2VpZ2h0LWJvbGQnIHN0eWxlPSdjb2xvcjogJHtvYmouY29sb3J9Jz4ke2NlbGx9PC9zcGFuPmA7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRNZXNzYWdlKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgY29uc3Qgc3RyaXBfdGFncyA9IGZ1bmN0aW9uKGh0bWwpIHsgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpOyB0LmlubmVySFRNTCA9IGh0bWw7IHJldHVybiB0LnRleHRDb250ZW50IHx8IHQuaW5uZXJUZXh0IHx8IFwiXCI7IH1cbiAgICAgICAgICAgXG4gICAgICAgIGxldCBjZWxsID0gb2JqLmRlc2NyO1xuICAgICAgICBpZiAob2JqLnNob3J0ZW5fZGVzY3IpXG4gICAgICAgICAgICBjZWxsID0gYDxzcGFuIHRpdGxlPVwiJHtvYmouZGVzY3J9XCI+JHtvYmouc2hvcnRlbl9kZXNjcn08L3NwYW4+YDtcblxuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0U3VidHlwZShvYmosIHR5cGUsIHJvdykge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG5cbiAgICAgICAgbGV0IGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3N1YnR5cGUnLCBvYmosIG9iaik7XG5cbiAgICAgICAgcmV0dXJuIGxhYmVsOyBcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Rm9ybWF0R2VuZXJpY0ZpZWxkKGZpZWxkKSB7XG5cdHJldHVybiBmdW5jdGlvbihvYmosIHR5cGUsIHJvdykge1xuICAgICAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgIFx0ICAgIGxldCBodG1sX3JlZiA9ICcnO1xuXHQgICAgaWYgKG9iai5yZWZlcmVuY2UgIT09IHVuZGVmaW5lZClcblx0XHRodG1sX3JlZiA9IG9iai5yZWZlcmVuY2VcbiAgICAgICAgICAgIGxldCBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKGZpZWxkLCByb3dbZmllbGRdLnZhbHVlLCByb3dbZmllbGRdLmxhYmVsLCByb3dbZmllbGRdLmxhYmVsLCByb3dbZmllbGRdLmxhYmVsKTtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbCArICcgJyArIGh0bWxfcmVmO1xuXHR9XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFNOTVBJbnRlcmZhY2Uob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICBsZXQgY2VsbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdzbm1wX2ludGVyZmFjZScsIG9iai52YWx1ZSwgb2JqLmxhYmVsLCBvYmoubGFiZWwsIG9iai5sYWJlbCk7XG4gICAgICAgIGlmIChvYmouY29sb3IpIGNlbGwgPSBgPHNwYW4gY2xhc3M9J2ZvbnQtd2VpZ2h0LWJvbGQnIHN0eWxlPSdjb2xvcjogJHtvYmouY29sb3J9Jz4ke2NlbGx9PC9zcGFuPmA7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRTTk1QSVAob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqO1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2lwJywgb2JqLCBvYmosIG9iaiwgb2JqKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0UHJvYmVJUChvYmosIHR5cGUsIHJvdykge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG5cblx0bGV0IGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3Byb2JlX2lwJywgb2JqLnZhbHVlLCBvYmoubGFiZWwsIG9iai5sYWJlbCwgb2JqLmxhYmVsX2xvbmcpO1xuXG4gICAgICAgIHJldHVybiBsYWJlbDsgXG4gICAgfVxuICAgXG4gICAgc3RhdGljIGZvcm1hdEhvc3Qob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqO1xuICAgIFx0bGV0IGh0bWxfcmVmID0gJyc7XG5cdGlmIChvYmoucmVmZXJlbmNlICE9PSB1bmRlZmluZWQpXG5cdCAgIGh0bWxfcmVmID0gb2JqLnJlZmVyZW5jZVxuXHRsZXQgbGFiZWwgPSBcIlwiO1xuXG5cdGxldCBob3N0S2V5LCBob3N0VmFsdWU7XG4gICAgICAgIGlmIChvYmoubGFiZWwgJiYgb2JqLmxhYmVsICE9IG9iai52YWx1ZSkge1xuXHQgICAgaG9zdEtleSA9IFwibmFtZVwiO1xuXHQgICAgaG9zdFZhbHVlID0gb2JqLmxhYmVsX2xvbmc7XG4gICAgICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCduYW1lJywgb2JqLmxhYmVsX2xvbmcsIG9iai5sYWJlbCwgb2JqLmxhYmVsLCBvYmoubGFiZWxfbG9uZyk7XG5cdH1cbiAgICAgICAgZWxzZSB7XG5cdCAgICBob3N0S2V5ID0gXCJpcFwiO1xuXHQgICAgaG9zdFZhbHVlID0gb2JqLnZhbHVlO1xuICAgICAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnaXAnLCBvYmoudmFsdWUsIG9iai5sYWJlbCwgb2JqLmxhYmVsLCBvYmoubGFiZWxfbG9uZyk7XG5cdH1cblxuICAgICAgICBpZiAocm93LnZsYW5faWQgJiYgcm93LnZsYW5faWQgIT0gXCJcIiAmJiByb3cudmxhbl9pZCAhPSBcIjBcIikge1xuICAgICAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZShob3N0S2V5LCBgJHtob3N0VmFsdWV9QCR7cm93LnZsYW5faWR9YCwgYCR7b2JqLmxhYmVsfUAke3Jvdy52bGFuX2lkfWAsIGAke29iai5sYWJlbH1AJHtyb3cudmxhbl9pZH1gLCBgJHtvYmoubGFiZWxfbG9uZ31AJHtyb3cudmxhbl9pZH1gKTtcblx0fVxuXG4gICAgICAgIGlmIChvYmouY291bnRyeSlcbiAgICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnY291bnRyeScsIG9iai5jb3VudHJ5LCBvYmouY291bnRyeSwgb2JqLmNvdW50cnksIG9iai5jb3VudHJ5LCAnIDxpbWcgc3JjPVwiJyArIGh0dHBfcHJlZml4ICsgJy9kaXN0L2ltYWdlcy9ibGFuay5naWZcIiBjbGFzcz1cImZsYWcgZmxhZy0nICsgb2JqLmNvdW50cnkudG9Mb3dlckNhc2UoKSArICdcIj48L2E+ICcpO1xuXG4gICAgICAgIGlmIChyb3cucm9sZSAmJiByb3cucm9sZS52YWx1ZSA9PSAnYXR0YWNrZXInKVxuICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnICcgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsIHJvdy5yb2xlLnZhbHVlLCBcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhcyBmYS1za3VsbFwiIHRpdGxlPVwiJytyb3cucm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlLmxhYmVsKTtcbiAgICAgICAgZWxzZSBpZiAocm93LnJvbGUgJiYgcm93LnJvbGUudmFsdWUgPT0gJ3ZpY3RpbScpXG4gICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgJyArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgcm93LnJvbGUudmFsdWUsXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJmYXMgZmEtc2FkLXRlYXJcIiB0aXRsZT1cIicrcm93LnJvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cucm9sZS5sYWJlbCk7XG5cbiAgICAgICAgaWYgKHJvdy5yb2xlX2NsaV9zcnYgJiYgcm93LnJvbGVfY2xpX3Nydi52YWx1ZSA9PSAnY2xpZW50JylcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyAnICsgRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGVfY2xpX3NydicsIHJvdy5yb2xlX2NsaV9zcnYudmFsdWUsIFxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0XCIgdGl0bGU9XCInK3Jvdy5yb2xlX2NsaV9zcnYubGFiZWwrJ1wiPjwvaT4nLCByb3cucm9sZV9jbGlfc3J2LmxhYmVsKTtcbiAgICAgICAgZWxzZSBpZiAocm93LnJvbGVfY2xpX3NydiAmJiByb3cucm9sZV9jbGlfc3J2LnZhbHVlID09ICdzZXJ2ZXInKVxuICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnICcgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZV9jbGlfc3J2Jywgcm93LnJvbGVfY2xpX3Nydi52YWx1ZSxcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1sZWZ0XCIgdGl0bGU9XCInK3Jvdy5yb2xlX2NsaV9zcnYubGFiZWwrJ1wiPjwvaT4nLCByb3cucm9sZV9jbGlfc3J2LmxhYmVsKTtcblxuICAgICAgICByZXR1cm4gbGFiZWwgKyAnICcgKyBodG1sX3JlZjsgXG4gICAgfVxuXG4gICAgc3RhdGljIGZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCBrZXksIHZhbHVlLCBsYWJlbCwgdGl0bGUpIHtcblx0bGV0IHZhbHVlVmxhbiA9IHZhbHVlO1xuICBsZXQgbGFiZWxWbGFuID0gbGFiZWw7XG5cdGxldCB0aXRsZVZsYW4gPSB0aXRsZTtcblx0aWYgKGZsb3cudmxhbiAmJiBmbG93LnZsYW4udmFsdWUgIT0gMCkge1xuXHQgICAgdmFsdWVWbGFuID0gYCR7dmFsdWV9QCR7Zmxvdy52bGFuLnZhbHVlfWA7XG5cdCAgICBsYWJlbFZsYW4gPSBgJHtsYWJlbH1AJHtmbG93LnZsYW4ubGFiZWx9YDtcblx0ICAgIHRpdGxlVmxhbiA9IGAke3RpdGxlfUAke2Zsb3cudmxhbi50aXRsZX1gO1xuXHR9XG4gICAgICBsYWJlbFZsYW4gPSBOdG9wVXRpbHMuc2hvcnRlbkxhYmVsKGxhYmVsVmxhbiwgMTYsIFwiLlwiKVxuICAgICAgcmV0dXJuIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKGtleSwgdmFsdWVWbGFuLCBsYWJlbFZsYW4sIGxhYmVsVmxhbiwgdGl0bGVWbGFuKTsgXG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdEZsb3dUdXBsZShmbG93LCB0eXBlLCByb3cpIHtcbiAgICAgIGxldCBhY3RpdmVfcmVmID0gKGZsb3cuYWN0aXZlX3VybCA/IGA8YSBocmVmPVwiJHtmbG93LmFjdGl2ZV91cmx9XCI+PGkgY2xhc3M9XCJmYXMgZmEtc3RyZWFtXCI+PC9pPjwvYT5gIDogXCJcIik7XG4gICAgICAgIGxldCB2bGFuID0gXCJcIlxuXG4gICAgICAgIGxldCBjbGlMYWJlbCA9IFwiXCI7XG4gICAgICAgIGlmIChmbG93LmNsaV9pcC5uYW1lKSB7XG4gICAgICAgICAgbGV0IHRpdGxlID0gXCJcIjtcbiAgICAgICAgICAgIGlmKGZsb3cuY2xpX2lwLmxhYmVsX2xvbmcpIHRpdGxlID0gZmxvdy5jbGlfaXAudmFsdWUgKyBcIiBbXCIgKyBmbG93LmNsaV9pcC5sYWJlbF9sb25nICsgXCJdXCI7XG4gICAgICAgICAgICBjbGlMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplVmxhbihmbG93LCByb3csICdjbGlfbmFtZScsIGZsb3cuY2xpX2lwLm5hbWUsIGZsb3cuY2xpX2lwLmxhYmVsLCB0aXRsZSk7IFxuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIGNsaUxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVWbGFuKGZsb3csIHJvdywgJ2NsaV9pcCcsIGZsb3cuY2xpX2lwLnZhbHVlLCBmbG93LmNsaV9pcC5sYWJlbCwgZmxvdy5jbGlfaXAubGFiZWxfbG9uZyk7IFxuXG4gICAgICAgIGxldCBjbGlGbGFnTGFiZWw9ICcnXG5cbiAgICAgICAgaWYgKGZsb3cuY2xpX2lwLmNvdW50cnkgJiYgZmxvdy5jbGlfaXAuY291bnRyeSAhPT0gXCJuaWxcIilcbiAgICAgICAgICAgIGNsaUZsYWdMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdjbGlfY291bnRyeScsIGZsb3cuY2xpX2lwLmNvdW50cnksIGZsb3cuY2xpX2lwLmNvdW50cnksIGZsb3cuY2xpX2lwLmNvdW50cnksIGZsb3cuY2xpX2lwLmNvdW50cnksICcgPGltZyBzcmM9XCInICsgaHR0cF9wcmVmaXggKyAnL2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLScgKyBmbG93LmNsaV9pcC5jb3VudHJ5LnRvTG93ZXJDYXNlKCkgKyAnXCI+PC9hPiAnKTtcblxuICAgICAgICBsZXQgY2xpUG9ydExhYmVsID0gKChmbG93LmNsaV9wb3J0ICYmIGZsb3cuY2xpX3BvcnQgPiAwKSA/IFwiOlwiK0RhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdjbGlfcG9ydCcsIGZsb3cuY2xpX3BvcnQsIGZsb3cuY2xpX3BvcnQpIDogXCJcIik7XG5cbiAgICAgICAgbGV0IGNsaUJsYWNrbGlzdGVkID0nJ1xuICAgICAgICBpZihmbG93LmNsaV9pcC5ibGFja2xpc3RlZCA9PSB0cnVlKSBcbiAgICAgICAgICBjbGlCbGFja2xpc3RlZCA9IFwiIDxpIGNsYXNzPVxcJ2ZhcyBmYS1iYW4gZmEtc21cXCcgdGl0bGU9XFwnXCIgKyBpMThuKFwiaG9zdHNfc3RhdHMuYmxhY2tsaXN0ZWRcIikgKyBcIlxcJz48L2k+XCJcblxuICAgICAgICBsZXQgc3J2TGFiZWwgPSBcIlwiXG4gICAgICAgIGlmIChmbG93LnNydl9pcC5uYW1lKSB7XG4gICAgICAgICAgbGV0IHRpdGxlID0gXCJcIjtcbiAgICAgICAgICBpZihmbG93LnNydl9pcC5sYWJlbF9sb25nKSB0aXRsZSA9IGZsb3cuc3J2X2lwLnZhbHVlICsgXCIgW1wiICsgZmxvdy5zcnZfaXAubGFiZWxfbG9uZyArIFwiXVwiO1xuICAgICAgICAgICAgc3J2TGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCAnc3J2X25hbWUnLCBmbG93LnNydl9pcC5uYW1lLCBmbG93LnNydl9pcC5sYWJlbCwgdGl0bGUpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHNydkxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVWbGFuKGZsb3csIHJvdywgJ3Nydl9pcCcsIGZsb3cuc3J2X2lwLnZhbHVlLCBmbG93LnNydl9pcC5sYWJlbCwgZmxvdy5zcnZfaXAubGFiZWxfbG9uZyk7XG4gICAgICAgIGxldCBzcnZQb3J0TGFiZWwgPSAoKGZsb3cuY2xpX3BvcnQgJiYgZmxvdy5jbGlfcG9ydCA+IDApID8gXCI6XCIrRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3Nydl9wb3J0JywgZmxvdy5zcnZfcG9ydCwgZmxvdy5zcnZfcG9ydCkgOiBcIlwiKTtcblxuICAgICAgICBsZXQgc3J2RmxhZ0xhYmVsPSAnJ1xuXG4gICAgICAgIGlmIChmbG93LnNydl9pcC5jb3VudHJ5ICYmIGZsb3cuc3J2X2lwLmNvdW50cnkgIT09IFwibmlsXCIpXG4gICAgICAgICAgICBzcnZGbGFnTGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc3J2X2NvdW50cnknLCBmbG93LnNydl9pcC5jb3VudHJ5LCBmbG93LnNydl9pcC5jb3VudHJ5LCBmbG93LnNydl9pcC5jb3VudHJ5LCBmbG93LnNydl9pcC5jb3VudHJ5LCAnIDxpbWcgc3JjPVwiJyArIGh0dHBfcHJlZml4ICsgJy9kaXN0L2ltYWdlcy9ibGFuay5naWZcIiBjbGFzcz1cImZsYWcgZmxhZy0nICsgZmxvdy5zcnZfaXAuY291bnRyeS50b0xvd2VyQ2FzZSgpICsgJ1wiPjwvYT4gJyk7XG5cbiAgICAgICAgbGV0IHNydkJsYWNrbGlzdGVkID0nJ1xuICAgICAgICBpZihmbG93LnNydl9pcC5ibGFja2xpc3RlZCA9PSB0cnVlKSBcbiAgICAgICAgICBzcnZCbGFja2xpc3RlZCA9IFwiIDxpIGNsYXNzPVxcJ2ZhcyBmYS1iYW4gZmEtc21cXCcgdGl0bGU9XFwnXCIgKyBpMThuKFwiaG9zdHNfc3RhdHMuYmxhY2tsaXN0ZWRcIikgKyBcIlxcJz48L2k+XCJcbiAgICBcbiAgICAgICAgbGV0IGNsaUljb25zID0gXCJcIjtcbiAgICAgICAgbGV0IHNydkljb25zID0gXCJcIjtcbiAgICAgICAgaWYgKHJvdy5jbGlfcm9sZSkge1xuICAgICAgICAgICAgaWYgKHJvdy5jbGlfcm9sZS52YWx1ZSA9PSAnYXR0YWNrZXInKVxuICAgICAgICAgICAgICAgIGNsaUljb25zICs9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgJ2F0dGFja2VyJywgJzxpIGNsYXNzPVwiZmFzIGZhLXNrdWxsXCIgdGl0bGU9XCInK3Jvdy5jbGlfcm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5jbGlfcm9sZS50YWdfbGFiZWwpO1xuICAgICAgICAgICAgZWxzZSBpZiAocm93LmNsaV9yb2xlLnZhbHVlID09ICd2aWN0aW0nKVxuICAgICAgICAgICAgICAgIGNsaUljb25zICs9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgJ3ZpY3RpbScsICAnPGkgY2xhc3M9XCJmYXMgZmEtc2FkLXRlYXJcIiB0aXRsZT1cIicrcm93LmNsaV9yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LmNsaV9yb2xlLnRhZ19sYWJlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm93LnNydl9yb2xlKSB7XG4gICAgICAgICAgICBpZiAocm93LnNydl9yb2xlLnZhbHVlID09ICdhdHRhY2tlcicpXG4gICAgICAgICAgICAgICAgc3J2SWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAnYXR0YWNrZXInLCAnPGkgY2xhc3M9XCJmYXMgZmEtc2t1bGxcIiB0aXRsZT1cIicrcm93LnNydl9yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LnNydl9yb2xlLnRhZ19sYWJlbCk7XG4gICAgICAgICAgICBlbHNlIGlmIChyb3cuc3J2X3JvbGUudmFsdWUgPT0gJ3ZpY3RpbScpXG4gICAgICAgICAgICAgICAgc3J2SWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAndmljdGltJywgICc8aSBjbGFzcz1cImZhcyBmYS1zYWQtdGVhclwiIHRpdGxlPVwiJytyb3cuc3J2X3JvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cuc3J2X3JvbGUudGFnX2xhYmVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgJHthY3RpdmVfcmVmfSAke2NsaUxhYmVsfSR7Y2xpQmxhY2tsaXN0ZWR9JHtjbGlGbGFnTGFiZWx9JHtjbGlQb3J0TGFiZWx9ICR7Y2xpSWNvbnN9ICR7Zmxvdy5jbGlfaXAucmVmZXJlbmNlfSA8aSBjbGFzcz1cImZhcyBmYS1leGNoYW5nZS1hbHQgZmEtbGdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+ICR7c3J2TGFiZWx9JHtzcnZCbGFja2xpc3RlZH0ke3NydkZsYWdMYWJlbH0ke3NydlBvcnRMYWJlbH0gJHtzcnZJY29uc30gJHtmbG93LnNydl9pcC5yZWZlcmVuY2V9YDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0TmFtZURlc2NyaXB0aW9uKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICBsZXQgbXNnID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2FsZXJ0X2lkJywgb2JqLnZhbHVlLCBvYmoubmFtZSwgb2JqLmZ1bGxuYW1lLCBvYmouZnVsbG5hbWUpO1xuXG5cdC8qIERFQ0lERUQgTk9UIFRPIFNIT1cgU0hPUlRFTkVEIERFU0NSSVBUSU9OUyBJTiBUSEUgQUxFUlQgQ09MVU1OU1xuICAgICAgICBpZihvYmouZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgY29uc3Qgc3RyaXBfdGFncyA9IGZ1bmN0aW9uKGh0bWwpIHsgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpOyB0LmlubmVySFRNTCA9IGh0bWw7IHJldHVybiB0LnRleHRDb250ZW50IHx8IHQuaW5uZXJUZXh0IHx8IFwiXCI7IH1cbiAgICAgICAgICAgbGV0IGRlc2MgPSBzdHJpcF90YWdzKG9iai5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgIGlmKGRlc2Muc3RhcnRzV2l0aChvYmoubmFtZSkpIGRlc2MgPSBkZXNjLnJlcGxhY2Uob2JqLm5hbWUsIFwiXCIpO1xuICAgICAgICAgICBsZXQgbmFtZV9sZW4gPSBzdHJpcF90YWdzKG9iai5uYW1lKS5sZW5ndGg7XG4gICAgICAgICAgIGxldCBkZXNjX2xlbiA9IGRlc2MubGVuZ3RoO1xuICAgICAgICAgICBsZXQgdG90YWxfbGVuID0gbmFtZV9sZW4gKyBkZXNjX2xlbjtcbiAgICAgICAgICAgbGV0IHRvb2x0aXAgPSBcIlwiXG5cbiAgICAgICAgICAgbGV0IGxpbWl0ID0gMzA7IC8vIGRlc2NyaXB0aW9uIGxpbWl0XG4gICAgICAgICAgIGlmIChyb3cuZmFtaWx5ICE9ICdmbG93Jykge1xuICAgICAgICAgICAgIGxpbWl0ID0gNTA7IC8vIHNvbWUgZmFtaWxpZXMgaGF2ZSByb29tIGZvciBiaWdnZXIgZGVzY3JpcHRpb25zXG4gICAgICAgICAgIH1cblxuICAgICAgICAgICBpZiAodG90YWxfbGVuID4gbGltaXQpIHsgLy8gY3V0IGFuZCBzZXQgYSB0b29sdGlwXG4gICAgICAgICAgICAgaWYgKG5hbWVfbGVuID49IGxpbWl0KSB7XG4gICAgICAgICAgICAgICBkZXNjID0gXCJcIjsgLy8gbmFtZSBpcyBhbHJlYWR5IHRvbyBsb25nLCBubyBkZXNjcmlwdGlvblxuICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGN1dCB0aGUgZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgIGRlc2MgPSBkZXNjLnN1YnN0cigwLCBsaW1pdCAtIG9iai5uYW1lLmxlbmd0aCk7XG4gICAgICAgICAgICAgICBkZXNjID0gZGVzYy5yZXBsYWNlKC9cXHMoW15cXHNdKikkLywgJycpOyAvLyB3b3JkIGJyZWFrXG4gICAgICAgICAgICAgICBkZXNjID0gZGVzYyArICcmaGVsbGlwOyc7IC8vIGFkZCAnLi4uJ1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB0b29sdGlwID0gc3RyaXBfdGFncyhvYmouZGVzY3JpcHRpb24pO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgbXNnID0gbXNnICsgJzogPHNwYW4gdGl0bGU9XCInICsgdG9vbHRpcCArICdcIj4nICsgZGVzYyArICc8L3NwYW4+JztcbiAgICAgICAgfVxuXHQqL1xuXG4gICAgICAgIHJldHVybiBtc2c7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGx5Q2VsbFN0eWxlKGNlbGwsIGNlbGxEYXRhLCByb3dEYXRhLCByb3dJbmRleCwgY29sSW5kZXgpIHtcbiAgICAgIGlmIChjZWxsRGF0YS5oaWdobGlnaHQpIHtcbiAgICAgICAgICQoY2VsbCkuY3NzKFwiYm9yZGVyLWxlZnRcIiwgXCI1cHggc29saWQgXCIrY2VsbERhdGEuaGlnaGxpZ2h0KTtcbiAgICAgIH1cbiAgIH1cbn1cbiIsImZ1bmN0aW9uIGUoZSx0KXtjb25zdCBuPU9iamVjdC5jcmVhdGUobnVsbCksbz1lLnNwbGl0KFwiLFwiKTtmb3IobGV0IHI9MDtyPG8ubGVuZ3RoO3IrKyluW29bcl1dPSEwO3JldHVybiB0P2U9PiEhbltlLnRvTG93ZXJDYXNlKCldOmU9PiEhbltlXX1jb25zdCB0PWUoXCJJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLHBhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LE1hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnRcIiksbj1lKFwiaXRlbXNjb3BlLGFsbG93ZnVsbHNjcmVlbixmb3Jtbm92YWxpZGF0ZSxpc21hcCxub21vZHVsZSxub3ZhbGlkYXRlLHJlYWRvbmx5XCIpO2Z1bmN0aW9uIG8oZSl7cmV0dXJuISFlfHxcIlwiPT09ZX1mdW5jdGlvbiByKGUpe2lmKEUoZSkpe2NvbnN0IHQ9e307Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IG89ZVtuXSxzPVAobyk/bChvKTpyKG8pO2lmKHMpZm9yKGNvbnN0IGUgaW4gcyl0W2VdPXNbZV19cmV0dXJuIHR9cmV0dXJuIFAoZSl8fE0oZSk/ZTp2b2lkIDB9Y29uc3Qgcz0vOyg/IVteKF0qXFwpKS9nLGk9LzooLispLztmdW5jdGlvbiBsKGUpe2NvbnN0IHQ9e307cmV0dXJuIGUuc3BsaXQocykuZm9yRWFjaCgoZT0+e2lmKGUpe2NvbnN0IG49ZS5zcGxpdChpKTtuLmxlbmd0aD4xJiYodFtuWzBdLnRyaW0oKV09blsxXS50cmltKCkpfX0pKSx0fWZ1bmN0aW9uIGMoZSl7bGV0IHQ9XCJcIjtpZihQKGUpKXQ9ZTtlbHNlIGlmKEUoZSkpZm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IG89YyhlW25dKTtvJiYodCs9bytcIiBcIil9ZWxzZSBpZihNKGUpKWZvcihjb25zdCBuIGluIGUpZVtuXSYmKHQrPW4rXCIgXCIpO3JldHVybiB0LnRyaW0oKX1mdW5jdGlvbiBhKGUpe2lmKCFlKXJldHVybiBudWxsO2xldHtjbGFzczp0LHN0eWxlOm59PWU7cmV0dXJuIHQmJiFQKHQpJiYoZS5jbGFzcz1jKHQpKSxuJiYoZS5zdHlsZT1yKG4pKSxlfWNvbnN0IHU9ZShcImh0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LG5hdixzZWN0aW9uLGRpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LHN1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3RcIikscD1lKFwic3ZnLGFuaW1hdGUsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxjbGlwUGF0aCxjb2xvci1wcm9maWxlLGRlZnMsZGVzYyxkaXNjYXJkLGVsbGlwc2UsZmVCbGVuZCxmZUNvbG9yTWF0cml4LGZlQ29tcG9uZW50VHJhbnNmZXIsZmVDb21wb3NpdGUsZmVDb252b2x2ZU1hdHJpeCxmZURpZmZ1c2VMaWdodGluZyxmZURpc3BsYWNlbWVudE1hcCxmZURpc3RhbmNlTGlnaHQsZmVEcm9wU2hhZG93LGZlRmxvb2QsZmVGdW5jQSxmZUZ1bmNCLGZlRnVuY0csZmVGdW5jUixmZUdhdXNzaWFuQmx1cixmZUltYWdlLGZlTWVyZ2UsZmVNZXJnZU5vZGUsZmVNb3JwaG9sb2d5LGZlT2Zmc2V0LGZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsZm9yZWlnbk9iamVjdCxnLGhhdGNoLGhhdGNocGF0aCxpbWFnZSxsaW5lLGxpbmVhckdyYWRpZW50LG1hcmtlcixtYXNrLG1lc2gsbWVzaGdyYWRpZW50LG1lc2hwYXRjaCxtZXNocm93LG1ldGFkYXRhLG1wYXRoLHBhdGgscGF0dGVybixwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dFBhdGgsdGl0bGUsdHNwYW4sdW5rbm93bix1c2Usdmlld1wiKSxmPWUoXCJhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGhyLGltZyxpbnB1dCxsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdiclwiKTtmdW5jdGlvbiBkKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7bGV0IG49UihlKSxvPVIodCk7aWYobnx8bylyZXR1cm4hKCFufHwhbykmJmUuZ2V0VGltZSgpPT09dC5nZXRUaW1lKCk7aWYobj1BKGUpLG89QSh0KSxufHxvKXJldHVybiBlPT09dDtpZihuPUUoZSksbz1FKHQpLG58fG8pcmV0dXJuISghbnx8IW8pJiZmdW5jdGlvbihlLHQpe2lmKGUubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7bGV0IG49ITA7Zm9yKGxldCBvPTA7biYmbzxlLmxlbmd0aDtvKyspbj1kKGVbb10sdFtvXSk7cmV0dXJuIG59KGUsdCk7aWYobj1NKGUpLG89TSh0KSxufHxvKXtpZighbnx8IW8pcmV0dXJuITE7aWYoT2JqZWN0LmtleXMoZSkubGVuZ3RoIT09T2JqZWN0LmtleXModCkubGVuZ3RoKXJldHVybiExO2Zvcihjb25zdCBuIGluIGUpe2NvbnN0IG89ZS5oYXNPd25Qcm9wZXJ0eShuKSxyPXQuaGFzT3duUHJvcGVydHkobik7aWYobyYmIXJ8fCFvJiZyfHwhZChlW25dLHRbbl0pKXJldHVybiExfX1yZXR1cm4gU3RyaW5nKGUpPT09U3RyaW5nKHQpfWZ1bmN0aW9uIGgoZSx0KXtyZXR1cm4gZS5maW5kSW5kZXgoKGU9PmQoZSx0KSkpfWNvbnN0IG09ZT0+UChlKT9lOm51bGw9PWU/XCJcIjpFKGUpfHxNKGUpJiYoZS50b1N0cmluZz09PUl8fCFGKGUudG9TdHJpbmcpKT9KU09OLnN0cmluZ2lmeShlLGcsMik6U3RyaW5nKGUpLGc9KGUsdCk9PnQmJnQuX192X2lzUmVmP2coZSx0LnZhbHVlKTokKHQpP3tbYE1hcCgke3Quc2l6ZX0pYF06Wy4uLnQuZW50cmllcygpXS5yZWR1Y2UoKChlLFt0LG5dKT0+KGVbYCR7dH0gPT5gXT1uLGUpKSx7fSl9Ok8odCk/e1tgU2V0KCR7dC5zaXplfSlgXTpbLi4udC52YWx1ZXMoKV19OiFNKHQpfHxFKHQpfHxMKHQpP3Q6U3RyaW5nKHQpLHY9e30seT1bXSxfPSgpPT57fSxiPSgpPT4hMSxTPS9eb25bXmEtel0vLHg9ZT0+Uy50ZXN0KGUpLEM9ZT0+ZS5zdGFydHNXaXRoKFwib25VcGRhdGU6XCIpLHc9T2JqZWN0LmFzc2lnbixrPShlLHQpPT57Y29uc3Qgbj1lLmluZGV4T2YodCk7bj4tMSYmZS5zcGxpY2UobiwxKX0sVD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LE49KGUsdCk9PlQuY2FsbChlLHQpLEU9QXJyYXkuaXNBcnJheSwkPWU9PlwiW29iamVjdCBNYXBdXCI9PT1CKGUpLE89ZT0+XCJbb2JqZWN0IFNldF1cIj09PUIoZSksUj1lPT5cIltvYmplY3QgRGF0ZV1cIj09PUIoZSksRj1lPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLFA9ZT0+XCJzdHJpbmdcIj09dHlwZW9mIGUsQT1lPT5cInN5bWJvbFwiPT10eXBlb2YgZSxNPWU9Pm51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSxWPWU9Pk0oZSkmJkYoZS50aGVuKSYmRihlLmNhdGNoKSxJPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsQj1lPT5JLmNhbGwoZSksTD1lPT5cIltvYmplY3QgT2JqZWN0XVwiPT09QihlKSxqPWU9PlAoZSkmJlwiTmFOXCIhPT1lJiZcIi1cIiE9PWVbMF0mJlwiXCIrcGFyc2VJbnQoZSwxMCk9PT1lLFU9ZShcIixrZXkscmVmLHJlZl9mb3IscmVmX2tleSxvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCxvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkXCIpLEQ9ZShcImJpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0LG1lbW9cIiksSD1lPT57Y29uc3QgdD1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBuPT50W25dfHwodFtuXT1lKG4pKX0sVz0vLShcXHcpL2csej1IKChlPT5lLnJlcGxhY2UoVywoKGUsdCk9PnQ/dC50b1VwcGVyQ2FzZSgpOlwiXCIpKSkpLEs9L1xcQihbQS1aXSkvZyxHPUgoKGU9PmUucmVwbGFjZShLLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpKSxxPUgoKGU9PmUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSkpLEo9SCgoZT0+ZT9gb24ke3EoZSl9YDpcIlwiKSksWT0oZSx0KT0+IU9iamVjdC5pcyhlLHQpLFo9KGUsdCk9Pntmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyllW25dKHQpfSxRPShlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx2YWx1ZTpufSl9LFg9ZT0+e2NvbnN0IHQ9cGFyc2VGbG9hdChlKTtyZXR1cm4gaXNOYU4odCk/ZTp0fTtsZXQgZWU7bGV0IHRlO2NsYXNzIG5le2NvbnN0cnVjdG9yKGU9ITEpe3RoaXMuYWN0aXZlPSEwLHRoaXMuZWZmZWN0cz1bXSx0aGlzLmNsZWFudXBzPVtdLCFlJiZ0ZSYmKHRoaXMucGFyZW50PXRlLHRoaXMuaW5kZXg9KHRlLnNjb3Blc3x8KHRlLnNjb3Blcz1bXSkpLnB1c2godGhpcyktMSl9cnVuKGUpe2lmKHRoaXMuYWN0aXZlKXtjb25zdCB0PXRlO3RyeXtyZXR1cm4gdGU9dGhpcyxlKCl9ZmluYWxseXt0ZT10fX19b24oKXt0ZT10aGlzfW9mZigpe3RlPXRoaXMucGFyZW50fXN0b3AoZSl7aWYodGhpcy5hY3RpdmUpe2xldCB0LG47Zm9yKHQ9MCxuPXRoaXMuZWZmZWN0cy5sZW5ndGg7dDxuO3QrKyl0aGlzLmVmZmVjdHNbdF0uc3RvcCgpO2Zvcih0PTAsbj10aGlzLmNsZWFudXBzLmxlbmd0aDt0PG47dCsrKXRoaXMuY2xlYW51cHNbdF0oKTtpZih0aGlzLnNjb3Blcylmb3IodD0wLG49dGhpcy5zY29wZXMubGVuZ3RoO3Q8bjt0KyspdGhpcy5zY29wZXNbdF0uc3RvcCghMCk7aWYodGhpcy5wYXJlbnQmJiFlKXtjb25zdCBlPXRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtlJiZlIT09dGhpcyYmKHRoaXMucGFyZW50LnNjb3Blc1t0aGlzLmluZGV4XT1lLGUuaW5kZXg9dGhpcy5pbmRleCl9dGhpcy5hY3RpdmU9ITF9fX1mdW5jdGlvbiBvZShlKXtyZXR1cm4gbmV3IG5lKGUpfWZ1bmN0aW9uIHJlKGUsdD10ZSl7dCYmdC5hY3RpdmUmJnQuZWZmZWN0cy5wdXNoKGUpfWZ1bmN0aW9uIHNlKCl7cmV0dXJuIHRlfWZ1bmN0aW9uIGllKGUpe3RlJiZ0ZS5jbGVhbnVwcy5wdXNoKGUpfWNvbnN0IGxlPWU9Pntjb25zdCB0PW5ldyBTZXQoZSk7cmV0dXJuIHQudz0wLHQubj0wLHR9LGNlPWU9PihlLncmZmUpPjAsYWU9ZT0+KGUubiZmZSk+MCx1ZT1uZXcgV2Vha01hcDtsZXQgcGU9MCxmZT0xO2xldCBkZTtjb25zdCBoZT1TeW1ib2woXCJcIiksbWU9U3ltYm9sKFwiXCIpO2NsYXNzIGdle2NvbnN0cnVjdG9yKGUsdD1udWxsLG4pe3RoaXMuZm49ZSx0aGlzLnNjaGVkdWxlcj10LHRoaXMuYWN0aXZlPSEwLHRoaXMuZGVwcz1bXSx0aGlzLnBhcmVudD12b2lkIDAscmUodGhpcyxuKX1ydW4oKXtpZighdGhpcy5hY3RpdmUpcmV0dXJuIHRoaXMuZm4oKTtsZXQgZT1kZSx0PWJlO2Zvcig7ZTspe2lmKGU9PT10aGlzKXJldHVybjtlPWUucGFyZW50fXRyeXtyZXR1cm4gdGhpcy5wYXJlbnQ9ZGUsZGU9dGhpcyxiZT0hMCxmZT0xPDwrK3BlLHBlPD0zMD8oKHtkZXBzOmV9KT0+e2lmKGUubGVuZ3RoKWZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0ud3w9ZmV9KSh0aGlzKTp2ZSh0aGlzKSx0aGlzLmZuKCl9ZmluYWxseXtwZTw9MzAmJihlPT57Y29uc3R7ZGVwczp0fT1lO2lmKHQubGVuZ3RoKXtsZXQgbj0wO2ZvcihsZXQgbz0wO288dC5sZW5ndGg7bysrKXtjb25zdCByPXRbb107Y2UocikmJiFhZShyKT9yLmRlbGV0ZShlKTp0W24rK109cixyLncmPX5mZSxyLm4mPX5mZX10Lmxlbmd0aD1ufX0pKHRoaXMpLGZlPTE8PC0tcGUsZGU9dGhpcy5wYXJlbnQsYmU9dCx0aGlzLnBhcmVudD12b2lkIDAsdGhpcy5kZWZlclN0b3AmJnRoaXMuc3RvcCgpfX1zdG9wKCl7ZGU9PT10aGlzP3RoaXMuZGVmZXJTdG9wPSEwOnRoaXMuYWN0aXZlJiYodmUodGhpcyksdGhpcy5vblN0b3AmJnRoaXMub25TdG9wKCksdGhpcy5hY3RpdmU9ITEpfX1mdW5jdGlvbiB2ZShlKXtjb25zdHtkZXBzOnR9PWU7aWYodC5sZW5ndGgpe2ZvcihsZXQgbj0wO248dC5sZW5ndGg7bisrKXRbbl0uZGVsZXRlKGUpO3QubGVuZ3RoPTB9fWZ1bmN0aW9uIHllKGUsdCl7ZS5lZmZlY3QmJihlPWUuZWZmZWN0LmZuKTtjb25zdCBuPW5ldyBnZShlKTt0JiYodyhuLHQpLHQuc2NvcGUmJnJlKG4sdC5zY29wZSkpLHQmJnQubGF6eXx8bi5ydW4oKTtjb25zdCBvPW4ucnVuLmJpbmQobik7cmV0dXJuIG8uZWZmZWN0PW4sb31mdW5jdGlvbiBfZShlKXtlLmVmZmVjdC5zdG9wKCl9bGV0IGJlPSEwO2NvbnN0IFNlPVtdO2Z1bmN0aW9uIHhlKCl7U2UucHVzaChiZSksYmU9ITF9ZnVuY3Rpb24gQ2UoKXtjb25zdCBlPVNlLnBvcCgpO2JlPXZvaWQgMD09PWV8fGV9ZnVuY3Rpb24gd2UoZSx0LG4pe2lmKGJlJiZkZSl7bGV0IHQ9dWUuZ2V0KGUpO3R8fHVlLnNldChlLHQ9bmV3IE1hcCk7bGV0IG89dC5nZXQobik7b3x8dC5zZXQobixvPWxlKCkpLGtlKG8pfX1mdW5jdGlvbiBrZShlLHQpe2xldCBuPSExO3BlPD0zMD9hZShlKXx8KGUubnw9ZmUsbj0hY2UoZSkpOm49IWUuaGFzKGRlKSxuJiYoZS5hZGQoZGUpLGRlLmRlcHMucHVzaChlKSl9ZnVuY3Rpb24gVGUoZSx0LG4sbyxyLHMpe2NvbnN0IGk9dWUuZ2V0KGUpO2lmKCFpKXJldHVybjtsZXQgbD1bXTtpZihcImNsZWFyXCI9PT10KWw9Wy4uLmkudmFsdWVzKCldO2Vsc2UgaWYoXCJsZW5ndGhcIj09PW4mJkUoZSkpaS5mb3JFYWNoKCgoZSx0KT0+eyhcImxlbmd0aFwiPT09dHx8dD49bykmJmwucHVzaChlKX0pKTtlbHNlIHN3aXRjaCh2b2lkIDAhPT1uJiZsLnB1c2goaS5nZXQobikpLHQpe2Nhc2VcImFkZFwiOkUoZSk/aihuKSYmbC5wdXNoKGkuZ2V0KFwibGVuZ3RoXCIpKToobC5wdXNoKGkuZ2V0KGhlKSksJChlKSYmbC5wdXNoKGkuZ2V0KG1lKSkpO2JyZWFrO2Nhc2VcImRlbGV0ZVwiOkUoZSl8fChsLnB1c2goaS5nZXQoaGUpKSwkKGUpJiZsLnB1c2goaS5nZXQobWUpKSk7YnJlYWs7Y2FzZVwic2V0XCI6JChlKSYmbC5wdXNoKGkuZ2V0KGhlKSl9aWYoMT09PWwubGVuZ3RoKWxbMF0mJk5lKGxbMF0pO2Vsc2V7Y29uc3QgZT1bXTtmb3IoY29uc3QgdCBvZiBsKXQmJmUucHVzaCguLi50KTtOZShsZShlKSl9fWZ1bmN0aW9uIE5lKGUsdCl7Y29uc3Qgbj1FKGUpP2U6Wy4uLmVdO2Zvcihjb25zdCBvIG9mIG4pby5jb21wdXRlZCYmRWUobyk7Zm9yKGNvbnN0IG8gb2YgbilvLmNvbXB1dGVkfHxFZShvKX1mdW5jdGlvbiBFZShlLHQpeyhlIT09ZGV8fGUuYWxsb3dSZWN1cnNlKSYmKGUuc2NoZWR1bGVyP2Uuc2NoZWR1bGVyKCk6ZS5ydW4oKSl9Y29uc3QgJGU9ZShcIl9fcHJvdG9fXyxfX3ZfaXNSZWYsX19pc1Z1ZVwiKSxPZT1uZXcgU2V0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFN5bWJvbCkuZmlsdGVyKChlPT5cImFyZ3VtZW50c1wiIT09ZSYmXCJjYWxsZXJcIiE9PWUpKS5tYXAoKGU9PlN5bWJvbFtlXSkpLmZpbHRlcihBKSksUmU9SWUoKSxGZT1JZSghMSwhMCksUGU9SWUoITApLEFlPUllKCEwLCEwKSxNZT1WZSgpO2Z1bmN0aW9uIFZlKCl7Y29uc3QgZT17fTtyZXR1cm5bXCJpbmNsdWRlc1wiLFwiaW5kZXhPZlwiLFwibGFzdEluZGV4T2ZcIl0uZm9yRWFjaCgodD0+e2VbdF09ZnVuY3Rpb24oLi4uZSl7Y29uc3Qgbj1rdCh0aGlzKTtmb3IobGV0IHQ9MCxyPXRoaXMubGVuZ3RoO3Q8cjt0Kyspd2UobiwwLHQrXCJcIik7Y29uc3Qgbz1uW3RdKC4uLmUpO3JldHVybi0xPT09b3x8ITE9PT1vP25bdF0oLi4uZS5tYXAoa3QpKTpvfX0pKSxbXCJwdXNoXCIsXCJwb3BcIixcInNoaWZ0XCIsXCJ1bnNoaWZ0XCIsXCJzcGxpY2VcIl0uZm9yRWFjaCgodD0+e2VbdF09ZnVuY3Rpb24oLi4uZSl7eGUoKTtjb25zdCBuPWt0KHRoaXMpW3RdLmFwcGx5KHRoaXMsZSk7cmV0dXJuIENlKCksbn19KSksZX1mdW5jdGlvbiBJZShlPSExLHQ9ITEpe3JldHVybiBmdW5jdGlvbihuLG8scil7aWYoXCJfX3ZfaXNSZWFjdGl2ZVwiPT09bylyZXR1cm4hZTtpZihcIl9fdl9pc1JlYWRvbmx5XCI9PT1vKXJldHVybiBlO2lmKFwiX192X2lzU2hhbGxvd1wiPT09bylyZXR1cm4gdDtpZihcIl9fdl9yYXdcIj09PW8mJnI9PT0oZT90P2h0OmR0OnQ/ZnQ6cHQpLmdldChuKSlyZXR1cm4gbjtjb25zdCBzPUUobik7aWYoIWUmJnMmJk4oTWUsbykpcmV0dXJuIFJlZmxlY3QuZ2V0KE1lLG8scik7Y29uc3QgaT1SZWZsZWN0LmdldChuLG8scik7cmV0dXJuKEEobyk/T2UuaGFzKG8pOiRlKG8pKT9pOihlfHx3ZShuLDAsbyksdD9pOlJ0KGkpP3MmJmoobyk/aTppLnZhbHVlOk0oaSk/ZT95dChpKTpndChpKTppKX19ZnVuY3Rpb24gQmUoZT0hMSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixvLHIpe2xldCBzPXRbbl07aWYoeHQocykmJlJ0KHMpJiYhUnQobykpcmV0dXJuITE7aWYoIWUmJiF4dChvKSYmKEN0KG8pfHwobz1rdChvKSxzPWt0KHMpKSwhRSh0KSYmUnQocykmJiFSdChvKSkpcmV0dXJuIHMudmFsdWU9bywhMDtjb25zdCBpPUUodCkmJmoobik/TnVtYmVyKG4pPHQubGVuZ3RoOk4odCxuKSxsPVJlZmxlY3Quc2V0KHQsbixvLHIpO3JldHVybiB0PT09a3QocikmJihpP1kobyxzKSYmVGUodCxcInNldFwiLG4sbyk6VGUodCxcImFkZFwiLG4sbykpLGx9fWNvbnN0IExlPXtnZXQ6UmUsc2V0OkJlKCksZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24oZSx0KXtjb25zdCBuPU4oZSx0KSxvPVJlZmxlY3QuZGVsZXRlUHJvcGVydHkoZSx0KTtyZXR1cm4gbyYmbiYmVGUoZSxcImRlbGV0ZVwiLHQsdm9pZCAwKSxvfSxoYXM6ZnVuY3Rpb24oZSx0KXtjb25zdCBuPVJlZmxlY3QuaGFzKGUsdCk7cmV0dXJuIEEodCkmJk9lLmhhcyh0KXx8d2UoZSwwLHQpLG59LG93bktleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIHdlKGUsMCxFKGUpP1wibGVuZ3RoXCI6aGUpLFJlZmxlY3Qub3duS2V5cyhlKX19LGplPXtnZXQ6UGUsc2V0OihlLHQpPT4hMCxkZWxldGVQcm9wZXJ0eTooZSx0KT0+ITB9LFVlPXcoe30sTGUse2dldDpGZSxzZXQ6QmUoITApfSksRGU9dyh7fSxqZSx7Z2V0OkFlfSksSGU9ZT0+ZSxXZT1lPT5SZWZsZWN0LmdldFByb3RvdHlwZU9mKGUpO2Z1bmN0aW9uIHplKGUsdCxuPSExLG89ITEpe2NvbnN0IHI9a3QoZT1lLl9fdl9yYXcpLHM9a3QodCk7bnx8KHQhPT1zJiZ3ZShyLDAsdCksd2UociwwLHMpKTtjb25zdHtoYXM6aX09V2UociksbD1vP0hlOm4/RXQ6TnQ7cmV0dXJuIGkuY2FsbChyLHQpP2woZS5nZXQodCkpOmkuY2FsbChyLHMpP2woZS5nZXQocykpOnZvaWQoZSE9PXImJmUuZ2V0KHQpKX1mdW5jdGlvbiBLZShlLHQ9ITEpe2NvbnN0IG49dGhpcy5fX3ZfcmF3LG89a3Qobikscj1rdChlKTtyZXR1cm4gdHx8KGUhPT1yJiZ3ZShvLDAsZSksd2UobywwLHIpKSxlPT09cj9uLmhhcyhlKTpuLmhhcyhlKXx8bi5oYXMocil9ZnVuY3Rpb24gR2UoZSx0PSExKXtyZXR1cm4gZT1lLl9fdl9yYXcsIXQmJndlKGt0KGUpLDAsaGUpLFJlZmxlY3QuZ2V0KGUsXCJzaXplXCIsZSl9ZnVuY3Rpb24gcWUoZSl7ZT1rdChlKTtjb25zdCB0PWt0KHRoaXMpO3JldHVybiBXZSh0KS5oYXMuY2FsbCh0LGUpfHwodC5hZGQoZSksVGUodCxcImFkZFwiLGUsZSkpLHRoaXN9ZnVuY3Rpb24gSmUoZSx0KXt0PWt0KHQpO2NvbnN0IG49a3QodGhpcykse2hhczpvLGdldDpyfT1XZShuKTtsZXQgcz1vLmNhbGwobixlKTtzfHwoZT1rdChlKSxzPW8uY2FsbChuLGUpKTtjb25zdCBpPXIuY2FsbChuLGUpO3JldHVybiBuLnNldChlLHQpLHM/WSh0LGkpJiZUZShuLFwic2V0XCIsZSx0KTpUZShuLFwiYWRkXCIsZSx0KSx0aGlzfWZ1bmN0aW9uIFllKGUpe2NvbnN0IHQ9a3QodGhpcykse2hhczpuLGdldDpvfT1XZSh0KTtsZXQgcj1uLmNhbGwodCxlKTtyfHwoZT1rdChlKSxyPW4uY2FsbCh0LGUpKSxvJiZvLmNhbGwodCxlKTtjb25zdCBzPXQuZGVsZXRlKGUpO3JldHVybiByJiZUZSh0LFwiZGVsZXRlXCIsZSx2b2lkIDApLHN9ZnVuY3Rpb24gWmUoKXtjb25zdCBlPWt0KHRoaXMpLHQ9MCE9PWUuc2l6ZSxuPWUuY2xlYXIoKTtyZXR1cm4gdCYmVGUoZSxcImNsZWFyXCIsdm9pZCAwLHZvaWQgMCksbn1mdW5jdGlvbiBRZShlLHQpe3JldHVybiBmdW5jdGlvbihuLG8pe2NvbnN0IHI9dGhpcyxzPXIuX192X3JhdyxpPWt0KHMpLGw9dD9IZTplP0V0Ok50O3JldHVybiFlJiZ3ZShpLDAsaGUpLHMuZm9yRWFjaCgoKGUsdCk9Pm4uY2FsbChvLGwoZSksbCh0KSxyKSkpfX1mdW5jdGlvbiBYZShlLHQsbil7cmV0dXJuIGZ1bmN0aW9uKC4uLm8pe2NvbnN0IHI9dGhpcy5fX3ZfcmF3LHM9a3QociksaT0kKHMpLGw9XCJlbnRyaWVzXCI9PT1lfHxlPT09U3ltYm9sLml0ZXJhdG9yJiZpLGM9XCJrZXlzXCI9PT1lJiZpLGE9cltlXSguLi5vKSx1PW4/SGU6dD9FdDpOdDtyZXR1cm4hdCYmd2UocywwLGM/bWU6aGUpLHtuZXh0KCl7Y29uc3R7dmFsdWU6ZSxkb25lOnR9PWEubmV4dCgpO3JldHVybiB0P3t2YWx1ZTplLGRvbmU6dH06e3ZhbHVlOmw/W3UoZVswXSksdShlWzFdKV06dShlKSxkb25lOnR9fSxbU3ltYm9sLml0ZXJhdG9yXSgpe3JldHVybiB0aGlzfX19fWZ1bmN0aW9uIGV0KGUpe3JldHVybiBmdW5jdGlvbiguLi50KXtyZXR1cm5cImRlbGV0ZVwiIT09ZSYmdGhpc319ZnVuY3Rpb24gdHQoKXtjb25zdCBlPXtnZXQoZSl7cmV0dXJuIHplKHRoaXMsZSl9LGdldCBzaXplKCl7cmV0dXJuIEdlKHRoaXMpfSxoYXM6S2UsYWRkOnFlLHNldDpKZSxkZWxldGU6WWUsY2xlYXI6WmUsZm9yRWFjaDpRZSghMSwhMSl9LHQ9e2dldChlKXtyZXR1cm4gemUodGhpcyxlLCExLCEwKX0sZ2V0IHNpemUoKXtyZXR1cm4gR2UodGhpcyl9LGhhczpLZSxhZGQ6cWUsc2V0OkplLGRlbGV0ZTpZZSxjbGVhcjpaZSxmb3JFYWNoOlFlKCExLCEwKX0sbj17Z2V0KGUpe3JldHVybiB6ZSh0aGlzLGUsITApfSxnZXQgc2l6ZSgpe3JldHVybiBHZSh0aGlzLCEwKX0saGFzKGUpe3JldHVybiBLZS5jYWxsKHRoaXMsZSwhMCl9LGFkZDpldChcImFkZFwiKSxzZXQ6ZXQoXCJzZXRcIiksZGVsZXRlOmV0KFwiZGVsZXRlXCIpLGNsZWFyOmV0KFwiY2xlYXJcIiksZm9yRWFjaDpRZSghMCwhMSl9LG89e2dldChlKXtyZXR1cm4gemUodGhpcyxlLCEwLCEwKX0sZ2V0IHNpemUoKXtyZXR1cm4gR2UodGhpcywhMCl9LGhhcyhlKXtyZXR1cm4gS2UuY2FsbCh0aGlzLGUsITApfSxhZGQ6ZXQoXCJhZGRcIiksc2V0OmV0KFwic2V0XCIpLGRlbGV0ZTpldChcImRlbGV0ZVwiKSxjbGVhcjpldChcImNsZWFyXCIpLGZvckVhY2g6UWUoITAsITApfTtyZXR1cm5bXCJrZXlzXCIsXCJ2YWx1ZXNcIixcImVudHJpZXNcIixTeW1ib2wuaXRlcmF0b3JdLmZvckVhY2goKHI9PntlW3JdPVhlKHIsITEsITEpLG5bcl09WGUociwhMCwhMSksdFtyXT1YZShyLCExLCEwKSxvW3JdPVhlKHIsITAsITApfSkpLFtlLG4sdCxvXX1jb25zdFtudCxvdCxydCxzdF09dHQoKTtmdW5jdGlvbiBpdChlLHQpe2NvbnN0IG49dD9lP3N0OnJ0OmU/b3Q6bnQ7cmV0dXJuKHQsbyxyKT0+XCJfX3ZfaXNSZWFjdGl2ZVwiPT09bz8hZTpcIl9fdl9pc1JlYWRvbmx5XCI9PT1vP2U6XCJfX3ZfcmF3XCI9PT1vP3Q6UmVmbGVjdC5nZXQoTihuLG8pJiZvIGluIHQ/bjp0LG8scil9Y29uc3QgbHQ9e2dldDppdCghMSwhMSl9LGN0PXtnZXQ6aXQoITEsITApfSxhdD17Z2V0Oml0KCEwLCExKX0sdXQ9e2dldDppdCghMCwhMCl9LHB0PW5ldyBXZWFrTWFwLGZ0PW5ldyBXZWFrTWFwLGR0PW5ldyBXZWFrTWFwLGh0PW5ldyBXZWFrTWFwO2Z1bmN0aW9uIG10KGUpe3JldHVybiBlLl9fdl9za2lwfHwhT2JqZWN0LmlzRXh0ZW5zaWJsZShlKT8wOmZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlXCJPYmplY3RcIjpjYXNlXCJBcnJheVwiOnJldHVybiAxO2Nhc2VcIk1hcFwiOmNhc2VcIlNldFwiOmNhc2VcIldlYWtNYXBcIjpjYXNlXCJXZWFrU2V0XCI6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19KChlPT5CKGUpLnNsaWNlKDgsLTEpKShlKSl9ZnVuY3Rpb24gZ3QoZSl7cmV0dXJuIHh0KGUpP2U6YnQoZSwhMSxMZSxsdCxwdCl9ZnVuY3Rpb24gdnQoZSl7cmV0dXJuIGJ0KGUsITEsVWUsY3QsZnQpfWZ1bmN0aW9uIHl0KGUpe3JldHVybiBidChlLCEwLGplLGF0LGR0KX1mdW5jdGlvbiBfdChlKXtyZXR1cm4gYnQoZSwhMCxEZSx1dCxodCl9ZnVuY3Rpb24gYnQoZSx0LG4sbyxyKXtpZighTShlKSlyZXR1cm4gZTtpZihlLl9fdl9yYXcmJighdHx8IWUuX192X2lzUmVhY3RpdmUpKXJldHVybiBlO2NvbnN0IHM9ci5nZXQoZSk7aWYocylyZXR1cm4gcztjb25zdCBpPW10KGUpO2lmKDA9PT1pKXJldHVybiBlO2NvbnN0IGw9bmV3IFByb3h5KGUsMj09PWk/bzpuKTtyZXR1cm4gci5zZXQoZSxsKSxsfWZ1bmN0aW9uIFN0KGUpe3JldHVybiB4dChlKT9TdChlLl9fdl9yYXcpOiEoIWV8fCFlLl9fdl9pc1JlYWN0aXZlKX1mdW5jdGlvbiB4dChlKXtyZXR1cm4hKCFlfHwhZS5fX3ZfaXNSZWFkb25seSl9ZnVuY3Rpb24gQ3QoZSl7cmV0dXJuISghZXx8IWUuX192X2lzU2hhbGxvdyl9ZnVuY3Rpb24gd3QoZSl7cmV0dXJuIFN0KGUpfHx4dChlKX1mdW5jdGlvbiBrdChlKXtjb25zdCB0PWUmJmUuX192X3JhdztyZXR1cm4gdD9rdCh0KTplfWZ1bmN0aW9uIFR0KGUpe3JldHVybiBRKGUsXCJfX3Zfc2tpcFwiLCEwKSxlfWNvbnN0IE50PWU9Pk0oZSk/Z3QoZSk6ZSxFdD1lPT5NKGUpP3l0KGUpOmU7ZnVuY3Rpb24gJHQoZSl7YmUmJmRlJiZrZSgoZT1rdChlKSkuZGVwfHwoZS5kZXA9bGUoKSkpfWZ1bmN0aW9uIE90KGUsdCl7KGU9a3QoZSkpLmRlcCYmTmUoZS5kZXApfWZ1bmN0aW9uIFJ0KGUpe3JldHVybiEoIWV8fCEwIT09ZS5fX3ZfaXNSZWYpfWZ1bmN0aW9uIEZ0KGUpe3JldHVybiBBdChlLCExKX1mdW5jdGlvbiBQdChlKXtyZXR1cm4gQXQoZSwhMCl9ZnVuY3Rpb24gQXQoZSx0KXtyZXR1cm4gUnQoZSk/ZTpuZXcgTXQoZSx0KX1jbGFzcyBNdHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuX192X2lzU2hhbGxvdz10LHRoaXMuZGVwPXZvaWQgMCx0aGlzLl9fdl9pc1JlZj0hMCx0aGlzLl9yYXdWYWx1ZT10P2U6a3QoZSksdGhpcy5fdmFsdWU9dD9lOk50KGUpfWdldCB2YWx1ZSgpe3JldHVybiAkdCh0aGlzKSx0aGlzLl92YWx1ZX1zZXQgdmFsdWUoZSl7ZT10aGlzLl9fdl9pc1NoYWxsb3c/ZTprdChlKSxZKGUsdGhpcy5fcmF3VmFsdWUpJiYodGhpcy5fcmF3VmFsdWU9ZSx0aGlzLl92YWx1ZT10aGlzLl9fdl9pc1NoYWxsb3c/ZTpOdChlKSxPdCh0aGlzKSl9fWZ1bmN0aW9uIFZ0KGUpe090KGUpfWZ1bmN0aW9uIEl0KGUpe3JldHVybiBSdChlKT9lLnZhbHVlOmV9Y29uc3QgQnQ9e2dldDooZSx0LG4pPT5JdChSZWZsZWN0LmdldChlLHQsbikpLHNldDooZSx0LG4sbyk9Pntjb25zdCByPWVbdF07cmV0dXJuIFJ0KHIpJiYhUnQobik/KHIudmFsdWU9biwhMCk6UmVmbGVjdC5zZXQoZSx0LG4sbyl9fTtmdW5jdGlvbiBMdChlKXtyZXR1cm4gU3QoZSk/ZTpuZXcgUHJveHkoZSxCdCl9Y2xhc3MganR7Y29uc3RydWN0b3IoZSl7dGhpcy5kZXA9dm9pZCAwLHRoaXMuX192X2lzUmVmPSEwO2NvbnN0e2dldDp0LHNldDpufT1lKCgoKT0+JHQodGhpcykpLCgoKT0+T3QodGhpcykpKTt0aGlzLl9nZXQ9dCx0aGlzLl9zZXQ9bn1nZXQgdmFsdWUoKXtyZXR1cm4gdGhpcy5fZ2V0KCl9c2V0IHZhbHVlKGUpe3RoaXMuX3NldChlKX19ZnVuY3Rpb24gVXQoZSl7cmV0dXJuIG5ldyBqdChlKX1mdW5jdGlvbiBEdChlKXtjb25zdCB0PUUoZSk/bmV3IEFycmF5KGUubGVuZ3RoKTp7fTtmb3IoY29uc3QgbiBpbiBlKXRbbl09V3QoZSxuKTtyZXR1cm4gdH1jbGFzcyBIdHtjb25zdHJ1Y3RvcihlLHQsbil7dGhpcy5fb2JqZWN0PWUsdGhpcy5fa2V5PXQsdGhpcy5fZGVmYXVsdFZhbHVlPW4sdGhpcy5fX3ZfaXNSZWY9ITB9Z2V0IHZhbHVlKCl7Y29uc3QgZT10aGlzLl9vYmplY3RbdGhpcy5fa2V5XTtyZXR1cm4gdm9pZCAwPT09ZT90aGlzLl9kZWZhdWx0VmFsdWU6ZX1zZXQgdmFsdWUoZSl7dGhpcy5fb2JqZWN0W3RoaXMuX2tleV09ZX19ZnVuY3Rpb24gV3QoZSx0LG4pe2NvbnN0IG89ZVt0XTtyZXR1cm4gUnQobyk/bzpuZXcgSHQoZSx0LG4pfWNsYXNzIHp0e2NvbnN0cnVjdG9yKGUsdCxuLG8pe3RoaXMuX3NldHRlcj10LHRoaXMuZGVwPXZvaWQgMCx0aGlzLl9fdl9pc1JlZj0hMCx0aGlzLl9kaXJ0eT0hMCx0aGlzLmVmZmVjdD1uZXcgZ2UoZSwoKCk9Pnt0aGlzLl9kaXJ0eXx8KHRoaXMuX2RpcnR5PSEwLE90KHRoaXMpKX0pKSx0aGlzLmVmZmVjdC5jb21wdXRlZD10aGlzLHRoaXMuZWZmZWN0LmFjdGl2ZT10aGlzLl9jYWNoZWFibGU9IW8sdGhpcy5fX3ZfaXNSZWFkb25seT1ufWdldCB2YWx1ZSgpe2NvbnN0IGU9a3QodGhpcyk7cmV0dXJuICR0KGUpLCFlLl9kaXJ0eSYmZS5fY2FjaGVhYmxlfHwoZS5fZGlydHk9ITEsZS5fdmFsdWU9ZS5lZmZlY3QucnVuKCkpLGUuX3ZhbHVlfXNldCB2YWx1ZShlKXt0aGlzLl9zZXR0ZXIoZSl9fWNvbnN0IEt0PVtdO2Z1bmN0aW9uIEd0KGUsLi4udCl7eGUoKTtjb25zdCBuPUt0Lmxlbmd0aD9LdFtLdC5sZW5ndGgtMV0uY29tcG9uZW50Om51bGwsbz1uJiZuLmFwcENvbnRleHQuY29uZmlnLndhcm5IYW5kbGVyLHI9ZnVuY3Rpb24oKXtsZXQgZT1LdFtLdC5sZW5ndGgtMV07aWYoIWUpcmV0dXJuW107Y29uc3QgdD1bXTtmb3IoO2U7KXtjb25zdCBuPXRbMF07biYmbi52bm9kZT09PWU/bi5yZWN1cnNlQ291bnQrKzp0LnB1c2goe3Zub2RlOmUscmVjdXJzZUNvdW50OjB9KTtjb25zdCBvPWUuY29tcG9uZW50JiZlLmNvbXBvbmVudC5wYXJlbnQ7ZT1vJiZvLnZub2RlfXJldHVybiB0fSgpO2lmKG8pWXQobyxuLDExLFtlK3Quam9pbihcIlwiKSxuJiZuLnByb3h5LHIubWFwKCgoe3Zub2RlOmV9KT0+YGF0IDwke0xzKG4sZS50eXBlKX0+YCkpLmpvaW4oXCJcXG5cIikscl0pO2Vsc2V7Y29uc3Qgbj1bYFtWdWUgd2Fybl06ICR7ZX1gLC4uLnRdO3IubGVuZ3RoJiZuLnB1c2goXCJcXG5cIiwuLi5mdW5jdGlvbihlKXtjb25zdCB0PVtdO3JldHVybiBlLmZvckVhY2goKChlLG4pPT57dC5wdXNoKC4uLjA9PT1uP1tdOltcIlxcblwiXSwuLi5mdW5jdGlvbih7dm5vZGU6ZSxyZWN1cnNlQ291bnQ6dH0pe2NvbnN0IG49dD4wP2AuLi4gKCR7dH0gcmVjdXJzaXZlIGNhbGxzKWA6XCJcIixvPWAgYXQgPCR7THMoZS5jb21wb25lbnQsZS50eXBlLCEhZS5jb21wb25lbnQmJm51bGw9PWUuY29tcG9uZW50LnBhcmVudCl9YCxyPVwiPlwiK247cmV0dXJuIGUucHJvcHM/W28sLi4ucXQoZS5wcm9wcykscl06W28rcl19KGUpKX0pKSx0fShyKSksY29uc29sZS53YXJuKC4uLm4pfUNlKCl9ZnVuY3Rpb24gcXQoZSl7Y29uc3QgdD1bXSxuPU9iamVjdC5rZXlzKGUpO3JldHVybiBuLnNsaWNlKDAsMykuZm9yRWFjaCgobj0+e3QucHVzaCguLi5KdChuLGVbbl0pKX0pKSxuLmxlbmd0aD4zJiZ0LnB1c2goXCIgLi4uXCIpLHR9ZnVuY3Rpb24gSnQoZSx0LG4pe3JldHVybiBQKHQpPyh0PUpTT04uc3RyaW5naWZ5KHQpLG4/dDpbYCR7ZX09JHt0fWBdKTpcIm51bWJlclwiPT10eXBlb2YgdHx8XCJib29sZWFuXCI9PXR5cGVvZiB0fHxudWxsPT10P24/dDpbYCR7ZX09JHt0fWBdOlJ0KHQpPyh0PUp0KGUsa3QodC52YWx1ZSksITApLG4/dDpbYCR7ZX09UmVmPGAsdCxcIj5cIl0pOkYodCk/W2Ake2V9PWZuJHt0Lm5hbWU/YDwke3QubmFtZX0+YDpcIlwifWBdOih0PWt0KHQpLG4/dDpbYCR7ZX09YCx0XSl9ZnVuY3Rpb24gWXQoZSx0LG4sbyl7bGV0IHI7dHJ5e3I9bz9lKC4uLm8pOmUoKX1jYXRjaChzKXtRdChzLHQsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gWnQoZSx0LG4sbyl7aWYoRihlKSl7Y29uc3Qgcj1ZdChlLHQsbixvKTtyZXR1cm4gciYmVihyKSYmci5jYXRjaCgoZT0+e1F0KGUsdCxuKX0pKSxyfWNvbnN0IHI9W107Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKyspci5wdXNoKFp0KGVbc10sdCxuLG8pKTtyZXR1cm4gcn1mdW5jdGlvbiBRdChlLHQsbixvPSEwKXtpZih0KXtsZXQgbz10LnBhcmVudDtjb25zdCByPXQucHJveHkscz1uO2Zvcig7bzspe2NvbnN0IHQ9by5lYztpZih0KWZvcihsZXQgbj0wO248dC5sZW5ndGg7bisrKWlmKCExPT09dFtuXShlLHIscykpcmV0dXJuO289by5wYXJlbnR9Y29uc3QgaT10LmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtpZihpKXJldHVybiB2b2lkIFl0KGksbnVsbCwxMCxbZSxyLHNdKX0hZnVuY3Rpb24oZSx0LG4sbz0hMCl7Y29uc29sZS5lcnJvcihlKX0oZSwwLDAsbyl9bGV0IFh0PSExLGVuPSExO2NvbnN0IHRuPVtdO2xldCBubj0wO2NvbnN0IG9uPVtdO2xldCBybj1udWxsLHNuPTA7Y29uc3QgbG49W107bGV0IGNuPW51bGwsYW49MDtjb25zdCB1bj1Qcm9taXNlLnJlc29sdmUoKTtsZXQgcG49bnVsbCxmbj1udWxsO2Z1bmN0aW9uIGRuKGUpe2NvbnN0IHQ9cG58fHVuO3JldHVybiBlP3QudGhlbih0aGlzP2UuYmluZCh0aGlzKTplKTp0fWZ1bmN0aW9uIGhuKGUpe3RuLmxlbmd0aCYmdG4uaW5jbHVkZXMoZSxYdCYmZS5hbGxvd1JlY3Vyc2U/bm4rMTpubil8fGU9PT1mbnx8KG51bGw9PWUuaWQ/dG4ucHVzaChlKTp0bi5zcGxpY2UoZnVuY3Rpb24oZSl7bGV0IHQ9bm4rMSxuPXRuLmxlbmd0aDtmb3IoO3Q8bjspe2NvbnN0IG89dCtuPj4+MTtibih0bltvXSk8ZT90PW8rMTpuPW99cmV0dXJuIHR9KGUuaWQpLDAsZSksbW4oKSl9ZnVuY3Rpb24gbW4oKXtYdHx8ZW58fChlbj0hMCxwbj11bi50aGVuKFNuKSl9ZnVuY3Rpb24gZ24oZSx0LG4sbyl7RShlKT9uLnB1c2goLi4uZSk6dCYmdC5pbmNsdWRlcyhlLGUuYWxsb3dSZWN1cnNlP28rMTpvKXx8bi5wdXNoKGUpLG1uKCl9ZnVuY3Rpb24gdm4oZSl7Z24oZSxjbixsbixhbil9ZnVuY3Rpb24geW4oZSx0PW51bGwpe2lmKG9uLmxlbmd0aCl7Zm9yKGZuPXQscm49Wy4uLm5ldyBTZXQob24pXSxvbi5sZW5ndGg9MCxzbj0wO3NuPHJuLmxlbmd0aDtzbisrKXJuW3NuXSgpO3JuPW51bGwsc249MCxmbj1udWxsLHluKGUsdCl9fWZ1bmN0aW9uIF9uKGUpe2lmKHluKCksbG4ubGVuZ3RoKXtjb25zdCBlPVsuLi5uZXcgU2V0KGxuKV07aWYobG4ubGVuZ3RoPTAsY24pcmV0dXJuIHZvaWQgY24ucHVzaCguLi5lKTtmb3IoY249ZSxjbi5zb3J0KCgoZSx0KT0+Ym4oZSktYm4odCkpKSxhbj0wO2FuPGNuLmxlbmd0aDthbisrKWNuW2FuXSgpO2NuPW51bGwsYW49MH19Y29uc3QgYm49ZT0+bnVsbD09ZS5pZD8xLzA6ZS5pZDtmdW5jdGlvbiBTbihlKXtlbj0hMSxYdD0hMCx5bihlKSx0bi5zb3J0KCgoZSx0KT0+Ym4oZSktYm4odCkpKTt0cnl7Zm9yKG5uPTA7bm48dG4ubGVuZ3RoO25uKyspe2NvbnN0IGU9dG5bbm5dO2UmJiExIT09ZS5hY3RpdmUmJll0KGUsbnVsbCwxNCl9fWZpbmFsbHl7bm49MCx0bi5sZW5ndGg9MCxfbigpLFh0PSExLHBuPW51bGwsKHRuLmxlbmd0aHx8b24ubGVuZ3RofHxsbi5sZW5ndGgpJiZTbihlKX19bGV0IHhuLENuPVtdO2Z1bmN0aW9uIHduKGUsdCl7dmFyIG4sbztpZih4bj1lLHhuKXhuLmVuYWJsZWQ9ITAsQ24uZm9yRWFjaCgoKHtldmVudDplLGFyZ3M6dH0pPT54bi5lbWl0KGUsLi4udCkpKSxDbj1bXTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5IVE1MRWxlbWVudCYmIShudWxsPT09KG89bnVsbD09PShuPXdpbmRvdy5uYXZpZ2F0b3IpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnVzZXJBZ2VudCl8fHZvaWQgMD09PW8/dm9pZCAwOm8uaW5jbHVkZXMoXCJqc2RvbVwiKSkpeyh0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX189dC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9ffHxbXSkucHVzaCgoZT0+e3duKGUsdCl9KSksc2V0VGltZW91dCgoKCk9Pnt4bnx8KHQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXz1udWxsLENuPVtdKX0pLDNlMyl9ZWxzZSBDbj1bXX1mdW5jdGlvbiBrbihlLHQsLi4ubil7aWYoZS5pc1VubW91bnRlZClyZXR1cm47Y29uc3Qgbz1lLnZub2RlLnByb3BzfHx2O2xldCByPW47Y29uc3Qgcz10LnN0YXJ0c1dpdGgoXCJ1cGRhdGU6XCIpLGk9cyYmdC5zbGljZSg3KTtpZihpJiZpIGluIG8pe2NvbnN0IGU9YCR7XCJtb2RlbFZhbHVlXCI9PT1pP1wibW9kZWxcIjppfU1vZGlmaWVyc2Ase251bWJlcjp0LHRyaW06c309b1tlXXx8djtzJiYocj1uLm1hcCgoZT0+ZS50cmltKCkpKSksdCYmKHI9bi5tYXAoWCkpfWxldCBsLGM9b1tsPUoodCldfHxvW2w9Sih6KHQpKV07IWMmJnMmJihjPW9bbD1KKEcodCkpXSksYyYmWnQoYyxlLDYscik7Y29uc3QgYT1vW2wrXCJPbmNlXCJdO2lmKGEpe2lmKGUuZW1pdHRlZCl7aWYoZS5lbWl0dGVkW2xdKXJldHVybn1lbHNlIGUuZW1pdHRlZD17fTtlLmVtaXR0ZWRbbF09ITAsWnQoYSxlLDYscil9fWZ1bmN0aW9uIFRuKGUsdCxuPSExKXtjb25zdCBvPXQuZW1pdHNDYWNoZSxyPW8uZ2V0KGUpO2lmKHZvaWQgMCE9PXIpcmV0dXJuIHI7Y29uc3Qgcz1lLmVtaXRzO2xldCBpPXt9LGw9ITE7aWYoIUYoZSkpe2NvbnN0IG89ZT0+e2NvbnN0IG49VG4oZSx0LCEwKTtuJiYobD0hMCx3KGksbikpfTshbiYmdC5taXhpbnMubGVuZ3RoJiZ0Lm1peGlucy5mb3JFYWNoKG8pLGUuZXh0ZW5kcyYmbyhlLmV4dGVuZHMpLGUubWl4aW5zJiZlLm1peGlucy5mb3JFYWNoKG8pfXJldHVybiBzfHxsPyhFKHMpP3MuZm9yRWFjaCgoZT0+aVtlXT1udWxsKSk6dyhpLHMpLG8uc2V0KGUsaSksaSk6KG8uc2V0KGUsbnVsbCksbnVsbCl9ZnVuY3Rpb24gTm4oZSx0KXtyZXR1cm4hKCFlfHwheCh0KSkmJih0PXQuc2xpY2UoMikucmVwbGFjZSgvT25jZSQvLFwiXCIpLE4oZSx0WzBdLnRvTG93ZXJDYXNlKCkrdC5zbGljZSgxKSl8fE4oZSxHKHQpKXx8TihlLHQpKX1sZXQgRW49bnVsbCwkbj1udWxsO2Z1bmN0aW9uIE9uKGUpe2NvbnN0IHQ9RW47cmV0dXJuIEVuPWUsJG49ZSYmZS50eXBlLl9fc2NvcGVJZHx8bnVsbCx0fWZ1bmN0aW9uIFJuKGUpeyRuPWV9ZnVuY3Rpb24gRm4oKXskbj1udWxsfWNvbnN0IFBuPWU9PkFuO2Z1bmN0aW9uIEFuKGUsdD1FbixuKXtpZighdClyZXR1cm4gZTtpZihlLl9uKXJldHVybiBlO2NvbnN0IG89KC4uLm4pPT57by5fZCYmWHIoLTEpO2NvbnN0IHI9T24odCkscz1lKC4uLm4pO3JldHVybiBPbihyKSxvLl9kJiZYcigxKSxzfTtyZXR1cm4gby5fbj0hMCxvLl9jPSEwLG8uX2Q9ITAsb31mdW5jdGlvbiBNbihlKXtjb25zdHt0eXBlOnQsdm5vZGU6bixwcm94eTpvLHdpdGhQcm94eTpyLHByb3BzOnMscHJvcHNPcHRpb25zOltpXSxzbG90czpsLGF0dHJzOmMsZW1pdDphLHJlbmRlcjp1LHJlbmRlckNhY2hlOnAsZGF0YTpmLHNldHVwU3RhdGU6ZCxjdHg6aCxpbmhlcml0QXR0cnM6bX09ZTtsZXQgZyx2O2NvbnN0IHk9T24oZSk7dHJ5e2lmKDQmbi5zaGFwZUZsYWcpe2NvbnN0IGU9cnx8bztnPWdzKHUuY2FsbChlLGUscCxzLGQsZixoKSksdj1jfWVsc2V7Y29uc3QgZT10OzAsZz1ncyhlKHMsZS5sZW5ndGg+MT97YXR0cnM6YyxzbG90czpsLGVtaXQ6YX06bnVsbCkpLHY9dC5wcm9wcz9jOlZuKGMpfX1jYXRjaChiKXtxci5sZW5ndGg9MCxRdChiLGUsMSksZz11cyhLcil9bGV0IF89ZztpZih2JiYhMSE9PW0pe2NvbnN0IGU9T2JqZWN0LmtleXModikse3NoYXBlRmxhZzp0fT1fO2UubGVuZ3RoJiY3JnQmJihpJiZlLnNvbWUoQykmJih2PUluKHYsaSkpLF89ZnMoXyx2KSl9cmV0dXJuIG4uZGlycyYmKF89ZnMoXyksXy5kaXJzPV8uZGlycz9fLmRpcnMuY29uY2F0KG4uZGlycyk6bi5kaXJzKSxuLnRyYW5zaXRpb24mJihfLnRyYW5zaXRpb249bi50cmFuc2l0aW9uKSxnPV8sT24oeSksZ31jb25zdCBWbj1lPT57bGV0IHQ7Zm9yKGNvbnN0IG4gaW4gZSkoXCJjbGFzc1wiPT09bnx8XCJzdHlsZVwiPT09bnx8eChuKSkmJigodHx8KHQ9e30pKVtuXT1lW25dKTtyZXR1cm4gdH0sSW49KGUsdCk9Pntjb25zdCBuPXt9O2Zvcihjb25zdCBvIGluIGUpQyhvKSYmby5zbGljZSg5KWluIHR8fChuW29dPWVbb10pO3JldHVybiBufTtmdW5jdGlvbiBCbihlLHQsbil7Y29uc3Qgbz1PYmplY3Qua2V5cyh0KTtpZihvLmxlbmd0aCE9PU9iamVjdC5rZXlzKGUpLmxlbmd0aClyZXR1cm4hMDtmb3IobGV0IHI9MDtyPG8ubGVuZ3RoO3IrKyl7Y29uc3Qgcz1vW3JdO2lmKHRbc10hPT1lW3NdJiYhTm4obixzKSlyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBMbih7dm5vZGU6ZSxwYXJlbnQ6dH0sbil7Zm9yKDt0JiZ0LnN1YlRyZWU9PT1lOykoZT10LnZub2RlKS5lbD1uLHQ9dC5wYXJlbnR9Y29uc3Qgam49ZT0+ZS5fX2lzU3VzcGVuc2UsVW49e25hbWU6XCJTdXNwZW5zZVwiLF9faXNTdXNwZW5zZTohMCxwcm9jZXNzKGUsdCxuLG8scixzLGksbCxjLGEpe251bGw9PWU/ZnVuY3Rpb24oZSx0LG4sbyxyLHMsaSxsLGMpe2NvbnN0e3A6YSxvOntjcmVhdGVFbGVtZW50OnV9fT1jLHA9dShcImRpdlwiKSxmPWUuc3VzcGVuc2U9SG4oZSxyLG8sdCxwLG4scyxpLGwsYyk7YShudWxsLGYucGVuZGluZ0JyYW5jaD1lLnNzQ29udGVudCxwLG51bGwsbyxmLHMsaSksZi5kZXBzPjA/KERuKGUsXCJvblBlbmRpbmdcIiksRG4oZSxcIm9uRmFsbGJhY2tcIiksYShudWxsLGUuc3NGYWxsYmFjayx0LG4sbyxudWxsLHMsaSksS24oZixlLnNzRmFsbGJhY2spKTpmLnJlc29sdmUoKX0odCxuLG8scixzLGksbCxjLGEpOmZ1bmN0aW9uKGUsdCxuLG8scixzLGksbCx7cDpjLHVtOmEsbzp7Y3JlYXRlRWxlbWVudDp1fX0pe2NvbnN0IHA9dC5zdXNwZW5zZT1lLnN1c3BlbnNlO3Audm5vZGU9dCx0LmVsPWUuZWw7Y29uc3QgZj10LnNzQ29udGVudCxkPXQuc3NGYWxsYmFjayx7YWN0aXZlQnJhbmNoOmgscGVuZGluZ0JyYW5jaDptLGlzSW5GYWxsYmFjazpnLGlzSHlkcmF0aW5nOnZ9PXA7aWYobSlwLnBlbmRpbmdCcmFuY2g9ZixycyhmLG0pPyhjKG0sZixwLmhpZGRlbkNvbnRhaW5lcixudWxsLHIscCxzLGksbCkscC5kZXBzPD0wP3AucmVzb2x2ZSgpOmcmJihjKGgsZCxuLG8scixudWxsLHMsaSxsKSxLbihwLGQpKSk6KHAucGVuZGluZ0lkKyssdj8ocC5pc0h5ZHJhdGluZz0hMSxwLmFjdGl2ZUJyYW5jaD1tKTphKG0scixwKSxwLmRlcHM9MCxwLmVmZmVjdHMubGVuZ3RoPTAscC5oaWRkZW5Db250YWluZXI9dShcImRpdlwiKSxnPyhjKG51bGwsZixwLmhpZGRlbkNvbnRhaW5lcixudWxsLHIscCxzLGksbCkscC5kZXBzPD0wP3AucmVzb2x2ZSgpOihjKGgsZCxuLG8scixudWxsLHMsaSxsKSxLbihwLGQpKSk6aCYmcnMoZixoKT8oYyhoLGYsbixvLHIscCxzLGksbCkscC5yZXNvbHZlKCEwKSk6KGMobnVsbCxmLHAuaGlkZGVuQ29udGFpbmVyLG51bGwscixwLHMsaSxsKSxwLmRlcHM8PTAmJnAucmVzb2x2ZSgpKSk7ZWxzZSBpZihoJiZycyhmLGgpKWMoaCxmLG4sbyxyLHAscyxpLGwpLEtuKHAsZik7ZWxzZSBpZihEbih0LFwib25QZW5kaW5nXCIpLHAucGVuZGluZ0JyYW5jaD1mLHAucGVuZGluZ0lkKyssYyhudWxsLGYscC5oaWRkZW5Db250YWluZXIsbnVsbCxyLHAscyxpLGwpLHAuZGVwczw9MClwLnJlc29sdmUoKTtlbHNle2NvbnN0e3RpbWVvdXQ6ZSxwZW5kaW5nSWQ6dH09cDtlPjA/c2V0VGltZW91dCgoKCk9PntwLnBlbmRpbmdJZD09PXQmJnAuZmFsbGJhY2soZCl9KSxlKTowPT09ZSYmcC5mYWxsYmFjayhkKX19KGUsdCxuLG8scixpLGwsYyxhKX0saHlkcmF0ZTpmdW5jdGlvbihlLHQsbixvLHIscyxpLGwsYyl7Y29uc3QgYT10LnN1c3BlbnNlPUhuKHQsbyxuLGUucGFyZW50Tm9kZSxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG51bGwscixzLGksbCwhMCksdT1jKGUsYS5wZW5kaW5nQnJhbmNoPXQuc3NDb250ZW50LG4sYSxzLGkpOzA9PT1hLmRlcHMmJmEucmVzb2x2ZSgpO3JldHVybiB1fSxjcmVhdGU6SG4sbm9ybWFsaXplOmZ1bmN0aW9uKGUpe2NvbnN0e3NoYXBlRmxhZzp0LGNoaWxkcmVuOm59PWUsbz0zMiZ0O2Uuc3NDb250ZW50PVduKG8/bi5kZWZhdWx0Om4pLGUuc3NGYWxsYmFjaz1vP1duKG4uZmFsbGJhY2spOnVzKEtyKX19O2Z1bmN0aW9uIERuKGUsdCl7Y29uc3Qgbj1lLnByb3BzJiZlLnByb3BzW3RdO0YobikmJm4oKX1mdW5jdGlvbiBIbihlLHQsbixvLHIscyxpLGwsYyxhLHU9ITEpe2NvbnN0e3A6cCxtOmYsdW06ZCxuOmgsbzp7cGFyZW50Tm9kZTptLHJlbW92ZTpnfX09YSx2PVgoZS5wcm9wcyYmZS5wcm9wcy50aW1lb3V0KSx5PXt2bm9kZTplLHBhcmVudDp0LHBhcmVudENvbXBvbmVudDpuLGlzU1ZHOmksY29udGFpbmVyOm8saGlkZGVuQ29udGFpbmVyOnIsYW5jaG9yOnMsZGVwczowLHBlbmRpbmdJZDowLHRpbWVvdXQ6XCJudW1iZXJcIj09dHlwZW9mIHY/djotMSxhY3RpdmVCcmFuY2g6bnVsbCxwZW5kaW5nQnJhbmNoOm51bGwsaXNJbkZhbGxiYWNrOiEwLGlzSHlkcmF0aW5nOnUsaXNVbm1vdW50ZWQ6ITEsZWZmZWN0czpbXSxyZXNvbHZlKGU9ITEpe2NvbnN0e3Zub2RlOnQsYWN0aXZlQnJhbmNoOm4scGVuZGluZ0JyYW5jaDpvLHBlbmRpbmdJZDpyLGVmZmVjdHM6cyxwYXJlbnRDb21wb25lbnQ6aSxjb250YWluZXI6bH09eTtpZih5LmlzSHlkcmF0aW5nKXkuaXNIeWRyYXRpbmc9ITE7ZWxzZSBpZighZSl7Y29uc3QgZT1uJiZvLnRyYW5zaXRpb24mJlwib3V0LWluXCI9PT1vLnRyYW5zaXRpb24ubW9kZTtlJiYobi50cmFuc2l0aW9uLmFmdGVyTGVhdmU9KCk9PntyPT09eS5wZW5kaW5nSWQmJmYobyxsLHQsMCl9KTtsZXR7YW5jaG9yOnR9PXk7biYmKHQ9aChuKSxkKG4saSx5LCEwKSksZXx8ZihvLGwsdCwwKX1Lbih5LG8pLHkucGVuZGluZ0JyYW5jaD1udWxsLHkuaXNJbkZhbGxiYWNrPSExO2xldCBjPXkucGFyZW50LGE9ITE7Zm9yKDtjOyl7aWYoYy5wZW5kaW5nQnJhbmNoKXtjLmVmZmVjdHMucHVzaCguLi5zKSxhPSEwO2JyZWFrfWM9Yy5wYXJlbnR9YXx8dm4ocykseS5lZmZlY3RzPVtdLERuKHQsXCJvblJlc29sdmVcIil9LGZhbGxiYWNrKGUpe2lmKCF5LnBlbmRpbmdCcmFuY2gpcmV0dXJuO2NvbnN0e3Zub2RlOnQsYWN0aXZlQnJhbmNoOm4scGFyZW50Q29tcG9uZW50Om8sY29udGFpbmVyOnIsaXNTVkc6c309eTtEbih0LFwib25GYWxsYmFja1wiKTtjb25zdCBpPWgobiksYT0oKT0+e3kuaXNJbkZhbGxiYWNrJiYocChudWxsLGUscixpLG8sbnVsbCxzLGwsYyksS24oeSxlKSl9LHU9ZS50cmFuc2l0aW9uJiZcIm91dC1pblwiPT09ZS50cmFuc2l0aW9uLm1vZGU7dSYmKG4udHJhbnNpdGlvbi5hZnRlckxlYXZlPWEpLHkuaXNJbkZhbGxiYWNrPSEwLGQobixvLG51bGwsITApLHV8fGEoKX0sbW92ZShlLHQsbil7eS5hY3RpdmVCcmFuY2gmJmYoeS5hY3RpdmVCcmFuY2gsZSx0LG4pLHkuY29udGFpbmVyPWV9LG5leHQ6KCk9PnkuYWN0aXZlQnJhbmNoJiZoKHkuYWN0aXZlQnJhbmNoKSxyZWdpc3RlckRlcChlLHQpe2NvbnN0IG49ISF5LnBlbmRpbmdCcmFuY2g7biYmeS5kZXBzKys7Y29uc3Qgbz1lLnZub2RlLmVsO2UuYXN5bmNEZXAuY2F0Y2goKHQ9PntRdCh0LGUsMCl9KSkudGhlbigocj0+e2lmKGUuaXNVbm1vdW50ZWR8fHkuaXNVbm1vdW50ZWR8fHkucGVuZGluZ0lkIT09ZS5zdXNwZW5zZUlkKXJldHVybjtlLmFzeW5jUmVzb2x2ZWQ9ITA7Y29uc3R7dm5vZGU6c309ZTtScyhlLHIsITEpLG8mJihzLmVsPW8pO2NvbnN0IGw9IW8mJmUuc3ViVHJlZS5lbDt0KGUscyxtKG98fGUuc3ViVHJlZS5lbCksbz9udWxsOmgoZS5zdWJUcmVlKSx5LGksYyksbCYmZyhsKSxMbihlLHMuZWwpLG4mJjA9PS0teS5kZXBzJiZ5LnJlc29sdmUoKX0pKX0sdW5tb3VudChlLHQpe3kuaXNVbm1vdW50ZWQ9ITAseS5hY3RpdmVCcmFuY2gmJmQoeS5hY3RpdmVCcmFuY2gsbixlLHQpLHkucGVuZGluZ0JyYW5jaCYmZCh5LnBlbmRpbmdCcmFuY2gsbixlLHQpfX07cmV0dXJuIHl9ZnVuY3Rpb24gV24oZSl7bGV0IHQ7aWYoRihlKSl7Y29uc3Qgbj1RciYmZS5fYztuJiYoZS5fZD0hMSxZcigpKSxlPWUoKSxuJiYoZS5fZD0hMCx0PUpyLFpyKCkpfWlmKEUoZSkpe2NvbnN0IHQ9ZnVuY3Rpb24oZSl7bGV0IHQ7Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IG89ZVtuXTtpZighb3MobykpcmV0dXJuO2lmKG8udHlwZSE9PUtyfHxcInYtaWZcIj09PW8uY2hpbGRyZW4pe2lmKHQpcmV0dXJuO3Q9b319cmV0dXJuIHR9KGUpO2U9dH1yZXR1cm4gZT1ncyhlKSx0JiYhZS5keW5hbWljQ2hpbGRyZW4mJihlLmR5bmFtaWNDaGlsZHJlbj10LmZpbHRlcigodD0+dCE9PWUpKSksZX1mdW5jdGlvbiB6bihlLHQpe3QmJnQucGVuZGluZ0JyYW5jaD9FKGUpP3QuZWZmZWN0cy5wdXNoKC4uLmUpOnQuZWZmZWN0cy5wdXNoKGUpOnZuKGUpfWZ1bmN0aW9uIEtuKGUsdCl7ZS5hY3RpdmVCcmFuY2g9dDtjb25zdHt2bm9kZTpuLHBhcmVudENvbXBvbmVudDpvfT1lLHI9bi5lbD10LmVsO28mJm8uc3ViVHJlZT09PW4mJihvLnZub2RlLmVsPXIsTG4obyxyKSl9ZnVuY3Rpb24gR24oZSx0KXtpZihDcyl7bGV0IG49Q3MucHJvdmlkZXM7Y29uc3Qgbz1Dcy5wYXJlbnQmJkNzLnBhcmVudC5wcm92aWRlcztvPT09biYmKG49Q3MucHJvdmlkZXM9T2JqZWN0LmNyZWF0ZShvKSksbltlXT10fWVsc2U7fWZ1bmN0aW9uIHFuKGUsdCxuPSExKXtjb25zdCBvPUNzfHxFbjtpZihvKXtjb25zdCByPW51bGw9PW8ucGFyZW50P28udm5vZGUuYXBwQ29udGV4dCYmby52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzOm8ucGFyZW50LnByb3ZpZGVzO2lmKHImJmUgaW4gcilyZXR1cm4gcltlXTtpZihhcmd1bWVudHMubGVuZ3RoPjEpcmV0dXJuIG4mJkYodCk/dC5jYWxsKG8ucHJveHkpOnR9fWZ1bmN0aW9uIEpuKGUsdCl7cmV0dXJuIGVvKGUsbnVsbCx0KX1mdW5jdGlvbiBZbihlLHQpe3JldHVybiBlbyhlLG51bGwse2ZsdXNoOlwicG9zdFwifSl9ZnVuY3Rpb24gWm4oZSx0KXtyZXR1cm4gZW8oZSxudWxsLHtmbHVzaDpcInN5bmNcIn0pfWNvbnN0IFFuPXt9O2Z1bmN0aW9uIFhuKGUsdCxuKXtyZXR1cm4gZW8oZSx0LG4pfWZ1bmN0aW9uIGVvKGUsdCx7aW1tZWRpYXRlOm4sZGVlcDpvLGZsdXNoOnJ9PXYpe2NvbnN0IHM9Q3M7bGV0IGksbCxjPSExLGE9ITE7aWYoUnQoZSk/KGk9KCk9PmUudmFsdWUsYz1DdChlKSk6U3QoZSk/KGk9KCk9PmUsbz0hMCk6RShlKT8oYT0hMCxjPWUuc29tZSgoZT0+U3QoZSl8fEN0KGUpKSksaT0oKT0+ZS5tYXAoKGU9PlJ0KGUpP2UudmFsdWU6U3QoZSk/b28oZSk6RihlKT9ZdChlLHMsMik6dm9pZCAwKSkpOmk9RihlKT90PygpPT5ZdChlLHMsMik6KCk9PntpZighc3x8IXMuaXNVbm1vdW50ZWQpcmV0dXJuIGwmJmwoKSxadChlLHMsMyxbdV0pfTpfLHQmJm8pe2NvbnN0IGU9aTtpPSgpPT5vbyhlKCkpfWxldCB1PWU9PntsPWgub25TdG9wPSgpPT57WXQoZSxzLDQpfX0scD1hP1tdOlFuO2NvbnN0IGY9KCk9PntpZihoLmFjdGl2ZSlpZih0KXtjb25zdCBlPWgucnVuKCk7KG98fGN8fChhP2Uuc29tZSgoKGUsdCk9PlkoZSxwW3RdKSkpOlkoZSxwKSkpJiYobCYmbCgpLFp0KHQscywzLFtlLHA9PT1Rbj92b2lkIDA6cCx1XSkscD1lKX1lbHNlIGgucnVuKCl9O2xldCBkO2YuYWxsb3dSZWN1cnNlPSEhdCxkPVwic3luY1wiPT09cj9mOlwicG9zdFwiPT09cj8oKT0+UHIoZixzJiZzLnN1c3BlbnNlKTooKT0+ZnVuY3Rpb24oZSl7Z24oZSxybixvbixzbil9KGYpO2NvbnN0IGg9bmV3IGdlKGksZCk7cmV0dXJuIHQ/bj9mKCk6cD1oLnJ1bigpOlwicG9zdFwiPT09cj9QcihoLnJ1bi5iaW5kKGgpLHMmJnMuc3VzcGVuc2UpOmgucnVuKCksKCk9PntoLnN0b3AoKSxzJiZzLnNjb3BlJiZrKHMuc2NvcGUuZWZmZWN0cyxoKX19ZnVuY3Rpb24gdG8oZSx0LG4pe2NvbnN0IG89dGhpcy5wcm94eSxyPVAoZSk/ZS5pbmNsdWRlcyhcIi5cIik/bm8obyxlKTooKT0+b1tlXTplLmJpbmQobyxvKTtsZXQgcztGKHQpP3M9dDoocz10LmhhbmRsZXIsbj10KTtjb25zdCBpPUNzO2tzKHRoaXMpO2NvbnN0IGw9ZW8ocixzLmJpbmQobyksbik7cmV0dXJuIGk/a3MoaSk6VHMoKSxsfWZ1bmN0aW9uIG5vKGUsdCl7Y29uc3Qgbj10LnNwbGl0KFwiLlwiKTtyZXR1cm4oKT0+e2xldCB0PWU7Zm9yKGxldCBlPTA7ZTxuLmxlbmd0aCYmdDtlKyspdD10W25bZV1dO3JldHVybiB0fX1mdW5jdGlvbiBvbyhlLHQpe2lmKCFNKGUpfHxlLl9fdl9za2lwKXJldHVybiBlO2lmKCh0PXR8fG5ldyBTZXQpLmhhcyhlKSlyZXR1cm4gZTtpZih0LmFkZChlKSxSdChlKSlvbyhlLnZhbHVlLHQpO2Vsc2UgaWYoRShlKSlmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKylvbyhlW25dLHQpO2Vsc2UgaWYoTyhlKXx8JChlKSllLmZvckVhY2goKGU9PntvbyhlLHQpfSkpO2Vsc2UgaWYoTChlKSlmb3IoY29uc3QgbiBpbiBlKW9vKGVbbl0sdCk7cmV0dXJuIGV9ZnVuY3Rpb24gcm8oKXtjb25zdCBlPXtpc01vdW50ZWQ6ITEsaXNMZWF2aW5nOiExLGlzVW5tb3VudGluZzohMSxsZWF2aW5nVk5vZGVzOm5ldyBNYXB9O3JldHVybiBPbygoKCk9PntlLmlzTW91bnRlZD0hMH0pKSxQbygoKCk9PntlLmlzVW5tb3VudGluZz0hMH0pKSxlfWNvbnN0IHNvPVtGdW5jdGlvbixBcnJheV0saW89e25hbWU6XCJCYXNlVHJhbnNpdGlvblwiLHByb3BzOnttb2RlOlN0cmluZyxhcHBlYXI6Qm9vbGVhbixwZXJzaXN0ZWQ6Qm9vbGVhbixvbkJlZm9yZUVudGVyOnNvLG9uRW50ZXI6c28sb25BZnRlckVudGVyOnNvLG9uRW50ZXJDYW5jZWxsZWQ6c28sb25CZWZvcmVMZWF2ZTpzbyxvbkxlYXZlOnNvLG9uQWZ0ZXJMZWF2ZTpzbyxvbkxlYXZlQ2FuY2VsbGVkOnNvLG9uQmVmb3JlQXBwZWFyOnNvLG9uQXBwZWFyOnNvLG9uQWZ0ZXJBcHBlYXI6c28sb25BcHBlYXJDYW5jZWxsZWQ6c299LHNldHVwKGUse3Nsb3RzOnR9KXtjb25zdCBuPXdzKCksbz1ybygpO2xldCByO3JldHVybigpPT57Y29uc3Qgcz10LmRlZmF1bHQmJmZvKHQuZGVmYXVsdCgpLCEwKTtpZighc3x8IXMubGVuZ3RoKXJldHVybjtsZXQgaT1zWzBdO2lmKHMubGVuZ3RoPjEpZm9yKGNvbnN0IGUgb2YgcylpZihlLnR5cGUhPT1Lcil7aT1lO2JyZWFrfWNvbnN0IGw9a3QoZSkse21vZGU6Y309bDtpZihvLmlzTGVhdmluZylyZXR1cm4gYW8oaSk7Y29uc3QgYT11byhpKTtpZighYSlyZXR1cm4gYW8oaSk7Y29uc3QgdT1jbyhhLGwsbyxuKTtwbyhhLHUpO2NvbnN0IHA9bi5zdWJUcmVlLGY9cCYmdW8ocCk7bGV0IGQ9ITE7Y29uc3R7Z2V0VHJhbnNpdGlvbktleTpofT1hLnR5cGU7aWYoaCl7Y29uc3QgZT1oKCk7dm9pZCAwPT09cj9yPWU6ZSE9PXImJihyPWUsZD0hMCl9aWYoZiYmZi50eXBlIT09S3ImJighcnMoYSxmKXx8ZCkpe2NvbnN0IGU9Y28oZixsLG8sbik7aWYocG8oZixlKSxcIm91dC1pblwiPT09YylyZXR1cm4gby5pc0xlYXZpbmc9ITAsZS5hZnRlckxlYXZlPSgpPT57by5pc0xlYXZpbmc9ITEsbi51cGRhdGUoKX0sYW8oaSk7XCJpbi1vdXRcIj09PWMmJmEudHlwZSE9PUtyJiYoZS5kZWxheUxlYXZlPShlLHQsbik9PntsbyhvLGYpW1N0cmluZyhmLmtleSldPWYsZS5fbGVhdmVDYj0oKT0+e3QoKSxlLl9sZWF2ZUNiPXZvaWQgMCxkZWxldGUgdS5kZWxheWVkTGVhdmV9LHUuZGVsYXllZExlYXZlPW59KX1yZXR1cm4gaX19fTtmdW5jdGlvbiBsbyhlLHQpe2NvbnN0e2xlYXZpbmdWTm9kZXM6bn09ZTtsZXQgbz1uLmdldCh0LnR5cGUpO3JldHVybiBvfHwobz1PYmplY3QuY3JlYXRlKG51bGwpLG4uc2V0KHQudHlwZSxvKSksb31mdW5jdGlvbiBjbyhlLHQsbixvKXtjb25zdHthcHBlYXI6cixtb2RlOnMscGVyc2lzdGVkOmk9ITEsb25CZWZvcmVFbnRlcjpsLG9uRW50ZXI6YyxvbkFmdGVyRW50ZXI6YSxvbkVudGVyQ2FuY2VsbGVkOnUsb25CZWZvcmVMZWF2ZTpwLG9uTGVhdmU6ZixvbkFmdGVyTGVhdmU6ZCxvbkxlYXZlQ2FuY2VsbGVkOmgsb25CZWZvcmVBcHBlYXI6bSxvbkFwcGVhcjpnLG9uQWZ0ZXJBcHBlYXI6dixvbkFwcGVhckNhbmNlbGxlZDp5fT10LF89U3RyaW5nKGUua2V5KSxiPWxvKG4sZSksUz0oZSx0KT0+e2UmJlp0KGUsbyw5LHQpfSx4PShlLHQpPT57Y29uc3Qgbj10WzFdO1MoZSx0KSxFKGUpP2UuZXZlcnkoKGU9PmUubGVuZ3RoPD0xKSkmJm4oKTplLmxlbmd0aDw9MSYmbigpfSxDPXttb2RlOnMscGVyc2lzdGVkOmksYmVmb3JlRW50ZXIodCl7bGV0IG89bDtpZighbi5pc01vdW50ZWQpe2lmKCFyKXJldHVybjtvPW18fGx9dC5fbGVhdmVDYiYmdC5fbGVhdmVDYighMCk7Y29uc3Qgcz1iW19dO3MmJnJzKGUscykmJnMuZWwuX2xlYXZlQ2ImJnMuZWwuX2xlYXZlQ2IoKSxTKG8sW3RdKX0sZW50ZXIoZSl7bGV0IHQ9YyxvPWEscz11O2lmKCFuLmlzTW91bnRlZCl7aWYoIXIpcmV0dXJuO3Q9Z3x8YyxvPXZ8fGEscz15fHx1fWxldCBpPSExO2NvbnN0IGw9ZS5fZW50ZXJDYj10PT57aXx8KGk9ITAsUyh0P3M6byxbZV0pLEMuZGVsYXllZExlYXZlJiZDLmRlbGF5ZWRMZWF2ZSgpLGUuX2VudGVyQ2I9dm9pZCAwKX07dD94KHQsW2UsbF0pOmwoKX0sbGVhdmUodCxvKXtjb25zdCByPVN0cmluZyhlLmtleSk7aWYodC5fZW50ZXJDYiYmdC5fZW50ZXJDYighMCksbi5pc1VubW91bnRpbmcpcmV0dXJuIG8oKTtTKHAsW3RdKTtsZXQgcz0hMTtjb25zdCBpPXQuX2xlYXZlQ2I9bj0+e3N8fChzPSEwLG8oKSxTKG4/aDpkLFt0XSksdC5fbGVhdmVDYj12b2lkIDAsYltyXT09PWUmJmRlbGV0ZSBiW3JdKX07YltyXT1lLGY/eChmLFt0LGldKTppKCl9LGNsb25lOmU9PmNvKGUsdCxuLG8pfTtyZXR1cm4gQ31mdW5jdGlvbiBhbyhlKXtpZih5byhlKSlyZXR1cm4oZT1mcyhlKSkuY2hpbGRyZW49bnVsbCxlfWZ1bmN0aW9uIHVvKGUpe3JldHVybiB5byhlKT9lLmNoaWxkcmVuP2UuY2hpbGRyZW5bMF06dm9pZCAwOmV9ZnVuY3Rpb24gcG8oZSx0KXs2JmUuc2hhcGVGbGFnJiZlLmNvbXBvbmVudD9wbyhlLmNvbXBvbmVudC5zdWJUcmVlLHQpOjEyOCZlLnNoYXBlRmxhZz8oZS5zc0NvbnRlbnQudHJhbnNpdGlvbj10LmNsb25lKGUuc3NDb250ZW50KSxlLnNzRmFsbGJhY2sudHJhbnNpdGlvbj10LmNsb25lKGUuc3NGYWxsYmFjaykpOmUudHJhbnNpdGlvbj10fWZ1bmN0aW9uIGZvKGUsdD0hMSxuKXtsZXQgbz1bXSxyPTA7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKyspe2xldCBpPWVbc107Y29uc3QgbD1udWxsPT1uP2kua2V5OlN0cmluZyhuKStTdHJpbmcobnVsbCE9aS5rZXk/aS5rZXk6cyk7aS50eXBlPT09V3I/KDEyOCZpLnBhdGNoRmxhZyYmcisrLG89by5jb25jYXQoZm8oaS5jaGlsZHJlbix0LGwpKSk6KHR8fGkudHlwZSE9PUtyKSYmby5wdXNoKG51bGwhPWw/ZnMoaSx7a2V5Omx9KTppKX1pZihyPjEpZm9yKGxldCBzPTA7czxvLmxlbmd0aDtzKyspb1tzXS5wYXRjaEZsYWc9LTI7cmV0dXJuIG99ZnVuY3Rpb24gaG8oZSl7cmV0dXJuIEYoZSk/e3NldHVwOmUsbmFtZTplLm5hbWV9OmV9Y29uc3QgbW89ZT0+ISFlLnR5cGUuX19hc3luY0xvYWRlcjtmdW5jdGlvbiBnbyhlKXtGKGUpJiYoZT17bG9hZGVyOmV9KTtjb25zdHtsb2FkZXI6dCxsb2FkaW5nQ29tcG9uZW50Om4sZXJyb3JDb21wb25lbnQ6byxkZWxheTpyPTIwMCx0aW1lb3V0OnMsc3VzcGVuc2libGU6aT0hMCxvbkVycm9yOmx9PWU7bGV0IGMsYT1udWxsLHU9MDtjb25zdCBwPSgpPT57bGV0IGU7cmV0dXJuIGF8fChlPWE9dCgpLmNhdGNoKChlPT57aWYoZT1lIGluc3RhbmNlb2YgRXJyb3I/ZTpuZXcgRXJyb3IoU3RyaW5nKGUpKSxsKXJldHVybiBuZXcgUHJvbWlzZSgoKHQsbik9PntsKGUsKCgpPT50KCh1KyssYT1udWxsLHAoKSkpKSwoKCk9Pm4oZSkpLHUrMSl9KSk7dGhyb3cgZX0pKS50aGVuKCh0PT5lIT09YSYmYT9hOih0JiYodC5fX2VzTW9kdWxlfHxcIk1vZHVsZVwiPT09dFtTeW1ib2wudG9TdHJpbmdUYWddKSYmKHQ9dC5kZWZhdWx0KSxjPXQsdCkpKSl9O3JldHVybiBobyh7bmFtZTpcIkFzeW5jQ29tcG9uZW50V3JhcHBlclwiLF9fYXN5bmNMb2FkZXI6cCxnZXQgX19hc3luY1Jlc29sdmVkKCl7cmV0dXJuIGN9LHNldHVwKCl7Y29uc3QgZT1DcztpZihjKXJldHVybigpPT52byhjLGUpO2NvbnN0IHQ9dD0+e2E9bnVsbCxRdCh0LGUsMTMsIW8pfTtpZihpJiZlLnN1c3BlbnNlKXJldHVybiBwKCkudGhlbigodD0+KCk9PnZvKHQsZSkpKS5jYXRjaCgoZT0+KHQoZSksKCk9Pm8/dXMobyx7ZXJyb3I6ZX0pOm51bGwpKSk7Y29uc3QgbD1GdCghMSksdT1GdCgpLGY9RnQoISFyKTtyZXR1cm4gciYmc2V0VGltZW91dCgoKCk9PntmLnZhbHVlPSExfSksciksbnVsbCE9cyYmc2V0VGltZW91dCgoKCk9PntpZighbC52YWx1ZSYmIXUudmFsdWUpe2NvbnN0IGU9bmV3IEVycm9yKGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7c31tcy5gKTt0KGUpLHUudmFsdWU9ZX19KSxzKSxwKCkudGhlbigoKCk9PntsLnZhbHVlPSEwLGUucGFyZW50JiZ5byhlLnBhcmVudC52bm9kZSkmJmhuKGUucGFyZW50LnVwZGF0ZSl9KSkuY2F0Y2goKGU9Pnt0KGUpLHUudmFsdWU9ZX0pKSwoKT0+bC52YWx1ZSYmYz92byhjLGUpOnUudmFsdWUmJm8/dXMobyx7ZXJyb3I6dS52YWx1ZX0pOm4mJiFmLnZhbHVlP3VzKG4pOnZvaWQgMH19KX1mdW5jdGlvbiB2byhlLHt2bm9kZTp7cmVmOnQscHJvcHM6bixjaGlsZHJlbjpvfX0pe2NvbnN0IHI9dXMoZSxuLG8pO3JldHVybiByLnJlZj10LHJ9Y29uc3QgeW89ZT0+ZS50eXBlLl9faXNLZWVwQWxpdmUsX289e25hbWU6XCJLZWVwQWxpdmVcIixfX2lzS2VlcEFsaXZlOiEwLHByb3BzOntpbmNsdWRlOltTdHJpbmcsUmVnRXhwLEFycmF5XSxleGNsdWRlOltTdHJpbmcsUmVnRXhwLEFycmF5XSxtYXg6W1N0cmluZyxOdW1iZXJdfSxzZXR1cChlLHtzbG90czp0fSl7Y29uc3Qgbj13cygpLG89bi5jdHgscj1uZXcgTWFwLHM9bmV3IFNldDtsZXQgaT1udWxsO2NvbnN0IGw9bi5zdXNwZW5zZSx7cmVuZGVyZXI6e3A6YyxtOmEsdW06dSxvOntjcmVhdGVFbGVtZW50OnB9fX09byxmPXAoXCJkaXZcIik7ZnVuY3Rpb24gZChlKXtrbyhlKSx1KGUsbixsLCEwKX1mdW5jdGlvbiBoKGUpe3IuZm9yRWFjaCgoKHQsbik9Pntjb25zdCBvPUJzKHQudHlwZSk7IW98fGUmJmUobyl8fG0obil9KSl9ZnVuY3Rpb24gbShlKXtjb25zdCB0PXIuZ2V0KGUpO2kmJnQudHlwZT09PWkudHlwZT9pJiZrbyhpKTpkKHQpLHIuZGVsZXRlKGUpLHMuZGVsZXRlKGUpfW8uYWN0aXZhdGU9KGUsdCxuLG8scik9Pntjb25zdCBzPWUuY29tcG9uZW50O2EoZSx0LG4sMCxsKSxjKHMudm5vZGUsZSx0LG4scyxsLG8sZS5zbG90U2NvcGVJZHMsciksUHIoKCgpPT57cy5pc0RlYWN0aXZhdGVkPSExLHMuYSYmWihzLmEpO2NvbnN0IHQ9ZS5wcm9wcyYmZS5wcm9wcy5vblZub2RlTW91bnRlZDt0JiZicyh0LHMucGFyZW50LGUpfSksbCl9LG8uZGVhY3RpdmF0ZT1lPT57Y29uc3QgdD1lLmNvbXBvbmVudDthKGUsZixudWxsLDEsbCksUHIoKCgpPT57dC5kYSYmWih0LmRhKTtjb25zdCBuPWUucHJvcHMmJmUucHJvcHMub25Wbm9kZVVubW91bnRlZDtuJiZicyhuLHQucGFyZW50LGUpLHQuaXNEZWFjdGl2YXRlZD0hMH0pLGwpfSxYbigoKCk9PltlLmluY2x1ZGUsZS5leGNsdWRlXSksKChbZSx0XSk9PntlJiZoKCh0PT5ibyhlLHQpKSksdCYmaCgoZT0+IWJvKHQsZSkpKX0pLHtmbHVzaDpcInBvc3RcIixkZWVwOiEwfSk7bGV0IGc9bnVsbDtjb25zdCB2PSgpPT57bnVsbCE9ZyYmci5zZXQoZyxUbyhuLnN1YlRyZWUpKX07cmV0dXJuIE9vKHYpLEZvKHYpLFBvKCgoKT0+e3IuZm9yRWFjaCgoZT0+e2NvbnN0e3N1YlRyZWU6dCxzdXNwZW5zZTpvfT1uLHI9VG8odCk7aWYoZS50eXBlIT09ci50eXBlKWQoZSk7ZWxzZXtrbyhyKTtjb25zdCBlPXIuY29tcG9uZW50LmRhO2UmJlByKGUsbyl9fSkpfSkpLCgpPT57aWYoZz1udWxsLCF0LmRlZmF1bHQpcmV0dXJuIG51bGw7Y29uc3Qgbj10LmRlZmF1bHQoKSxvPW5bMF07aWYobi5sZW5ndGg+MSlyZXR1cm4gaT1udWxsLG47aWYoIShvcyhvKSYmKDQmby5zaGFwZUZsYWd8fDEyOCZvLnNoYXBlRmxhZykpKXJldHVybiBpPW51bGwsbztsZXQgbD1UbyhvKTtjb25zdCBjPWwudHlwZSxhPUJzKG1vKGwpP2wudHlwZS5fX2FzeW5jUmVzb2x2ZWR8fHt9OmMpLHtpbmNsdWRlOnUsZXhjbHVkZTpwLG1heDpmfT1lO2lmKHUmJighYXx8IWJvKHUsYSkpfHxwJiZhJiZibyhwLGEpKXJldHVybiBpPWwsbztjb25zdCBkPW51bGw9PWwua2V5P2M6bC5rZXksaD1yLmdldChkKTtyZXR1cm4gbC5lbCYmKGw9ZnMobCksMTI4Jm8uc2hhcGVGbGFnJiYoby5zc0NvbnRlbnQ9bCkpLGc9ZCxoPyhsLmVsPWguZWwsbC5jb21wb25lbnQ9aC5jb21wb25lbnQsbC50cmFuc2l0aW9uJiZwbyhsLGwudHJhbnNpdGlvbiksbC5zaGFwZUZsYWd8PTUxMixzLmRlbGV0ZShkKSxzLmFkZChkKSk6KHMuYWRkKGQpLGYmJnMuc2l6ZT5wYXJzZUludChmLDEwKSYmbShzLnZhbHVlcygpLm5leHQoKS52YWx1ZSkpLGwuc2hhcGVGbGFnfD0yNTYsaT1sLGpuKG8udHlwZSk/bzpsfX19O2Z1bmN0aW9uIGJvKGUsdCl7cmV0dXJuIEUoZSk/ZS5zb21lKChlPT5ibyhlLHQpKSk6UChlKT9lLnNwbGl0KFwiLFwiKS5pbmNsdWRlcyh0KTohIWUudGVzdCYmZS50ZXN0KHQpfWZ1bmN0aW9uIFNvKGUsdCl7Q28oZSxcImFcIix0KX1mdW5jdGlvbiB4byhlLHQpe0NvKGUsXCJkYVwiLHQpfWZ1bmN0aW9uIENvKGUsdCxuPUNzKXtjb25zdCBvPWUuX193ZGN8fChlLl9fd2RjPSgpPT57bGV0IHQ9bjtmb3IoO3Q7KXtpZih0LmlzRGVhY3RpdmF0ZWQpcmV0dXJuO3Q9dC5wYXJlbnR9cmV0dXJuIGUoKX0pO2lmKE5vKHQsbyxuKSxuKXtsZXQgZT1uLnBhcmVudDtmb3IoO2UmJmUucGFyZW50Oyl5byhlLnBhcmVudC52bm9kZSkmJndvKG8sdCxuLGUpLGU9ZS5wYXJlbnR9fWZ1bmN0aW9uIHdvKGUsdCxuLG8pe2NvbnN0IHI9Tm8odCxlLG8sITApO0FvKCgoKT0+e2sob1t0XSxyKX0pLG4pfWZ1bmN0aW9uIGtvKGUpe2xldCB0PWUuc2hhcGVGbGFnOzI1NiZ0JiYodC09MjU2KSw1MTImdCYmKHQtPTUxMiksZS5zaGFwZUZsYWc9dH1mdW5jdGlvbiBUbyhlKXtyZXR1cm4gMTI4JmUuc2hhcGVGbGFnP2Uuc3NDb250ZW50OmV9ZnVuY3Rpb24gTm8oZSx0LG49Q3Msbz0hMSl7aWYobil7Y29uc3Qgcj1uW2VdfHwobltlXT1bXSkscz10Ll9fd2VofHwodC5fX3dlaD0oLi4ubyk9PntpZihuLmlzVW5tb3VudGVkKXJldHVybjt4ZSgpLGtzKG4pO2NvbnN0IHI9WnQodCxuLGUsbyk7cmV0dXJuIFRzKCksQ2UoKSxyfSk7cmV0dXJuIG8/ci51bnNoaWZ0KHMpOnIucHVzaChzKSxzfX1jb25zdCBFbz1lPT4odCxuPUNzKT0+KCFPc3x8XCJzcFwiPT09ZSkmJk5vKGUsdCxuKSwkbz1FbyhcImJtXCIpLE9vPUVvKFwibVwiKSxSbz1FbyhcImJ1XCIpLEZvPUVvKFwidVwiKSxQbz1FbyhcImJ1bVwiKSxBbz1FbyhcInVtXCIpLE1vPUVvKFwic3BcIiksVm89RW8oXCJydGdcIiksSW89RW8oXCJydGNcIik7ZnVuY3Rpb24gQm8oZSx0PUNzKXtObyhcImVjXCIsZSx0KX1mdW5jdGlvbiBMbyhlLHQpe2NvbnN0IG49RW47aWYobnVsbD09PW4pcmV0dXJuIGU7Y29uc3Qgbz1WcyhuKXx8bi5wcm94eSxyPWUuZGlyc3x8KGUuZGlycz1bXSk7Zm9yKGxldCBzPTA7czx0Lmxlbmd0aDtzKyspe2xldFtlLG4saSxsPXZdPXRbc107RihlKSYmKGU9e21vdW50ZWQ6ZSx1cGRhdGVkOmV9KSxlLmRlZXAmJm9vKG4pLHIucHVzaCh7ZGlyOmUsaW5zdGFuY2U6byx2YWx1ZTpuLG9sZFZhbHVlOnZvaWQgMCxhcmc6aSxtb2RpZmllcnM6bH0pfXJldHVybiBlfWZ1bmN0aW9uIGpvKGUsdCxuLG8pe2NvbnN0IHI9ZS5kaXJzLHM9dCYmdC5kaXJzO2ZvcihsZXQgaT0wO2k8ci5sZW5ndGg7aSsrKXtjb25zdCBsPXJbaV07cyYmKGwub2xkVmFsdWU9c1tpXS52YWx1ZSk7bGV0IGM9bC5kaXJbb107YyYmKHhlKCksWnQoYyxuLDgsW2UuZWwsbCxlLHRdKSxDZSgpKX19ZnVuY3Rpb24gVW8oZSx0KXtyZXR1cm4gem8oXCJjb21wb25lbnRzXCIsZSwhMCx0KXx8ZX1jb25zdCBEbz1TeW1ib2woKTtmdW5jdGlvbiBIbyhlKXtyZXR1cm4gUChlKT96byhcImNvbXBvbmVudHNcIixlLCExKXx8ZTplfHxEb31mdW5jdGlvbiBXbyhlKXtyZXR1cm4gem8oXCJkaXJlY3RpdmVzXCIsZSl9ZnVuY3Rpb24gem8oZSx0LG49ITAsbz0hMSl7Y29uc3Qgcj1Fbnx8Q3M7aWYocil7Y29uc3Qgbj1yLnR5cGU7aWYoXCJjb21wb25lbnRzXCI9PT1lKXtjb25zdCBlPUJzKG4sITEpO2lmKGUmJihlPT09dHx8ZT09PXoodCl8fGU9PT1xKHoodCkpKSlyZXR1cm4gbn1jb25zdCBzPUtvKHJbZV18fG5bZV0sdCl8fEtvKHIuYXBwQ29udGV4dFtlXSx0KTtyZXR1cm4hcyYmbz9uOnN9fWZ1bmN0aW9uIEtvKGUsdCl7cmV0dXJuIGUmJihlW3RdfHxlW3oodCldfHxlW3Eoeih0KSldKX1mdW5jdGlvbiBHbyhlLHQsbixvKXtsZXQgcjtjb25zdCBzPW4mJm5bb107aWYoRShlKXx8UChlKSl7cj1uZXcgQXJyYXkoZS5sZW5ndGgpO2ZvcihsZXQgbj0wLG89ZS5sZW5ndGg7bjxvO24rKylyW25dPXQoZVtuXSxuLHZvaWQgMCxzJiZzW25dKX1lbHNlIGlmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXtyPW5ldyBBcnJheShlKTtmb3IobGV0IG49MDtuPGU7bisrKXJbbl09dChuKzEsbix2b2lkIDAscyYmc1tuXSl9ZWxzZSBpZihNKGUpKWlmKGVbU3ltYm9sLml0ZXJhdG9yXSlyPUFycmF5LmZyb20oZSwoKGUsbik9PnQoZSxuLHZvaWQgMCxzJiZzW25dKSkpO2Vsc2V7Y29uc3Qgbj1PYmplY3Qua2V5cyhlKTtyPW5ldyBBcnJheShuLmxlbmd0aCk7Zm9yKGxldCBvPTAsaT1uLmxlbmd0aDtvPGk7bysrKXtjb25zdCBpPW5bb107cltvXT10KGVbaV0saSxvLHMmJnNbb10pfX1lbHNlIHI9W107cmV0dXJuIG4mJihuW29dPXIpLHJ9ZnVuY3Rpb24gcW8oZSx0KXtmb3IobGV0IG49MDtuPHQubGVuZ3RoO24rKyl7Y29uc3Qgbz10W25dO2lmKEUobykpZm9yKGxldCB0PTA7dDxvLmxlbmd0aDt0KyspZVtvW3RdLm5hbWVdPW9bdF0uZm47ZWxzZSBvJiYoZVtvLm5hbWVdPW8uZm4pfXJldHVybiBlfWZ1bmN0aW9uIEpvKGUsdCxuPXt9LG8scil7aWYoRW4uaXNDRXx8RW4ucGFyZW50JiZtbyhFbi5wYXJlbnQpJiZFbi5wYXJlbnQuaXNDRSlyZXR1cm4gdXMoXCJzbG90XCIsXCJkZWZhdWx0XCI9PT10P251bGw6e25hbWU6dH0sbyYmbygpKTtsZXQgcz1lW3RdO3MmJnMuX2MmJihzLl9kPSExKSxZcigpO2NvbnN0IGk9cyYmWW8ocyhuKSksbD1ucyhXcix7a2V5Om4ua2V5fHxgXyR7dH1gfSxpfHwobz9vKCk6W10pLGkmJjE9PT1lLl8/NjQ6LTIpO3JldHVybiFyJiZsLnNjb3BlSWQmJihsLnNsb3RTY29wZUlkcz1bbC5zY29wZUlkK1wiLXNcIl0pLHMmJnMuX2MmJihzLl9kPSEwKSxsfWZ1bmN0aW9uIFlvKGUpe3JldHVybiBlLnNvbWUoKGU9PiFvcyhlKXx8ZS50eXBlIT09S3ImJiEoZS50eXBlPT09V3ImJiFZbyhlLmNoaWxkcmVuKSkpKT9lOm51bGx9ZnVuY3Rpb24gWm8oZSl7Y29uc3QgdD17fTtmb3IoY29uc3QgbiBpbiBlKXRbSihuKV09ZVtuXTtyZXR1cm4gdH1jb25zdCBRbz1lPT5lP05zKGUpP1ZzKGUpfHxlLnByb3h5OlFvKGUucGFyZW50KTpudWxsLFhvPXcoT2JqZWN0LmNyZWF0ZShudWxsKSx7JDplPT5lLCRlbDplPT5lLnZub2RlLmVsLCRkYXRhOmU9PmUuZGF0YSwkcHJvcHM6ZT0+ZS5wcm9wcywkYXR0cnM6ZT0+ZS5hdHRycywkc2xvdHM6ZT0+ZS5zbG90cywkcmVmczplPT5lLnJlZnMsJHBhcmVudDplPT5RbyhlLnBhcmVudCksJHJvb3Q6ZT0+UW8oZS5yb290KSwkZW1pdDplPT5lLmVtaXQsJG9wdGlvbnM6ZT0+aXIoZSksJGZvcmNlVXBkYXRlOmU9PmUuZnx8KGUuZj0oKT0+aG4oZS51cGRhdGUpKSwkbmV4dFRpY2s6ZT0+ZS5ufHwoZS5uPWRuLmJpbmQoZS5wcm94eSkpLCR3YXRjaDplPT50by5iaW5kKGUpfSksZXI9e2dldCh7XzplfSx0KXtjb25zdHtjdHg6bixzZXR1cFN0YXRlOm8sZGF0YTpyLHByb3BzOnMsYWNjZXNzQ2FjaGU6aSx0eXBlOmwsYXBwQ29udGV4dDpjfT1lO2xldCBhO2lmKFwiJFwiIT09dFswXSl7Y29uc3QgbD1pW3RdO2lmKHZvaWQgMCE9PWwpc3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm4gb1t0XTtjYXNlIDI6cmV0dXJuIHJbdF07Y2FzZSA0OnJldHVybiBuW3RdO2Nhc2UgMzpyZXR1cm4gc1t0XX1lbHNle2lmKG8hPT12JiZOKG8sdCkpcmV0dXJuIGlbdF09MSxvW3RdO2lmKHIhPT12JiZOKHIsdCkpcmV0dXJuIGlbdF09MixyW3RdO2lmKChhPWUucHJvcHNPcHRpb25zWzBdKSYmTihhLHQpKXJldHVybiBpW3RdPTMsc1t0XTtpZihuIT09diYmTihuLHQpKXJldHVybiBpW3RdPTQsblt0XTtuciYmKGlbdF09MCl9fWNvbnN0IHU9WG9bdF07bGV0IHAsZjtyZXR1cm4gdT8oXCIkYXR0cnNcIj09PXQmJndlKGUsMCx0KSx1KGUpKToocD1sLl9fY3NzTW9kdWxlcykmJihwPXBbdF0pP3A6biE9PXYmJk4obix0KT8oaVt0XT00LG5bdF0pOihmPWMuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsTihmLHQpP2ZbdF06dm9pZCAwKX0sc2V0KHtfOmV9LHQsbil7Y29uc3R7ZGF0YTpvLHNldHVwU3RhdGU6cixjdHg6c309ZTtyZXR1cm4gciE9PXYmJk4ocix0KT8oclt0XT1uLCEwKTpvIT09diYmTihvLHQpPyhvW3RdPW4sITApOiFOKGUucHJvcHMsdCkmJigoXCIkXCIhPT10WzBdfHwhKHQuc2xpY2UoMSlpbiBlKSkmJihzW3RdPW4sITApKX0saGFzKHtfOntkYXRhOmUsc2V0dXBTdGF0ZTp0LGFjY2Vzc0NhY2hlOm4sY3R4Om8sYXBwQ29udGV4dDpyLHByb3BzT3B0aW9uczpzfX0saSl7bGV0IGw7cmV0dXJuISFuW2ldfHxlIT09diYmTihlLGkpfHx0IT09diYmTih0LGkpfHwobD1zWzBdKSYmTihsLGkpfHxOKG8saSl8fE4oWG8saSl8fE4oci5jb25maWcuZ2xvYmFsUHJvcGVydGllcyxpKX0sZGVmaW5lUHJvcGVydHkoZSx0LG4pe3JldHVybiBudWxsIT1uLmdldD9lLl8uYWNjZXNzQ2FjaGVbdF09MDpOKG4sXCJ2YWx1ZVwiKSYmdGhpcy5zZXQoZSx0LG4udmFsdWUsbnVsbCksUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsbil9fSx0cj13KHt9LGVyLHtnZXQoZSx0KXtpZih0IT09U3ltYm9sLnVuc2NvcGFibGVzKXJldHVybiBlci5nZXQoZSx0LGUpfSxoYXM6KGUsbik9PlwiX1wiIT09blswXSYmIXQobil9KTtsZXQgbnI9ITA7ZnVuY3Rpb24gb3IoZSl7Y29uc3QgdD1pcihlKSxuPWUucHJveHksbz1lLmN0eDtucj0hMSx0LmJlZm9yZUNyZWF0ZSYmcnIodC5iZWZvcmVDcmVhdGUsZSxcImJjXCIpO2NvbnN0e2RhdGE6cixjb21wdXRlZDpzLG1ldGhvZHM6aSx3YXRjaDpsLHByb3ZpZGU6YyxpbmplY3Q6YSxjcmVhdGVkOnUsYmVmb3JlTW91bnQ6cCxtb3VudGVkOmYsYmVmb3JlVXBkYXRlOmQsdXBkYXRlZDpoLGFjdGl2YXRlZDptLGRlYWN0aXZhdGVkOmcsYmVmb3JlVW5tb3VudDp2LHVubW91bnRlZDp5LHJlbmRlcjpiLHJlbmRlclRyYWNrZWQ6UyxyZW5kZXJUcmlnZ2VyZWQ6eCxlcnJvckNhcHR1cmVkOkMsc2VydmVyUHJlZmV0Y2g6dyxleHBvc2U6ayxpbmhlcml0QXR0cnM6VCxjb21wb25lbnRzOk4sZGlyZWN0aXZlczokfT10O2lmKGEmJmZ1bmN0aW9uKGUsdCxuPV8sbz0hMSl7RShlKSYmKGU9dXIoZSkpO2Zvcihjb25zdCByIGluIGUpe2NvbnN0IG49ZVtyXTtsZXQgcztzPU0obik/XCJkZWZhdWx0XCJpbiBuP3FuKG4uZnJvbXx8cixuLmRlZmF1bHQsITApOnFuKG4uZnJvbXx8cik6cW4obiksUnQocykmJm8/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQscix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OigpPT5zLnZhbHVlLHNldDplPT5zLnZhbHVlPWV9KTp0W3JdPXN9fShhLG8sbnVsbCxlLmFwcENvbnRleHQuY29uZmlnLnVud3JhcEluamVjdGVkUmVmKSxpKWZvcihjb25zdCBfIGluIGkpe2NvbnN0IGU9aVtfXTtGKGUpJiYob1tfXT1lLmJpbmQobikpfWlmKHIpe2NvbnN0IHQ9ci5jYWxsKG4sbik7TSh0KSYmKGUuZGF0YT1ndCh0KSl9aWYobnI9ITAscylmb3IoY29uc3QgRSBpbiBzKXtjb25zdCBlPXNbRV0sdD1GKGUpP2UuYmluZChuLG4pOkYoZS5nZXQpP2UuZ2V0LmJpbmQobixuKTpfLHI9IUYoZSkmJkYoZS5zZXQpP2Uuc2V0LmJpbmQobik6XyxpPWpzKHtnZXQ6dCxzZXQ6cn0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLEUse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDooKT0+aS52YWx1ZSxzZXQ6ZT0+aS52YWx1ZT1lfSl9aWYobClmb3IoY29uc3QgXyBpbiBsKXNyKGxbX10sbyxuLF8pO2lmKGMpe2NvbnN0IGU9RihjKT9jLmNhbGwobik6YztSZWZsZWN0Lm93bktleXMoZSkuZm9yRWFjaCgodD0+e0duKHQsZVt0XSl9KSl9ZnVuY3Rpb24gTyhlLHQpe0UodCk/dC5mb3JFYWNoKCh0PT5lKHQuYmluZChuKSkpKTp0JiZlKHQuYmluZChuKSl9aWYodSYmcnIodSxlLFwiY1wiKSxPKCRvLHApLE8oT28sZiksTyhSbyxkKSxPKEZvLGgpLE8oU28sbSksTyh4byxnKSxPKEJvLEMpLE8oSW8sUyksTyhWbyx4KSxPKFBvLHYpLE8oQW8seSksTyhNbyx3KSxFKGspKWlmKGsubGVuZ3RoKXtjb25zdCB0PWUuZXhwb3NlZHx8KGUuZXhwb3NlZD17fSk7ay5mb3JFYWNoKChlPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7Z2V0OigpPT5uW2VdLHNldDp0PT5uW2VdPXR9KX0pKX1lbHNlIGUuZXhwb3NlZHx8KGUuZXhwb3NlZD17fSk7YiYmZS5yZW5kZXI9PT1fJiYoZS5yZW5kZXI9YiksbnVsbCE9VCYmKGUuaW5oZXJpdEF0dHJzPVQpLE4mJihlLmNvbXBvbmVudHM9TiksJCYmKGUuZGlyZWN0aXZlcz0kKX1mdW5jdGlvbiBycihlLHQsbil7WnQoRShlKT9lLm1hcCgoZT0+ZS5iaW5kKHQucHJveHkpKSk6ZS5iaW5kKHQucHJveHkpLHQsbil9ZnVuY3Rpb24gc3IoZSx0LG4sbyl7Y29uc3Qgcj1vLmluY2x1ZGVzKFwiLlwiKT9ubyhuLG8pOigpPT5uW29dO2lmKFAoZSkpe2NvbnN0IG49dFtlXTtGKG4pJiZYbihyLG4pfWVsc2UgaWYoRihlKSlYbihyLGUuYmluZChuKSk7ZWxzZSBpZihNKGUpKWlmKEUoZSkpZS5mb3JFYWNoKChlPT5zcihlLHQsbixvKSkpO2Vsc2V7Y29uc3Qgbz1GKGUuaGFuZGxlcik/ZS5oYW5kbGVyLmJpbmQobik6dFtlLmhhbmRsZXJdO0YobykmJlhuKHIsbyxlKX19ZnVuY3Rpb24gaXIoZSl7Y29uc3QgdD1lLnR5cGUse21peGluczpuLGV4dGVuZHM6b309dCx7bWl4aW5zOnIsb3B0aW9uc0NhY2hlOnMsY29uZmlnOntvcHRpb25NZXJnZVN0cmF0ZWdpZXM6aX19PWUuYXBwQ29udGV4dCxsPXMuZ2V0KHQpO2xldCBjO3JldHVybiBsP2M9bDpyLmxlbmd0aHx8bnx8bz8oYz17fSxyLmxlbmd0aCYmci5mb3JFYWNoKChlPT5scihjLGUsaSwhMCkpKSxscihjLHQsaSkpOmM9dCxzLnNldCh0LGMpLGN9ZnVuY3Rpb24gbHIoZSx0LG4sbz0hMSl7Y29uc3R7bWl4aW5zOnIsZXh0ZW5kczpzfT10O3MmJmxyKGUscyxuLCEwKSxyJiZyLmZvckVhY2goKHQ9PmxyKGUsdCxuLCEwKSkpO2Zvcihjb25zdCBpIGluIHQpaWYobyYmXCJleHBvc2VcIj09PWkpO2Vsc2V7Y29uc3Qgbz1jcltpXXx8biYmbltpXTtlW2ldPW8/byhlW2ldLHRbaV0pOnRbaV19cmV0dXJuIGV9Y29uc3QgY3I9e2RhdGE6YXIscHJvcHM6ZnIsZW1pdHM6ZnIsbWV0aG9kczpmcixjb21wdXRlZDpmcixiZWZvcmVDcmVhdGU6cHIsY3JlYXRlZDpwcixiZWZvcmVNb3VudDpwcixtb3VudGVkOnByLGJlZm9yZVVwZGF0ZTpwcix1cGRhdGVkOnByLGJlZm9yZURlc3Ryb3k6cHIsYmVmb3JlVW5tb3VudDpwcixkZXN0cm95ZWQ6cHIsdW5tb3VudGVkOnByLGFjdGl2YXRlZDpwcixkZWFjdGl2YXRlZDpwcixlcnJvckNhcHR1cmVkOnByLHNlcnZlclByZWZldGNoOnByLGNvbXBvbmVudHM6ZnIsZGlyZWN0aXZlczpmcix3YXRjaDpmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybiB0O2lmKCF0KXJldHVybiBlO2NvbnN0IG49dyhPYmplY3QuY3JlYXRlKG51bGwpLGUpO2Zvcihjb25zdCBvIGluIHQpbltvXT1wcihlW29dLHRbb10pO3JldHVybiBufSxwcm92aWRlOmFyLGluamVjdDpmdW5jdGlvbihlLHQpe3JldHVybiBmcih1cihlKSx1cih0KSl9fTtmdW5jdGlvbiBhcihlLHQpe3JldHVybiB0P2U/ZnVuY3Rpb24oKXtyZXR1cm4gdyhGKGUpP2UuY2FsbCh0aGlzLHRoaXMpOmUsRih0KT90LmNhbGwodGhpcyx0aGlzKTp0KX06dDplfWZ1bmN0aW9uIHVyKGUpe2lmKEUoZSkpe2NvbnN0IHQ9e307Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspdFtlW25dXT1lW25dO3JldHVybiB0fXJldHVybiBlfWZ1bmN0aW9uIHByKGUsdCl7cmV0dXJuIGU/Wy4uLm5ldyBTZXQoW10uY29uY2F0KGUsdCkpXTp0fWZ1bmN0aW9uIGZyKGUsdCl7cmV0dXJuIGU/dyh3KE9iamVjdC5jcmVhdGUobnVsbCksZSksdCk6dH1mdW5jdGlvbiBkcihlLHQsbixvKXtjb25zdFtyLHNdPWUucHJvcHNPcHRpb25zO2xldCBpLGw9ITE7aWYodClmb3IobGV0IGMgaW4gdCl7aWYoVShjKSljb250aW51ZTtjb25zdCBhPXRbY107bGV0IHU7ciYmTihyLHU9eihjKSk/cyYmcy5pbmNsdWRlcyh1KT8oaXx8KGk9e30pKVt1XT1hOm5bdV09YTpObihlLmVtaXRzT3B0aW9ucyxjKXx8YyBpbiBvJiZhPT09b1tjXXx8KG9bY109YSxsPSEwKX1pZihzKXtjb25zdCB0PWt0KG4pLG89aXx8djtmb3IobGV0IGk9MDtpPHMubGVuZ3RoO2krKyl7Y29uc3QgbD1zW2ldO25bbF09aHIocix0LGwsb1tsXSxlLCFOKG8sbCkpfX1yZXR1cm4gbH1mdW5jdGlvbiBocihlLHQsbixvLHIscyl7Y29uc3QgaT1lW25dO2lmKG51bGwhPWkpe2NvbnN0IGU9TihpLFwiZGVmYXVsdFwiKTtpZihlJiZ2b2lkIDA9PT1vKXtjb25zdCBlPWkuZGVmYXVsdDtpZihpLnR5cGUhPT1GdW5jdGlvbiYmRihlKSl7Y29uc3R7cHJvcHNEZWZhdWx0czpzfT1yO24gaW4gcz9vPXNbbl06KGtzKHIpLG89c1tuXT1lLmNhbGwobnVsbCx0KSxUcygpKX1lbHNlIG89ZX1pWzBdJiYocyYmIWU/bz0hMTohaVsxXXx8XCJcIiE9PW8mJm8hPT1HKG4pfHwobz0hMCkpfXJldHVybiBvfWZ1bmN0aW9uIG1yKGUsdCxuPSExKXtjb25zdCBvPXQucHJvcHNDYWNoZSxyPW8uZ2V0KGUpO2lmKHIpcmV0dXJuIHI7Y29uc3Qgcz1lLnByb3BzLGk9e30sbD1bXTtsZXQgYz0hMTtpZighRihlKSl7Y29uc3Qgbz1lPT57Yz0hMDtjb25zdFtuLG9dPW1yKGUsdCwhMCk7dyhpLG4pLG8mJmwucHVzaCguLi5vKX07IW4mJnQubWl4aW5zLmxlbmd0aCYmdC5taXhpbnMuZm9yRWFjaChvKSxlLmV4dGVuZHMmJm8oZS5leHRlbmRzKSxlLm1peGlucyYmZS5taXhpbnMuZm9yRWFjaChvKX1pZighcyYmIWMpcmV0dXJuIG8uc2V0KGUseSkseTtpZihFKHMpKWZvcihsZXQgdT0wO3U8cy5sZW5ndGg7dSsrKXtjb25zdCBlPXooc1t1XSk7Z3IoZSkmJihpW2VdPXYpfWVsc2UgaWYocylmb3IoY29uc3QgdSBpbiBzKXtjb25zdCBlPXoodSk7aWYoZ3IoZSkpe2NvbnN0IHQ9c1t1XSxuPWlbZV09RSh0KXx8Rih0KT97dHlwZTp0fTp0O2lmKG4pe2NvbnN0IHQ9X3IoQm9vbGVhbixuLnR5cGUpLG89X3IoU3RyaW5nLG4udHlwZSk7blswXT10Pi0xLG5bMV09bzwwfHx0PG8sKHQ+LTF8fE4obixcImRlZmF1bHRcIikpJiZsLnB1c2goZSl9fX1jb25zdCBhPVtpLGxdO3JldHVybiBvLnNldChlLGEpLGF9ZnVuY3Rpb24gZ3IoZSl7cmV0dXJuXCIkXCIhPT1lWzBdfWZ1bmN0aW9uIHZyKGUpe2NvbnN0IHQ9ZSYmZS50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO3JldHVybiB0P3RbMV06bnVsbD09PWU/XCJudWxsXCI6XCJcIn1mdW5jdGlvbiB5cihlLHQpe3JldHVybiB2cihlKT09PXZyKHQpfWZ1bmN0aW9uIF9yKGUsdCl7cmV0dXJuIEUodCk/dC5maW5kSW5kZXgoKHQ9PnlyKHQsZSkpKTpGKHQpJiZ5cih0LGUpPzA6LTF9Y29uc3QgYnI9ZT0+XCJfXCI9PT1lWzBdfHxcIiRzdGFibGVcIj09PWUsU3I9ZT0+RShlKT9lLm1hcChncyk6W2dzKGUpXSx4cj0oZSx0LG4pPT57aWYodC5fbilyZXR1cm4gdDtjb25zdCBvPUFuKCgoLi4uZSk9PlNyKHQoLi4uZSkpKSxuKTtyZXR1cm4gby5fYz0hMSxvfSxDcj0oZSx0LG4pPT57Y29uc3Qgbz1lLl9jdHg7Zm9yKGNvbnN0IHIgaW4gZSl7aWYoYnIocikpY29udGludWU7Y29uc3Qgbj1lW3JdO2lmKEYobikpdFtyXT14cigwLG4sbyk7ZWxzZSBpZihudWxsIT1uKXtjb25zdCBlPVNyKG4pO3Rbcl09KCk9PmV9fX0sd3I9KGUsdCk9Pntjb25zdCBuPVNyKHQpO2Uuc2xvdHMuZGVmYXVsdD0oKT0+bn07ZnVuY3Rpb24ga3IoKXtyZXR1cm57YXBwOm51bGwsY29uZmlnOntpc05hdGl2ZVRhZzpiLHBlcmZvcm1hbmNlOiExLGdsb2JhbFByb3BlcnRpZXM6e30sb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOnt9LGVycm9ySGFuZGxlcjp2b2lkIDAsd2FybkhhbmRsZXI6dm9pZCAwLGNvbXBpbGVyT3B0aW9uczp7fX0sbWl4aW5zOltdLGNvbXBvbmVudHM6e30sZGlyZWN0aXZlczp7fSxwcm92aWRlczpPYmplY3QuY3JlYXRlKG51bGwpLG9wdGlvbnNDYWNoZTpuZXcgV2Vha01hcCxwcm9wc0NhY2hlOm5ldyBXZWFrTWFwLGVtaXRzQ2FjaGU6bmV3IFdlYWtNYXB9fWxldCBUcj0wO2Z1bmN0aW9uIE5yKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKG4sbz1udWxsKXtGKG4pfHwobj1PYmplY3QuYXNzaWduKHt9LG4pKSxudWxsPT1vfHxNKG8pfHwobz1udWxsKTtjb25zdCByPWtyKCkscz1uZXcgU2V0O2xldCBpPSExO2NvbnN0IGw9ci5hcHA9e191aWQ6VHIrKyxfY29tcG9uZW50Om4sX3Byb3BzOm8sX2NvbnRhaW5lcjpudWxsLF9jb250ZXh0OnIsX2luc3RhbmNlOm51bGwsdmVyc2lvbjpvaSxnZXQgY29uZmlnKCl7cmV0dXJuIHIuY29uZmlnfSxzZXQgY29uZmlnKGUpe30sdXNlOihlLC4uLnQpPT4ocy5oYXMoZSl8fChlJiZGKGUuaW5zdGFsbCk/KHMuYWRkKGUpLGUuaW5zdGFsbChsLC4uLnQpKTpGKGUpJiYocy5hZGQoZSksZShsLC4uLnQpKSksbCksbWl4aW46ZT0+KHIubWl4aW5zLmluY2x1ZGVzKGUpfHxyLm1peGlucy5wdXNoKGUpLGwpLGNvbXBvbmVudDooZSx0KT0+dD8oci5jb21wb25lbnRzW2VdPXQsbCk6ci5jb21wb25lbnRzW2VdLGRpcmVjdGl2ZTooZSx0KT0+dD8oci5kaXJlY3RpdmVzW2VdPXQsbCk6ci5kaXJlY3RpdmVzW2VdLG1vdW50KHMsYyxhKXtpZighaSl7Y29uc3QgdT11cyhuLG8pO3JldHVybiB1LmFwcENvbnRleHQ9cixjJiZ0P3QodSxzKTplKHUscyxhKSxpPSEwLGwuX2NvbnRhaW5lcj1zLHMuX192dWVfYXBwX189bCxWcyh1LmNvbXBvbmVudCl8fHUuY29tcG9uZW50LnByb3h5fX0sdW5tb3VudCgpe2kmJihlKG51bGwsbC5fY29udGFpbmVyKSxkZWxldGUgbC5fY29udGFpbmVyLl9fdnVlX2FwcF9fKX0scHJvdmlkZTooZSx0KT0+KHIucHJvdmlkZXNbZV09dCxsKX07cmV0dXJuIGx9fWZ1bmN0aW9uIEVyKGUsdCxuLG8scj0hMSl7aWYoRShlKSlyZXR1cm4gdm9pZCBlLmZvckVhY2goKChlLHMpPT5FcihlLHQmJihFKHQpP3Rbc106dCksbixvLHIpKSk7aWYobW8obykmJiFyKXJldHVybjtjb25zdCBzPTQmby5zaGFwZUZsYWc/VnMoby5jb21wb25lbnQpfHxvLmNvbXBvbmVudC5wcm94eTpvLmVsLGk9cj9udWxsOnMse2k6bCxyOmN9PWUsYT10JiZ0LnIsdT1sLnJlZnM9PT12P2wucmVmcz17fTpsLnJlZnMscD1sLnNldHVwU3RhdGU7aWYobnVsbCE9YSYmYSE9PWMmJihQKGEpPyh1W2FdPW51bGwsTihwLGEpJiYocFthXT1udWxsKSk6UnQoYSkmJihhLnZhbHVlPW51bGwpKSxGKGMpKVl0KGMsbCwxMixbaSx1XSk7ZWxzZXtjb25zdCB0PVAoYyksbz1SdChjKTtpZih0fHxvKXtjb25zdCBsPSgpPT57aWYoZS5mKXtjb25zdCBuPXQ/dVtjXTpjLnZhbHVlO3I/RShuKSYmayhuLHMpOkUobik/bi5pbmNsdWRlcyhzKXx8bi5wdXNoKHMpOnQ/KHVbY109W3NdLE4ocCxjKSYmKHBbY109dVtjXSkpOihjLnZhbHVlPVtzXSxlLmsmJih1W2Uua109Yy52YWx1ZSkpfWVsc2UgdD8odVtjXT1pLE4ocCxjKSYmKHBbY109aSkpOm8mJihjLnZhbHVlPWksZS5rJiYodVtlLmtdPWkpKX07aT8obC5pZD0tMSxQcihsLG4pKTpsKCl9fX1sZXQgJHI9ITE7Y29uc3QgT3I9ZT0+L3N2Zy8udGVzdChlLm5hbWVzcGFjZVVSSSkmJlwiZm9yZWlnbk9iamVjdFwiIT09ZS50YWdOYW1lLFJyPWU9Pjg9PT1lLm5vZGVUeXBlO2Z1bmN0aW9uIEZyKGUpe2NvbnN0e210OnQscDpuLG86e3BhdGNoUHJvcDpvLGNyZWF0ZVRleHQ6cixuZXh0U2libGluZzpzLHBhcmVudE5vZGU6aSxyZW1vdmU6bCxpbnNlcnQ6YyxjcmVhdGVDb21tZW50OmF9fT1lLHU9KG4sbyxsLGEsZyx2PSExKT0+e2NvbnN0IHk9UnIobikmJlwiW1wiPT09bi5kYXRhLF89KCk9PmgobixvLGwsYSxnLHkpLHt0eXBlOmIscmVmOlMsc2hhcGVGbGFnOngscGF0Y2hGbGFnOkN9PW8sdz1uLm5vZGVUeXBlO28uZWw9biwtMj09PUMmJih2PSExLG8uZHluYW1pY0NoaWxkcmVuPW51bGwpO2xldCBrPW51bGw7c3dpdGNoKGIpe2Nhc2UgenI6MyE9PXc/XCJcIj09PW8uY2hpbGRyZW4/KGMoby5lbD1yKFwiXCIpLGkobiksbiksaz1uKTprPV8oKToobi5kYXRhIT09by5jaGlsZHJlbiYmKCRyPSEwLG4uZGF0YT1vLmNoaWxkcmVuKSxrPXMobikpO2JyZWFrO2Nhc2UgS3I6az04IT09d3x8eT9fKCk6cyhuKTticmVhaztjYXNlIEdyOmlmKDE9PT13fHwzPT09dyl7az1uO2NvbnN0IGU9IW8uY2hpbGRyZW4ubGVuZ3RoO2ZvcihsZXQgdD0wO3Q8by5zdGF0aWNDb3VudDt0KyspZSYmKG8uY2hpbGRyZW4rPTE9PT1rLm5vZGVUeXBlP2sub3V0ZXJIVE1MOmsuZGF0YSksdD09PW8uc3RhdGljQ291bnQtMSYmKG8uYW5jaG9yPWspLGs9cyhrKTtyZXR1cm4ga31rPV8oKTticmVhaztjYXNlIFdyOms9eT9kKG4sbyxsLGEsZyx2KTpfKCk7YnJlYWs7ZGVmYXVsdDppZigxJngpaz0xIT09d3x8by50eXBlLnRvTG93ZXJDYXNlKCkhPT1uLnRhZ05hbWUudG9Mb3dlckNhc2UoKT9fKCk6cChuLG8sbCxhLGcsdik7ZWxzZSBpZig2Jngpe28uc2xvdFNjb3BlSWRzPWc7Y29uc3QgZT1pKG4pO2lmKHQobyxlLG51bGwsbCxhLE9yKGUpLHYpLGs9eT9tKG4pOnMobiksayYmUnIoaykmJlwidGVsZXBvcnQgZW5kXCI9PT1rLmRhdGEmJihrPXMoaykpLG1vKG8pKXtsZXQgdDt5Pyh0PXVzKFdyKSx0LmFuY2hvcj1rP2sucHJldmlvdXNTaWJsaW5nOmUubGFzdENoaWxkKTp0PTM9PT1uLm5vZGVUeXBlP2RzKFwiXCIpOnVzKFwiZGl2XCIpLHQuZWw9bixvLmNvbXBvbmVudC5zdWJUcmVlPXR9fWVsc2UgNjQmeD9rPTghPT13P18oKTpvLnR5cGUuaHlkcmF0ZShuLG8sbCxhLGcsdixlLGYpOjEyOCZ4JiYoaz1vLnR5cGUuaHlkcmF0ZShuLG8sbCxhLE9yKGkobikpLGcsdixlLHUpKX1yZXR1cm4gbnVsbCE9UyYmRXIoUyxudWxsLGEsbyksa30scD0oZSx0LG4scixzLGkpPT57aT1pfHwhIXQuZHluYW1pY0NoaWxkcmVuO2NvbnN0e3R5cGU6Yyxwcm9wczphLHBhdGNoRmxhZzp1LHNoYXBlRmxhZzpwLGRpcnM6ZH09dCxoPVwiaW5wdXRcIj09PWMmJmR8fFwib3B0aW9uXCI9PT1jO2lmKGh8fC0xIT09dSl7aWYoZCYmam8odCxudWxsLG4sXCJjcmVhdGVkXCIpLGEpaWYoaHx8IWl8fDQ4JnUpZm9yKGNvbnN0IHQgaW4gYSkoaCYmdC5lbmRzV2l0aChcInZhbHVlXCIpfHx4KHQpJiYhVSh0KSkmJm8oZSx0LG51bGwsYVt0XSwhMSx2b2lkIDAsbik7ZWxzZSBhLm9uQ2xpY2smJm8oZSxcIm9uQ2xpY2tcIixudWxsLGEub25DbGljaywhMSx2b2lkIDAsbik7bGV0IGM7aWYoKGM9YSYmYS5vblZub2RlQmVmb3JlTW91bnQpJiZicyhjLG4sdCksZCYmam8odCxudWxsLG4sXCJiZWZvcmVNb3VudFwiKSwoKGM9YSYmYS5vblZub2RlTW91bnRlZCl8fGQpJiZ6bigoKCk9PntjJiZicyhjLG4sdCksZCYmam8odCxudWxsLG4sXCJtb3VudGVkXCIpfSksciksMTYmcCYmKCFhfHwhYS5pbm5lckhUTUwmJiFhLnRleHRDb250ZW50KSl7bGV0IG89ZihlLmZpcnN0Q2hpbGQsdCxlLG4scixzLGkpO2Zvcig7bzspeyRyPSEwO2NvbnN0IGU9bztvPW8ubmV4dFNpYmxpbmcsbChlKX19ZWxzZSA4JnAmJmUudGV4dENvbnRlbnQhPT10LmNoaWxkcmVuJiYoJHI9ITAsZS50ZXh0Q29udGVudD10LmNoaWxkcmVuKX1yZXR1cm4gZS5uZXh0U2libGluZ30sZj0oZSx0LG8scixzLGksbCk9PntsPWx8fCEhdC5keW5hbWljQ2hpbGRyZW47Y29uc3QgYz10LmNoaWxkcmVuLGE9Yy5sZW5ndGg7Zm9yKGxldCBwPTA7cDxhO3ArKyl7Y29uc3QgdD1sP2NbcF06Y1twXT1ncyhjW3BdKTtpZihlKWU9dShlLHQscixzLGksbCk7ZWxzZXtpZih0LnR5cGU9PT16ciYmIXQuY2hpbGRyZW4pY29udGludWU7JHI9ITAsbihudWxsLHQsbyxudWxsLHIscyxPcihvKSxpKX19cmV0dXJuIGV9LGQ9KGUsdCxuLG8scixsKT0+e2NvbnN0e3Nsb3RTY29wZUlkczp1fT10O3UmJihyPXI/ci5jb25jYXQodSk6dSk7Y29uc3QgcD1pKGUpLGQ9ZihzKGUpLHQscCxuLG8scixsKTtyZXR1cm4gZCYmUnIoZCkmJlwiXVwiPT09ZC5kYXRhP3ModC5hbmNob3I9ZCk6KCRyPSEwLGModC5hbmNob3I9YShcIl1cIikscCxkKSxkKX0saD0oZSx0LG8scixjLGEpPT57aWYoJHI9ITAsdC5lbD1udWxsLGEpe2NvbnN0IHQ9bShlKTtmb3IoOzspe2NvbnN0IG49cyhlKTtpZighbnx8bj09PXQpYnJlYWs7bChuKX19Y29uc3QgdT1zKGUpLHA9aShlKTtyZXR1cm4gbChlKSxuKG51bGwsdCxwLHUsbyxyLE9yKHApLGMpLHV9LG09ZT0+e2xldCB0PTA7Zm9yKDtlOylpZigoZT1zKGUpKSYmUnIoZSkmJihcIltcIj09PWUuZGF0YSYmdCsrLFwiXVwiPT09ZS5kYXRhKSl7aWYoMD09PXQpcmV0dXJuIHMoZSk7dC0tfXJldHVybiBlfTtyZXR1cm5bKGUsdCk9PntpZighdC5oYXNDaGlsZE5vZGVzKCkpcmV0dXJuIG4obnVsbCxlLHQpLF9uKCksdm9pZCh0Ll92bm9kZT1lKTskcj0hMSx1KHQuZmlyc3RDaGlsZCxlLG51bGwsbnVsbCxudWxsKSxfbigpLHQuX3Zub2RlPWUsJHImJmNvbnNvbGUuZXJyb3IoXCJIeWRyYXRpb24gY29tcGxldGVkIGJ1dCBjb250YWlucyBtaXNtYXRjaGVzLlwiKX0sdV19Y29uc3QgUHI9em47ZnVuY3Rpb24gQXIoZSl7cmV0dXJuIFZyKGUpfWZ1bmN0aW9uIE1yKGUpe3JldHVybiBWcihlLEZyKX1mdW5jdGlvbiBWcihlLHQpeyhlZXx8KGVlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDp7fSkpLl9fVlVFX189ITA7Y29uc3R7aW5zZXJ0Om4scmVtb3ZlOm8scGF0Y2hQcm9wOnIsY3JlYXRlRWxlbWVudDpzLGNyZWF0ZVRleHQ6aSxjcmVhdGVDb21tZW50Omwsc2V0VGV4dDpjLHNldEVsZW1lbnRUZXh0OmEscGFyZW50Tm9kZTp1LG5leHRTaWJsaW5nOnAsc2V0U2NvcGVJZDpmPV8sY2xvbmVOb2RlOmQsaW5zZXJ0U3RhdGljQ29udGVudDpofT1lLG09KGUsdCxuLG89bnVsbCxyPW51bGwscz1udWxsLGk9ITEsbD1udWxsLGM9ISF0LmR5bmFtaWNDaGlsZHJlbik9PntpZihlPT09dClyZXR1cm47ZSYmIXJzKGUsdCkmJihvPVkoZSksSChlLHIscywhMCksZT1udWxsKSwtMj09PXQucGF0Y2hGbGFnJiYoYz0hMSx0LmR5bmFtaWNDaGlsZHJlbj1udWxsKTtjb25zdHt0eXBlOmEscmVmOnUsc2hhcGVGbGFnOnB9PXQ7c3dpdGNoKGEpe2Nhc2UgenI6ZyhlLHQsbixvKTticmVhaztjYXNlIEtyOmIoZSx0LG4sbyk7YnJlYWs7Y2FzZSBHcjpudWxsPT1lJiZTKHQsbixvLGkpO2JyZWFrO2Nhc2UgV3I6UihlLHQsbixvLHIscyxpLGwsYyk7YnJlYWs7ZGVmYXVsdDoxJnA/eChlLHQsbixvLHIscyxpLGwsYyk6NiZwP0YoZSx0LG4sbyxyLHMsaSxsLGMpOig2NCZwfHwxMjgmcCkmJmEucHJvY2VzcyhlLHQsbixvLHIscyxpLGwsYyx0ZSl9bnVsbCE9dSYmciYmRXIodSxlJiZlLnJlZixzLHR8fGUsIXQpfSxnPShlLHQsbyxyKT0+e2lmKG51bGw9PWUpbih0LmVsPWkodC5jaGlsZHJlbiksbyxyKTtlbHNle2NvbnN0IG49dC5lbD1lLmVsO3QuY2hpbGRyZW4hPT1lLmNoaWxkcmVuJiZjKG4sdC5jaGlsZHJlbil9fSxiPShlLHQsbyxyKT0+e251bGw9PWU/bih0LmVsPWwodC5jaGlsZHJlbnx8XCJcIiksbyxyKTp0LmVsPWUuZWx9LFM9KGUsdCxuLG8pPT57W2UuZWwsZS5hbmNob3JdPWgoZS5jaGlsZHJlbix0LG4sbyxlLmVsLGUuYW5jaG9yKX0seD0oZSx0LG4sbyxyLHMsaSxsLGMpPT57aT1pfHxcInN2Z1wiPT09dC50eXBlLG51bGw9PWU/Qyh0LG4sbyxyLHMsaSxsLGMpOkUoZSx0LHIscyxpLGwsYyl9LEM9KGUsdCxvLGksbCxjLHUscCk9PntsZXQgZixoO2NvbnN0e3R5cGU6bSxwcm9wczpnLHNoYXBlRmxhZzp2LHRyYW5zaXRpb246eSxwYXRjaEZsYWc6XyxkaXJzOmJ9PWU7aWYoZS5lbCYmdm9pZCAwIT09ZCYmLTE9PT1fKWY9ZS5lbD1kKGUuZWwpO2Vsc2V7aWYoZj1lLmVsPXMoZS50eXBlLGMsZyYmZy5pcyxnKSw4JnY/YShmLGUuY2hpbGRyZW4pOjE2JnYmJlQoZS5jaGlsZHJlbixmLG51bGwsaSxsLGMmJlwiZm9yZWlnbk9iamVjdFwiIT09bSx1LHApLGImJmpvKGUsbnVsbCxpLFwiY3JlYXRlZFwiKSxnKXtmb3IoY29uc3QgdCBpbiBnKVwidmFsdWVcIj09PXR8fFUodCl8fHIoZix0LG51bGwsZ1t0XSxjLGUuY2hpbGRyZW4saSxsLEopO1widmFsdWVcImluIGcmJnIoZixcInZhbHVlXCIsbnVsbCxnLnZhbHVlKSwoaD1nLm9uVm5vZGVCZWZvcmVNb3VudCkmJmJzKGgsaSxlKX1rKGYsZSxlLnNjb3BlSWQsdSxpKX1iJiZqbyhlLG51bGwsaSxcImJlZm9yZU1vdW50XCIpO2NvbnN0IFM9KCFsfHxsJiYhbC5wZW5kaW5nQnJhbmNoKSYmeSYmIXkucGVyc2lzdGVkO1MmJnkuYmVmb3JlRW50ZXIoZiksbihmLHQsbyksKChoPWcmJmcub25Wbm9kZU1vdW50ZWQpfHxTfHxiKSYmUHIoKCgpPT57aCYmYnMoaCxpLGUpLFMmJnkuZW50ZXIoZiksYiYmam8oZSxudWxsLGksXCJtb3VudGVkXCIpfSksbCl9LGs9KGUsdCxuLG8scik9PntpZihuJiZmKGUsbiksbylmb3IobGV0IHM9MDtzPG8ubGVuZ3RoO3MrKylmKGUsb1tzXSk7aWYocil7aWYodD09PXIuc3ViVHJlZSl7Y29uc3QgdD1yLnZub2RlO2soZSx0LHQuc2NvcGVJZCx0LnNsb3RTY29wZUlkcyxyLnBhcmVudCl9fX0sVD0oZSx0LG4sbyxyLHMsaSxsLGM9MCk9Pntmb3IobGV0IGE9YzthPGUubGVuZ3RoO2ErKyl7Y29uc3QgYz1lW2FdPWw/dnMoZVthXSk6Z3MoZVthXSk7bShudWxsLGMsdCxuLG8scixzLGksbCl9fSxFPShlLHQsbixvLHMsaSxsKT0+e2NvbnN0IGM9dC5lbD1lLmVsO2xldHtwYXRjaEZsYWc6dSxkeW5hbWljQ2hpbGRyZW46cCxkaXJzOmZ9PXQ7dXw9MTYmZS5wYXRjaEZsYWc7Y29uc3QgZD1lLnByb3BzfHx2LGg9dC5wcm9wc3x8djtsZXQgbTtuJiZJcihuLCExKSwobT1oLm9uVm5vZGVCZWZvcmVVcGRhdGUpJiZicyhtLG4sdCxlKSxmJiZqbyh0LGUsbixcImJlZm9yZVVwZGF0ZVwiKSxuJiZJcihuLCEwKTtjb25zdCBnPXMmJlwiZm9yZWlnbk9iamVjdFwiIT09dC50eXBlO2lmKHA/JChlLmR5bmFtaWNDaGlsZHJlbixwLGMsbixvLGcsaSk6bHx8QihlLHQsYyxudWxsLG4sbyxnLGksITEpLHU+MCl7aWYoMTYmdSlPKGMsdCxkLGgsbixvLHMpO2Vsc2UgaWYoMiZ1JiZkLmNsYXNzIT09aC5jbGFzcyYmcihjLFwiY2xhc3NcIixudWxsLGguY2xhc3MscyksNCZ1JiZyKGMsXCJzdHlsZVwiLGQuc3R5bGUsaC5zdHlsZSxzKSw4JnUpe2NvbnN0IGk9dC5keW5hbWljUHJvcHM7Zm9yKGxldCB0PTA7dDxpLmxlbmd0aDt0Kyspe2NvbnN0IGw9aVt0XSxhPWRbbF0sdT1oW2xdO3U9PT1hJiZcInZhbHVlXCIhPT1sfHxyKGMsbCxhLHUscyxlLmNoaWxkcmVuLG4sbyxKKX19MSZ1JiZlLmNoaWxkcmVuIT09dC5jaGlsZHJlbiYmYShjLHQuY2hpbGRyZW4pfWVsc2UgbHx8bnVsbCE9cHx8TyhjLHQsZCxoLG4sbyxzKTsoKG09aC5vblZub2RlVXBkYXRlZCl8fGYpJiZQcigoKCk9PnttJiZicyhtLG4sdCxlKSxmJiZqbyh0LGUsbixcInVwZGF0ZWRcIil9KSxvKX0sJD0oZSx0LG4sbyxyLHMsaSk9Pntmb3IobGV0IGw9MDtsPHQubGVuZ3RoO2wrKyl7Y29uc3QgYz1lW2xdLGE9dFtsXSxwPWMuZWwmJihjLnR5cGU9PT1Xcnx8IXJzKGMsYSl8fDcwJmMuc2hhcGVGbGFnKT91KGMuZWwpOm47bShjLGEscCxudWxsLG8scixzLGksITApfX0sTz0oZSx0LG4sbyxzLGksbCk9PntpZihuIT09byl7Zm9yKGNvbnN0IGMgaW4gbyl7aWYoVShjKSljb250aW51ZTtjb25zdCBhPW9bY10sdT1uW2NdO2EhPT11JiZcInZhbHVlXCIhPT1jJiZyKGUsYyx1LGEsbCx0LmNoaWxkcmVuLHMsaSxKKX1pZihuIT09dilmb3IoY29uc3QgYyBpbiBuKVUoYyl8fGMgaW4gb3x8cihlLGMsbltjXSxudWxsLGwsdC5jaGlsZHJlbixzLGksSik7XCJ2YWx1ZVwiaW4gbyYmcihlLFwidmFsdWVcIixuLnZhbHVlLG8udmFsdWUpfX0sUj0oZSx0LG8scixzLGwsYyxhLHUpPT57Y29uc3QgcD10LmVsPWU/ZS5lbDppKFwiXCIpLGY9dC5hbmNob3I9ZT9lLmFuY2hvcjppKFwiXCIpO2xldHtwYXRjaEZsYWc6ZCxkeW5hbWljQ2hpbGRyZW46aCxzbG90U2NvcGVJZHM6bX09dDttJiYoYT1hP2EuY29uY2F0KG0pOm0pLG51bGw9PWU/KG4ocCxvLHIpLG4oZixvLHIpLFQodC5jaGlsZHJlbixvLGYscyxsLGMsYSx1KSk6ZD4wJiY2NCZkJiZoJiZlLmR5bmFtaWNDaGlsZHJlbj8oJChlLmR5bmFtaWNDaGlsZHJlbixoLG8scyxsLGMsYSksKG51bGwhPXQua2V5fHxzJiZ0PT09cy5zdWJUcmVlKSYmQnIoZSx0LCEwKSk6QihlLHQsbyxmLHMsbCxjLGEsdSl9LEY9KGUsdCxuLG8scixzLGksbCxjKT0+e3Quc2xvdFNjb3BlSWRzPWwsbnVsbD09ZT81MTImdC5zaGFwZUZsYWc/ci5jdHguYWN0aXZhdGUodCxuLG8saSxjKTpQKHQsbixvLHIscyxpLGMpOkEoZSx0LGMpfSxQPShlLHQsbixvLHIscyxpKT0+e2NvbnN0IGw9ZS5jb21wb25lbnQ9ZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89ZS50eXBlLHI9KHQ/dC5hcHBDb250ZXh0OmUuYXBwQ29udGV4dCl8fFNzLHM9e3VpZDp4cysrLHZub2RlOmUsdHlwZTpvLHBhcmVudDp0LGFwcENvbnRleHQ6cixyb290Om51bGwsbmV4dDpudWxsLHN1YlRyZWU6bnVsbCxlZmZlY3Q6bnVsbCx1cGRhdGU6bnVsbCxzY29wZTpuZXcgbmUoITApLHJlbmRlcjpudWxsLHByb3h5Om51bGwsZXhwb3NlZDpudWxsLGV4cG9zZVByb3h5Om51bGwsd2l0aFByb3h5Om51bGwscHJvdmlkZXM6dD90LnByb3ZpZGVzOk9iamVjdC5jcmVhdGUoci5wcm92aWRlcyksYWNjZXNzQ2FjaGU6bnVsbCxyZW5kZXJDYWNoZTpbXSxjb21wb25lbnRzOm51bGwsZGlyZWN0aXZlczpudWxsLHByb3BzT3B0aW9uczptcihvLHIpLGVtaXRzT3B0aW9uczpUbihvLHIpLGVtaXQ6bnVsbCxlbWl0dGVkOm51bGwscHJvcHNEZWZhdWx0czp2LGluaGVyaXRBdHRyczpvLmluaGVyaXRBdHRycyxjdHg6dixkYXRhOnYscHJvcHM6dixhdHRyczp2LHNsb3RzOnYscmVmczp2LHNldHVwU3RhdGU6dixzZXR1cENvbnRleHQ6bnVsbCxzdXNwZW5zZTpuLHN1c3BlbnNlSWQ6bj9uLnBlbmRpbmdJZDowLGFzeW5jRGVwOm51bGwsYXN5bmNSZXNvbHZlZDohMSxpc01vdW50ZWQ6ITEsaXNVbm1vdW50ZWQ6ITEsaXNEZWFjdGl2YXRlZDohMSxiYzpudWxsLGM6bnVsbCxibTpudWxsLG06bnVsbCxidTpudWxsLHU6bnVsbCx1bTpudWxsLGJ1bTpudWxsLGRhOm51bGwsYTpudWxsLHJ0ZzpudWxsLHJ0YzpudWxsLGVjOm51bGwsc3A6bnVsbH07cy5jdHg9e186c30scy5yb290PXQ/dC5yb290OnMscy5lbWl0PWtuLmJpbmQobnVsbCxzKSxlLmNlJiZlLmNlKHMpO3JldHVybiBzfShlLG8scik7aWYoeW8oZSkmJihsLmN0eC5yZW5kZXJlcj10ZSksZnVuY3Rpb24oZSx0PSExKXtPcz10O2NvbnN0e3Byb3BzOm4sY2hpbGRyZW46b309ZS52bm9kZSxyPU5zKGUpOyhmdW5jdGlvbihlLHQsbixvPSExKXtjb25zdCByPXt9LHM9e307UShzLGlzLDEpLGUucHJvcHNEZWZhdWx0cz1PYmplY3QuY3JlYXRlKG51bGwpLGRyKGUsdCxyLHMpO2Zvcihjb25zdCBpIGluIGUucHJvcHNPcHRpb25zWzBdKWkgaW4gcnx8KHJbaV09dm9pZCAwKTtlLnByb3BzPW4/bz9yOnZ0KHIpOmUudHlwZS5wcm9wcz9yOnMsZS5hdHRycz1zfSkoZSxuLHIsdCksKChlLHQpPT57aWYoMzImZS52bm9kZS5zaGFwZUZsYWcpe2NvbnN0IG49dC5fO24/KGUuc2xvdHM9a3QodCksUSh0LFwiX1wiLG4pKTpDcih0LGUuc2xvdHM9e30pfWVsc2UgZS5zbG90cz17fSx0JiZ3cihlLHQpO1EoZS5zbG90cyxpcywxKX0pKGUsbyk7Y29uc3Qgcz1yP2Z1bmN0aW9uKGUsdCl7Y29uc3Qgbj1lLnR5cGU7ZS5hY2Nlc3NDYWNoZT1PYmplY3QuY3JlYXRlKG51bGwpLGUucHJveHk9VHQobmV3IFByb3h5KGUuY3R4LGVyKSk7Y29uc3R7c2V0dXA6b309bjtpZihvKXtjb25zdCBuPWUuc2V0dXBDb250ZXh0PW8ubGVuZ3RoPjE/TXMoZSk6bnVsbDtrcyhlKSx4ZSgpO2NvbnN0IHI9WXQobyxlLDAsW2UucHJvcHMsbl0pO2lmKENlKCksVHMoKSxWKHIpKXtpZihyLnRoZW4oVHMsVHMpLHQpcmV0dXJuIHIudGhlbigobj0+e1JzKGUsbix0KX0pKS5jYXRjaCgodD0+e1F0KHQsZSwwKX0pKTtlLmFzeW5jRGVwPXJ9ZWxzZSBScyhlLHIsdCl9ZWxzZSBBcyhlLHQpfShlLHQpOnZvaWQgMDtPcz0hMX0obCksbC5hc3luY0RlcCl7aWYociYmci5yZWdpc3RlckRlcChsLE0pLCFlLmVsKXtjb25zdCBlPWwuc3ViVHJlZT11cyhLcik7YihudWxsLGUsdCxuKX19ZWxzZSBNKGwsZSx0LG4scixzLGkpfSxBPShlLHQsbik9Pntjb25zdCBvPXQuY29tcG9uZW50PWUuY29tcG9uZW50O2lmKGZ1bmN0aW9uKGUsdCxuKXtjb25zdHtwcm9wczpvLGNoaWxkcmVuOnIsY29tcG9uZW50OnN9PWUse3Byb3BzOmksY2hpbGRyZW46bCxwYXRjaEZsYWc6Y309dCxhPXMuZW1pdHNPcHRpb25zO2lmKHQuZGlyc3x8dC50cmFuc2l0aW9uKXJldHVybiEwO2lmKCEobiYmYz49MCkpcmV0dXJuISghciYmIWx8fGwmJmwuJHN0YWJsZSl8fG8hPT1pJiYobz8haXx8Qm4obyxpLGEpOiEhaSk7aWYoMTAyNCZjKXJldHVybiEwO2lmKDE2JmMpcmV0dXJuIG8/Qm4obyxpLGEpOiEhaTtpZig4JmMpe2NvbnN0IGU9dC5keW5hbWljUHJvcHM7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2NvbnN0IG49ZVt0XTtpZihpW25dIT09b1tuXSYmIU5uKGEsbikpcmV0dXJuITB9fXJldHVybiExfShlLHQsbikpe2lmKG8uYXN5bmNEZXAmJiFvLmFzeW5jUmVzb2x2ZWQpcmV0dXJuIHZvaWQgSShvLHQsbik7by5uZXh0PXQsZnVuY3Rpb24oZSl7Y29uc3QgdD10bi5pbmRleE9mKGUpO3Q+bm4mJnRuLnNwbGljZSh0LDEpfShvLnVwZGF0ZSksby51cGRhdGUoKX1lbHNlIHQuZWw9ZS5lbCxvLnZub2RlPXR9LE09KGUsdCxuLG8scixzLGkpPT57Y29uc3QgbD1lLmVmZmVjdD1uZXcgZ2UoKCgpPT57aWYoZS5pc01vdW50ZWQpe2xldCB0LHtuZXh0Om4sYnU6byx1OmwscGFyZW50OmMsdm5vZGU6YX09ZSxwPW47SXIoZSwhMSksbj8obi5lbD1hLmVsLEkoZSxuLGkpKTpuPWEsbyYmWihvKSwodD1uLnByb3BzJiZuLnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpJiZicyh0LGMsbixhKSxJcihlLCEwKTtjb25zdCBmPU1uKGUpLGQ9ZS5zdWJUcmVlO2Uuc3ViVHJlZT1mLG0oZCxmLHUoZC5lbCksWShkKSxlLHIscyksbi5lbD1mLmVsLG51bGw9PT1wJiZMbihlLGYuZWwpLGwmJlByKGwsciksKHQ9bi5wcm9wcyYmbi5wcm9wcy5vblZub2RlVXBkYXRlZCkmJlByKCgoKT0+YnModCxjLG4sYSkpLHIpfWVsc2V7bGV0IGk7Y29uc3R7ZWw6bCxwcm9wczpjfT10LHtibTphLG06dSxwYXJlbnQ6cH09ZSxmPW1vKHQpO2lmKElyKGUsITEpLGEmJlooYSksIWYmJihpPWMmJmMub25Wbm9kZUJlZm9yZU1vdW50KSYmYnMoaSxwLHQpLElyKGUsITApLGwmJnJlKXtjb25zdCBuPSgpPT57ZS5zdWJUcmVlPU1uKGUpLHJlKGwsZS5zdWJUcmVlLGUscixudWxsKX07Zj90LnR5cGUuX19hc3luY0xvYWRlcigpLnRoZW4oKCgpPT4hZS5pc1VubW91bnRlZCYmbigpKSk6bigpfWVsc2V7Y29uc3QgaT1lLnN1YlRyZWU9TW4oZSk7bShudWxsLGksbixvLGUscixzKSx0LmVsPWkuZWx9aWYodSYmUHIodSxyKSwhZiYmKGk9YyYmYy5vblZub2RlTW91bnRlZCkpe2NvbnN0IGU9dDtQcigoKCk9PmJzKGkscCxlKSkscil9KDI1NiZ0LnNoYXBlRmxhZ3x8cCYmbW8ocC52bm9kZSkmJjI1NiZwLnZub2RlLnNoYXBlRmxhZykmJmUuYSYmUHIoZS5hLHIpLGUuaXNNb3VudGVkPSEwLHQ9bj1vPW51bGx9fSksKCgpPT5obihjKSksZS5zY29wZSksYz1lLnVwZGF0ZT0oKT0+bC5ydW4oKTtjLmlkPWUudWlkLElyKGUsITApLGMoKX0sST0oZSx0LG4pPT57dC5jb21wb25lbnQ9ZTtjb25zdCBvPWUudm5vZGUucHJvcHM7ZS52bm9kZT10LGUubmV4dD1udWxsLGZ1bmN0aW9uKGUsdCxuLG8pe2NvbnN0e3Byb3BzOnIsYXR0cnM6cyx2bm9kZTp7cGF0Y2hGbGFnOml9fT1lLGw9a3QociksW2NdPWUucHJvcHNPcHRpb25zO2xldCBhPSExO2lmKCEob3x8aT4wKXx8MTYmaSl7bGV0IG87ZHIoZSx0LHIscykmJihhPSEwKTtmb3IoY29uc3QgcyBpbiBsKXQmJihOKHQscyl8fChvPUcocykpIT09cyYmTih0LG8pKXx8KGM/IW58fHZvaWQgMD09PW5bc10mJnZvaWQgMD09PW5bb118fChyW3NdPWhyKGMsbCxzLHZvaWQgMCxlLCEwKSk6ZGVsZXRlIHJbc10pO2lmKHMhPT1sKWZvcihjb25zdCBlIGluIHMpdCYmTih0LGUpfHwoZGVsZXRlIHNbZV0sYT0hMCl9ZWxzZSBpZig4Jmkpe2NvbnN0IG49ZS52bm9kZS5keW5hbWljUHJvcHM7Zm9yKGxldCBvPTA7bzxuLmxlbmd0aDtvKyspe2xldCBpPW5bb107aWYoTm4oZS5lbWl0c09wdGlvbnMsaSkpY29udGludWU7Y29uc3QgdT10W2ldO2lmKGMpaWYoTihzLGkpKXUhPT1zW2ldJiYoc1tpXT11LGE9ITApO2Vsc2V7Y29uc3QgdD16KGkpO3JbdF09aHIoYyxsLHQsdSxlLCExKX1lbHNlIHUhPT1zW2ldJiYoc1tpXT11LGE9ITApfX1hJiZUZShlLFwic2V0XCIsXCIkYXR0cnNcIil9KGUsdC5wcm9wcyxvLG4pLCgoZSx0LG4pPT57Y29uc3R7dm5vZGU6byxzbG90czpyfT1lO2xldCBzPSEwLGk9djtpZigzMiZvLnNoYXBlRmxhZyl7Y29uc3QgZT10Ll87ZT9uJiYxPT09ZT9zPSExOih3KHIsdCksbnx8MSE9PWV8fGRlbGV0ZSByLl8pOihzPSF0LiRzdGFibGUsQ3IodCxyKSksaT10fWVsc2UgdCYmKHdyKGUsdCksaT17ZGVmYXVsdDoxfSk7aWYocylmb3IoY29uc3QgbCBpbiByKWJyKGwpfHxsIGluIGl8fGRlbGV0ZSByW2xdfSkoZSx0LmNoaWxkcmVuLG4pLHhlKCkseW4odm9pZCAwLGUudXBkYXRlKSxDZSgpfSxCPShlLHQsbixvLHIscyxpLGwsYz0hMSk9Pntjb25zdCB1PWUmJmUuY2hpbGRyZW4scD1lP2Uuc2hhcGVGbGFnOjAsZj10LmNoaWxkcmVuLHtwYXRjaEZsYWc6ZCxzaGFwZUZsYWc6aH09dDtpZihkPjApe2lmKDEyOCZkKXJldHVybiB2b2lkIGoodSxmLG4sbyxyLHMsaSxsLGMpO2lmKDI1NiZkKXJldHVybiB2b2lkIEwodSxmLG4sbyxyLHMsaSxsLGMpfTgmaD8oMTYmcCYmSih1LHIscyksZiE9PXUmJmEobixmKSk6MTYmcD8xNiZoP2oodSxmLG4sbyxyLHMsaSxsLGMpOkoodSxyLHMsITApOig4JnAmJmEobixcIlwiKSwxNiZoJiZUKGYsbixvLHIscyxpLGwsYykpfSxMPShlLHQsbixvLHIscyxpLGwsYyk9Pntjb25zdCBhPShlPWV8fHkpLmxlbmd0aCx1PSh0PXR8fHkpLmxlbmd0aCxwPU1hdGgubWluKGEsdSk7bGV0IGY7Zm9yKGY9MDtmPHA7ZisrKXtjb25zdCBvPXRbZl09Yz92cyh0W2ZdKTpncyh0W2ZdKTttKGVbZl0sbyxuLG51bGwscixzLGksbCxjKX1hPnU/SihlLHIscywhMCwhMSxwKTpUKHQsbixvLHIscyxpLGwsYyxwKX0saj0oZSx0LG4sbyxyLHMsaSxsLGMpPT57bGV0IGE9MDtjb25zdCB1PXQubGVuZ3RoO2xldCBwPWUubGVuZ3RoLTEsZj11LTE7Zm9yKDthPD1wJiZhPD1mOyl7Y29uc3Qgbz1lW2FdLHU9dFthXT1jP3ZzKHRbYV0pOmdzKHRbYV0pO2lmKCFycyhvLHUpKWJyZWFrO20obyx1LG4sbnVsbCxyLHMsaSxsLGMpLGErK31mb3IoO2E8PXAmJmE8PWY7KXtjb25zdCBvPWVbcF0sYT10W2ZdPWM/dnModFtmXSk6Z3ModFtmXSk7aWYoIXJzKG8sYSkpYnJlYWs7bShvLGEsbixudWxsLHIscyxpLGwsYykscC0tLGYtLX1pZihhPnApe2lmKGE8PWYpe2NvbnN0IGU9ZisxLHA9ZTx1P3RbZV0uZWw6bztmb3IoO2E8PWY7KW0obnVsbCx0W2FdPWM/dnModFthXSk6Z3ModFthXSksbixwLHIscyxpLGwsYyksYSsrfX1lbHNlIGlmKGE+Zilmb3IoO2E8PXA7KUgoZVthXSxyLHMsITApLGErKztlbHNle2NvbnN0IGQ9YSxoPWEsZz1uZXcgTWFwO2ZvcihhPWg7YTw9ZjthKyspe2NvbnN0IGU9dFthXT1jP3ZzKHRbYV0pOmdzKHRbYV0pO251bGwhPWUua2V5JiZnLnNldChlLmtleSxhKX1sZXQgdixfPTA7Y29uc3QgYj1mLWgrMTtsZXQgUz0hMSx4PTA7Y29uc3QgQz1uZXcgQXJyYXkoYik7Zm9yKGE9MDthPGI7YSsrKUNbYV09MDtmb3IoYT1kO2E8PXA7YSsrKXtjb25zdCBvPWVbYV07aWYoXz49Yil7SChvLHIscywhMCk7Y29udGludWV9bGV0IHU7aWYobnVsbCE9by5rZXkpdT1nLmdldChvLmtleSk7ZWxzZSBmb3Iodj1oO3Y8PWY7disrKWlmKDA9PT1DW3YtaF0mJnJzKG8sdFt2XSkpe3U9djticmVha312b2lkIDA9PT11P0gobyxyLHMsITApOihDW3UtaF09YSsxLHU+PXg/eD11OlM9ITAsbShvLHRbdV0sbixudWxsLHIscyxpLGwsYyksXysrKX1jb25zdCB3PVM/ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLnNsaWNlKCksbj1bMF07bGV0IG8scixzLGksbDtjb25zdCBjPWUubGVuZ3RoO2ZvcihvPTA7bzxjO28rKyl7Y29uc3QgYz1lW29dO2lmKDAhPT1jKXtpZihyPW5bbi5sZW5ndGgtMV0sZVtyXTxjKXt0W29dPXIsbi5wdXNoKG8pO2NvbnRpbnVlfWZvcihzPTAsaT1uLmxlbmd0aC0xO3M8aTspbD1zK2k+PjEsZVtuW2xdXTxjP3M9bCsxOmk9bDtjPGVbbltzXV0mJihzPjAmJih0W29dPW5bcy0xXSksbltzXT1vKX19cz1uLmxlbmd0aCxpPW5bcy0xXTtmb3IoO3MtLSA+MDspbltzXT1pLGk9dFtpXTtyZXR1cm4gbn0oQyk6eTtmb3Iodj13Lmxlbmd0aC0xLGE9Yi0xO2E+PTA7YS0tKXtjb25zdCBlPWgrYSxwPXRbZV0sZj1lKzE8dT90W2UrMV0uZWw6bzswPT09Q1thXT9tKG51bGwscCxuLGYscixzLGksbCxjKTpTJiYodjwwfHxhIT09d1t2XT9EKHAsbixmLDIpOnYtLSl9fX0sRD0oZSx0LG8scixzPW51bGwpPT57Y29uc3R7ZWw6aSx0eXBlOmwsdHJhbnNpdGlvbjpjLGNoaWxkcmVuOmEsc2hhcGVGbGFnOnV9PWU7aWYoNiZ1KXJldHVybiB2b2lkIEQoZS5jb21wb25lbnQuc3ViVHJlZSx0LG8scik7aWYoMTI4JnUpcmV0dXJuIHZvaWQgZS5zdXNwZW5zZS5tb3ZlKHQsbyxyKTtpZig2NCZ1KXJldHVybiB2b2lkIGwubW92ZShlLHQsbyx0ZSk7aWYobD09PVdyKXtuKGksdCxvKTtmb3IobGV0IGU9MDtlPGEubGVuZ3RoO2UrKylEKGFbZV0sdCxvLHIpO3JldHVybiB2b2lkIG4oZS5hbmNob3IsdCxvKX1pZihsPT09R3IpcmV0dXJuIHZvaWQoKHtlbDplLGFuY2hvcjp0fSxvLHIpPT57bGV0IHM7Zm9yKDtlJiZlIT09dDspcz1wKGUpLG4oZSxvLHIpLGU9cztuKHQsbyxyKX0pKGUsdCxvKTtpZigyIT09ciYmMSZ1JiZjKWlmKDA9PT1yKWMuYmVmb3JlRW50ZXIoaSksbihpLHQsbyksUHIoKCgpPT5jLmVudGVyKGkpKSxzKTtlbHNle2NvbnN0e2xlYXZlOmUsZGVsYXlMZWF2ZTpyLGFmdGVyTGVhdmU6c309YyxsPSgpPT5uKGksdCxvKSxhPSgpPT57ZShpLCgoKT0+e2woKSxzJiZzKCl9KSl9O3I/cihpLGwsYSk6YSgpfWVsc2UgbihpLHQsbyl9LEg9KGUsdCxuLG89ITEscj0hMSk9Pntjb25zdHt0eXBlOnMscHJvcHM6aSxyZWY6bCxjaGlsZHJlbjpjLGR5bmFtaWNDaGlsZHJlbjphLHNoYXBlRmxhZzp1LHBhdGNoRmxhZzpwLGRpcnM6Zn09ZTtpZihudWxsIT1sJiZFcihsLG51bGwsbixlLCEwKSwyNTYmdSlyZXR1cm4gdm9pZCB0LmN0eC5kZWFjdGl2YXRlKGUpO2NvbnN0IGQ9MSZ1JiZmLGg9IW1vKGUpO2xldCBtO2lmKGgmJihtPWkmJmkub25Wbm9kZUJlZm9yZVVubW91bnQpJiZicyhtLHQsZSksNiZ1KXEoZS5jb21wb25lbnQsbixvKTtlbHNle2lmKDEyOCZ1KXJldHVybiB2b2lkIGUuc3VzcGVuc2UudW5tb3VudChuLG8pO2QmJmpvKGUsbnVsbCx0LFwiYmVmb3JlVW5tb3VudFwiKSw2NCZ1P2UudHlwZS5yZW1vdmUoZSx0LG4scix0ZSxvKTphJiYocyE9PVdyfHxwPjAmJjY0JnApP0ooYSx0LG4sITEsITApOihzPT09V3ImJjM4NCZwfHwhciYmMTYmdSkmJkooYyx0LG4pLG8mJlcoZSl9KGgmJihtPWkmJmkub25Wbm9kZVVubW91bnRlZCl8fGQpJiZQcigoKCk9PnttJiZicyhtLHQsZSksZCYmam8oZSxudWxsLHQsXCJ1bm1vdW50ZWRcIil9KSxuKX0sVz1lPT57Y29uc3R7dHlwZTp0LGVsOm4sYW5jaG9yOnIsdHJhbnNpdGlvbjpzfT1lO2lmKHQ9PT1XcilyZXR1cm4gdm9pZCBLKG4scik7aWYodD09PUdyKXJldHVybiB2b2lkKCh7ZWw6ZSxhbmNob3I6dH0pPT57bGV0IG47Zm9yKDtlJiZlIT09dDspbj1wKGUpLG8oZSksZT1uO28odCl9KShlKTtjb25zdCBpPSgpPT57byhuKSxzJiYhcy5wZXJzaXN0ZWQmJnMuYWZ0ZXJMZWF2ZSYmcy5hZnRlckxlYXZlKCl9O2lmKDEmZS5zaGFwZUZsYWcmJnMmJiFzLnBlcnNpc3RlZCl7Y29uc3R7bGVhdmU6dCxkZWxheUxlYXZlOm99PXMscj0oKT0+dChuLGkpO28/byhlLmVsLGkscik6cigpfWVsc2UgaSgpfSxLPShlLHQpPT57bGV0IG47Zm9yKDtlIT09dDspbj1wKGUpLG8oZSksZT1uO28odCl9LHE9KGUsdCxuKT0+e2NvbnN0e2J1bTpvLHNjb3BlOnIsdXBkYXRlOnMsc3ViVHJlZTppLHVtOmx9PWU7byYmWihvKSxyLnN0b3AoKSxzJiYocy5hY3RpdmU9ITEsSChpLGUsdCxuKSksbCYmUHIobCx0KSxQcigoKCk9PntlLmlzVW5tb3VudGVkPSEwfSksdCksdCYmdC5wZW5kaW5nQnJhbmNoJiYhdC5pc1VubW91bnRlZCYmZS5hc3luY0RlcCYmIWUuYXN5bmNSZXNvbHZlZCYmZS5zdXNwZW5zZUlkPT09dC5wZW5kaW5nSWQmJih0LmRlcHMtLSwwPT09dC5kZXBzJiZ0LnJlc29sdmUoKSl9LEo9KGUsdCxuLG89ITEscj0hMSxzPTApPT57Zm9yKGxldCBpPXM7aTxlLmxlbmd0aDtpKyspSChlW2ldLHQsbixvLHIpfSxZPWU9PjYmZS5zaGFwZUZsYWc/WShlLmNvbXBvbmVudC5zdWJUcmVlKToxMjgmZS5zaGFwZUZsYWc/ZS5zdXNwZW5zZS5uZXh0KCk6cChlLmFuY2hvcnx8ZS5lbCksWD0oZSx0LG4pPT57bnVsbD09ZT90Ll92bm9kZSYmSCh0Ll92bm9kZSxudWxsLG51bGwsITApOm0odC5fdm5vZGV8fG51bGwsZSx0LG51bGwsbnVsbCxudWxsLG4pLF9uKCksdC5fdm5vZGU9ZX0sdGU9e3A6bSx1bTpILG06RCxyOlcsbXQ6UCxtYzpULHBjOkIscGJjOiQsbjpZLG86ZX07bGV0IG9lLHJlO3JldHVybiB0JiYoW29lLHJlXT10KHRlKSkse3JlbmRlcjpYLGh5ZHJhdGU6b2UsY3JlYXRlQXBwOk5yKFgsb2UpfX1mdW5jdGlvbiBJcih7ZWZmZWN0OmUsdXBkYXRlOnR9LG4pe2UuYWxsb3dSZWN1cnNlPXQuYWxsb3dSZWN1cnNlPW59ZnVuY3Rpb24gQnIoZSx0LG49ITEpe2NvbnN0IG89ZS5jaGlsZHJlbixyPXQuY2hpbGRyZW47aWYoRShvKSYmRShyKSlmb3IobGV0IHM9MDtzPG8ubGVuZ3RoO3MrKyl7Y29uc3QgZT1vW3NdO2xldCB0PXJbc107MSZ0LnNoYXBlRmxhZyYmIXQuZHluYW1pY0NoaWxkcmVuJiYoKHQucGF0Y2hGbGFnPD0wfHwzMj09PXQucGF0Y2hGbGFnKSYmKHQ9cltzXT12cyhyW3NdKSx0LmVsPWUuZWwpLG58fEJyKGUsdCkpfX1jb25zdCBMcj1lPT5lJiYoZS5kaXNhYmxlZHx8XCJcIj09PWUuZGlzYWJsZWQpLGpyPWU9PlwidW5kZWZpbmVkXCIhPXR5cGVvZiBTVkdFbGVtZW50JiZlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCxVcj0oZSx0KT0+e2NvbnN0IG49ZSYmZS50bztpZihQKG4pKXtpZih0KXtyZXR1cm4gdChuKX1yZXR1cm4gbnVsbH1yZXR1cm4gbn07ZnVuY3Rpb24gRHIoZSx0LG4se286e2luc2VydDpvfSxtOnJ9LHM9Mil7MD09PXMmJm8oZS50YXJnZXRBbmNob3IsdCxuKTtjb25zdHtlbDppLGFuY2hvcjpsLHNoYXBlRmxhZzpjLGNoaWxkcmVuOmEscHJvcHM6dX09ZSxwPTI9PT1zO2lmKHAmJm8oaSx0LG4pLCghcHx8THIodSkpJiYxNiZjKWZvcihsZXQgZj0wO2Y8YS5sZW5ndGg7ZisrKXIoYVtmXSx0LG4sMik7cCYmbyhsLHQsbil9Y29uc3QgSHI9e19faXNUZWxlcG9ydDohMCxwcm9jZXNzKGUsdCxuLG8scixzLGksbCxjLGEpe2NvbnN0e21jOnUscGM6cCxwYmM6ZixvOntpbnNlcnQ6ZCxxdWVyeVNlbGVjdG9yOmgsY3JlYXRlVGV4dDptfX09YSxnPUxyKHQucHJvcHMpO2xldHtzaGFwZUZsYWc6dixjaGlsZHJlbjp5LGR5bmFtaWNDaGlsZHJlbjpffT10O2lmKG51bGw9PWUpe2NvbnN0IGU9dC5lbD1tKFwiXCIpLGE9dC5hbmNob3I9bShcIlwiKTtkKGUsbixvKSxkKGEsbixvKTtjb25zdCBwPXQudGFyZ2V0PVVyKHQucHJvcHMsaCksZj10LnRhcmdldEFuY2hvcj1tKFwiXCIpO3AmJihkKGYscCksaT1pfHxqcihwKSk7Y29uc3QgXz0oZSx0KT0+ezE2JnYmJnUoeSxlLHQscixzLGksbCxjKX07Zz9fKG4sYSk6cCYmXyhwLGYpfWVsc2V7dC5lbD1lLmVsO2NvbnN0IG89dC5hbmNob3I9ZS5hbmNob3IsdT10LnRhcmdldD1lLnRhcmdldCxkPXQudGFyZ2V0QW5jaG9yPWUudGFyZ2V0QW5jaG9yLG09THIoZS5wcm9wcyksdj1tP246dSx5PW0/bzpkO2lmKGk9aXx8anIodSksXz8oZihlLmR5bmFtaWNDaGlsZHJlbixfLHYscixzLGksbCksQnIoZSx0LCEwKSk6Y3x8cChlLHQsdix5LHIscyxpLGwsITEpLGcpbXx8RHIodCxuLG8sYSwxKTtlbHNlIGlmKCh0LnByb3BzJiZ0LnByb3BzLnRvKSE9PShlLnByb3BzJiZlLnByb3BzLnRvKSl7Y29uc3QgZT10LnRhcmdldD1Vcih0LnByb3BzLGgpO2UmJkRyKHQsZSxudWxsLGEsMCl9ZWxzZSBtJiZEcih0LHUsZCxhLDEpfX0scmVtb3ZlKGUsdCxuLG8se3VtOnIsbzp7cmVtb3ZlOnN9fSxpKXtjb25zdHtzaGFwZUZsYWc6bCxjaGlsZHJlbjpjLGFuY2hvcjphLHRhcmdldEFuY2hvcjp1LHRhcmdldDpwLHByb3BzOmZ9PWU7aWYocCYmcyh1KSwoaXx8IUxyKGYpKSYmKHMoYSksMTYmbCkpZm9yKGxldCBkPTA7ZDxjLmxlbmd0aDtkKyspe2NvbnN0IGU9Y1tkXTtyKGUsdCxuLCEwLCEhZS5keW5hbWljQ2hpbGRyZW4pfX0sbW92ZTpEcixoeWRyYXRlOmZ1bmN0aW9uKGUsdCxuLG8scixzLHtvOntuZXh0U2libGluZzppLHBhcmVudE5vZGU6bCxxdWVyeVNlbGVjdG9yOmN9fSxhKXtjb25zdCB1PXQudGFyZ2V0PVVyKHQucHJvcHMsYyk7aWYodSl7Y29uc3QgYz11Ll9scGF8fHUuZmlyc3RDaGlsZDtpZigxNiZ0LnNoYXBlRmxhZylpZihMcih0LnByb3BzKSl0LmFuY2hvcj1hKGkoZSksdCxsKGUpLG4sbyxyLHMpLHQudGFyZ2V0QW5jaG9yPWM7ZWxzZXt0LmFuY2hvcj1pKGUpO2xldCBsPWM7Zm9yKDtsOylpZihsPWkobCksbCYmOD09PWwubm9kZVR5cGUmJlwidGVsZXBvcnQgYW5jaG9yXCI9PT1sLmRhdGEpe3QudGFyZ2V0QW5jaG9yPWwsdS5fbHBhPXQudGFyZ2V0QW5jaG9yJiZpKHQudGFyZ2V0QW5jaG9yKTticmVha31hKGMsdCx1LG4sbyxyLHMpfX1yZXR1cm4gdC5hbmNob3ImJmkodC5hbmNob3IpfX0sV3I9U3ltYm9sKHZvaWQgMCksenI9U3ltYm9sKHZvaWQgMCksS3I9U3ltYm9sKHZvaWQgMCksR3I9U3ltYm9sKHZvaWQgMCkscXI9W107bGV0IEpyPW51bGw7ZnVuY3Rpb24gWXIoZT0hMSl7cXIucHVzaChKcj1lP251bGw6W10pfWZ1bmN0aW9uIFpyKCl7cXIucG9wKCksSnI9cXJbcXIubGVuZ3RoLTFdfHxudWxsfWxldCBRcj0xO2Z1bmN0aW9uIFhyKGUpe1FyKz1lfWZ1bmN0aW9uIGVzKGUpe3JldHVybiBlLmR5bmFtaWNDaGlsZHJlbj1Rcj4wP0pyfHx5Om51bGwsWnIoKSxRcj4wJiZKciYmSnIucHVzaChlKSxlfWZ1bmN0aW9uIHRzKGUsdCxuLG8scixzKXtyZXR1cm4gZXMoYXMoZSx0LG4sbyxyLHMsITApKX1mdW5jdGlvbiBucyhlLHQsbixvLHIpe3JldHVybiBlcyh1cyhlLHQsbixvLHIsITApKX1mdW5jdGlvbiBvcyhlKXtyZXR1cm4hIWUmJiEwPT09ZS5fX3ZfaXNWTm9kZX1mdW5jdGlvbiBycyhlLHQpe3JldHVybiBlLnR5cGU9PT10LnR5cGUmJmUua2V5PT09dC5rZXl9ZnVuY3Rpb24gc3MoZSl7fWNvbnN0IGlzPVwiX192SW50ZXJuYWxcIixscz0oe2tleTplfSk9Pm51bGwhPWU/ZTpudWxsLGNzPSh7cmVmOmUscmVmX2tleTp0LHJlZl9mb3I6bn0pPT5udWxsIT1lP1AoZSl8fFJ0KGUpfHxGKGUpP3tpOkVuLHI6ZSxrOnQsZjohIW59OmU6bnVsbDtmdW5jdGlvbiBhcyhlLHQ9bnVsbCxuPW51bGwsbz0wLHI9bnVsbCxzPShlPT09V3I/MDoxKSxpPSExLGw9ITEpe2NvbnN0IGM9e19fdl9pc1ZOb2RlOiEwLF9fdl9za2lwOiEwLHR5cGU6ZSxwcm9wczp0LGtleTp0JiZscyh0KSxyZWY6dCYmY3ModCksc2NvcGVJZDokbixzbG90U2NvcGVJZHM6bnVsbCxjaGlsZHJlbjpuLGNvbXBvbmVudDpudWxsLHN1c3BlbnNlOm51bGwsc3NDb250ZW50Om51bGwsc3NGYWxsYmFjazpudWxsLGRpcnM6bnVsbCx0cmFuc2l0aW9uOm51bGwsZWw6bnVsbCxhbmNob3I6bnVsbCx0YXJnZXQ6bnVsbCx0YXJnZXRBbmNob3I6bnVsbCxzdGF0aWNDb3VudDowLHNoYXBlRmxhZzpzLHBhdGNoRmxhZzpvLGR5bmFtaWNQcm9wczpyLGR5bmFtaWNDaGlsZHJlbjpudWxsLGFwcENvbnRleHQ6bnVsbH07cmV0dXJuIGw/KHlzKGMsbiksMTI4JnMmJmUubm9ybWFsaXplKGMpKTpuJiYoYy5zaGFwZUZsYWd8PVAobik/ODoxNiksUXI+MCYmIWkmJkpyJiYoYy5wYXRjaEZsYWc+MHx8NiZzKSYmMzIhPT1jLnBhdGNoRmxhZyYmSnIucHVzaChjKSxjfWNvbnN0IHVzPWZ1bmN0aW9uKGUsdD1udWxsLG49bnVsbCxvPTAscz1udWxsLGk9ITEpe2UmJmUhPT1Eb3x8KGU9S3IpO2lmKG9zKGUpKXtjb25zdCBvPWZzKGUsdCwhMCk7cmV0dXJuIG4mJnlzKG8sbiksUXI+MCYmIWkmJkpyJiYoNiZvLnNoYXBlRmxhZz9KcltKci5pbmRleE9mKGUpXT1vOkpyLnB1c2gobykpLG8ucGF0Y2hGbGFnfD0tMixvfWw9ZSxGKGwpJiZcIl9fdmNjT3B0c1wiaW4gbCYmKGU9ZS5fX3ZjY09wdHMpO3ZhciBsO2lmKHQpe3Q9cHModCk7bGV0e2NsYXNzOmUsc3R5bGU6bn09dDtlJiYhUChlKSYmKHQuY2xhc3M9YyhlKSksTShuKSYmKHd0KG4pJiYhRShuKSYmKG49dyh7fSxuKSksdC5zdHlsZT1yKG4pKX1jb25zdCBhPVAoZSk/MTpqbihlKT8xMjg6KGU9PmUuX19pc1RlbGVwb3J0KShlKT82NDpNKGUpPzQ6RihlKT8yOjA7cmV0dXJuIGFzKGUsdCxuLG8scyxhLGksITApfTtmdW5jdGlvbiBwcyhlKXtyZXR1cm4gZT93dChlKXx8aXMgaW4gZT93KHt9LGUpOmU6bnVsbH1mdW5jdGlvbiBmcyhlLHQsbj0hMSl7Y29uc3R7cHJvcHM6byxyZWY6cixwYXRjaEZsYWc6cyxjaGlsZHJlbjppfT1lLGw9dD9fcyhvfHx7fSx0KTpvO3JldHVybntfX3ZfaXNWTm9kZTohMCxfX3Zfc2tpcDohMCx0eXBlOmUudHlwZSxwcm9wczpsLGtleTpsJiZscyhsKSxyZWY6dCYmdC5yZWY/biYmcj9FKHIpP3IuY29uY2F0KGNzKHQpKTpbcixjcyh0KV06Y3ModCk6cixzY29wZUlkOmUuc2NvcGVJZCxzbG90U2NvcGVJZHM6ZS5zbG90U2NvcGVJZHMsY2hpbGRyZW46aSx0YXJnZXQ6ZS50YXJnZXQsdGFyZ2V0QW5jaG9yOmUudGFyZ2V0QW5jaG9yLHN0YXRpY0NvdW50OmUuc3RhdGljQ291bnQsc2hhcGVGbGFnOmUuc2hhcGVGbGFnLHBhdGNoRmxhZzp0JiZlLnR5cGUhPT1Xcj8tMT09PXM/MTY6MTZ8czpzLGR5bmFtaWNQcm9wczplLmR5bmFtaWNQcm9wcyxkeW5hbWljQ2hpbGRyZW46ZS5keW5hbWljQ2hpbGRyZW4sYXBwQ29udGV4dDplLmFwcENvbnRleHQsZGlyczplLmRpcnMsdHJhbnNpdGlvbjplLnRyYW5zaXRpb24sY29tcG9uZW50OmUuY29tcG9uZW50LHN1c3BlbnNlOmUuc3VzcGVuc2Usc3NDb250ZW50OmUuc3NDb250ZW50JiZmcyhlLnNzQ29udGVudCksc3NGYWxsYmFjazplLnNzRmFsbGJhY2smJmZzKGUuc3NGYWxsYmFjayksZWw6ZS5lbCxhbmNob3I6ZS5hbmNob3J9fWZ1bmN0aW9uIGRzKGU9XCIgXCIsdD0wKXtyZXR1cm4gdXMoenIsbnVsbCxlLHQpfWZ1bmN0aW9uIGhzKGUsdCl7Y29uc3Qgbj11cyhHcixudWxsLGUpO3JldHVybiBuLnN0YXRpY0NvdW50PXQsbn1mdW5jdGlvbiBtcyhlPVwiXCIsdD0hMSl7cmV0dXJuIHQ/KFlyKCksbnMoS3IsbnVsbCxlKSk6dXMoS3IsbnVsbCxlKX1mdW5jdGlvbiBncyhlKXtyZXR1cm4gbnVsbD09ZXx8XCJib29sZWFuXCI9PXR5cGVvZiBlP3VzKEtyKTpFKGUpP3VzKFdyLG51bGwsZS5zbGljZSgpKTpcIm9iamVjdFwiPT10eXBlb2YgZT92cyhlKTp1cyh6cixudWxsLFN0cmluZyhlKSl9ZnVuY3Rpb24gdnMoZSl7cmV0dXJuIG51bGw9PT1lLmVsfHxlLm1lbW8/ZTpmcyhlKX1mdW5jdGlvbiB5cyhlLHQpe2xldCBuPTA7Y29uc3R7c2hhcGVGbGFnOm99PWU7aWYobnVsbD09dCl0PW51bGw7ZWxzZSBpZihFKHQpKW49MTY7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgdCl7aWYoNjUmbyl7Y29uc3Qgbj10LmRlZmF1bHQ7cmV0dXJuIHZvaWQobiYmKG4uX2MmJihuLl9kPSExKSx5cyhlLG4oKSksbi5fYyYmKG4uX2Q9ITApKSl9e249MzI7Y29uc3Qgbz10Ll87b3x8aXMgaW4gdD8zPT09byYmRW4mJigxPT09RW4uc2xvdHMuXz90Ll89MToodC5fPTIsZS5wYXRjaEZsYWd8PTEwMjQpKTp0Ll9jdHg9RW59fWVsc2UgRih0KT8odD17ZGVmYXVsdDp0LF9jdHg6RW59LG49MzIpOih0PVN0cmluZyh0KSw2NCZvPyhuPTE2LHQ9W2RzKHQpXSk6bj04KTtlLmNoaWxkcmVuPXQsZS5zaGFwZUZsYWd8PW59ZnVuY3Rpb24gX3MoLi4uZSl7Y29uc3QgdD17fTtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1lW25dO2Zvcihjb25zdCBlIGluIG8paWYoXCJjbGFzc1wiPT09ZSl0LmNsYXNzIT09by5jbGFzcyYmKHQuY2xhc3M9YyhbdC5jbGFzcyxvLmNsYXNzXSkpO2Vsc2UgaWYoXCJzdHlsZVwiPT09ZSl0LnN0eWxlPXIoW3Quc3R5bGUsby5zdHlsZV0pO2Vsc2UgaWYoeChlKSl7Y29uc3Qgbj10W2VdLHI9b1tlXTshcnx8bj09PXJ8fEUobikmJm4uaW5jbHVkZXMocil8fCh0W2VdPW4/W10uY29uY2F0KG4scik6cil9ZWxzZVwiXCIhPT1lJiYodFtlXT1vW2VdKX1yZXR1cm4gdH1mdW5jdGlvbiBicyhlLHQsbixvPW51bGwpe1p0KGUsdCw3LFtuLG9dKX1jb25zdCBTcz1rcigpO2xldCB4cz0wO2xldCBDcz1udWxsO2NvbnN0IHdzPSgpPT5Dc3x8RW4sa3M9ZT0+e0NzPWUsZS5zY29wZS5vbigpfSxUcz0oKT0+e0NzJiZDcy5zY29wZS5vZmYoKSxDcz1udWxsfTtmdW5jdGlvbiBOcyhlKXtyZXR1cm4gNCZlLnZub2RlLnNoYXBlRmxhZ31sZXQgRXMsJHMsT3M9ITE7ZnVuY3Rpb24gUnMoZSx0LG4pe0YodCk/ZS5yZW5kZXI9dDpNKHQpJiYoZS5zZXR1cFN0YXRlPUx0KHQpKSxBcyhlLG4pfWZ1bmN0aW9uIEZzKGUpe0VzPWUsJHM9ZT0+e2UucmVuZGVyLl9yYyYmKGUud2l0aFByb3h5PW5ldyBQcm94eShlLmN0eCx0cikpfX1jb25zdCBQcz0oKT0+IUVzO2Z1bmN0aW9uIEFzKGUsdCxuKXtjb25zdCBvPWUudHlwZTtpZighZS5yZW5kZXIpe2lmKCF0JiZFcyYmIW8ucmVuZGVyKXtjb25zdCB0PW8udGVtcGxhdGU7aWYodCl7Y29uc3R7aXNDdXN0b21FbGVtZW50Om4sY29tcGlsZXJPcHRpb25zOnJ9PWUuYXBwQ29udGV4dC5jb25maWcse2RlbGltaXRlcnM6cyxjb21waWxlck9wdGlvbnM6aX09byxsPXcodyh7aXNDdXN0b21FbGVtZW50Om4sZGVsaW1pdGVyczpzfSxyKSxpKTtvLnJlbmRlcj1Fcyh0LGwpfX1lLnJlbmRlcj1vLnJlbmRlcnx8XywkcyYmJHMoZSl9a3MoZSkseGUoKSxvcihlKSxDZSgpLFRzKCl9ZnVuY3Rpb24gTXMoZSl7Y29uc3QgdD10PT57ZS5leHBvc2VkPXR8fHt9fTtsZXQgbjtyZXR1cm57Z2V0IGF0dHJzKCl7cmV0dXJuIG58fChuPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJveHkoZS5hdHRycyx7Z2V0Oih0LG4pPT4od2UoZSwwLFwiJGF0dHJzXCIpLHRbbl0pfSl9KGUpKX0sc2xvdHM6ZS5zbG90cyxlbWl0OmUuZW1pdCxleHBvc2U6dH19ZnVuY3Rpb24gVnMoZSl7aWYoZS5leHBvc2VkKXJldHVybiBlLmV4cG9zZVByb3h5fHwoZS5leHBvc2VQcm94eT1uZXcgUHJveHkoTHQoVHQoZS5leHBvc2VkKSkse2dldDoodCxuKT0+biBpbiB0P3Rbbl06biBpbiBYbz9Yb1tuXShlKTp2b2lkIDB9KSl9Y29uc3QgSXM9Lyg/Ol58Wy1fXSkoXFx3KS9nO2Z1bmN0aW9uIEJzKGUsdD0hMCl7cmV0dXJuIEYoZSk/ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lOmUubmFtZXx8dCYmZS5fX25hbWV9ZnVuY3Rpb24gTHMoZSx0LG49ITEpe2xldCBvPUJzKHQpO2lmKCFvJiZ0Ll9fZmlsZSl7Y29uc3QgZT10Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO2UmJihvPWVbMV0pfWlmKCFvJiZlJiZlLnBhcmVudCl7Y29uc3Qgbj1lPT57Zm9yKGNvbnN0IG4gaW4gZSlpZihlW25dPT09dClyZXR1cm4gbn07bz1uKGUuY29tcG9uZW50c3x8ZS5wYXJlbnQudHlwZS5jb21wb25lbnRzKXx8bihlLmFwcENvbnRleHQuY29tcG9uZW50cyl9cmV0dXJuIG8/by5yZXBsYWNlKElzLChlPT5lLnRvVXBwZXJDYXNlKCkpKS5yZXBsYWNlKC9bLV9dL2csXCJcIik6bj9cIkFwcFwiOlwiQW5vbnltb3VzXCJ9Y29uc3QganM9KGUsdCk9PmZ1bmN0aW9uKGUsdCxuPSExKXtsZXQgbyxyO2NvbnN0IHM9RihlKTtyZXR1cm4gcz8obz1lLHI9Xyk6KG89ZS5nZXQscj1lLnNldCksbmV3IHp0KG8scixzfHwhcixuKX0oZSwwLE9zKTtmdW5jdGlvbiBVcygpe3JldHVybiBudWxsfWZ1bmN0aW9uIERzKCl7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSHMoZSl7fWZ1bmN0aW9uIFdzKGUsdCl7cmV0dXJuIG51bGx9ZnVuY3Rpb24genMoKXtyZXR1cm4gR3MoKS5zbG90c31mdW5jdGlvbiBLcygpe3JldHVybiBHcygpLmF0dHJzfWZ1bmN0aW9uIEdzKCl7Y29uc3QgZT13cygpO3JldHVybiBlLnNldHVwQ29udGV4dHx8KGUuc2V0dXBDb250ZXh0PU1zKGUpKX1mdW5jdGlvbiBxcyhlLHQpe2NvbnN0IG49RShlKT9lLnJlZHVjZSgoKGUsdCk9PihlW3RdPXt9LGUpKSx7fSk6ZTtmb3IoY29uc3QgbyBpbiB0KXtjb25zdCBlPW5bb107ZT9FKGUpfHxGKGUpP25bb109e3R5cGU6ZSxkZWZhdWx0OnRbb119OmUuZGVmYXVsdD10W29dOm51bGw9PT1lJiYobltvXT17ZGVmYXVsdDp0W29dfSl9cmV0dXJuIG59ZnVuY3Rpb24gSnMoZSx0KXtjb25zdCBuPXt9O2Zvcihjb25zdCBvIGluIGUpdC5pbmNsdWRlcyhvKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sbyx7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PmVbb119KTtyZXR1cm4gbn1mdW5jdGlvbiBZcyhlKXtjb25zdCB0PXdzKCk7bGV0IG49ZSgpO3JldHVybiBUcygpLFYobikmJihuPW4uY2F0Y2goKGU9Pnt0aHJvdyBrcyh0KSxlfSkpKSxbbiwoKT0+a3ModCldfWZ1bmN0aW9uIFpzKGUsdCxuKXtjb25zdCBvPWFyZ3VtZW50cy5sZW5ndGg7cmV0dXJuIDI9PT1vP00odCkmJiFFKHQpP29zKHQpP3VzKGUsbnVsbCxbdF0pOnVzKGUsdCk6dXMoZSxudWxsLHQpOihvPjM/bj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMik6Mz09PW8mJm9zKG4pJiYobj1bbl0pLHVzKGUsdCxuKSl9Y29uc3QgUXM9U3ltYm9sKFwiXCIpLFhzPSgpPT57e2NvbnN0IGU9cW4oUXMpO3JldHVybiBlfHxHdChcIlNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgdXNlU1NSQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5cIiksZX19O2Z1bmN0aW9uIGVpKCl7fWZ1bmN0aW9uIHRpKGUsdCxuLG8pe2NvbnN0IHI9bltvXTtpZihyJiZuaShyLGUpKXJldHVybiByO2NvbnN0IHM9dCgpO3JldHVybiBzLm1lbW89ZS5zbGljZSgpLG5bb109c31mdW5jdGlvbiBuaShlLHQpe2NvbnN0IG49ZS5tZW1vO2lmKG4ubGVuZ3RoIT10Lmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IG89MDtvPG4ubGVuZ3RoO28rKylpZihZKG5bb10sdFtvXSkpcmV0dXJuITE7cmV0dXJuIFFyPjAmJkpyJiZKci5wdXNoKGUpLCEwfWNvbnN0IG9pPVwiMy4yLjM3XCIscmk9bnVsbCxzaT1udWxsLGlpPW51bGwsbGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50Om51bGwsY2k9bGkmJmxpLmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKSxhaT17aW5zZXJ0OihlLHQsbik9Pnt0Lmluc2VydEJlZm9yZShlLG58fG51bGwpfSxyZW1vdmU6ZT0+e2NvbnN0IHQ9ZS5wYXJlbnROb2RlO3QmJnQucmVtb3ZlQ2hpbGQoZSl9LGNyZWF0ZUVsZW1lbnQ6KGUsdCxuLG8pPT57Y29uc3Qgcj10P2xpLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsZSk6bGkuY3JlYXRlRWxlbWVudChlLG4/e2lzOm59OnZvaWQgMCk7cmV0dXJuXCJzZWxlY3RcIj09PWUmJm8mJm51bGwhPW8ubXVsdGlwbGUmJnIuc2V0QXR0cmlidXRlKFwibXVsdGlwbGVcIixvLm11bHRpcGxlKSxyfSxjcmVhdGVUZXh0OmU9PmxpLmNyZWF0ZVRleHROb2RlKGUpLGNyZWF0ZUNvbW1lbnQ6ZT0+bGkuY3JlYXRlQ29tbWVudChlKSxzZXRUZXh0OihlLHQpPT57ZS5ub2RlVmFsdWU9dH0sc2V0RWxlbWVudFRleHQ6KGUsdCk9PntlLnRleHRDb250ZW50PXR9LHBhcmVudE5vZGU6ZT0+ZS5wYXJlbnROb2RlLG5leHRTaWJsaW5nOmU9PmUubmV4dFNpYmxpbmcscXVlcnlTZWxlY3RvcjplPT5saS5xdWVyeVNlbGVjdG9yKGUpLHNldFNjb3BlSWQoZSx0KXtlLnNldEF0dHJpYnV0ZSh0LFwiXCIpfSxjbG9uZU5vZGUoZSl7Y29uc3QgdD1lLmNsb25lTm9kZSghMCk7cmV0dXJuXCJfdmFsdWVcImluIGUmJih0Ll92YWx1ZT1lLl92YWx1ZSksdH0saW5zZXJ0U3RhdGljQ29udGVudChlLHQsbixvLHIscyl7Y29uc3QgaT1uP24ucHJldmlvdXNTaWJsaW5nOnQubGFzdENoaWxkO2lmKHImJihyPT09c3x8ci5uZXh0U2libGluZykpZm9yKDt0Lmluc2VydEJlZm9yZShyLmNsb25lTm9kZSghMCksbiksciE9PXMmJihyPXIubmV4dFNpYmxpbmcpOyk7ZWxzZXtjaS5pbm5lckhUTUw9bz9gPHN2Zz4ke2V9PC9zdmc+YDplO2NvbnN0IHI9Y2kuY29udGVudDtpZihvKXtjb25zdCBlPXIuZmlyc3RDaGlsZDtmb3IoO2UuZmlyc3RDaGlsZDspci5hcHBlbmRDaGlsZChlLmZpcnN0Q2hpbGQpO3IucmVtb3ZlQ2hpbGQoZSl9dC5pbnNlcnRCZWZvcmUocixuKX1yZXR1cm5baT9pLm5leHRTaWJsaW5nOnQuZmlyc3RDaGlsZCxuP24ucHJldmlvdXNTaWJsaW5nOnQubGFzdENoaWxkXX19O2NvbnN0IHVpPS9cXHMqIWltcG9ydGFudCQvO2Z1bmN0aW9uIHBpKGUsdCxuKXtpZihFKG4pKW4uZm9yRWFjaCgobj0+cGkoZSx0LG4pKSk7ZWxzZSBpZihudWxsPT1uJiYobj1cIlwiKSx0LnN0YXJ0c1dpdGgoXCItLVwiKSllLnNldFByb3BlcnR5KHQsbik7ZWxzZXtjb25zdCBvPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1kaVt0XTtpZihuKXJldHVybiBuO2xldCBvPXoodCk7aWYoXCJmaWx0ZXJcIiE9PW8mJm8gaW4gZSlyZXR1cm4gZGlbdF09bztvPXEobyk7Zm9yKGxldCByPTA7cjxmaS5sZW5ndGg7cisrKXtjb25zdCBuPWZpW3JdK287aWYobiBpbiBlKXJldHVybiBkaVt0XT1ufXJldHVybiB0fShlLHQpO3VpLnRlc3Qobik/ZS5zZXRQcm9wZXJ0eShHKG8pLG4ucmVwbGFjZSh1aSxcIlwiKSxcImltcG9ydGFudFwiKTplW29dPW59fWNvbnN0IGZpPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSxkaT17fTtjb25zdCBoaT1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIjtjb25zdFttaSxnaV09KCgpPT57bGV0IGU9RGF0ZS5ub3csdD0hMTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXtEYXRlLm5vdygpPmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikudGltZVN0YW1wJiYoZT1wZXJmb3JtYW5jZS5ub3cuYmluZChwZXJmb3JtYW5jZSkpO2NvbnN0IG49bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS9pKTt0PSEhKG4mJk51bWJlcihuWzFdKTw9NTMpfXJldHVybltlLHRdfSkoKTtsZXQgdmk9MDtjb25zdCB5aT1Qcm9taXNlLnJlc29sdmUoKSxfaT0oKT0+e3ZpPTB9O2Z1bmN0aW9uIGJpKGUsdCxuLG8pe2UuYWRkRXZlbnRMaXN0ZW5lcih0LG4sbyl9ZnVuY3Rpb24gU2koZSx0LG4sbyxyPW51bGwpe2NvbnN0IHM9ZS5fdmVpfHwoZS5fdmVpPXt9KSxpPXNbdF07aWYobyYmaSlpLnZhbHVlPW87ZWxzZXtjb25zdFtuLGxdPWZ1bmN0aW9uKGUpe2xldCB0O2lmKHhpLnRlc3QoZSkpe2xldCBuO2Zvcih0PXt9O249ZS5tYXRjaCh4aSk7KWU9ZS5zbGljZSgwLGUubGVuZ3RoLW5bMF0ubGVuZ3RoKSx0W25bMF0udG9Mb3dlckNhc2UoKV09ITB9cmV0dXJuW0coZS5zbGljZSgyKSksdF19KHQpO2lmKG8pe2NvbnN0IGk9c1t0XT1mdW5jdGlvbihlLHQpe2NvbnN0IG49ZT0+e2NvbnN0IG89ZS50aW1lU3RhbXB8fG1pKCk7KGdpfHxvPj1uLmF0dGFjaGVkLTEpJiZadChmdW5jdGlvbihlLHQpe2lmKEUodCkpe2NvbnN0IG49ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247cmV0dXJuIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uPSgpPT57bi5jYWxsKGUpLGUuX3N0b3BwZWQ9ITB9LHQubWFwKChlPT50PT4hdC5fc3RvcHBlZCYmZSYmZSh0KSkpfXJldHVybiB0fShlLG4udmFsdWUpLHQsNSxbZV0pfTtyZXR1cm4gbi52YWx1ZT1lLG4uYXR0YWNoZWQ9KCgpPT52aXx8KHlpLnRoZW4oX2kpLHZpPW1pKCkpKSgpLG59KG8scik7YmkoZSxuLGksbCl9ZWxzZSBpJiYoIWZ1bmN0aW9uKGUsdCxuLG8pe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4sbyl9KGUsbixpLGwpLHNbdF09dm9pZCAwKX19Y29uc3QgeGk9Lyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO2NvbnN0IENpPS9eb25bYS16XS87ZnVuY3Rpb24gd2koZSx0KXtjb25zdCBuPWhvKGUpO2NsYXNzIG8gZXh0ZW5kcyBOaXtjb25zdHJ1Y3RvcihlKXtzdXBlcihuLGUsdCl9fXJldHVybiBvLmRlZj1uLG99Y29uc3Qga2k9ZT0+d2koZSxUbCksVGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxFbGVtZW50P0hUTUxFbGVtZW50OmNsYXNze307Y2xhc3MgTmkgZXh0ZW5kcyBUaXtjb25zdHJ1Y3RvcihlLHQ9e30sbil7c3VwZXIoKSx0aGlzLl9kZWY9ZSx0aGlzLl9wcm9wcz10LHRoaXMuX2luc3RhbmNlPW51bGwsdGhpcy5fY29ubmVjdGVkPSExLHRoaXMuX3Jlc29sdmVkPSExLHRoaXMuX251bWJlclByb3BzPW51bGwsdGhpcy5zaGFkb3dSb290JiZuP24odGhpcy5fY3JlYXRlVk5vZGUoKSx0aGlzLnNoYWRvd1Jvb3QpOnRoaXMuYXR0YWNoU2hhZG93KHttb2RlOlwib3BlblwifSl9Y29ubmVjdGVkQ2FsbGJhY2soKXt0aGlzLl9jb25uZWN0ZWQ9ITAsdGhpcy5faW5zdGFuY2V8fHRoaXMuX3Jlc29sdmVEZWYoKX1kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3RoaXMuX2Nvbm5lY3RlZD0hMSxkbigoKCk9Pnt0aGlzLl9jb25uZWN0ZWR8fChrbChudWxsLHRoaXMuc2hhZG93Um9vdCksdGhpcy5faW5zdGFuY2U9bnVsbCl9KSl9X3Jlc29sdmVEZWYoKXtpZih0aGlzLl9yZXNvbHZlZClyZXR1cm47dGhpcy5fcmVzb2x2ZWQ9ITA7Zm9yKGxldCBuPTA7bjx0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoO24rKyl0aGlzLl9zZXRBdHRyKHRoaXMuYXR0cmlidXRlc1tuXS5uYW1lKTtuZXcgTXV0YXRpb25PYnNlcnZlcigoZT0+e2Zvcihjb25zdCB0IG9mIGUpdGhpcy5fc2V0QXR0cih0LmF0dHJpYnV0ZU5hbWUpfSkpLm9ic2VydmUodGhpcyx7YXR0cmlidXRlczohMH0pO2NvbnN0IGU9ZT0+e2NvbnN0e3Byb3BzOnQsc3R5bGVzOm59PWUsbz0hRSh0KSxyPXQ/bz9PYmplY3Qua2V5cyh0KTp0OltdO2xldCBzO2lmKG8pZm9yKGNvbnN0IGkgaW4gdGhpcy5fcHJvcHMpe2NvbnN0IGU9dFtpXTsoZT09PU51bWJlcnx8ZSYmZS50eXBlPT09TnVtYmVyKSYmKHRoaXMuX3Byb3BzW2ldPVgodGhpcy5fcHJvcHNbaV0pLChzfHwocz1PYmplY3QuY3JlYXRlKG51bGwpKSlbaV09ITApfXRoaXMuX251bWJlclByb3BzPXM7Zm9yKGNvbnN0IGkgb2YgT2JqZWN0LmtleXModGhpcykpXCJfXCIhPT1pWzBdJiZ0aGlzLl9zZXRQcm9wKGksdGhpc1tpXSwhMCwhMSk7Zm9yKGNvbnN0IGkgb2Ygci5tYXAoeikpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsaSx7Z2V0KCl7cmV0dXJuIHRoaXMuX2dldFByb3AoaSl9LHNldChlKXt0aGlzLl9zZXRQcm9wKGksZSl9fSk7dGhpcy5fYXBwbHlTdHlsZXMobiksdGhpcy5fdXBkYXRlKCl9LHQ9dGhpcy5fZGVmLl9fYXN5bmNMb2FkZXI7dD90KCkudGhlbihlKTplKHRoaXMuX2RlZil9X3NldEF0dHIoZSl7bGV0IHQ9dGhpcy5nZXRBdHRyaWJ1dGUoZSk7dGhpcy5fbnVtYmVyUHJvcHMmJnRoaXMuX251bWJlclByb3BzW2VdJiYodD1YKHQpKSx0aGlzLl9zZXRQcm9wKHooZSksdCwhMSl9X2dldFByb3AoZSl7cmV0dXJuIHRoaXMuX3Byb3BzW2VdfV9zZXRQcm9wKGUsdCxuPSEwLG89ITApe3QhPT10aGlzLl9wcm9wc1tlXSYmKHRoaXMuX3Byb3BzW2VdPXQsbyYmdGhpcy5faW5zdGFuY2UmJnRoaXMuX3VwZGF0ZSgpLG4mJighMD09PXQ/dGhpcy5zZXRBdHRyaWJ1dGUoRyhlKSxcIlwiKTpcInN0cmluZ1wiPT10eXBlb2YgdHx8XCJudW1iZXJcIj09dHlwZW9mIHQ/dGhpcy5zZXRBdHRyaWJ1dGUoRyhlKSx0K1wiXCIpOnR8fHRoaXMucmVtb3ZlQXR0cmlidXRlKEcoZSkpKSl9X3VwZGF0ZSgpe2tsKHRoaXMuX2NyZWF0ZVZOb2RlKCksdGhpcy5zaGFkb3dSb290KX1fY3JlYXRlVk5vZGUoKXtjb25zdCBlPXVzKHRoaXMuX2RlZix3KHt9LHRoaXMuX3Byb3BzKSk7cmV0dXJuIHRoaXMuX2luc3RhbmNlfHwoZS5jZT1lPT57dGhpcy5faW5zdGFuY2U9ZSxlLmlzQ0U9ITAsZS5lbWl0PShlLC4uLnQpPT57dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChlLHtkZXRhaWw6dH0pKX07bGV0IHQ9dGhpcztmb3IoO3Q9dCYmKHQucGFyZW50Tm9kZXx8dC5ob3N0KTspaWYodCBpbnN0YW5jZW9mIE5pKXtlLnBhcmVudD10Ll9pbnN0YW5jZTticmVha319KSxlfV9hcHBseVN0eWxlcyhlKXtlJiZlLmZvckVhY2goKGU9Pntjb25zdCB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTt0LnRleHRDb250ZW50PWUsdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHQpfSkpfX1mdW5jdGlvbiBFaShlPVwiJHN0eWxlXCIpe3tjb25zdCB0PXdzKCk7aWYoIXQpcmV0dXJuIHY7Y29uc3Qgbj10LnR5cGUuX19jc3NNb2R1bGVzO2lmKCFuKXJldHVybiB2O2NvbnN0IG89bltlXTtyZXR1cm4gb3x8dn19ZnVuY3Rpb24gJGkoZSl7Y29uc3QgdD13cygpO2lmKCF0KXJldHVybjtjb25zdCBuPSgpPT5PaSh0LnN1YlRyZWUsZSh0LnByb3h5KSk7WW4obiksT28oKCgpPT57Y29uc3QgZT1uZXcgTXV0YXRpb25PYnNlcnZlcihuKTtlLm9ic2VydmUodC5zdWJUcmVlLmVsLnBhcmVudE5vZGUse2NoaWxkTGlzdDohMH0pLEFvKCgoKT0+ZS5kaXNjb25uZWN0KCkpKX0pKX1mdW5jdGlvbiBPaShlLHQpe2lmKDEyOCZlLnNoYXBlRmxhZyl7Y29uc3Qgbj1lLnN1c3BlbnNlO2U9bi5hY3RpdmVCcmFuY2gsbi5wZW5kaW5nQnJhbmNoJiYhbi5pc0h5ZHJhdGluZyYmbi5lZmZlY3RzLnB1c2goKCgpPT57T2kobi5hY3RpdmVCcmFuY2gsdCl9KSl9Zm9yKDtlLmNvbXBvbmVudDspZT1lLmNvbXBvbmVudC5zdWJUcmVlO2lmKDEmZS5zaGFwZUZsYWcmJmUuZWwpUmkoZS5lbCx0KTtlbHNlIGlmKGUudHlwZT09PVdyKWUuY2hpbGRyZW4uZm9yRWFjaCgoZT0+T2koZSx0KSkpO2Vsc2UgaWYoZS50eXBlPT09R3Ipe2xldHtlbDpuLGFuY2hvcjpvfT1lO2Zvcig7biYmKFJpKG4sdCksbiE9PW8pOyluPW4ubmV4dFNpYmxpbmd9fWZ1bmN0aW9uIFJpKGUsdCl7aWYoMT09PWUubm9kZVR5cGUpe2NvbnN0IG49ZS5zdHlsZTtmb3IoY29uc3QgZSBpbiB0KW4uc2V0UHJvcGVydHkoYC0tJHtlfWAsdFtlXSl9fWNvbnN0IEZpPShlLHtzbG90czp0fSk9PlpzKGlvLElpKGUpLHQpO0ZpLmRpc3BsYXlOYW1lPVwiVHJhbnNpdGlvblwiO2NvbnN0IFBpPXtuYW1lOlN0cmluZyx0eXBlOlN0cmluZyxjc3M6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxkdXJhdGlvbjpbU3RyaW5nLE51bWJlcixPYmplY3RdLGVudGVyRnJvbUNsYXNzOlN0cmluZyxlbnRlckFjdGl2ZUNsYXNzOlN0cmluZyxlbnRlclRvQ2xhc3M6U3RyaW5nLGFwcGVhckZyb21DbGFzczpTdHJpbmcsYXBwZWFyQWN0aXZlQ2xhc3M6U3RyaW5nLGFwcGVhclRvQ2xhc3M6U3RyaW5nLGxlYXZlRnJvbUNsYXNzOlN0cmluZyxsZWF2ZUFjdGl2ZUNsYXNzOlN0cmluZyxsZWF2ZVRvQ2xhc3M6U3RyaW5nfSxBaT1GaS5wcm9wcz13KHt9LGlvLnByb3BzLFBpKSxNaT0oZSx0PVtdKT0+e0UoZSk/ZS5mb3JFYWNoKChlPT5lKC4uLnQpKSk6ZSYmZSguLi50KX0sVmk9ZT0+ISFlJiYoRShlKT9lLnNvbWUoKGU9PmUubGVuZ3RoPjEpKTplLmxlbmd0aD4xKTtmdW5jdGlvbiBJaShlKXtjb25zdCB0PXt9O2Zvcihjb25zdCB3IGluIGUpdyBpbiBQaXx8KHRbd109ZVt3XSk7aWYoITE9PT1lLmNzcylyZXR1cm4gdDtjb25zdHtuYW1lOm49XCJ2XCIsdHlwZTpvLGR1cmF0aW9uOnIsZW50ZXJGcm9tQ2xhc3M6cz1gJHtufS1lbnRlci1mcm9tYCxlbnRlckFjdGl2ZUNsYXNzOmk9YCR7bn0tZW50ZXItYWN0aXZlYCxlbnRlclRvQ2xhc3M6bD1gJHtufS1lbnRlci10b2AsYXBwZWFyRnJvbUNsYXNzOmM9cyxhcHBlYXJBY3RpdmVDbGFzczphPWksYXBwZWFyVG9DbGFzczp1PWwsbGVhdmVGcm9tQ2xhc3M6cD1gJHtufS1sZWF2ZS1mcm9tYCxsZWF2ZUFjdGl2ZUNsYXNzOmY9YCR7bn0tbGVhdmUtYWN0aXZlYCxsZWF2ZVRvQ2xhc3M6ZD1gJHtufS1sZWF2ZS10b2B9PWUsaD1mdW5jdGlvbihlKXtpZihudWxsPT1lKXJldHVybiBudWxsO2lmKE0oZSkpcmV0dXJuW0JpKGUuZW50ZXIpLEJpKGUubGVhdmUpXTt7Y29uc3QgdD1CaShlKTtyZXR1cm5bdCx0XX19KHIpLG09aCYmaFswXSxnPWgmJmhbMV0se29uQmVmb3JlRW50ZXI6dixvbkVudGVyOnksb25FbnRlckNhbmNlbGxlZDpfLG9uTGVhdmU6YixvbkxlYXZlQ2FuY2VsbGVkOlMsb25CZWZvcmVBcHBlYXI6eD12LG9uQXBwZWFyOkM9eSxvbkFwcGVhckNhbmNlbGxlZDprPV99PXQsVD0oZSx0LG4pPT57amkoZSx0P3U6bCksamkoZSx0P2E6aSksbiYmbigpfSxOPShlLHQpPT57ZS5faXNMZWF2aW5nPSExLGppKGUscCksamkoZSxkKSxqaShlLGYpLHQmJnQoKX0sRT1lPT4odCxuKT0+e2NvbnN0IHI9ZT9DOnksaT0oKT0+VCh0LGUsbik7TWkocixbdCxpXSksVWkoKCgpPT57amkodCxlP2M6cyksTGkodCxlP3U6bCksVmkocil8fEhpKHQsbyxtLGkpfSkpfTtyZXR1cm4gdyh0LHtvbkJlZm9yZUVudGVyKGUpe01pKHYsW2VdKSxMaShlLHMpLExpKGUsaSl9LG9uQmVmb3JlQXBwZWFyKGUpe01pKHgsW2VdKSxMaShlLGMpLExpKGUsYSl9LG9uRW50ZXI6RSghMSksb25BcHBlYXI6RSghMCksb25MZWF2ZShlLHQpe2UuX2lzTGVhdmluZz0hMDtjb25zdCBuPSgpPT5OKGUsdCk7TGkoZSxwKSxHaSgpLExpKGUsZiksVWkoKCgpPT57ZS5faXNMZWF2aW5nJiYoamkoZSxwKSxMaShlLGQpLFZpKGIpfHxIaShlLG8sZyxuKSl9KSksTWkoYixbZSxuXSl9LG9uRW50ZXJDYW5jZWxsZWQoZSl7VChlLCExKSxNaShfLFtlXSl9LG9uQXBwZWFyQ2FuY2VsbGVkKGUpe1QoZSwhMCksTWkoayxbZV0pfSxvbkxlYXZlQ2FuY2VsbGVkKGUpe04oZSksTWkoUyxbZV0pfX0pfWZ1bmN0aW9uIEJpKGUpe3JldHVybiBYKGUpfWZ1bmN0aW9uIExpKGUsdCl7dC5zcGxpdCgvXFxzKy8pLmZvckVhY2goKHQ9PnQmJmUuY2xhc3NMaXN0LmFkZCh0KSkpLChlLl92dGN8fChlLl92dGM9bmV3IFNldCkpLmFkZCh0KX1mdW5jdGlvbiBqaShlLHQpe3Quc3BsaXQoL1xccysvKS5mb3JFYWNoKCh0PT50JiZlLmNsYXNzTGlzdC5yZW1vdmUodCkpKTtjb25zdHtfdnRjOm59PWU7biYmKG4uZGVsZXRlKHQpLG4uc2l6ZXx8KGUuX3Z0Yz12b2lkIDApKX1mdW5jdGlvbiBVaShlKXtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpPT57cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGUpfSkpfWxldCBEaT0wO2Z1bmN0aW9uIEhpKGUsdCxuLG8pe2NvbnN0IHI9ZS5fZW5kSWQ9KytEaSxzPSgpPT57cj09PWUuX2VuZElkJiZvKCl9O2lmKG4pcmV0dXJuIHNldFRpbWVvdXQocyxuKTtjb25zdHt0eXBlOmksdGltZW91dDpsLHByb3BDb3VudDpjfT1XaShlLHQpO2lmKCFpKXJldHVybiBvKCk7Y29uc3QgYT1pK1wiZW5kXCI7bGV0IHU9MDtjb25zdCBwPSgpPT57ZS5yZW1vdmVFdmVudExpc3RlbmVyKGEsZikscygpfSxmPXQ9Pnt0LnRhcmdldD09PWUmJisrdT49YyYmcCgpfTtzZXRUaW1lb3V0KCgoKT0+e3U8YyYmcCgpfSksbCsxKSxlLmFkZEV2ZW50TGlzdGVuZXIoYSxmKX1mdW5jdGlvbiBXaShlLHQpe2NvbnN0IG49d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSksbz1lPT4obltlXXx8XCJcIikuc3BsaXQoXCIsIFwiKSxyPW8oXCJ0cmFuc2l0aW9uRGVsYXlcIikscz1vKFwidHJhbnNpdGlvbkR1cmF0aW9uXCIpLGk9emkocixzKSxsPW8oXCJhbmltYXRpb25EZWxheVwiKSxjPW8oXCJhbmltYXRpb25EdXJhdGlvblwiKSxhPXppKGwsYyk7bGV0IHU9bnVsbCxwPTAsZj0wO1widHJhbnNpdGlvblwiPT09dD9pPjAmJih1PVwidHJhbnNpdGlvblwiLHA9aSxmPXMubGVuZ3RoKTpcImFuaW1hdGlvblwiPT09dD9hPjAmJih1PVwiYW5pbWF0aW9uXCIscD1hLGY9Yy5sZW5ndGgpOihwPU1hdGgubWF4KGksYSksdT1wPjA/aT5hP1widHJhbnNpdGlvblwiOlwiYW5pbWF0aW9uXCI6bnVsbCxmPXU/XCJ0cmFuc2l0aW9uXCI9PT11P3MubGVuZ3RoOmMubGVuZ3RoOjApO3JldHVybnt0eXBlOnUsdGltZW91dDpwLHByb3BDb3VudDpmLGhhc1RyYW5zZm9ybTpcInRyYW5zaXRpb25cIj09PXUmJi9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS8udGVzdChuLnRyYW5zaXRpb25Qcm9wZXJ0eSl9fWZ1bmN0aW9uIHppKGUsdCl7Zm9yKDtlLmxlbmd0aDx0Lmxlbmd0aDspZT1lLmNvbmNhdChlKTtyZXR1cm4gTWF0aC5tYXgoLi4udC5tYXAoKCh0LG4pPT5LaSh0KStLaShlW25dKSkpKX1mdW5jdGlvbiBLaShlKXtyZXR1cm4gMWUzKk51bWJlcihlLnNsaWNlKDAsLTEpLnJlcGxhY2UoXCIsXCIsXCIuXCIpKX1mdW5jdGlvbiBHaSgpe3JldHVybiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodH1jb25zdCBxaT1uZXcgV2Vha01hcCxKaT1uZXcgV2Vha01hcCxZaT17bmFtZTpcIlRyYW5zaXRpb25Hcm91cFwiLHByb3BzOncoe30sQWkse3RhZzpTdHJpbmcsbW92ZUNsYXNzOlN0cmluZ30pLHNldHVwKGUse3Nsb3RzOnR9KXtjb25zdCBuPXdzKCksbz1ybygpO2xldCByLHM7cmV0dXJuIEZvKCgoKT0+e2lmKCFyLmxlbmd0aClyZXR1cm47Y29uc3QgdD1lLm1vdmVDbGFzc3x8YCR7ZS5uYW1lfHxcInZcIn0tbW92ZWA7aWYoIWZ1bmN0aW9uKGUsdCxuKXtjb25zdCBvPWUuY2xvbmVOb2RlKCk7ZS5fdnRjJiZlLl92dGMuZm9yRWFjaCgoZT0+e2Uuc3BsaXQoL1xccysvKS5mb3JFYWNoKChlPT5lJiZvLmNsYXNzTGlzdC5yZW1vdmUoZSkpKX0pKTtuLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoZT0+ZSYmby5jbGFzc0xpc3QuYWRkKGUpKSksby5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2NvbnN0IHI9MT09PXQubm9kZVR5cGU/dDp0LnBhcmVudE5vZGU7ci5hcHBlbmRDaGlsZChvKTtjb25zdHtoYXNUcmFuc2Zvcm06c309V2kobyk7cmV0dXJuIHIucmVtb3ZlQ2hpbGQobyksc30oclswXS5lbCxuLnZub2RlLmVsLHQpKXJldHVybjtyLmZvckVhY2goWmkpLHIuZm9yRWFjaChRaSk7Y29uc3Qgbz1yLmZpbHRlcihYaSk7R2koKSxvLmZvckVhY2goKGU9Pntjb25zdCBuPWUuZWwsbz1uLnN0eWxlO0xpKG4sdCksby50cmFuc2Zvcm09by53ZWJraXRUcmFuc2Zvcm09by50cmFuc2l0aW9uRHVyYXRpb249XCJcIjtjb25zdCByPW4uX21vdmVDYj1lPT57ZSYmZS50YXJnZXQhPT1ufHxlJiYhL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpfHwobi5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLHIpLG4uX21vdmVDYj1udWxsLGppKG4sdCkpfTtuLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIscil9KSl9KSksKCk9Pntjb25zdCBpPWt0KGUpLGw9SWkoaSk7bGV0IGM9aS50YWd8fFdyO3I9cyxzPXQuZGVmYXVsdD9mbyh0LmRlZmF1bHQoKSk6W107Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDtlKyspe2NvbnN0IHQ9c1tlXTtudWxsIT10LmtleSYmcG8odCxjbyh0LGwsbyxuKSl9aWYocilmb3IobGV0IGU9MDtlPHIubGVuZ3RoO2UrKyl7Y29uc3QgdD1yW2VdO3BvKHQsY28odCxsLG8sbikpLHFpLnNldCh0LHQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpfXJldHVybiB1cyhjLG51bGwscyl9fX07ZnVuY3Rpb24gWmkoZSl7Y29uc3QgdD1lLmVsO3QuX21vdmVDYiYmdC5fbW92ZUNiKCksdC5fZW50ZXJDYiYmdC5fZW50ZXJDYigpfWZ1bmN0aW9uIFFpKGUpe0ppLnNldChlLGUuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpfWZ1bmN0aW9uIFhpKGUpe2NvbnN0IHQ9cWkuZ2V0KGUpLG49SmkuZ2V0KGUpLG89dC5sZWZ0LW4ubGVmdCxyPXQudG9wLW4udG9wO2lmKG98fHIpe2NvbnN0IHQ9ZS5lbC5zdHlsZTtyZXR1cm4gdC50cmFuc2Zvcm09dC53ZWJraXRUcmFuc2Zvcm09YHRyYW5zbGF0ZSgke299cHgsJHtyfXB4KWAsdC50cmFuc2l0aW9uRHVyYXRpb249XCIwc1wiLGV9fWNvbnN0IGVsPWU9Pntjb25zdCB0PWUucHJvcHNbXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdfHwhMTtyZXR1cm4gRSh0KT9lPT5aKHQsZSk6dH07ZnVuY3Rpb24gdGwoZSl7ZS50YXJnZXQuY29tcG9zaW5nPSEwfWZ1bmN0aW9uIG5sKGUpe2NvbnN0IHQ9ZS50YXJnZXQ7dC5jb21wb3NpbmcmJih0LmNvbXBvc2luZz0hMSx0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIikpKX1jb25zdCBvbD17Y3JlYXRlZChlLHttb2RpZmllcnM6e2xhenk6dCx0cmltOm4sbnVtYmVyOm99fSxyKXtlLl9hc3NpZ249ZWwocik7Y29uc3Qgcz1vfHxyLnByb3BzJiZcIm51bWJlclwiPT09ci5wcm9wcy50eXBlO2JpKGUsdD9cImNoYW5nZVwiOlwiaW5wdXRcIiwodD0+e2lmKHQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47bGV0IG89ZS52YWx1ZTtuJiYobz1vLnRyaW0oKSkscyYmKG89WChvKSksZS5fYXNzaWduKG8pfSkpLG4mJmJpKGUsXCJjaGFuZ2VcIiwoKCk9PntlLnZhbHVlPWUudmFsdWUudHJpbSgpfSkpLHR8fChiaShlLFwiY29tcG9zaXRpb25zdGFydFwiLHRsKSxiaShlLFwiY29tcG9zaXRpb25lbmRcIixubCksYmkoZSxcImNoYW5nZVwiLG5sKSl9LG1vdW50ZWQoZSx7dmFsdWU6dH0pe2UudmFsdWU9bnVsbD09dD9cIlwiOnR9LGJlZm9yZVVwZGF0ZShlLHt2YWx1ZTp0LG1vZGlmaWVyczp7bGF6eTpuLHRyaW06byxudW1iZXI6cn19LHMpe2lmKGUuX2Fzc2lnbj1lbChzKSxlLmNvbXBvc2luZylyZXR1cm47aWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PWUmJlwicmFuZ2VcIiE9PWUudHlwZSl7aWYobilyZXR1cm47aWYobyYmZS52YWx1ZS50cmltKCk9PT10KXJldHVybjtpZigocnx8XCJudW1iZXJcIj09PWUudHlwZSkmJlgoZS52YWx1ZSk9PT10KXJldHVybn1jb25zdCBpPW51bGw9PXQ/XCJcIjp0O2UudmFsdWUhPT1pJiYoZS52YWx1ZT1pKX19LHJsPXtkZWVwOiEwLGNyZWF0ZWQoZSx0LG4pe2UuX2Fzc2lnbj1lbChuKSxiaShlLFwiY2hhbmdlXCIsKCgpPT57Y29uc3QgdD1lLl9tb2RlbFZhbHVlLG49YWwoZSksbz1lLmNoZWNrZWQscj1lLl9hc3NpZ247aWYoRSh0KSl7Y29uc3QgZT1oKHQsbikscz0tMSE9PWU7aWYobyYmIXMpcih0LmNvbmNhdChuKSk7ZWxzZSBpZighbyYmcyl7Y29uc3Qgbj1bLi4udF07bi5zcGxpY2UoZSwxKSxyKG4pfX1lbHNlIGlmKE8odCkpe2NvbnN0IGU9bmV3IFNldCh0KTtvP2UuYWRkKG4pOmUuZGVsZXRlKG4pLHIoZSl9ZWxzZSByKHVsKGUsbykpfSkpfSxtb3VudGVkOnNsLGJlZm9yZVVwZGF0ZShlLHQsbil7ZS5fYXNzaWduPWVsKG4pLHNsKGUsdCxuKX19O2Z1bmN0aW9uIHNsKGUse3ZhbHVlOnQsb2xkVmFsdWU6bn0sbyl7ZS5fbW9kZWxWYWx1ZT10LEUodCk/ZS5jaGVja2VkPWgodCxvLnByb3BzLnZhbHVlKT4tMTpPKHQpP2UuY2hlY2tlZD10LmhhcyhvLnByb3BzLnZhbHVlKTp0IT09biYmKGUuY2hlY2tlZD1kKHQsdWwoZSwhMCkpKX1jb25zdCBpbD17Y3JlYXRlZChlLHt2YWx1ZTp0fSxuKXtlLmNoZWNrZWQ9ZCh0LG4ucHJvcHMudmFsdWUpLGUuX2Fzc2lnbj1lbChuKSxiaShlLFwiY2hhbmdlXCIsKCgpPT57ZS5fYXNzaWduKGFsKGUpKX0pKX0sYmVmb3JlVXBkYXRlKGUse3ZhbHVlOnQsb2xkVmFsdWU6bn0sbyl7ZS5fYXNzaWduPWVsKG8pLHQhPT1uJiYoZS5jaGVja2VkPWQodCxvLnByb3BzLnZhbHVlKSl9fSxsbD17ZGVlcDohMCxjcmVhdGVkKGUse3ZhbHVlOnQsbW9kaWZpZXJzOntudW1iZXI6bn19LG8pe2NvbnN0IHI9Tyh0KTtiaShlLFwiY2hhbmdlXCIsKCgpPT57Y29uc3QgdD1BcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZS5vcHRpb25zLChlPT5lLnNlbGVjdGVkKSkubWFwKChlPT5uP1goYWwoZSkpOmFsKGUpKSk7ZS5fYXNzaWduKGUubXVsdGlwbGU/cj9uZXcgU2V0KHQpOnQ6dFswXSl9KSksZS5fYXNzaWduPWVsKG8pfSxtb3VudGVkKGUse3ZhbHVlOnR9KXtjbChlLHQpfSxiZWZvcmVVcGRhdGUoZSx0LG4pe2UuX2Fzc2lnbj1lbChuKX0sdXBkYXRlZChlLHt2YWx1ZTp0fSl7Y2woZSx0KX19O2Z1bmN0aW9uIGNsKGUsdCl7Y29uc3Qgbj1lLm11bHRpcGxlO2lmKCFufHxFKHQpfHxPKHQpKXtmb3IobGV0IG89MCxyPWUub3B0aW9ucy5sZW5ndGg7bzxyO28rKyl7Y29uc3Qgcj1lLm9wdGlvbnNbb10scz1hbChyKTtpZihuKXIuc2VsZWN0ZWQ9RSh0KT9oKHQscyk+LTE6dC5oYXMocyk7ZWxzZSBpZihkKGFsKHIpLHQpKXJldHVybiB2b2lkKGUuc2VsZWN0ZWRJbmRleCE9PW8mJihlLnNlbGVjdGVkSW5kZXg9bykpfW58fC0xPT09ZS5zZWxlY3RlZEluZGV4fHwoZS5zZWxlY3RlZEluZGV4PS0xKX19ZnVuY3Rpb24gYWwoZSl7cmV0dXJuXCJfdmFsdWVcImluIGU/ZS5fdmFsdWU6ZS52YWx1ZX1mdW5jdGlvbiB1bChlLHQpe2NvbnN0IG49dD9cIl90cnVlVmFsdWVcIjpcIl9mYWxzZVZhbHVlXCI7cmV0dXJuIG4gaW4gZT9lW25dOnR9Y29uc3QgcGw9e2NyZWF0ZWQoZSx0LG4pe2ZsKGUsdCxuLG51bGwsXCJjcmVhdGVkXCIpfSxtb3VudGVkKGUsdCxuKXtmbChlLHQsbixudWxsLFwibW91bnRlZFwiKX0sYmVmb3JlVXBkYXRlKGUsdCxuLG8pe2ZsKGUsdCxuLG8sXCJiZWZvcmVVcGRhdGVcIil9LHVwZGF0ZWQoZSx0LG4sbyl7ZmwoZSx0LG4sbyxcInVwZGF0ZWRcIil9fTtmdW5jdGlvbiBmbChlLHQsbixvLHIpe2NvbnN0IHM9ZnVuY3Rpb24oZSx0KXtzd2l0Y2goZSl7Y2FzZVwiU0VMRUNUXCI6cmV0dXJuIGxsO2Nhc2VcIlRFWFRBUkVBXCI6cmV0dXJuIG9sO2RlZmF1bHQ6c3dpdGNoKHQpe2Nhc2VcImNoZWNrYm94XCI6cmV0dXJuIHJsO2Nhc2VcInJhZGlvXCI6cmV0dXJuIGlsO2RlZmF1bHQ6cmV0dXJuIG9sfX19KGUudGFnTmFtZSxuLnByb3BzJiZuLnByb3BzLnR5cGUpW3JdO3MmJnMoZSx0LG4sbyl9Y29uc3QgZGw9W1wiY3RybFwiLFwic2hpZnRcIixcImFsdFwiLFwibWV0YVwiXSxobD17c3RvcDplPT5lLnN0b3BQcm9wYWdhdGlvbigpLHByZXZlbnQ6ZT0+ZS5wcmV2ZW50RGVmYXVsdCgpLHNlbGY6ZT0+ZS50YXJnZXQhPT1lLmN1cnJlbnRUYXJnZXQsY3RybDplPT4hZS5jdHJsS2V5LHNoaWZ0OmU9PiFlLnNoaWZ0S2V5LGFsdDplPT4hZS5hbHRLZXksbWV0YTplPT4hZS5tZXRhS2V5LGxlZnQ6ZT0+XCJidXR0b25cImluIGUmJjAhPT1lLmJ1dHRvbixtaWRkbGU6ZT0+XCJidXR0b25cImluIGUmJjEhPT1lLmJ1dHRvbixyaWdodDplPT5cImJ1dHRvblwiaW4gZSYmMiE9PWUuYnV0dG9uLGV4YWN0OihlLHQpPT5kbC5zb21lKChuPT5lW2Ake259S2V5YF0mJiF0LmluY2x1ZGVzKG4pKSl9LG1sPShlLHQpPT4obiwuLi5vKT0+e2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKXtjb25zdCBvPWhsW3RbZV1dO2lmKG8mJm8obix0KSlyZXR1cm59cmV0dXJuIGUobiwuLi5vKX0sZ2w9e2VzYzpcImVzY2FwZVwiLHNwYWNlOlwiIFwiLHVwOlwiYXJyb3ctdXBcIixsZWZ0OlwiYXJyb3ctbGVmdFwiLHJpZ2h0OlwiYXJyb3ctcmlnaHRcIixkb3duOlwiYXJyb3ctZG93blwiLGRlbGV0ZTpcImJhY2tzcGFjZVwifSx2bD0oZSx0KT0+bj0+e2lmKCEoXCJrZXlcImluIG4pKXJldHVybjtjb25zdCBvPUcobi5rZXkpO3JldHVybiB0LnNvbWUoKGU9PmU9PT1vfHxnbFtlXT09PW8pKT9lKG4pOnZvaWQgMH0seWw9e2JlZm9yZU1vdW50KGUse3ZhbHVlOnR9LHt0cmFuc2l0aW9uOm59KXtlLl92b2Q9XCJub25lXCI9PT1lLnN0eWxlLmRpc3BsYXk/XCJcIjplLnN0eWxlLmRpc3BsYXksbiYmdD9uLmJlZm9yZUVudGVyKGUpOl9sKGUsdCl9LG1vdW50ZWQoZSx7dmFsdWU6dH0se3RyYW5zaXRpb246bn0pe24mJnQmJm4uZW50ZXIoZSl9LHVwZGF0ZWQoZSx7dmFsdWU6dCxvbGRWYWx1ZTpufSx7dHJhbnNpdGlvbjpvfSl7IXQhPSFuJiYobz90PyhvLmJlZm9yZUVudGVyKGUpLF9sKGUsITApLG8uZW50ZXIoZSkpOm8ubGVhdmUoZSwoKCk9PntfbChlLCExKX0pKTpfbChlLHQpKX0sYmVmb3JlVW5tb3VudChlLHt2YWx1ZTp0fSl7X2woZSx0KX19O2Z1bmN0aW9uIF9sKGUsdCl7ZS5zdHlsZS5kaXNwbGF5PXQ/ZS5fdm9kOlwibm9uZVwifWNvbnN0IGJsPXcoe3BhdGNoUHJvcDooZSx0LHIscyxpPSExLGwsYyxhLHUpPT57XCJjbGFzc1wiPT09dD9mdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1lLl92dGM7byYmKHQ9KHQ/W3QsLi4ub106Wy4uLm9dKS5qb2luKFwiIFwiKSksbnVsbD09dD9lLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpOm4/ZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLHQpOmUuY2xhc3NOYW1lPXR9KGUscyxpKTpcInN0eWxlXCI9PT10P2Z1bmN0aW9uKGUsdCxuKXtjb25zdCBvPWUuc3R5bGUscj1QKG4pO2lmKG4mJiFyKXtmb3IoY29uc3QgZSBpbiBuKXBpKG8sZSxuW2VdKTtpZih0JiYhUCh0KSlmb3IoY29uc3QgZSBpbiB0KW51bGw9PW5bZV0mJnBpKG8sZSxcIlwiKX1lbHNle2NvbnN0IHM9by5kaXNwbGF5O3I/dCE9PW4mJihvLmNzc1RleHQ9bik6dCYmZS5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSxcIl92b2RcImluIGUmJihvLmRpc3BsYXk9cyl9fShlLHIscyk6eCh0KT9DKHQpfHxTaShlLHQsMCxzLGMpOihcIi5cIj09PXRbMF0/KHQ9dC5zbGljZSgxKSwxKTpcIl5cIj09PXRbMF0/KHQ9dC5zbGljZSgxKSwwKTpmdW5jdGlvbihlLHQsbixvKXtpZihvKXJldHVyblwiaW5uZXJIVE1MXCI9PT10fHxcInRleHRDb250ZW50XCI9PT10fHwhISh0IGluIGUmJkNpLnRlc3QodCkmJkYobikpO2lmKFwic3BlbGxjaGVja1wiPT09dHx8XCJkcmFnZ2FibGVcIj09PXR8fFwidHJhbnNsYXRlXCI9PT10KXJldHVybiExO2lmKFwiZm9ybVwiPT09dClyZXR1cm4hMTtpZihcImxpc3RcIj09PXQmJlwiSU5QVVRcIj09PWUudGFnTmFtZSlyZXR1cm4hMTtpZihcInR5cGVcIj09PXQmJlwiVEVYVEFSRUFcIj09PWUudGFnTmFtZSlyZXR1cm4hMTtpZihDaS50ZXN0KHQpJiZQKG4pKXJldHVybiExO3JldHVybiB0IGluIGV9KGUsdCxzLGkpKT9mdW5jdGlvbihlLHQsbixyLHMsaSxsKXtpZihcImlubmVySFRNTFwiPT09dHx8XCJ0ZXh0Q29udGVudFwiPT09dClyZXR1cm4gciYmbChyLHMsaSksdm9pZChlW3RdPW51bGw9PW4/XCJcIjpuKTtpZihcInZhbHVlXCI9PT10JiZcIlBST0dSRVNTXCIhPT1lLnRhZ05hbWUmJiFlLnRhZ05hbWUuaW5jbHVkZXMoXCItXCIpKXtlLl92YWx1ZT1uO2NvbnN0IG89bnVsbD09bj9cIlwiOm47cmV0dXJuIGUudmFsdWU9PT1vJiZcIk9QVElPTlwiIT09ZS50YWdOYW1lfHwoZS52YWx1ZT1vKSx2b2lkKG51bGw9PW4mJmUucmVtb3ZlQXR0cmlidXRlKHQpKX1sZXQgYz0hMTtpZihcIlwiPT09bnx8bnVsbD09bil7Y29uc3Qgcj10eXBlb2YgZVt0XTtcImJvb2xlYW5cIj09PXI/bj1vKG4pOm51bGw9PW4mJlwic3RyaW5nXCI9PT1yPyhuPVwiXCIsYz0hMCk6XCJudW1iZXJcIj09PXImJihuPTAsYz0hMCl9dHJ5e2VbdF09bn1jYXRjaChhKXt9YyYmZS5yZW1vdmVBdHRyaWJ1dGUodCl9KGUsdCxzLGwsYyxhLHUpOihcInRydWUtdmFsdWVcIj09PXQ/ZS5fdHJ1ZVZhbHVlPXM6XCJmYWxzZS12YWx1ZVwiPT09dCYmKGUuX2ZhbHNlVmFsdWU9cyksZnVuY3Rpb24oZSx0LHIscyxpKXtpZihzJiZ0LnN0YXJ0c1dpdGgoXCJ4bGluazpcIikpbnVsbD09cj9lLnJlbW92ZUF0dHJpYnV0ZU5TKGhpLHQuc2xpY2UoNix0Lmxlbmd0aCkpOmUuc2V0QXR0cmlidXRlTlMoaGksdCxyKTtlbHNle2NvbnN0IHM9bih0KTtudWxsPT1yfHxzJiYhbyhyKT9lLnJlbW92ZUF0dHJpYnV0ZSh0KTplLnNldEF0dHJpYnV0ZSh0LHM/XCJcIjpyKX19KGUsdCxzLGkpKX19LGFpKTtsZXQgU2wseGw9ITE7ZnVuY3Rpb24gQ2woKXtyZXR1cm4gU2x8fChTbD1BcihibCkpfWZ1bmN0aW9uIHdsKCl7cmV0dXJuIFNsPXhsP1NsOk1yKGJsKSx4bD0hMCxTbH1jb25zdCBrbD0oLi4uZSk9PntDbCgpLnJlbmRlciguLi5lKX0sVGw9KC4uLmUpPT57d2woKS5oeWRyYXRlKC4uLmUpfSxObD0oLi4uZSk9Pntjb25zdCB0PUNsKCkuY3JlYXRlQXBwKC4uLmUpLHttb3VudDpufT10O3JldHVybiB0Lm1vdW50PWU9Pntjb25zdCBvPSRsKGUpO2lmKCFvKXJldHVybjtjb25zdCByPXQuX2NvbXBvbmVudDtGKHIpfHxyLnJlbmRlcnx8ci50ZW1wbGF0ZXx8KHIudGVtcGxhdGU9by5pbm5lckhUTUwpLG8uaW5uZXJIVE1MPVwiXCI7Y29uc3Qgcz1uKG8sITEsbyBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO3JldHVybiBvIGluc3RhbmNlb2YgRWxlbWVudCYmKG8ucmVtb3ZlQXR0cmlidXRlKFwidi1jbG9ha1wiKSxvLnNldEF0dHJpYnV0ZShcImRhdGEtdi1hcHBcIixcIlwiKSksc30sdH0sRWw9KC4uLmUpPT57Y29uc3QgdD13bCgpLmNyZWF0ZUFwcCguLi5lKSx7bW91bnQ6bn09dDtyZXR1cm4gdC5tb3VudD1lPT57Y29uc3QgdD0kbChlKTtpZih0KXJldHVybiBuKHQsITAsdCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpfSx0fTtmdW5jdGlvbiAkbChlKXtpZihQKGUpKXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX1yZXR1cm4gZX1jb25zdCBPbD1fO3ZhciBSbD1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxyZW5kZXI6a2wsaHlkcmF0ZTpUbCxjcmVhdGVBcHA6TmwsY3JlYXRlU1NSQXBwOkVsLGluaXREaXJlY3RpdmVzRm9yU1NSOk9sLGRlZmluZUN1c3RvbUVsZW1lbnQ6d2ksZGVmaW5lU1NSQ3VzdG9tRWxlbWVudDpraSxWdWVFbGVtZW50Ok5pLHVzZUNzc01vZHVsZTpFaSx1c2VDc3NWYXJzOiRpLFRyYW5zaXRpb246RmksVHJhbnNpdGlvbkdyb3VwOllpLHZNb2RlbFRleHQ6b2wsdk1vZGVsQ2hlY2tib3g6cmwsdk1vZGVsUmFkaW86aWwsdk1vZGVsU2VsZWN0OmxsLHZNb2RlbER5bmFtaWM6cGwsd2l0aE1vZGlmaWVyczptbCx3aXRoS2V5czp2bCx2U2hvdzp5bCxyZWFjdGl2ZTpndCxyZWY6RnQscmVhZG9ubHk6eXQsdW5yZWY6SXQscHJveHlSZWZzOkx0LGlzUmVmOlJ0LHRvUmVmOld0LHRvUmVmczpEdCxpc1Byb3h5Ond0LGlzUmVhY3RpdmU6U3QsaXNSZWFkb25seTp4dCxpc1NoYWxsb3c6Q3QsY3VzdG9tUmVmOlV0LHRyaWdnZXJSZWY6VnQsc2hhbGxvd1JlZjpQdCxzaGFsbG93UmVhY3RpdmU6dnQsc2hhbGxvd1JlYWRvbmx5Ol90LG1hcmtSYXc6VHQsdG9SYXc6a3QsZWZmZWN0OnllLHN0b3A6X2UsUmVhY3RpdmVFZmZlY3Q6Z2UsZWZmZWN0U2NvcGU6b2UsRWZmZWN0U2NvcGU6bmUsZ2V0Q3VycmVudFNjb3BlOnNlLG9uU2NvcGVEaXNwb3NlOmllLGNvbXB1dGVkOmpzLHdhdGNoOlhuLHdhdGNoRWZmZWN0OkpuLHdhdGNoUG9zdEVmZmVjdDpZbix3YXRjaFN5bmNFZmZlY3Q6Wm4sb25CZWZvcmVNb3VudDokbyxvbk1vdW50ZWQ6T28sb25CZWZvcmVVcGRhdGU6Um8sb25VcGRhdGVkOkZvLG9uQmVmb3JlVW5tb3VudDpQbyxvblVubW91bnRlZDpBbyxvbkFjdGl2YXRlZDpTbyxvbkRlYWN0aXZhdGVkOnhvLG9uUmVuZGVyVHJhY2tlZDpJbyxvblJlbmRlclRyaWdnZXJlZDpWbyxvbkVycm9yQ2FwdHVyZWQ6Qm8sb25TZXJ2ZXJQcmVmZXRjaDpNbyxwcm92aWRlOkduLGluamVjdDpxbixuZXh0VGljazpkbixkZWZpbmVDb21wb25lbnQ6aG8sZGVmaW5lQXN5bmNDb21wb25lbnQ6Z28sdXNlQXR0cnM6S3MsdXNlU2xvdHM6enMsZGVmaW5lUHJvcHM6VXMsZGVmaW5lRW1pdHM6RHMsZGVmaW5lRXhwb3NlOkhzLHdpdGhEZWZhdWx0czpXcyxtZXJnZURlZmF1bHRzOnFzLGNyZWF0ZVByb3BzUmVzdFByb3h5OkpzLHdpdGhBc3luY0NvbnRleHQ6WXMsZ2V0Q3VycmVudEluc3RhbmNlOndzLGg6WnMsY3JlYXRlVk5vZGU6dXMsY2xvbmVWTm9kZTpmcyxtZXJnZVByb3BzOl9zLGlzVk5vZGU6b3MsRnJhZ21lbnQ6V3IsVGV4dDp6cixDb21tZW50OktyLFN0YXRpYzpHcixUZWxlcG9ydDpIcixTdXNwZW5zZTpVbixLZWVwQWxpdmU6X28sQmFzZVRyYW5zaXRpb246aW8sd2l0aERpcmVjdGl2ZXM6TG8sdXNlU1NSQ29udGV4dDpYcyxzc3JDb250ZXh0S2V5OlFzLGNyZWF0ZVJlbmRlcmVyOkFyLGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyOk1yLHF1ZXVlUG9zdEZsdXNoQ2I6dm4sd2FybjpHdCxoYW5kbGVFcnJvcjpRdCxjYWxsV2l0aEVycm9ySGFuZGxpbmc6WXQsY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmc6WnQscmVzb2x2ZUNvbXBvbmVudDpVbyxyZXNvbHZlRGlyZWN0aXZlOldvLHJlc29sdmVEeW5hbWljQ29tcG9uZW50OkhvLHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyOkZzLGlzUnVudGltZU9ubHk6UHMsdXNlVHJhbnNpdGlvblN0YXRlOnJvLHJlc29sdmVUcmFuc2l0aW9uSG9va3M6Y28sc2V0VHJhbnNpdGlvbkhvb2tzOnBvLGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbjpmbyxpbml0Q3VzdG9tRm9ybWF0dGVyOmVpLGdldCBkZXZ0b29scygpe3JldHVybiB4bn0sc2V0RGV2dG9vbHNIb29rOnduLHdpdGhDdHg6QW4scHVzaFNjb3BlSWQ6Um4scG9wU2NvcGVJZDpGbix3aXRoU2NvcGVJZDpQbixyZW5kZXJMaXN0OkdvLHRvSGFuZGxlcnM6Wm8scmVuZGVyU2xvdDpKbyxjcmVhdGVTbG90czpxbyx3aXRoTWVtbzp0aSxpc01lbW9TYW1lOm5pLG9wZW5CbG9jazpZcixjcmVhdGVCbG9jazpucyxzZXRCbG9ja1RyYWNraW5nOlhyLGNyZWF0ZVRleHRWTm9kZTpkcyxjcmVhdGVDb21tZW50Vk5vZGU6bXMsY3JlYXRlU3RhdGljVk5vZGU6aHMsY3JlYXRlRWxlbWVudFZOb2RlOmFzLGNyZWF0ZUVsZW1lbnRCbG9jazp0cyxndWFyZFJlYWN0aXZlUHJvcHM6cHMsdG9EaXNwbGF5U3RyaW5nOm0sY2FtZWxpemU6eixjYXBpdGFsaXplOnEsdG9IYW5kbGVyS2V5Okosbm9ybWFsaXplUHJvcHM6YSxub3JtYWxpemVDbGFzczpjLG5vcm1hbGl6ZVN0eWxlOnIsdHJhbnNmb3JtVk5vZGVBcmdzOnNzLHZlcnNpb246b2ksc3NyVXRpbHM6bnVsbCxyZXNvbHZlRmlsdGVyOm51bGwsY29tcGF0VXRpbHM6bnVsbH0pO2Z1bmN0aW9uIEZsKGUpe3Rocm93IGV9ZnVuY3Rpb24gUGwoZSl7fWZ1bmN0aW9uIEFsKGUsdCxuLG8pe2NvbnN0IHI9bmV3IFN5bnRheEVycm9yKFN0cmluZyhlKSk7cmV0dXJuIHIuY29kZT1lLHIubG9jPXQscn1jb25zdCBNbD1TeW1ib2woXCJcIiksVmw9U3ltYm9sKFwiXCIpLElsPVN5bWJvbChcIlwiKSxCbD1TeW1ib2woXCJcIiksTGw9U3ltYm9sKFwiXCIpLGpsPVN5bWJvbChcIlwiKSxVbD1TeW1ib2woXCJcIiksRGw9U3ltYm9sKFwiXCIpLEhsPVN5bWJvbChcIlwiKSxXbD1TeW1ib2woXCJcIiksemw9U3ltYm9sKFwiXCIpLEtsPVN5bWJvbChcIlwiKSxHbD1TeW1ib2woXCJcIikscWw9U3ltYm9sKFwiXCIpLEpsPVN5bWJvbChcIlwiKSxZbD1TeW1ib2woXCJcIiksWmw9U3ltYm9sKFwiXCIpLFFsPVN5bWJvbChcIlwiKSxYbD1TeW1ib2woXCJcIiksZWM9U3ltYm9sKFwiXCIpLHRjPVN5bWJvbChcIlwiKSxuYz1TeW1ib2woXCJcIiksb2M9U3ltYm9sKFwiXCIpLHJjPVN5bWJvbChcIlwiKSxzYz1TeW1ib2woXCJcIiksaWM9U3ltYm9sKFwiXCIpLGxjPVN5bWJvbChcIlwiKSxjYz1TeW1ib2woXCJcIiksYWM9U3ltYm9sKFwiXCIpLHVjPVN5bWJvbChcIlwiKSxwYz1TeW1ib2woXCJcIiksZmM9U3ltYm9sKFwiXCIpLGRjPVN5bWJvbChcIlwiKSxoYz1TeW1ib2woXCJcIiksbWM9U3ltYm9sKFwiXCIpLGdjPVN5bWJvbChcIlwiKSx2Yz1TeW1ib2woXCJcIikseWM9U3ltYm9sKFwiXCIpLF9jPVN5bWJvbChcIlwiKSxiYz17W01sXTpcIkZyYWdtZW50XCIsW1ZsXTpcIlRlbGVwb3J0XCIsW0lsXTpcIlN1c3BlbnNlXCIsW0JsXTpcIktlZXBBbGl2ZVwiLFtMbF06XCJCYXNlVHJhbnNpdGlvblwiLFtqbF06XCJvcGVuQmxvY2tcIixbVWxdOlwiY3JlYXRlQmxvY2tcIixbRGxdOlwiY3JlYXRlRWxlbWVudEJsb2NrXCIsW0hsXTpcImNyZWF0ZVZOb2RlXCIsW1dsXTpcImNyZWF0ZUVsZW1lbnRWTm9kZVwiLFt6bF06XCJjcmVhdGVDb21tZW50Vk5vZGVcIixbS2xdOlwiY3JlYXRlVGV4dFZOb2RlXCIsW0dsXTpcImNyZWF0ZVN0YXRpY1ZOb2RlXCIsW3FsXTpcInJlc29sdmVDb21wb25lbnRcIixbSmxdOlwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnRcIixbWWxdOlwicmVzb2x2ZURpcmVjdGl2ZVwiLFtabF06XCJyZXNvbHZlRmlsdGVyXCIsW1FsXTpcIndpdGhEaXJlY3RpdmVzXCIsW1hsXTpcInJlbmRlckxpc3RcIixbZWNdOlwicmVuZGVyU2xvdFwiLFt0Y106XCJjcmVhdGVTbG90c1wiLFtuY106XCJ0b0Rpc3BsYXlTdHJpbmdcIixbb2NdOlwibWVyZ2VQcm9wc1wiLFtyY106XCJub3JtYWxpemVDbGFzc1wiLFtzY106XCJub3JtYWxpemVTdHlsZVwiLFtpY106XCJub3JtYWxpemVQcm9wc1wiLFtsY106XCJndWFyZFJlYWN0aXZlUHJvcHNcIixbY2NdOlwidG9IYW5kbGVyc1wiLFthY106XCJjYW1lbGl6ZVwiLFt1Y106XCJjYXBpdGFsaXplXCIsW3BjXTpcInRvSGFuZGxlcktleVwiLFtmY106XCJzZXRCbG9ja1RyYWNraW5nXCIsW2RjXTpcInB1c2hTY29wZUlkXCIsW2hjXTpcInBvcFNjb3BlSWRcIixbbWNdOlwid2l0aEN0eFwiLFtnY106XCJ1bnJlZlwiLFt2Y106XCJpc1JlZlwiLFt5Y106XCJ3aXRoTWVtb1wiLFtfY106XCJpc01lbW9TYW1lXCJ9O2NvbnN0IFNjPXtzb3VyY2U6XCJcIixzdGFydDp7bGluZToxLGNvbHVtbjoxLG9mZnNldDowfSxlbmQ6e2xpbmU6MSxjb2x1bW46MSxvZmZzZXQ6MH19O2Z1bmN0aW9uIHhjKGUsdCxuLG8scixzLGksbD0hMSxjPSExLGE9ITEsdT1TYyl7cmV0dXJuIGUmJihsPyhlLmhlbHBlcihqbCksZS5oZWxwZXIoWmMoZS5pblNTUixhKSkpOmUuaGVscGVyKFljKGUuaW5TU1IsYSkpLGkmJmUuaGVscGVyKFFsKSkse3R5cGU6MTMsdGFnOnQscHJvcHM6bixjaGlsZHJlbjpvLHBhdGNoRmxhZzpyLGR5bmFtaWNQcm9wczpzLGRpcmVjdGl2ZXM6aSxpc0Jsb2NrOmwsZGlzYWJsZVRyYWNraW5nOmMsaXNDb21wb25lbnQ6YSxsb2M6dX19ZnVuY3Rpb24gQ2MoZSx0PVNjKXtyZXR1cm57dHlwZToxNyxsb2M6dCxlbGVtZW50czplfX1mdW5jdGlvbiB3YyhlLHQ9U2Mpe3JldHVybnt0eXBlOjE1LGxvYzp0LHByb3BlcnRpZXM6ZX19ZnVuY3Rpb24ga2MoZSx0KXtyZXR1cm57dHlwZToxNixsb2M6U2Msa2V5OlAoZSk/VGMoZSwhMCk6ZSx2YWx1ZTp0fX1mdW5jdGlvbiBUYyhlLHQ9ITEsbj1TYyxvPTApe3JldHVybnt0eXBlOjQsbG9jOm4sY29udGVudDplLGlzU3RhdGljOnQsY29uc3RUeXBlOnQ/MzpvfX1mdW5jdGlvbiBOYyhlLHQ9U2Mpe3JldHVybnt0eXBlOjgsbG9jOnQsY2hpbGRyZW46ZX19ZnVuY3Rpb24gRWMoZSx0PVtdLG49U2Mpe3JldHVybnt0eXBlOjE0LGxvYzpuLGNhbGxlZTplLGFyZ3VtZW50czp0fX1mdW5jdGlvbiAkYyhlLHQsbj0hMSxvPSExLHI9U2Mpe3JldHVybnt0eXBlOjE4LHBhcmFtczplLHJldHVybnM6dCxuZXdsaW5lOm4saXNTbG90Om8sbG9jOnJ9fWZ1bmN0aW9uIE9jKGUsdCxuLG89ITApe3JldHVybnt0eXBlOjE5LHRlc3Q6ZSxjb25zZXF1ZW50OnQsYWx0ZXJuYXRlOm4sbmV3bGluZTpvLGxvYzpTY319Y29uc3QgUmM9ZT0+ND09PWUudHlwZSYmZS5pc1N0YXRpYyxGYz0oZSx0KT0+ZT09PXR8fGU9PT1HKHQpO2Z1bmN0aW9uIFBjKGUpe3JldHVybiBGYyhlLFwiVGVsZXBvcnRcIik/Vmw6RmMoZSxcIlN1c3BlbnNlXCIpP0lsOkZjKGUsXCJLZWVwQWxpdmVcIik/Qmw6RmMoZSxcIkJhc2VUcmFuc2l0aW9uXCIpP0xsOnZvaWQgMH1jb25zdCBBYz0vXlxcZHxbXlxcJFxcd10vLE1jPWU9PiFBYy50ZXN0KGUpLFZjPS9bQS1aYS16XyRcXHhBMC1cXHVGRkZGXS8sSWM9L1tcXC5cXD9cXHckXFx4QTAtXFx1RkZGRl0vLEJjPS9cXHMrWy5bXVxccyp8XFxzKlsuW11cXHMrL2csTGM9ZT0+e2U9ZS50cmltKCkucmVwbGFjZShCYywoZT0+ZS50cmltKCkpKTtsZXQgdD0wLG49W10sbz0wLHI9MCxzPW51bGw7Zm9yKGxldCBpPTA7aTxlLmxlbmd0aDtpKyspe2NvbnN0IGw9ZS5jaGFyQXQoaSk7c3dpdGNoKHQpe2Nhc2UgMDppZihcIltcIj09PWwpbi5wdXNoKHQpLHQ9MSxvKys7ZWxzZSBpZihcIihcIj09PWwpbi5wdXNoKHQpLHQ9MixyKys7ZWxzZSBpZighKDA9PT1pP1ZjOkljKS50ZXN0KGwpKXJldHVybiExO2JyZWFrO2Nhc2UgMTpcIidcIj09PWx8fCdcIic9PT1sfHxcImBcIj09PWw/KG4ucHVzaCh0KSx0PTMscz1sKTpcIltcIj09PWw/bysrOlwiXVwiPT09bCYmKC0tb3x8KHQ9bi5wb3AoKSkpO2JyZWFrO2Nhc2UgMjppZihcIidcIj09PWx8fCdcIic9PT1sfHxcImBcIj09PWwpbi5wdXNoKHQpLHQ9MyxzPWw7ZWxzZSBpZihcIihcIj09PWwpcisrO2Vsc2UgaWYoXCIpXCI9PT1sKXtpZihpPT09ZS5sZW5ndGgtMSlyZXR1cm4hMTstLXJ8fCh0PW4ucG9wKCkpfWJyZWFrO2Nhc2UgMzpsPT09cyYmKHQ9bi5wb3AoKSxzPW51bGwpfX1yZXR1cm4hbyYmIXJ9O2Z1bmN0aW9uIGpjKGUsdCxuKXtjb25zdCBvPXtzb3VyY2U6ZS5zb3VyY2Uuc2xpY2UodCx0K24pLHN0YXJ0OlVjKGUuc3RhcnQsZS5zb3VyY2UsdCksZW5kOmUuZW5kfTtyZXR1cm4gbnVsbCE9biYmKG8uZW5kPVVjKGUuc3RhcnQsZS5zb3VyY2UsdCtuKSksb31mdW5jdGlvbiBVYyhlLHQsbj10Lmxlbmd0aCl7cmV0dXJuIERjKHcoe30sZSksdCxuKX1mdW5jdGlvbiBEYyhlLHQsbj10Lmxlbmd0aCl7bGV0IG89MCxyPS0xO2ZvcihsZXQgcz0wO3M8bjtzKyspMTA9PT10LmNoYXJDb2RlQXQocykmJihvKysscj1zKTtyZXR1cm4gZS5vZmZzZXQrPW4sZS5saW5lKz1vLGUuY29sdW1uPS0xPT09cj9lLmNvbHVtbituOm4tcixlfWZ1bmN0aW9uIEhjKGUsdCxuPSExKXtmb3IobGV0IG89MDtvPGUucHJvcHMubGVuZ3RoO28rKyl7Y29uc3Qgcj1lLnByb3BzW29dO2lmKDc9PT1yLnR5cGUmJihufHxyLmV4cCkmJihQKHQpP3IubmFtZT09PXQ6dC50ZXN0KHIubmFtZSkpKXJldHVybiByfX1mdW5jdGlvbiBXYyhlLHQsbj0hMSxvPSExKXtmb3IobGV0IHI9MDtyPGUucHJvcHMubGVuZ3RoO3IrKyl7Y29uc3Qgcz1lLnByb3BzW3JdO2lmKDY9PT1zLnR5cGUpe2lmKG4pY29udGludWU7aWYocy5uYW1lPT09dCYmKHMudmFsdWV8fG8pKXJldHVybiBzfWVsc2UgaWYoXCJiaW5kXCI9PT1zLm5hbWUmJihzLmV4cHx8bykmJnpjKHMuYXJnLHQpKXJldHVybiBzfX1mdW5jdGlvbiB6YyhlLHQpe3JldHVybiEoIWV8fCFSYyhlKXx8ZS5jb250ZW50IT09dCl9ZnVuY3Rpb24gS2MoZSl7cmV0dXJuIDU9PT1lLnR5cGV8fDI9PT1lLnR5cGV9ZnVuY3Rpb24gR2MoZSl7cmV0dXJuIDc9PT1lLnR5cGUmJlwic2xvdFwiPT09ZS5uYW1lfWZ1bmN0aW9uIHFjKGUpe3JldHVybiAxPT09ZS50eXBlJiYzPT09ZS50YWdUeXBlfWZ1bmN0aW9uIEpjKGUpe3JldHVybiAxPT09ZS50eXBlJiYyPT09ZS50YWdUeXBlfWZ1bmN0aW9uIFljKGUsdCl7cmV0dXJuIGV8fHQ/SGw6V2x9ZnVuY3Rpb24gWmMoZSx0KXtyZXR1cm4gZXx8dD9VbDpEbH1jb25zdCBRYz1uZXcgU2V0KFtpYyxsY10pO2Z1bmN0aW9uIFhjKGUsdD1bXSl7aWYoZSYmIVAoZSkmJjE0PT09ZS50eXBlKXtjb25zdCBuPWUuY2FsbGVlO2lmKCFQKG4pJiZRYy5oYXMobikpcmV0dXJuIFhjKGUuYXJndW1lbnRzWzBdLHQuY29uY2F0KGUpKX1yZXR1cm5bZSx0XX1mdW5jdGlvbiBlYShlLHQsbil7bGV0IG8scixzPTEzPT09ZS50eXBlP2UucHJvcHM6ZS5hcmd1bWVudHNbMl0saT1bXTtpZihzJiYhUChzKSYmMTQ9PT1zLnR5cGUpe2NvbnN0IGU9WGMocyk7cz1lWzBdLGk9ZVsxXSxyPWlbaS5sZW5ndGgtMV19aWYobnVsbD09c3x8UChzKSlvPXdjKFt0XSk7ZWxzZSBpZigxND09PXMudHlwZSl7Y29uc3QgZT1zLmFyZ3VtZW50c1swXTtQKGUpfHwxNSE9PWUudHlwZT9zLmNhbGxlZT09PWNjP289RWMobi5oZWxwZXIob2MpLFt3YyhbdF0pLHNdKTpzLmFyZ3VtZW50cy51bnNoaWZ0KHdjKFt0XSkpOmUucHJvcGVydGllcy51bnNoaWZ0KHQpLCFvJiYobz1zKX1lbHNlIGlmKDE1PT09cy50eXBlKXtsZXQgZT0hMTtpZig0PT09dC5rZXkudHlwZSl7Y29uc3Qgbj10LmtleS5jb250ZW50O2U9cy5wcm9wZXJ0aWVzLnNvbWUoKGU9PjQ9PT1lLmtleS50eXBlJiZlLmtleS5jb250ZW50PT09bikpfWV8fHMucHJvcGVydGllcy51bnNoaWZ0KHQpLG89c31lbHNlIG89RWMobi5oZWxwZXIob2MpLFt3YyhbdF0pLHNdKSxyJiZyLmNhbGxlZT09PWxjJiYocj1pW2kubGVuZ3RoLTJdKTsxMz09PWUudHlwZT9yP3IuYXJndW1lbnRzWzBdPW86ZS5wcm9wcz1vOnI/ci5hcmd1bWVudHNbMF09bzplLmFyZ3VtZW50c1syXT1vfWZ1bmN0aW9uIHRhKGUsdCl7cmV0dXJuYF8ke3R9XyR7ZS5yZXBsYWNlKC9bXlxcd10vZywoKHQsbik9PlwiLVwiPT09dD9cIl9cIjplLmNoYXJDb2RlQXQobikudG9TdHJpbmcoKSkpfWB9ZnVuY3Rpb24gbmEoZSx7aGVscGVyOnQscmVtb3ZlSGVscGVyOm4saW5TU1I6b30pe2UuaXNCbG9ja3x8KGUuaXNCbG9jaz0hMCxuKFljKG8sZS5pc0NvbXBvbmVudCkpLHQoamwpLHQoWmMobyxlLmlzQ29tcG9uZW50KSkpfWNvbnN0IG9hPS8mKGd0fGx0fGFtcHxhcG9zfHF1b3QpOy9nLHJhPXtndDpcIj5cIixsdDpcIjxcIixhbXA6XCImXCIsYXBvczpcIidcIixxdW90OidcIid9LHNhPXtkZWxpbWl0ZXJzOltcInt7XCIsXCJ9fVwiXSxnZXROYW1lc3BhY2U6KCk9PjAsZ2V0VGV4dE1vZGU6KCk9PjAsaXNWb2lkVGFnOmIsaXNQcmVUYWc6Yixpc0N1c3RvbUVsZW1lbnQ6YixkZWNvZGVFbnRpdGllczplPT5lLnJlcGxhY2Uob2EsKChlLHQpPT5yYVt0XSkpLG9uRXJyb3I6Rmwsb25XYXJuOlBsLGNvbW1lbnRzOiExfTtmdW5jdGlvbiBpYShlLHQ9e30pe2NvbnN0IG49ZnVuY3Rpb24oZSx0KXtjb25zdCBuPXcoe30sc2EpO2xldCBvO2ZvcihvIGluIHQpbltvXT12b2lkIDA9PT10W29dP3NhW29dOnRbb107cmV0dXJue29wdGlvbnM6bixjb2x1bW46MSxsaW5lOjEsb2Zmc2V0OjAsb3JpZ2luYWxTb3VyY2U6ZSxzb3VyY2U6ZSxpblByZTohMSxpblZQcmU6ITEsb25XYXJuOm4ub25XYXJufX0oZSx0KSxvPWJhKG4pO3JldHVybiBmdW5jdGlvbihlLHQ9U2Mpe3JldHVybnt0eXBlOjAsY2hpbGRyZW46ZSxoZWxwZXJzOltdLGNvbXBvbmVudHM6W10sZGlyZWN0aXZlczpbXSxob2lzdHM6W10saW1wb3J0czpbXSxjYWNoZWQ6MCx0ZW1wczowLGNvZGVnZW5Ob2RlOnZvaWQgMCxsb2M6dH19KGxhKG4sMCxbXSksU2EobixvKSl9ZnVuY3Rpb24gbGEoZSx0LG4pe2NvbnN0IG89eGEobikscj1vP28ubnM6MCxzPVtdO2Zvcig7IU5hKGUsdCxuKTspe2NvbnN0IGk9ZS5zb3VyY2U7bGV0IGw7aWYoMD09PXR8fDE9PT10KWlmKCFlLmluVlByZSYmQ2EoaSxlLm9wdGlvbnMuZGVsaW1pdGVyc1swXSkpbD12YShlLHQpO2Vsc2UgaWYoMD09PXQmJlwiPFwiPT09aVswXSlpZigxPT09aS5sZW5ndGgpO2Vsc2UgaWYoXCIhXCI9PT1pWzFdKWw9Q2EoaSxcIlxceDNjIS0tXCIpP3VhKGUpOkNhKGksXCI8IURPQ1RZUEVcIik/cGEoZSk6Q2EoaSxcIjwhW0NEQVRBW1wiKSYmMCE9PXI/YWEoZSxuKTpwYShlKTtlbHNlIGlmKFwiL1wiPT09aVsxXSlpZigyPT09aS5sZW5ndGgpO2Vsc2V7aWYoXCI+XCI9PT1pWzJdKXt3YShlLDMpO2NvbnRpbnVlfWlmKC9bYS16XS9pLnRlc3QoaVsyXSkpe2hhKGUsMSxvKTtjb250aW51ZX1sPXBhKGUpfWVsc2UvW2Etel0vaS50ZXN0KGlbMV0pP2w9ZmEoZSxuKTpcIj9cIj09PWlbMV0mJihsPXBhKGUpKTtpZihsfHwobD15YShlLHQpKSxFKGwpKWZvcihsZXQgZT0wO2U8bC5sZW5ndGg7ZSsrKWNhKHMsbFtlXSk7ZWxzZSBjYShzLGwpfWxldCBpPSExO2lmKDIhPT10JiYxIT09dCl7Y29uc3QgdD1cInByZXNlcnZlXCIhPT1lLm9wdGlvbnMud2hpdGVzcGFjZTtmb3IobGV0IG49MDtuPHMubGVuZ3RoO24rKyl7Y29uc3Qgbz1zW25dO2lmKGUuaW5QcmV8fDIhPT1vLnR5cGUpMyE9PW8udHlwZXx8ZS5vcHRpb25zLmNvbW1lbnRzfHwoaT0hMCxzW25dPW51bGwpO2Vsc2UgaWYoL1teXFx0XFxyXFxuXFxmIF0vLnRlc3Qoby5jb250ZW50KSl0JiYoby5jb250ZW50PW8uY29udGVudC5yZXBsYWNlKC9bXFx0XFxyXFxuXFxmIF0rL2csXCIgXCIpKTtlbHNle2NvbnN0IGU9c1tuLTFdLHI9c1tuKzFdOyFlfHwhcnx8dCYmKDM9PT1lLnR5cGV8fDM9PT1yLnR5cGV8fDE9PT1lLnR5cGUmJjE9PT1yLnR5cGUmJi9bXFxyXFxuXS8udGVzdChvLmNvbnRlbnQpKT8oaT0hMCxzW25dPW51bGwpOm8uY29udGVudD1cIiBcIn19aWYoZS5pblByZSYmbyYmZS5vcHRpb25zLmlzUHJlVGFnKG8udGFnKSl7Y29uc3QgZT1zWzBdO2UmJjI9PT1lLnR5cGUmJihlLmNvbnRlbnQ9ZS5jb250ZW50LnJlcGxhY2UoL15cXHI/XFxuLyxcIlwiKSl9fXJldHVybiBpP3MuZmlsdGVyKEJvb2xlYW4pOnN9ZnVuY3Rpb24gY2EoZSx0KXtpZigyPT09dC50eXBlKXtjb25zdCBuPXhhKGUpO2lmKG4mJjI9PT1uLnR5cGUmJm4ubG9jLmVuZC5vZmZzZXQ9PT10LmxvYy5zdGFydC5vZmZzZXQpcmV0dXJuIG4uY29udGVudCs9dC5jb250ZW50LG4ubG9jLmVuZD10LmxvYy5lbmQsdm9pZChuLmxvYy5zb3VyY2UrPXQubG9jLnNvdXJjZSl9ZS5wdXNoKHQpfWZ1bmN0aW9uIGFhKGUsdCl7d2EoZSw5KTtjb25zdCBuPWxhKGUsMyx0KTtyZXR1cm4gMD09PWUuc291cmNlLmxlbmd0aHx8d2EoZSwzKSxufWZ1bmN0aW9uIHVhKGUpe2NvbnN0IHQ9YmEoZSk7bGV0IG47Y29uc3Qgbz0vLS0oXFwhKT8+Ly5leGVjKGUuc291cmNlKTtpZihvKXtuPWUuc291cmNlLnNsaWNlKDQsby5pbmRleCk7Y29uc3QgdD1lLnNvdXJjZS5zbGljZSgwLG8uaW5kZXgpO2xldCByPTEscz0wO2Zvcig7LTEhPT0ocz10LmluZGV4T2YoXCJcXHgzYyEtLVwiLHIpKTspd2EoZSxzLXIrMSkscj1zKzE7d2EoZSxvLmluZGV4K29bMF0ubGVuZ3RoLXIrMSl9ZWxzZSBuPWUuc291cmNlLnNsaWNlKDQpLHdhKGUsZS5zb3VyY2UubGVuZ3RoKTtyZXR1cm57dHlwZTozLGNvbnRlbnQ6bixsb2M6U2EoZSx0KX19ZnVuY3Rpb24gcGEoZSl7Y29uc3QgdD1iYShlKSxuPVwiP1wiPT09ZS5zb3VyY2VbMV0/MToyO2xldCBvO2NvbnN0IHI9ZS5zb3VyY2UuaW5kZXhPZihcIj5cIik7cmV0dXJuLTE9PT1yPyhvPWUuc291cmNlLnNsaWNlKG4pLHdhKGUsZS5zb3VyY2UubGVuZ3RoKSk6KG89ZS5zb3VyY2Uuc2xpY2UobixyKSx3YShlLHIrMSkpLHt0eXBlOjMsY29udGVudDpvLGxvYzpTYShlLHQpfX1mdW5jdGlvbiBmYShlLHQpe2NvbnN0IG49ZS5pblByZSxvPWUuaW5WUHJlLHI9eGEodCkscz1oYShlLDAsciksaT1lLmluUHJlJiYhbixsPWUuaW5WUHJlJiYhbztpZihzLmlzU2VsZkNsb3Npbmd8fGUub3B0aW9ucy5pc1ZvaWRUYWcocy50YWcpKXJldHVybiBpJiYoZS5pblByZT0hMSksbCYmKGUuaW5WUHJlPSExKSxzO3QucHVzaChzKTtjb25zdCBjPWUub3B0aW9ucy5nZXRUZXh0TW9kZShzLHIpLGE9bGEoZSxjLHQpO2lmKHQucG9wKCkscy5jaGlsZHJlbj1hLEVhKGUuc291cmNlLHMudGFnKSloYShlLDEscik7ZWxzZSBpZigwPT09ZS5zb3VyY2UubGVuZ3RoJiZcInNjcmlwdFwiPT09cy50YWcudG9Mb3dlckNhc2UoKSl7Y29uc3QgZT1hWzBdO2UmJkNhKGUubG9jLnNvdXJjZSxcIlxceDNjIS0tXCIpfXJldHVybiBzLmxvYz1TYShlLHMubG9jLnN0YXJ0KSxpJiYoZS5pblByZT0hMSksbCYmKGUuaW5WUHJlPSExKSxzfWNvbnN0IGRhPWUoXCJpZixlbHNlLGVsc2UtaWYsZm9yLHNsb3RcIik7ZnVuY3Rpb24gaGEoZSx0LG4pe2NvbnN0IG89YmEoZSkscj0vXjxcXC8/KFthLXpdW15cXHRcXHJcXG5cXGYgLz5dKikvaS5leGVjKGUuc291cmNlKSxzPXJbMV0saT1lLm9wdGlvbnMuZ2V0TmFtZXNwYWNlKHMsbik7d2EoZSxyWzBdLmxlbmd0aCksa2EoZSk7Y29uc3QgbD1iYShlKSxjPWUuc291cmNlO2Uub3B0aW9ucy5pc1ByZVRhZyhzKSYmKGUuaW5QcmU9ITApO2xldCBhPW1hKGUsdCk7MD09PXQmJiFlLmluVlByZSYmYS5zb21lKChlPT43PT09ZS50eXBlJiZcInByZVwiPT09ZS5uYW1lKSkmJihlLmluVlByZT0hMCx3KGUsbCksZS5zb3VyY2U9YyxhPW1hKGUsdCkuZmlsdGVyKChlPT5cInYtcHJlXCIhPT1lLm5hbWUpKSk7bGV0IHU9ITE7aWYoMD09PWUuc291cmNlLmxlbmd0aHx8KHU9Q2EoZS5zb3VyY2UsXCIvPlwiKSx3YShlLHU/MjoxKSksMT09PXQpcmV0dXJuO2xldCBwPTA7cmV0dXJuIGUuaW5WUHJlfHwoXCJzbG90XCI9PT1zP3A9MjpcInRlbXBsYXRlXCI9PT1zP2Euc29tZSgoZT0+Nz09PWUudHlwZSYmZGEoZS5uYW1lKSkpJiYocD0zKTpmdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1uLm9wdGlvbnM7aWYoby5pc0N1c3RvbUVsZW1lbnQoZSkpcmV0dXJuITE7aWYoXCJjb21wb25lbnRcIj09PWV8fC9eW0EtWl0vLnRlc3QoZSl8fFBjKGUpfHxvLmlzQnVpbHRJbkNvbXBvbmVudCYmby5pc0J1aWx0SW5Db21wb25lbnQoZSl8fG8uaXNOYXRpdmVUYWcmJiFvLmlzTmF0aXZlVGFnKGUpKXJldHVybiEwO2ZvcihsZXQgcj0wO3I8dC5sZW5ndGg7cisrKXtjb25zdCBlPXRbcl07aWYoNj09PWUudHlwZSl7aWYoXCJpc1wiPT09ZS5uYW1lJiZlLnZhbHVlJiZlLnZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikpcmV0dXJuITB9ZWxzZXtpZihcImlzXCI9PT1lLm5hbWUpcmV0dXJuITA7XCJiaW5kXCI9PT1lLm5hbWUmJnpjKGUuYXJnLFwiaXNcIil9fX0ocyxhLGUpJiYocD0xKSkse3R5cGU6MSxuczppLHRhZzpzLHRhZ1R5cGU6cCxwcm9wczphLGlzU2VsZkNsb3Npbmc6dSxjaGlsZHJlbjpbXSxsb2M6U2EoZSxvKSxjb2RlZ2VuTm9kZTp2b2lkIDB9fWZ1bmN0aW9uIG1hKGUsdCl7Y29uc3Qgbj1bXSxvPW5ldyBTZXQ7Zm9yKDtlLnNvdXJjZS5sZW5ndGg+MCYmIUNhKGUuc291cmNlLFwiPlwiKSYmIUNhKGUuc291cmNlLFwiLz5cIik7KXtpZihDYShlLnNvdXJjZSxcIi9cIikpe3dhKGUsMSksa2EoZSk7Y29udGludWV9Y29uc3Qgcj1nYShlLG8pOzY9PT1yLnR5cGUmJnIudmFsdWUmJlwiY2xhc3NcIj09PXIubmFtZSYmKHIudmFsdWUuY29udGVudD1yLnZhbHVlLmNvbnRlbnQucmVwbGFjZSgvXFxzKy9nLFwiIFwiKS50cmltKCkpLDA9PT10JiZuLnB1c2gociksL15bXlxcdFxcclxcblxcZiAvPl0vLnRlc3QoZS5zb3VyY2UpLGthKGUpfXJldHVybiBufWZ1bmN0aW9uIGdhKGUsdCl7Y29uc3Qgbj1iYShlKSxvPS9eW15cXHRcXHJcXG5cXGYgLz5dW15cXHRcXHJcXG5cXGYgLz49XSovLmV4ZWMoZS5zb3VyY2UpWzBdO3QuaGFzKG8pLHQuYWRkKG8pO3tjb25zdCBlPS9bXCInPF0vZztsZXQgdDtmb3IoO3Q9ZS5leGVjKG8pOyk7fWxldCByO3dhKGUsby5sZW5ndGgpLC9eW1xcdFxcclxcblxcZiBdKj0vLnRlc3QoZS5zb3VyY2UpJiYoa2EoZSksd2EoZSwxKSxrYShlKSxyPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9YmEoZSk7bGV0IG47Y29uc3Qgbz1lLnNvdXJjZVswXSxyPSdcIic9PT1vfHxcIidcIj09PW87aWYocil7d2EoZSwxKTtjb25zdCB0PWUuc291cmNlLmluZGV4T2Yobyk7LTE9PT10P249X2EoZSxlLnNvdXJjZS5sZW5ndGgsNCk6KG49X2EoZSx0LDQpLHdhKGUsMSkpfWVsc2V7Y29uc3QgdD0vXlteXFx0XFxyXFxuXFxmID5dKy8uZXhlYyhlLnNvdXJjZSk7aWYoIXQpcmV0dXJuO2NvbnN0IG89L1tcIic8PWBdL2c7bGV0IHI7Zm9yKDtyPW8uZXhlYyh0WzBdKTspO249X2EoZSx0WzBdLmxlbmd0aCw0KX1yZXR1cm57Y29udGVudDpuLGlzUXVvdGVkOnIsbG9jOlNhKGUsdCl9fShlKSk7Y29uc3Qgcz1TYShlLG4pO2lmKCFlLmluVlByZSYmL14odi1bQS1aYS16MC05LV18OnxcXC58QHwjKS8udGVzdChvKSl7Y29uc3QgdD0vKD86XnYtKFthLXowLTktXSspKT8oPzooPzo6fF5cXC58XkB8XiMpKFxcW1teXFxdXStcXF18W15cXC5dKykpPyguKyk/JC9pLmV4ZWMobyk7bGV0IGksbD1DYShvLFwiLlwiKSxjPXRbMV18fChsfHxDYShvLFwiOlwiKT9cImJpbmRcIjpDYShvLFwiQFwiKT9cIm9uXCI6XCJzbG90XCIpO2lmKHRbMl0pe2NvbnN0IHI9XCJzbG90XCI9PT1jLHM9by5sYXN0SW5kZXhPZih0WzJdKSxsPVNhKGUsVGEoZSxuLHMpLFRhKGUsbixzK3RbMl0ubGVuZ3RoKyhyJiZ0WzNdfHxcIlwiKS5sZW5ndGgpKTtsZXQgYT10WzJdLHU9ITA7YS5zdGFydHNXaXRoKFwiW1wiKT8odT0hMSxhPWEuZW5kc1dpdGgoXCJdXCIpP2Euc2xpY2UoMSxhLmxlbmd0aC0xKTphLnNsaWNlKDEpKTpyJiYoYSs9dFszXXx8XCJcIiksaT17dHlwZTo0LGNvbnRlbnQ6YSxpc1N0YXRpYzp1LGNvbnN0VHlwZTp1PzM6MCxsb2M6bH19aWYociYmci5pc1F1b3RlZCl7Y29uc3QgZT1yLmxvYztlLnN0YXJ0Lm9mZnNldCsrLGUuc3RhcnQuY29sdW1uKyssZS5lbmQ9VWMoZS5zdGFydCxyLmNvbnRlbnQpLGUuc291cmNlPWUuc291cmNlLnNsaWNlKDEsLTEpfWNvbnN0IGE9dFszXT90WzNdLnNsaWNlKDEpLnNwbGl0KFwiLlwiKTpbXTtyZXR1cm4gbCYmYS5wdXNoKFwicHJvcFwiKSx7dHlwZTo3LG5hbWU6YyxleHA6ciYme3R5cGU6NCxjb250ZW50OnIuY29udGVudCxpc1N0YXRpYzohMSxjb25zdFR5cGU6MCxsb2M6ci5sb2N9LGFyZzppLG1vZGlmaWVyczphLGxvYzpzfX1yZXR1cm4hZS5pblZQcmUmJkNhKG8sXCJ2LVwiKSx7dHlwZTo2LG5hbWU6byx2YWx1ZTpyJiZ7dHlwZToyLGNvbnRlbnQ6ci5jb250ZW50LGxvYzpyLmxvY30sbG9jOnN9fWZ1bmN0aW9uIHZhKGUsdCl7Y29uc3RbbixvXT1lLm9wdGlvbnMuZGVsaW1pdGVycyxyPWUuc291cmNlLmluZGV4T2YobyxuLmxlbmd0aCk7aWYoLTE9PT1yKXJldHVybjtjb25zdCBzPWJhKGUpO3dhKGUsbi5sZW5ndGgpO2NvbnN0IGk9YmEoZSksbD1iYShlKSxjPXItbi5sZW5ndGgsYT1lLnNvdXJjZS5zbGljZSgwLGMpLHU9X2EoZSxjLHQpLHA9dS50cmltKCksZj11LmluZGV4T2YocCk7Zj4wJiZEYyhpLGEsZik7cmV0dXJuIERjKGwsYSxjLSh1Lmxlbmd0aC1wLmxlbmd0aC1mKSksd2EoZSxvLmxlbmd0aCkse3R5cGU6NSxjb250ZW50Ont0eXBlOjQsaXNTdGF0aWM6ITEsY29uc3RUeXBlOjAsY29udGVudDpwLGxvYzpTYShlLGksbCl9LGxvYzpTYShlLHMpfX1mdW5jdGlvbiB5YShlLHQpe2NvbnN0IG49Mz09PXQ/W1wiXV0+XCJdOltcIjxcIixlLm9wdGlvbnMuZGVsaW1pdGVyc1swXV07bGV0IG89ZS5zb3VyY2UubGVuZ3RoO2ZvcihsZXQgcz0wO3M8bi5sZW5ndGg7cysrKXtjb25zdCB0PWUuc291cmNlLmluZGV4T2YobltzXSwxKTstMSE9PXQmJm8+dCYmKG89dCl9Y29uc3Qgcj1iYShlKTtyZXR1cm57dHlwZToyLGNvbnRlbnQ6X2EoZSxvLHQpLGxvYzpTYShlLHIpfX1mdW5jdGlvbiBfYShlLHQsbil7Y29uc3Qgbz1lLnNvdXJjZS5zbGljZSgwLHQpO3JldHVybiB3YShlLHQpLDIhPT1uJiYzIT09biYmby5pbmNsdWRlcyhcIiZcIik/ZS5vcHRpb25zLmRlY29kZUVudGl0aWVzKG8sND09PW4pOm99ZnVuY3Rpb24gYmEoZSl7Y29uc3R7Y29sdW1uOnQsbGluZTpuLG9mZnNldDpvfT1lO3JldHVybntjb2x1bW46dCxsaW5lOm4sb2Zmc2V0Om99fWZ1bmN0aW9uIFNhKGUsdCxuKXtyZXR1cm57c3RhcnQ6dCxlbmQ6bj1ufHxiYShlKSxzb3VyY2U6ZS5vcmlnaW5hbFNvdXJjZS5zbGljZSh0Lm9mZnNldCxuLm9mZnNldCl9fWZ1bmN0aW9uIHhhKGUpe3JldHVybiBlW2UubGVuZ3RoLTFdfWZ1bmN0aW9uIENhKGUsdCl7cmV0dXJuIGUuc3RhcnRzV2l0aCh0KX1mdW5jdGlvbiB3YShlLHQpe2NvbnN0e3NvdXJjZTpufT1lO0RjKGUsbix0KSxlLnNvdXJjZT1uLnNsaWNlKHQpfWZ1bmN0aW9uIGthKGUpe2NvbnN0IHQ9L15bXFx0XFxyXFxuXFxmIF0rLy5leGVjKGUuc291cmNlKTt0JiZ3YShlLHRbMF0ubGVuZ3RoKX1mdW5jdGlvbiBUYShlLHQsbil7cmV0dXJuIFVjKHQsZS5vcmlnaW5hbFNvdXJjZS5zbGljZSh0Lm9mZnNldCxuKSxuKX1mdW5jdGlvbiBOYShlLHQsbil7Y29uc3Qgbz1lLnNvdXJjZTtzd2l0Y2godCl7Y2FzZSAwOmlmKENhKG8sXCI8L1wiKSlmb3IobGV0IGU9bi5sZW5ndGgtMTtlPj0wOy0tZSlpZihFYShvLG5bZV0udGFnKSlyZXR1cm4hMDticmVhaztjYXNlIDE6Y2FzZSAyOntjb25zdCBlPXhhKG4pO2lmKGUmJkVhKG8sZS50YWcpKXJldHVybiEwO2JyZWFrfWNhc2UgMzppZihDYShvLFwiXV0+XCIpKXJldHVybiEwfXJldHVybiFvfWZ1bmN0aW9uIEVhKGUsdCl7cmV0dXJuIENhKGUsXCI8L1wiKSYmZS5zbGljZSgyLDIrdC5sZW5ndGgpLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCkmJi9bXFx0XFxyXFxuXFxmIC8+XS8udGVzdChlWzIrdC5sZW5ndGhdfHxcIj5cIil9ZnVuY3Rpb24gJGEoZSx0KXtSYShlLHQsT2EoZSxlLmNoaWxkcmVuWzBdKSl9ZnVuY3Rpb24gT2EoZSx0KXtjb25zdHtjaGlsZHJlbjpufT1lO3JldHVybiAxPT09bi5sZW5ndGgmJjE9PT10LnR5cGUmJiFKYyh0KX1mdW5jdGlvbiBSYShlLHQsbj0hMSl7Y29uc3R7Y2hpbGRyZW46b309ZSxyPW8ubGVuZ3RoO2xldCBzPTA7Zm9yKGxldCBpPTA7aTxvLmxlbmd0aDtpKyspe2NvbnN0IGU9b1tpXTtpZigxPT09ZS50eXBlJiYwPT09ZS50YWdUeXBlKXtjb25zdCBvPW4/MDpGYShlLHQpO2lmKG8+MCl7aWYobz49Mil7ZS5jb2RlZ2VuTm9kZS5wYXRjaEZsYWc9XCItMVwiLGUuY29kZWdlbk5vZGU9dC5ob2lzdChlLmNvZGVnZW5Ob2RlKSxzKys7Y29udGludWV9fWVsc2V7Y29uc3Qgbj1lLmNvZGVnZW5Ob2RlO2lmKDEzPT09bi50eXBlKXtjb25zdCBvPUlhKG4pO2lmKCghb3x8NTEyPT09b3x8MT09PW8pJiZNYShlLHQpPj0yKXtjb25zdCBvPVZhKGUpO28mJihuLnByb3BzPXQuaG9pc3QobykpfW4uZHluYW1pY1Byb3BzJiYobi5keW5hbWljUHJvcHM9dC5ob2lzdChuLmR5bmFtaWNQcm9wcykpfX19ZWxzZSAxMj09PWUudHlwZSYmRmEoZS5jb250ZW50LHQpPj0yJiYoZS5jb2RlZ2VuTm9kZT10LmhvaXN0KGUuY29kZWdlbk5vZGUpLHMrKyk7aWYoMT09PWUudHlwZSl7Y29uc3Qgbj0xPT09ZS50YWdUeXBlO24mJnQuc2NvcGVzLnZTbG90KyssUmEoZSx0KSxuJiZ0LnNjb3Blcy52U2xvdC0tfWVsc2UgaWYoMTE9PT1lLnR5cGUpUmEoZSx0LDE9PT1lLmNoaWxkcmVuLmxlbmd0aCk7ZWxzZSBpZig5PT09ZS50eXBlKWZvcihsZXQgbj0wO248ZS5icmFuY2hlcy5sZW5ndGg7bisrKVJhKGUuYnJhbmNoZXNbbl0sdCwxPT09ZS5icmFuY2hlc1tuXS5jaGlsZHJlbi5sZW5ndGgpfXMmJnQudHJhbnNmb3JtSG9pc3QmJnQudHJhbnNmb3JtSG9pc3Qobyx0LGUpLHMmJnM9PT1yJiYxPT09ZS50eXBlJiYwPT09ZS50YWdUeXBlJiZlLmNvZGVnZW5Ob2RlJiYxMz09PWUuY29kZWdlbk5vZGUudHlwZSYmRShlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuKSYmKGUuY29kZWdlbk5vZGUuY2hpbGRyZW49dC5ob2lzdChDYyhlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuKSkpfWZ1bmN0aW9uIEZhKGUsdCl7Y29uc3R7Y29uc3RhbnRDYWNoZTpufT10O3N3aXRjaChlLnR5cGUpe2Nhc2UgMTppZigwIT09ZS50YWdUeXBlKXJldHVybiAwO2NvbnN0IG89bi5nZXQoZSk7aWYodm9pZCAwIT09bylyZXR1cm4gbztjb25zdCByPWUuY29kZWdlbk5vZGU7aWYoMTMhPT1yLnR5cGUpcmV0dXJuIDA7aWYoci5pc0Jsb2NrJiZcInN2Z1wiIT09ZS50YWcmJlwiZm9yZWlnbk9iamVjdFwiIT09ZS50YWcpcmV0dXJuIDA7aWYoSWEocikpcmV0dXJuIG4uc2V0KGUsMCksMDt7bGV0IG89Mztjb25zdCBzPU1hKGUsdCk7aWYoMD09PXMpcmV0dXJuIG4uc2V0KGUsMCksMDtzPG8mJihvPXMpO2ZvcihsZXQgcj0wO3I8ZS5jaGlsZHJlbi5sZW5ndGg7cisrKXtjb25zdCBzPUZhKGUuY2hpbGRyZW5bcl0sdCk7aWYoMD09PXMpcmV0dXJuIG4uc2V0KGUsMCksMDtzPG8mJihvPXMpfWlmKG8+MSlmb3IobGV0IHI9MDtyPGUucHJvcHMubGVuZ3RoO3IrKyl7Y29uc3Qgcz1lLnByb3BzW3JdO2lmKDc9PT1zLnR5cGUmJlwiYmluZFwiPT09cy5uYW1lJiZzLmV4cCl7Y29uc3Qgcj1GYShzLmV4cCx0KTtpZigwPT09cilyZXR1cm4gbi5zZXQoZSwwKSwwO3I8byYmKG89cil9fWlmKHIuaXNCbG9jayl7Zm9yKGxldCB0PTA7dDxlLnByb3BzLmxlbmd0aDt0Kyspe2lmKDc9PT1lLnByb3BzW3RdLnR5cGUpcmV0dXJuIG4uc2V0KGUsMCksMH10LnJlbW92ZUhlbHBlcihqbCksdC5yZW1vdmVIZWxwZXIoWmModC5pblNTUixyLmlzQ29tcG9uZW50KSksci5pc0Jsb2NrPSExLHQuaGVscGVyKFljKHQuaW5TU1Isci5pc0NvbXBvbmVudCkpfXJldHVybiBuLnNldChlLG8pLG99Y2FzZSAyOmNhc2UgMzpyZXR1cm4gMztjYXNlIDk6Y2FzZSAxMTpjYXNlIDEwOmRlZmF1bHQ6cmV0dXJuIDA7Y2FzZSA1OmNhc2UgMTI6cmV0dXJuIEZhKGUuY29udGVudCx0KTtjYXNlIDQ6cmV0dXJuIGUuY29uc3RUeXBlO2Nhc2UgODpsZXQgcz0zO2ZvcihsZXQgbj0wO248ZS5jaGlsZHJlbi5sZW5ndGg7bisrKXtjb25zdCBvPWUuY2hpbGRyZW5bbl07aWYoUChvKXx8QShvKSljb250aW51ZTtjb25zdCByPUZhKG8sdCk7aWYoMD09PXIpcmV0dXJuIDA7cjxzJiYocz1yKX1yZXR1cm4gc319Y29uc3QgUGE9bmV3IFNldChbcmMsc2MsaWMsbGNdKTtmdW5jdGlvbiBBYShlLHQpe2lmKDE0PT09ZS50eXBlJiYhUChlLmNhbGxlZSkmJlBhLmhhcyhlLmNhbGxlZSkpe2NvbnN0IG49ZS5hcmd1bWVudHNbMF07aWYoND09PW4udHlwZSlyZXR1cm4gRmEobix0KTtpZigxND09PW4udHlwZSlyZXR1cm4gQWEobix0KX1yZXR1cm4gMH1mdW5jdGlvbiBNYShlLHQpe2xldCBuPTM7Y29uc3Qgbz1WYShlKTtpZihvJiYxNT09PW8udHlwZSl7Y29uc3R7cHJvcGVydGllczplfT1vO2ZvcihsZXQgbz0wO288ZS5sZW5ndGg7bysrKXtjb25zdHtrZXk6cix2YWx1ZTpzfT1lW29dLGk9RmEocix0KTtpZigwPT09aSlyZXR1cm4gaTtsZXQgbDtpZihpPG4mJihuPWkpLGw9ND09PXMudHlwZT9GYShzLHQpOjE0PT09cy50eXBlP0FhKHMsdCk6MCwwPT09bClyZXR1cm4gbDtsPG4mJihuPWwpfX1yZXR1cm4gbn1mdW5jdGlvbiBWYShlKXtjb25zdCB0PWUuY29kZWdlbk5vZGU7aWYoMTM9PT10LnR5cGUpcmV0dXJuIHQucHJvcHN9ZnVuY3Rpb24gSWEoZSl7Y29uc3QgdD1lLnBhdGNoRmxhZztyZXR1cm4gdD9wYXJzZUludCh0LDEwKTp2b2lkIDB9ZnVuY3Rpb24gQmEoZSx7ZmlsZW5hbWU6dD1cIlwiLHByZWZpeElkZW50aWZpZXJzOm49ITEsaG9pc3RTdGF0aWM6bz0hMSxjYWNoZUhhbmRsZXJzOnI9ITEsbm9kZVRyYW5zZm9ybXM6cz1bXSxkaXJlY3RpdmVUcmFuc2Zvcm1zOmk9e30sdHJhbnNmb3JtSG9pc3Q6bD1udWxsLGlzQnVpbHRJbkNvbXBvbmVudDpjPV8saXNDdXN0b21FbGVtZW50OmE9XyxleHByZXNzaW9uUGx1Z2luczp1PVtdLHNjb3BlSWQ6cD1udWxsLHNsb3R0ZWQ6Zj0hMCxzc3I6ZD0hMSxpblNTUjpoPSExLHNzckNzc1ZhcnM6bT1cIlwiLGJpbmRpbmdNZXRhZGF0YTpnPXYsaW5saW5lOnk9ITEsaXNUUzpiPSExLG9uRXJyb3I6Uz1GbCxvbldhcm46eD1QbCxjb21wYXRDb25maWc6Q30pe2NvbnN0IHc9dC5yZXBsYWNlKC9cXD8uKiQvLFwiXCIpLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyksaz17c2VsZk5hbWU6dyYmcSh6KHdbMV0pKSxwcmVmaXhJZGVudGlmaWVyczpuLGhvaXN0U3RhdGljOm8sY2FjaGVIYW5kbGVyczpyLG5vZGVUcmFuc2Zvcm1zOnMsZGlyZWN0aXZlVHJhbnNmb3JtczppLHRyYW5zZm9ybUhvaXN0OmwsaXNCdWlsdEluQ29tcG9uZW50OmMsaXNDdXN0b21FbGVtZW50OmEsZXhwcmVzc2lvblBsdWdpbnM6dSxzY29wZUlkOnAsc2xvdHRlZDpmLHNzcjpkLGluU1NSOmgsc3NyQ3NzVmFyczptLGJpbmRpbmdNZXRhZGF0YTpnLGlubGluZTp5LGlzVFM6YixvbkVycm9yOlMsb25XYXJuOngsY29tcGF0Q29uZmlnOkMscm9vdDplLGhlbHBlcnM6bmV3IE1hcCxjb21wb25lbnRzOm5ldyBTZXQsZGlyZWN0aXZlczpuZXcgU2V0LGhvaXN0czpbXSxpbXBvcnRzOltdLGNvbnN0YW50Q2FjaGU6bmV3IE1hcCx0ZW1wczowLGNhY2hlZDowLGlkZW50aWZpZXJzOk9iamVjdC5jcmVhdGUobnVsbCksc2NvcGVzOnt2Rm9yOjAsdlNsb3Q6MCx2UHJlOjAsdk9uY2U6MH0scGFyZW50Om51bGwsY3VycmVudE5vZGU6ZSxjaGlsZEluZGV4OjAsaW5WT25jZTohMSxoZWxwZXIoZSl7Y29uc3QgdD1rLmhlbHBlcnMuZ2V0KGUpfHwwO3JldHVybiBrLmhlbHBlcnMuc2V0KGUsdCsxKSxlfSxyZW1vdmVIZWxwZXIoZSl7Y29uc3QgdD1rLmhlbHBlcnMuZ2V0KGUpO2lmKHQpe2NvbnN0IG49dC0xO24/ay5oZWxwZXJzLnNldChlLG4pOmsuaGVscGVycy5kZWxldGUoZSl9fSxoZWxwZXJTdHJpbmc6ZT0+YF8ke2JjW2suaGVscGVyKGUpXX1gLHJlcGxhY2VOb2RlKGUpe2sucGFyZW50LmNoaWxkcmVuW2suY2hpbGRJbmRleF09ay5jdXJyZW50Tm9kZT1lfSxyZW1vdmVOb2RlKGUpe2NvbnN0IHQ9ZT9rLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKGUpOmsuY3VycmVudE5vZGU/ay5jaGlsZEluZGV4Oi0xO2UmJmUhPT1rLmN1cnJlbnROb2RlP2suY2hpbGRJbmRleD50JiYoay5jaGlsZEluZGV4LS0say5vbk5vZGVSZW1vdmVkKCkpOihrLmN1cnJlbnROb2RlPW51bGwsay5vbk5vZGVSZW1vdmVkKCkpLGsucGFyZW50LmNoaWxkcmVuLnNwbGljZSh0LDEpfSxvbk5vZGVSZW1vdmVkOigpPT57fSxhZGRJZGVudGlmaWVycyhlKXt9LHJlbW92ZUlkZW50aWZpZXJzKGUpe30saG9pc3QoZSl7UChlKSYmKGU9VGMoZSkpLGsuaG9pc3RzLnB1c2goZSk7Y29uc3QgdD1UYyhgX2hvaXN0ZWRfJHtrLmhvaXN0cy5sZW5ndGh9YCwhMSxlLmxvYywyKTtyZXR1cm4gdC5ob2lzdGVkPWUsdH0sY2FjaGU6KGUsdD0hMSk9PmZ1bmN0aW9uKGUsdCxuPSExKXtyZXR1cm57dHlwZToyMCxpbmRleDplLHZhbHVlOnQsaXNWTm9kZTpuLGxvYzpTY319KGsuY2FjaGVkKyssZSx0KX07cmV0dXJuIGt9ZnVuY3Rpb24gTGEoZSx0KXtjb25zdCBuPUJhKGUsdCk7amEoZSxuKSx0LmhvaXN0U3RhdGljJiYkYShlLG4pLHQuc3NyfHxmdW5jdGlvbihlLHQpe2NvbnN0e2hlbHBlcjpufT10LHtjaGlsZHJlbjpvfT1lO2lmKDE9PT1vLmxlbmd0aCl7Y29uc3Qgbj1vWzBdO2lmKE9hKGUsbikmJm4uY29kZWdlbk5vZGUpe2NvbnN0IG89bi5jb2RlZ2VuTm9kZTsxMz09PW8udHlwZSYmbmEobyx0KSxlLmNvZGVnZW5Ob2RlPW99ZWxzZSBlLmNvZGVnZW5Ob2RlPW59ZWxzZSBpZihvLmxlbmd0aD4xKXtsZXQgbz02NDtlLmNvZGVnZW5Ob2RlPXhjKHQsbihNbCksdm9pZCAwLGUuY2hpbGRyZW4sbytcIlwiLHZvaWQgMCx2b2lkIDAsITAsdm9pZCAwLCExKX19KGUsbiksZS5oZWxwZXJzPVsuLi5uLmhlbHBlcnMua2V5cygpXSxlLmNvbXBvbmVudHM9Wy4uLm4uY29tcG9uZW50c10sZS5kaXJlY3RpdmVzPVsuLi5uLmRpcmVjdGl2ZXNdLGUuaW1wb3J0cz1uLmltcG9ydHMsZS5ob2lzdHM9bi5ob2lzdHMsZS50ZW1wcz1uLnRlbXBzLGUuY2FjaGVkPW4uY2FjaGVkfWZ1bmN0aW9uIGphKGUsdCl7dC5jdXJyZW50Tm9kZT1lO2NvbnN0e25vZGVUcmFuc2Zvcm1zOm59PXQsbz1bXTtmb3IobGV0IHM9MDtzPG4ubGVuZ3RoO3MrKyl7Y29uc3Qgcj1uW3NdKGUsdCk7aWYociYmKEUocik/by5wdXNoKC4uLnIpOm8ucHVzaChyKSksIXQuY3VycmVudE5vZGUpcmV0dXJuO2U9dC5jdXJyZW50Tm9kZX1zd2l0Y2goZS50eXBlKXtjYXNlIDM6dC5zc3J8fHQuaGVscGVyKHpsKTticmVhaztjYXNlIDU6dC5zc3J8fHQuaGVscGVyKG5jKTticmVhaztjYXNlIDk6Zm9yKGxldCBuPTA7bjxlLmJyYW5jaGVzLmxlbmd0aDtuKyspamEoZS5icmFuY2hlc1tuXSx0KTticmVhaztjYXNlIDEwOmNhc2UgMTE6Y2FzZSAxOmNhc2UgMDohZnVuY3Rpb24oZSx0KXtsZXQgbj0wO2NvbnN0IG89KCk9PntuLS19O2Zvcig7bjxlLmNoaWxkcmVuLmxlbmd0aDtuKyspe2NvbnN0IHI9ZS5jaGlsZHJlbltuXTtQKHIpfHwodC5wYXJlbnQ9ZSx0LmNoaWxkSW5kZXg9bix0Lm9uTm9kZVJlbW92ZWQ9byxqYShyLHQpKX19KGUsdCl9dC5jdXJyZW50Tm9kZT1lO2xldCByPW8ubGVuZ3RoO2Zvcig7ci0tOylvW3JdKCl9ZnVuY3Rpb24gVWEoZSx0KXtjb25zdCBuPVAoZSk/dD0+dD09PWU6dD0+ZS50ZXN0KHQpO3JldHVybihlLG8pPT57aWYoMT09PWUudHlwZSl7Y29uc3R7cHJvcHM6cn09ZTtpZigzPT09ZS50YWdUeXBlJiZyLnNvbWUoR2MpKXJldHVybjtjb25zdCBzPVtdO2ZvcihsZXQgaT0wO2k8ci5sZW5ndGg7aSsrKXtjb25zdCBsPXJbaV07aWYoNz09PWwudHlwZSYmbihsLm5hbWUpKXtyLnNwbGljZShpLDEpLGktLTtjb25zdCBuPXQoZSxsLG8pO24mJnMucHVzaChuKX19cmV0dXJuIHN9fX1jb25zdCBEYT1lPT5gJHtiY1tlXX06IF8ke2JjW2VdfWA7ZnVuY3Rpb24gSGEoZSx0PXt9KXtjb25zdCBuPWZ1bmN0aW9uKGUse21vZGU6dD1cImZ1bmN0aW9uXCIscHJlZml4SWRlbnRpZmllcnM6bj1cIm1vZHVsZVwiPT09dCxzb3VyY2VNYXA6bz0hMSxmaWxlbmFtZTpyPVwidGVtcGxhdGUudnVlLmh0bWxcIixzY29wZUlkOnM9bnVsbCxvcHRpbWl6ZUltcG9ydHM6aT0hMSxydW50aW1lR2xvYmFsTmFtZTpsPVwiVnVlXCIscnVudGltZU1vZHVsZU5hbWU6Yz1cInZ1ZVwiLHNzclJ1bnRpbWVNb2R1bGVOYW1lOmE9XCJ2dWUvc2VydmVyLXJlbmRlcmVyXCIsc3NyOnU9ITEsaXNUUzpwPSExLGluU1NSOmY9ITF9KXtjb25zdCBkPXttb2RlOnQscHJlZml4SWRlbnRpZmllcnM6bixzb3VyY2VNYXA6byxmaWxlbmFtZTpyLHNjb3BlSWQ6cyxvcHRpbWl6ZUltcG9ydHM6aSxydW50aW1lR2xvYmFsTmFtZTpsLHJ1bnRpbWVNb2R1bGVOYW1lOmMsc3NyUnVudGltZU1vZHVsZU5hbWU6YSxzc3I6dSxpc1RTOnAsaW5TU1I6Zixzb3VyY2U6ZS5sb2Muc291cmNlLGNvZGU6XCJcIixjb2x1bW46MSxsaW5lOjEsb2Zmc2V0OjAsaW5kZW50TGV2ZWw6MCxwdXJlOiExLG1hcDp2b2lkIDAsaGVscGVyOmU9PmBfJHtiY1tlXX1gLHB1c2goZSx0KXtkLmNvZGUrPWV9LGluZGVudCgpe2goKytkLmluZGVudExldmVsKX0sZGVpbmRlbnQoZT0hMSl7ZT8tLWQuaW5kZW50TGV2ZWw6aCgtLWQuaW5kZW50TGV2ZWwpfSxuZXdsaW5lKCl7aChkLmluZGVudExldmVsKX19O2Z1bmN0aW9uIGgoZSl7ZC5wdXNoKFwiXFxuXCIrXCIgIFwiLnJlcGVhdChlKSl9cmV0dXJuIGR9KGUsdCk7dC5vbkNvbnRleHRDcmVhdGVkJiZ0Lm9uQ29udGV4dENyZWF0ZWQobik7Y29uc3R7bW9kZTpvLHB1c2g6cixwcmVmaXhJZGVudGlmaWVyczpzLGluZGVudDppLGRlaW5kZW50OmwsbmV3bGluZTpjLHNzcjphfT1uLHU9ZS5oZWxwZXJzLmxlbmd0aD4wLHA9IXMmJlwibW9kdWxlXCIhPT1vOyFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixuZXdsaW5lOm8scnVudGltZUdsb2JhbE5hbWU6cn09dCxzPXI7aWYoZS5oZWxwZXJzLmxlbmd0aD4wJiYobihgY29uc3QgX1Z1ZSA9ICR7c31cXG5gKSxlLmhvaXN0cy5sZW5ndGgpKXtuKGBjb25zdCB7ICR7W0hsLFdsLHpsLEtsLEdsXS5maWx0ZXIoKHQ9PmUuaGVscGVycy5pbmNsdWRlcyh0KSkpLm1hcChEYSkuam9pbihcIiwgXCIpfSB9ID0gX1Z1ZVxcbmApfShmdW5jdGlvbihlLHQpe2lmKCFlLmxlbmd0aClyZXR1cm47dC5wdXJlPSEwO2NvbnN0e3B1c2g6bixuZXdsaW5lOm99PXQ7bygpO2ZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7cisrKXtjb25zdCBzPWVbcl07cyYmKG4oYGNvbnN0IF9ob2lzdGVkXyR7cisxfSA9IGApLEdhKHMsdCksbygpKX10LnB1cmU9ITF9KShlLmhvaXN0cyx0KSxvKCksbihcInJldHVybiBcIil9KGUsbik7aWYocihgZnVuY3Rpb24gJHthP1wic3NyUmVuZGVyXCI6XCJyZW5kZXJcIn0oJHsoYT9bXCJfY3R4XCIsXCJfcHVzaFwiLFwiX3BhcmVudFwiLFwiX2F0dHJzXCJdOltcIl9jdHhcIixcIl9jYWNoZVwiXSkuam9pbihcIiwgXCIpfSkge2ApLGkoKSxwJiYocihcIndpdGggKF9jdHgpIHtcIiksaSgpLHUmJihyKGBjb25zdCB7ICR7ZS5oZWxwZXJzLm1hcChEYSkuam9pbihcIiwgXCIpfSB9ID0gX1Z1ZWApLHIoXCJcXG5cIiksYygpKSksZS5jb21wb25lbnRzLmxlbmd0aCYmKFdhKGUuY29tcG9uZW50cyxcImNvbXBvbmVudFwiLG4pLChlLmRpcmVjdGl2ZXMubGVuZ3RofHxlLnRlbXBzPjApJiZjKCkpLGUuZGlyZWN0aXZlcy5sZW5ndGgmJihXYShlLmRpcmVjdGl2ZXMsXCJkaXJlY3RpdmVcIixuKSxlLnRlbXBzPjAmJmMoKSksZS50ZW1wcz4wKXtyKFwibGV0IFwiKTtmb3IobGV0IHQ9MDt0PGUudGVtcHM7dCsrKXIoYCR7dD4wP1wiLCBcIjpcIlwifV90ZW1wJHt0fWApfXJldHVybihlLmNvbXBvbmVudHMubGVuZ3RofHxlLmRpcmVjdGl2ZXMubGVuZ3RofHxlLnRlbXBzKSYmKHIoXCJcXG5cIiksYygpKSxhfHxyKFwicmV0dXJuIFwiKSxlLmNvZGVnZW5Ob2RlP0dhKGUuY29kZWdlbk5vZGUsbik6cihcIm51bGxcIikscCYmKGwoKSxyKFwifVwiKSksbCgpLHIoXCJ9XCIpLHthc3Q6ZSxjb2RlOm4uY29kZSxwcmVhbWJsZTpcIlwiLG1hcDpuLm1hcD9uLm1hcC50b0pTT04oKTp2b2lkIDB9fWZ1bmN0aW9uIFdhKGUsdCx7aGVscGVyOm4scHVzaDpvLG5ld2xpbmU6cixpc1RTOnN9KXtjb25zdCBpPW4oXCJjb21wb25lbnRcIj09PXQ/cWw6WWwpO2ZvcihsZXQgbD0wO2w8ZS5sZW5ndGg7bCsrKXtsZXQgbj1lW2xdO2NvbnN0IGM9bi5lbmRzV2l0aChcIl9fc2VsZlwiKTtjJiYobj1uLnNsaWNlKDAsLTYpKSxvKGBjb25zdCAke3RhKG4sdCl9ID0gJHtpfSgke0pTT04uc3RyaW5naWZ5KG4pfSR7Yz9cIiwgdHJ1ZVwiOlwiXCJ9KSR7cz9cIiFcIjpcIlwifWApLGw8ZS5sZW5ndGgtMSYmcigpfX1mdW5jdGlvbiB6YShlLHQpe2NvbnN0IG49ZS5sZW5ndGg+M3x8ITE7dC5wdXNoKFwiW1wiKSxuJiZ0LmluZGVudCgpLEthKGUsdCxuKSxuJiZ0LmRlaW5kZW50KCksdC5wdXNoKFwiXVwiKX1mdW5jdGlvbiBLYShlLHQsbj0hMSxvPSEwKXtjb25zdHtwdXNoOnIsbmV3bGluZTpzfT10O2ZvcihsZXQgaT0wO2k8ZS5sZW5ndGg7aSsrKXtjb25zdCBsPWVbaV07UChsKT9yKGwpOkUobCk/emEobCx0KTpHYShsLHQpLGk8ZS5sZW5ndGgtMSYmKG4/KG8mJnIoXCIsXCIpLHMoKSk6byYmcihcIiwgXCIpKX19ZnVuY3Rpb24gR2EoZSx0KXtpZihQKGUpKXQucHVzaChlKTtlbHNlIGlmKEEoZSkpdC5wdXNoKHQuaGVscGVyKGUpKTtlbHNlIHN3aXRjaChlLnR5cGUpe2Nhc2UgMTpjYXNlIDk6Y2FzZSAxMTpjYXNlIDEyOkdhKGUuY29kZWdlbk5vZGUsdCk7YnJlYWs7Y2FzZSAyOiFmdW5jdGlvbihlLHQpe3QucHVzaChKU09OLnN0cmluZ2lmeShlLmNvbnRlbnQpLGUpfShlLHQpO2JyZWFrO2Nhc2UgNDpxYShlLHQpO2JyZWFrO2Nhc2UgNTohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10O3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO24oYCR7byhuYyl9KGApLEdhKGUuY29udGVudCx0KSxuKFwiKVwiKX0oZSx0KTticmVhaztjYXNlIDg6SmEoZSx0KTticmVhaztjYXNlIDM6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLHB1cmU6cn09dDtyJiZuKFwiLyojX19QVVJFX18qL1wiKTtuKGAke28oemwpfSgke0pTT04uc3RyaW5naWZ5KGUuY29udGVudCl9KWAsZSl9KGUsdCk7YnJlYWs7Y2FzZSAxMzohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10LHt0YWc6cyxwcm9wczppLGNoaWxkcmVuOmwscGF0Y2hGbGFnOmMsZHluYW1pY1Byb3BzOmEsZGlyZWN0aXZlczp1LGlzQmxvY2s6cCxkaXNhYmxlVHJhY2tpbmc6Zixpc0NvbXBvbmVudDpkfT1lO3UmJm4obyhRbCkrXCIoXCIpO3AmJm4oYCgke28oamwpfSgke2Y/XCJ0cnVlXCI6XCJcIn0pLCBgKTtyJiZuKFwiLyojX19QVVJFX18qL1wiKTtjb25zdCBoPXA/WmModC5pblNTUixkKTpZYyh0LmluU1NSLGQpO24obyhoKStcIihcIixlKSxLYShmdW5jdGlvbihlKXtsZXQgdD1lLmxlbmd0aDtmb3IoO3QtLSYmbnVsbD09ZVt0XTspO3JldHVybiBlLnNsaWNlKDAsdCsxKS5tYXAoKGU9PmV8fFwibnVsbFwiKSl9KFtzLGksbCxjLGFdKSx0KSxuKFwiKVwiKSxwJiZuKFwiKVwiKTt1JiYobihcIiwgXCIpLEdhKHUsdCksbihcIilcIikpfShlLHQpO2JyZWFrO2Nhc2UgMTQ6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLHB1cmU6cn09dCxzPVAoZS5jYWxsZWUpP2UuY2FsbGVlOm8oZS5jYWxsZWUpO3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO24ocytcIihcIixlKSxLYShlLmFyZ3VtZW50cyx0KSxuKFwiKVwiKX0oZSx0KTticmVhaztjYXNlIDE1OiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixpbmRlbnQ6byxkZWluZGVudDpyLG5ld2xpbmU6c309dCx7cHJvcGVydGllczppfT1lO2lmKCFpLmxlbmd0aClyZXR1cm4gdm9pZCBuKFwie31cIixlKTtjb25zdCBsPWkubGVuZ3RoPjF8fCExO24obD9cIntcIjpcInsgXCIpLGwmJm8oKTtmb3IobGV0IGM9MDtjPGkubGVuZ3RoO2MrKyl7Y29uc3R7a2V5OmUsdmFsdWU6b309aVtjXTtZYShlLHQpLG4oXCI6IFwiKSxHYShvLHQpLGM8aS5sZW5ndGgtMSYmKG4oXCIsXCIpLHMoKSl9bCYmcigpLG4obD9cIn1cIjpcIiB9XCIpfShlLHQpO2JyZWFrO2Nhc2UgMTc6IWZ1bmN0aW9uKGUsdCl7emEoZS5lbGVtZW50cyx0KX0oZSx0KTticmVhaztjYXNlIDE4OiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixpbmRlbnQ6byxkZWluZGVudDpyfT10LHtwYXJhbXM6cyxyZXR1cm5zOmksYm9keTpsLG5ld2xpbmU6Yyxpc1Nsb3Q6YX09ZTthJiZuKGBfJHtiY1ttY119KGApO24oXCIoXCIsZSksRShzKT9LYShzLHQpOnMmJkdhKHMsdCk7bihcIikgPT4gXCIpLChjfHxsKSYmKG4oXCJ7XCIpLG8oKSk7aT8oYyYmbihcInJldHVybiBcIiksRShpKT96YShpLHQpOkdhKGksdCkpOmwmJkdhKGwsdCk7KGN8fGwpJiYocigpLG4oXCJ9XCIpKTthJiZuKFwiKVwiKX0oZSx0KTticmVhaztjYXNlIDE5OiFmdW5jdGlvbihlLHQpe2NvbnN0e3Rlc3Q6bixjb25zZXF1ZW50Om8sYWx0ZXJuYXRlOnIsbmV3bGluZTpzfT1lLHtwdXNoOmksaW5kZW50OmwsZGVpbmRlbnQ6YyxuZXdsaW5lOmF9PXQ7aWYoND09PW4udHlwZSl7Y29uc3QgZT0hTWMobi5jb250ZW50KTtlJiZpKFwiKFwiKSxxYShuLHQpLGUmJmkoXCIpXCIpfWVsc2UgaShcIihcIiksR2Eobix0KSxpKFwiKVwiKTtzJiZsKCksdC5pbmRlbnRMZXZlbCsrLHN8fGkoXCIgXCIpLGkoXCI/IFwiKSxHYShvLHQpLHQuaW5kZW50TGV2ZWwtLSxzJiZhKCksc3x8aShcIiBcIiksaShcIjogXCIpO2NvbnN0IHU9MTk9PT1yLnR5cGU7dXx8dC5pbmRlbnRMZXZlbCsrO0dhKHIsdCksdXx8dC5pbmRlbnRMZXZlbC0tO3MmJmMoITApfShlLHQpO2JyZWFrO2Nhc2UgMjA6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLGluZGVudDpyLGRlaW5kZW50OnMsbmV3bGluZTppfT10O24oYF9jYWNoZVske2UuaW5kZXh9XSB8fCAoYCksZS5pc1ZOb2RlJiYocigpLG4oYCR7byhmYyl9KC0xKSxgKSxpKCkpO24oYF9jYWNoZVske2UuaW5kZXh9XSA9IGApLEdhKGUudmFsdWUsdCksZS5pc1ZOb2RlJiYobihcIixcIiksaSgpLG4oYCR7byhmYyl9KDEpLGApLGkoKSxuKGBfY2FjaGVbJHtlLmluZGV4fV1gKSxzKCkpO24oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgMjE6S2EoZS5ib2R5LHQsITAsITEpfX1mdW5jdGlvbiBxYShlLHQpe2NvbnN0e2NvbnRlbnQ6bixpc1N0YXRpYzpvfT1lO3QucHVzaChvP0pTT04uc3RyaW5naWZ5KG4pOm4sZSl9ZnVuY3Rpb24gSmEoZSx0KXtmb3IobGV0IG49MDtuPGUuY2hpbGRyZW4ubGVuZ3RoO24rKyl7Y29uc3Qgbz1lLmNoaWxkcmVuW25dO1Aobyk/dC5wdXNoKG8pOkdhKG8sdCl9fWZ1bmN0aW9uIFlhKGUsdCl7Y29uc3R7cHVzaDpufT10O2lmKDg9PT1lLnR5cGUpbihcIltcIiksSmEoZSx0KSxuKFwiXVwiKTtlbHNlIGlmKGUuaXNTdGF0aWMpe24oTWMoZS5jb250ZW50KT9lLmNvbnRlbnQ6SlNPTi5zdHJpbmdpZnkoZS5jb250ZW50KSxlKX1lbHNlIG4oYFske2UuY29udGVudH1dYCxlKX1jb25zdCBaYT1VYSgvXihpZnxlbHNlfGVsc2UtaWYpJC8sKChlLHQsbik9PmZ1bmN0aW9uKGUsdCxuLG8pe2lmKCEoXCJlbHNlXCI9PT10Lm5hbWV8fHQuZXhwJiZ0LmV4cC5jb250ZW50LnRyaW0oKSkpe3QuZXhwPVRjKFwidHJ1ZVwiLCExLHQuZXhwP3QuZXhwLmxvYzplLmxvYyl9aWYoXCJpZlwiPT09dC5uYW1lKXtjb25zdCByPVFhKGUsdCkscz17dHlwZTo5LGxvYzplLmxvYyxicmFuY2hlczpbcl19O2lmKG4ucmVwbGFjZU5vZGUocyksbylyZXR1cm4gbyhzLHIsITApfWVsc2V7Y29uc3Qgcj1uLnBhcmVudC5jaGlsZHJlbjtsZXQgcz1yLmluZGV4T2YoZSk7Zm9yKDtzLS0gPj0tMTspe2NvbnN0IGk9cltzXTtpZighaXx8MiE9PWkudHlwZXx8aS5jb250ZW50LnRyaW0oKS5sZW5ndGgpe2lmKGkmJjk9PT1pLnR5cGUpe24ucmVtb3ZlTm9kZSgpO2NvbnN0IHI9UWEoZSx0KTtpLmJyYW5jaGVzLnB1c2gocik7Y29uc3Qgcz1vJiZvKGksciwhMSk7amEocixuKSxzJiZzKCksbi5jdXJyZW50Tm9kZT1udWxsfWJyZWFrfW4ucmVtb3ZlTm9kZShpKX19fShlLHQsbiwoKGUsdCxvKT0+e2NvbnN0IHI9bi5wYXJlbnQuY2hpbGRyZW47bGV0IHM9ci5pbmRleE9mKGUpLGk9MDtmb3IoO3MtLSA+PTA7KXtjb25zdCBlPXJbc107ZSYmOT09PWUudHlwZSYmKGkrPWUuYnJhbmNoZXMubGVuZ3RoKX1yZXR1cm4oKT0+e2lmKG8pZS5jb2RlZ2VuTm9kZT1YYSh0LGksbik7ZWxzZXtjb25zdCBvPWZ1bmN0aW9uKGUpe2Zvcig7OylpZigxOT09PWUudHlwZSl7aWYoMTkhPT1lLmFsdGVybmF0ZS50eXBlKXJldHVybiBlO2U9ZS5hbHRlcm5hdGV9ZWxzZSAyMD09PWUudHlwZSYmKGU9ZS52YWx1ZSl9KGUuY29kZWdlbk5vZGUpO28uYWx0ZXJuYXRlPVhhKHQsaStlLmJyYW5jaGVzLmxlbmd0aC0xLG4pfX19KSkpKTtmdW5jdGlvbiBRYShlLHQpe2NvbnN0IG49Mz09PWUudGFnVHlwZTtyZXR1cm57dHlwZToxMCxsb2M6ZS5sb2MsY29uZGl0aW9uOlwiZWxzZVwiPT09dC5uYW1lP3ZvaWQgMDp0LmV4cCxjaGlsZHJlbjpuJiYhSGMoZSxcImZvclwiKT9lLmNoaWxkcmVuOltlXSx1c2VyS2V5OldjKGUsXCJrZXlcIiksaXNUZW1wbGF0ZUlmOm59fWZ1bmN0aW9uIFhhKGUsdCxuKXtyZXR1cm4gZS5jb25kaXRpb24/T2MoZS5jb25kaXRpb24sZXUoZSx0LG4pLEVjKG4uaGVscGVyKHpsKSxbJ1wiXCInLFwidHJ1ZVwiXSkpOmV1KGUsdCxuKX1mdW5jdGlvbiBldShlLHQsbil7Y29uc3R7aGVscGVyOm99PW4scj1rYyhcImtleVwiLFRjKGAke3R9YCwhMSxTYywyKSkse2NoaWxkcmVuOnN9PWUsaT1zWzBdO2lmKDEhPT1zLmxlbmd0aHx8MSE9PWkudHlwZSl7aWYoMT09PXMubGVuZ3RoJiYxMT09PWkudHlwZSl7Y29uc3QgZT1pLmNvZGVnZW5Ob2RlO3JldHVybiBlYShlLHIsbiksZX17bGV0IHQ9NjQ7cmV0dXJuIHhjKG4sbyhNbCksd2MoW3JdKSxzLHQrXCJcIix2b2lkIDAsdm9pZCAwLCEwLCExLCExLGUubG9jKX19e2NvbnN0IGU9aS5jb2RlZ2VuTm9kZSx0PTE0PT09KGw9ZSkudHlwZSYmbC5jYWxsZWU9PT15Yz9sLmFyZ3VtZW50c1sxXS5yZXR1cm5zOmw7cmV0dXJuIDEzPT09dC50eXBlJiZuYSh0LG4pLGVhKHQscixuKSxlfXZhciBsfWNvbnN0IHR1PVVhKFwiZm9yXCIsKChlLHQsbik9Pntjb25zdHtoZWxwZXI6byxyZW1vdmVIZWxwZXI6cn09bjtyZXR1cm4gZnVuY3Rpb24oZSx0LG4sbyl7aWYoIXQuZXhwKXJldHVybjtjb25zdCByPXN1KHQuZXhwKTtpZighcilyZXR1cm47Y29uc3R7c2NvcGVzOnN9PW4se3NvdXJjZTppLHZhbHVlOmwsa2V5OmMsaW5kZXg6YX09cix1PXt0eXBlOjExLGxvYzp0LmxvYyxzb3VyY2U6aSx2YWx1ZUFsaWFzOmwsa2V5QWxpYXM6YyxvYmplY3RJbmRleEFsaWFzOmEscGFyc2VSZXN1bHQ6cixjaGlsZHJlbjpxYyhlKT9lLmNoaWxkcmVuOltlXX07bi5yZXBsYWNlTm9kZSh1KSxzLnZGb3IrKztjb25zdCBwPW8mJm8odSk7cmV0dXJuKCk9PntzLnZGb3ItLSxwJiZwKCl9fShlLHQsbiwodD0+e2NvbnN0IHM9RWMobyhYbCksW3Quc291cmNlXSksaT1xYyhlKSxsPUhjKGUsXCJtZW1vXCIpLGM9V2MoZSxcImtleVwiKSxhPWMmJig2PT09Yy50eXBlP1RjKGMudmFsdWUuY29udGVudCwhMCk6Yy5leHApLHU9Yz9rYyhcImtleVwiLGEpOm51bGwscD00PT09dC5zb3VyY2UudHlwZSYmdC5zb3VyY2UuY29uc3RUeXBlPjAsZj1wPzY0OmM/MTI4OjI1NjtyZXR1cm4gdC5jb2RlZ2VuTm9kZT14YyhuLG8oTWwpLHZvaWQgMCxzLGYrXCJcIix2b2lkIDAsdm9pZCAwLCEwLCFwLCExLGUubG9jKSwoKT0+e2xldCBjO2NvbnN0e2NoaWxkcmVuOmZ9PXQsZD0xIT09Zi5sZW5ndGh8fDEhPT1mWzBdLnR5cGUsaD1KYyhlKT9lOmkmJjE9PT1lLmNoaWxkcmVuLmxlbmd0aCYmSmMoZS5jaGlsZHJlblswXSk/ZS5jaGlsZHJlblswXTpudWxsO2lmKGg/KGM9aC5jb2RlZ2VuTm9kZSxpJiZ1JiZlYShjLHUsbikpOmQ/Yz14YyhuLG8oTWwpLHU/d2MoW3VdKTp2b2lkIDAsZS5jaGlsZHJlbixcIjY0XCIsdm9pZCAwLHZvaWQgMCwhMCx2b2lkIDAsITEpOihjPWZbMF0uY29kZWdlbk5vZGUsaSYmdSYmZWEoYyx1LG4pLGMuaXNCbG9jayE9PSFwJiYoYy5pc0Jsb2NrPyhyKGpsKSxyKFpjKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKTpyKFljKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKSxjLmlzQmxvY2s9IXAsYy5pc0Jsb2NrPyhvKGpsKSxvKFpjKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKTpvKFljKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKSxsKXtjb25zdCBlPSRjKGx1KHQucGFyc2VSZXN1bHQsW1RjKFwiX2NhY2hlZFwiKV0pKTtlLmJvZHk9e3R5cGU6MjEsYm9keTpbTmMoW1wiY29uc3QgX21lbW8gPSAoXCIsbC5leHAsXCIpXCJdKSxOYyhbXCJpZiAoX2NhY2hlZFwiLC4uLmE/W1wiICYmIF9jYWNoZWQua2V5ID09PSBcIixhXTpbXSxgICYmICR7bi5oZWxwZXJTdHJpbmcoX2MpfShfY2FjaGVkLCBfbWVtbykpIHJldHVybiBfY2FjaGVkYF0pLE5jKFtcImNvbnN0IF9pdGVtID0gXCIsY10pLFRjKFwiX2l0ZW0ubWVtbyA9IF9tZW1vXCIpLFRjKFwicmV0dXJuIF9pdGVtXCIpXSxsb2M6U2N9LHMuYXJndW1lbnRzLnB1c2goZSxUYyhcIl9jYWNoZVwiKSxUYyhTdHJpbmcobi5jYWNoZWQrKykpKX1lbHNlIHMuYXJndW1lbnRzLnB1c2goJGMobHUodC5wYXJzZVJlc3VsdCksYywhMCkpfX0pKX0pKTtjb25zdCBudT0vKFtcXHNcXFNdKj8pXFxzKyg/OmlufG9mKVxccysoW1xcc1xcU10qKS8sb3U9LywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvLHJ1PS9eXFwofFxcKSQvZztmdW5jdGlvbiBzdShlLHQpe2NvbnN0IG49ZS5sb2Msbz1lLmNvbnRlbnQscj1vLm1hdGNoKG51KTtpZighcilyZXR1cm47Y29uc3RbLHMsaV09cixsPXtzb3VyY2U6aXUobixpLnRyaW0oKSxvLmluZGV4T2YoaSxzLmxlbmd0aCkpLHZhbHVlOnZvaWQgMCxrZXk6dm9pZCAwLGluZGV4OnZvaWQgMH07bGV0IGM9cy50cmltKCkucmVwbGFjZShydSxcIlwiKS50cmltKCk7Y29uc3QgYT1zLmluZGV4T2YoYyksdT1jLm1hdGNoKG91KTtpZih1KXtjPWMucmVwbGFjZShvdSxcIlwiKS50cmltKCk7Y29uc3QgZT11WzFdLnRyaW0oKTtsZXQgdDtpZihlJiYodD1vLmluZGV4T2YoZSxhK2MubGVuZ3RoKSxsLmtleT1pdShuLGUsdCkpLHVbMl0pe2NvbnN0IHI9dVsyXS50cmltKCk7ciYmKGwuaW5kZXg9aXUobixyLG8uaW5kZXhPZihyLGwua2V5P3QrZS5sZW5ndGg6YStjLmxlbmd0aCkpKX19cmV0dXJuIGMmJihsLnZhbHVlPWl1KG4sYyxhKSksbH1mdW5jdGlvbiBpdShlLHQsbil7cmV0dXJuIFRjKHQsITEsamMoZSxuLHQubGVuZ3RoKSl9ZnVuY3Rpb24gbHUoe3ZhbHVlOmUsa2V5OnQsaW5kZXg6bn0sbz1bXSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2xldCB0PWUubGVuZ3RoO2Zvcig7dC0tJiYhZVt0XTspO3JldHVybiBlLnNsaWNlKDAsdCsxKS5tYXAoKChlLHQpPT5lfHxUYyhcIl9cIi5yZXBlYXQodCsxKSwhMSkpKX0oW2UsdCxuLC4uLm9dKX1jb25zdCBjdT1UYyhcInVuZGVmaW5lZFwiLCExKSxhdT0oZSx0KT0+e2lmKDE9PT1lLnR5cGUmJigxPT09ZS50YWdUeXBlfHwzPT09ZS50YWdUeXBlKSl7Y29uc3Qgbj1IYyhlLFwic2xvdFwiKTtpZihuKXJldHVybiB0LnNjb3Blcy52U2xvdCsrLCgpPT57dC5zY29wZXMudlNsb3QtLX19fSx1dT0oZSx0LG4pPT4kYyhlLHQsITEsITAsdC5sZW5ndGg/dFswXS5sb2M6bik7ZnVuY3Rpb24gcHUoZSx0LG49dXUpe3QuaGVscGVyKG1jKTtjb25zdHtjaGlsZHJlbjpvLGxvYzpyfT1lLHM9W10saT1bXTtsZXQgbD10LnNjb3Blcy52U2xvdD4wfHx0LnNjb3Blcy52Rm9yPjA7Y29uc3QgYz1IYyhlLFwic2xvdFwiLCEwKTtpZihjKXtjb25zdHthcmc6ZSxleHA6dH09YztlJiYhUmMoZSkmJihsPSEwKSxzLnB1c2goa2MoZXx8VGMoXCJkZWZhdWx0XCIsITApLG4odCxvLHIpKSl9bGV0IGE9ITEsdT0hMTtjb25zdCBwPVtdLGY9bmV3IFNldDtmb3IobGV0IG09MDttPG8ubGVuZ3RoO20rKyl7Y29uc3QgZT1vW21dO2xldCByO2lmKCFxYyhlKXx8IShyPUhjKGUsXCJzbG90XCIsITApKSl7MyE9PWUudHlwZSYmcC5wdXNoKGUpO2NvbnRpbnVlfWlmKGMpYnJlYWs7YT0hMDtjb25zdHtjaGlsZHJlbjpkLGxvYzpofT1lLHthcmc6Zz1UYyhcImRlZmF1bHRcIiwhMCksZXhwOnZ9PXI7bGV0IHk7UmMoZyk/eT1nP2cuY29udGVudDpcImRlZmF1bHRcIjpsPSEwO2NvbnN0IF89bih2LGQsaCk7bGV0IGIsUyx4O2lmKGI9SGMoZSxcImlmXCIpKWw9ITAsaS5wdXNoKE9jKGIuZXhwLGZ1KGcsXyksY3UpKTtlbHNlIGlmKFM9SGMoZSwvXmVsc2UoLWlmKT8kLywhMCkpe2xldCBlLHQ9bTtmb3IoO3QtLSYmKGU9b1t0XSwzPT09ZS50eXBlKTspO2lmKGUmJnFjKGUpJiZIYyhlLFwiaWZcIikpe28uc3BsaWNlKG0sMSksbS0tO2xldCBlPWlbaS5sZW5ndGgtMV07Zm9yKDsxOT09PWUuYWx0ZXJuYXRlLnR5cGU7KWU9ZS5hbHRlcm5hdGU7ZS5hbHRlcm5hdGU9Uy5leHA/T2MoUy5leHAsZnUoZyxfKSxjdSk6ZnUoZyxfKX19ZWxzZSBpZih4PUhjKGUsXCJmb3JcIikpe2w9ITA7Y29uc3QgZT14LnBhcnNlUmVzdWx0fHxzdSh4LmV4cCk7ZSYmaS5wdXNoKEVjKHQuaGVscGVyKFhsKSxbZS5zb3VyY2UsJGMobHUoZSksZnUoZyxfKSwhMCldKSl9ZWxzZXtpZih5KXtpZihmLmhhcyh5KSljb250aW51ZTtmLmFkZCh5KSxcImRlZmF1bHRcIj09PXkmJih1PSEwKX1zLnB1c2goa2MoZyxfKSl9fWlmKCFjKXtjb25zdCBlPShlLHQpPT5rYyhcImRlZmF1bHRcIixuKGUsdCxyKSk7YT9wLmxlbmd0aCYmcC5zb21lKChlPT5odShlKSkpJiYodXx8cy5wdXNoKGUodm9pZCAwLHApKSk6cy5wdXNoKGUodm9pZCAwLG8pKX1jb25zdCBkPWw/MjpkdShlLmNoaWxkcmVuKT8zOjE7bGV0IGg9d2Mocy5jb25jYXQoa2MoXCJfXCIsVGMoZCtcIlwiLCExKSkpLHIpO3JldHVybiBpLmxlbmd0aCYmKGg9RWModC5oZWxwZXIodGMpLFtoLENjKGkpXSkpLHtzbG90czpoLGhhc0R5bmFtaWNTbG90czpsfX1mdW5jdGlvbiBmdShlLHQpe3JldHVybiB3Yyhba2MoXCJuYW1lXCIsZSksa2MoXCJmblwiLHQpXSl9ZnVuY3Rpb24gZHUoZSl7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2NvbnN0IG49ZVt0XTtzd2l0Y2gobi50eXBlKXtjYXNlIDE6aWYoMj09PW4udGFnVHlwZXx8ZHUobi5jaGlsZHJlbikpcmV0dXJuITA7YnJlYWs7Y2FzZSA5OmlmKGR1KG4uYnJhbmNoZXMpKXJldHVybiEwO2JyZWFrO2Nhc2UgMTA6Y2FzZSAxMTppZihkdShuLmNoaWxkcmVuKSlyZXR1cm4hMH19cmV0dXJuITF9ZnVuY3Rpb24gaHUoZSl7cmV0dXJuIDIhPT1lLnR5cGUmJjEyIT09ZS50eXBlfHwoMj09PWUudHlwZT8hIWUuY29udGVudC50cmltKCk6aHUoZS5jb250ZW50KSl9Y29uc3QgbXU9bmV3IFdlYWtNYXAsZ3U9KGUsdCk9PmZ1bmN0aW9uKCl7aWYoMSE9PShlPXQuY3VycmVudE5vZGUpLnR5cGV8fDAhPT1lLnRhZ1R5cGUmJjEhPT1lLnRhZ1R5cGUpcmV0dXJuO2NvbnN0e3RhZzpuLHByb3BzOm99PWUscj0xPT09ZS50YWdUeXBlO2xldCBzPXI/ZnVuY3Rpb24oZSx0LG49ITEpe2xldHt0YWc6b309ZTtjb25zdCByPWJ1KG8pLHM9V2MoZSxcImlzXCIpO2lmKHMpaWYocil7Y29uc3QgZT02PT09cy50eXBlP3MudmFsdWUmJlRjKHMudmFsdWUuY29udGVudCwhMCk6cy5leHA7aWYoZSlyZXR1cm4gRWModC5oZWxwZXIoSmwpLFtlXSl9ZWxzZSA2PT09cy50eXBlJiZzLnZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikmJihvPXMudmFsdWUuY29udGVudC5zbGljZSg0KSk7Y29uc3QgaT0hciYmSGMoZSxcImlzXCIpO2lmKGkmJmkuZXhwKXJldHVybiBFYyh0LmhlbHBlcihKbCksW2kuZXhwXSk7Y29uc3QgbD1QYyhvKXx8dC5pc0J1aWx0SW5Db21wb25lbnQobyk7aWYobClyZXR1cm4gbnx8dC5oZWxwZXIobCksbDtyZXR1cm4gdC5oZWxwZXIocWwpLHQuY29tcG9uZW50cy5hZGQobyksdGEobyxcImNvbXBvbmVudFwiKX0oZSx0KTpgXCIke259XCJgO2NvbnN0IGk9TShzKSYmcy5jYWxsZWU9PT1KbDtsZXQgbCxjLGEsdSxwLGYsZD0wLGg9aXx8cz09PVZsfHxzPT09SWx8fCFyJiYoXCJzdmdcIj09PW58fFwiZm9yZWlnbk9iamVjdFwiPT09bik7aWYoby5sZW5ndGg+MCl7Y29uc3Qgbj12dShlLHQsdm9pZCAwLHIsaSk7bD1uLnByb3BzLGQ9bi5wYXRjaEZsYWcscD1uLmR5bmFtaWNQcm9wTmFtZXM7Y29uc3Qgbz1uLmRpcmVjdGl2ZXM7Zj1vJiZvLmxlbmd0aD9DYyhvLm1hcCgoZT0+ZnVuY3Rpb24oZSx0KXtjb25zdCBuPVtdLG89bXUuZ2V0KGUpO28/bi5wdXNoKHQuaGVscGVyU3RyaW5nKG8pKToodC5oZWxwZXIoWWwpLHQuZGlyZWN0aXZlcy5hZGQoZS5uYW1lKSxuLnB1c2godGEoZS5uYW1lLFwiZGlyZWN0aXZlXCIpKSk7Y29uc3R7bG9jOnJ9PWU7ZS5leHAmJm4ucHVzaChlLmV4cCk7ZS5hcmcmJihlLmV4cHx8bi5wdXNoKFwidm9pZCAwXCIpLG4ucHVzaChlLmFyZykpO2lmKE9iamVjdC5rZXlzKGUubW9kaWZpZXJzKS5sZW5ndGgpe2UuYXJnfHwoZS5leHB8fG4ucHVzaChcInZvaWQgMFwiKSxuLnB1c2goXCJ2b2lkIDBcIikpO2NvbnN0IHQ9VGMoXCJ0cnVlXCIsITEscik7bi5wdXNoKHdjKGUubW9kaWZpZXJzLm1hcCgoZT0+a2MoZSx0KSkpLHIpKX1yZXR1cm4gQ2MobixlLmxvYyl9KGUsdCkpKSk6dm9pZCAwLG4uc2hvdWxkVXNlQmxvY2smJihoPSEwKX1pZihlLmNoaWxkcmVuLmxlbmd0aD4wKXtzPT09QmwmJihoPSEwLGR8PTEwMjQpO2lmKHImJnMhPT1WbCYmcyE9PUJsKXtjb25zdHtzbG90czpuLGhhc0R5bmFtaWNTbG90czpvfT1wdShlLHQpO2M9bixvJiYoZHw9MTAyNCl9ZWxzZSBpZigxPT09ZS5jaGlsZHJlbi5sZW5ndGgmJnMhPT1WbCl7Y29uc3Qgbj1lLmNoaWxkcmVuWzBdLG89bi50eXBlLHI9NT09PW98fDg9PT1vO3ImJjA9PT1GYShuLHQpJiYoZHw9MSksYz1yfHwyPT09bz9uOmUuY2hpbGRyZW59ZWxzZSBjPWUuY2hpbGRyZW59MCE9PWQmJihhPVN0cmluZyhkKSxwJiZwLmxlbmd0aCYmKHU9ZnVuY3Rpb24oZSl7bGV0IHQ9XCJbXCI7Zm9yKGxldCBuPTAsbz1lLmxlbmd0aDtuPG87bisrKXQrPUpTT04uc3RyaW5naWZ5KGVbbl0pLG48by0xJiYodCs9XCIsIFwiKTtyZXR1cm4gdCtcIl1cIn0ocCkpKSxlLmNvZGVnZW5Ob2RlPXhjKHQscyxsLGMsYSx1LGYsISFoLCExLHIsZS5sb2MpfTtmdW5jdGlvbiB2dShlLHQsbj1lLnByb3BzLG8scixzPSExKXtjb25zdHt0YWc6aSxsb2M6bCxjaGlsZHJlbjpjfT1lO2xldCBhPVtdO2NvbnN0IHU9W10scD1bXSxmPWMubGVuZ3RoPjA7bGV0IGQ9ITEsaD0wLG09ITEsZz0hMSx2PSExLHk9ITEsXz0hMSxiPSExO2NvbnN0IFM9W10sQz0oe2tleTplLHZhbHVlOm59KT0+e2lmKFJjKGUpKXtjb25zdCBzPWUuY29udGVudCxpPXgocyk7aWYoIWl8fG8mJiFyfHxcIm9uY2xpY2tcIj09PXMudG9Mb3dlckNhc2UoKXx8XCJvblVwZGF0ZTptb2RlbFZhbHVlXCI9PT1zfHxVKHMpfHwoeT0hMCksaSYmVShzKSYmKGI9ITApLDIwPT09bi50eXBlfHwoND09PW4udHlwZXx8OD09PW4udHlwZSkmJkZhKG4sdCk+MClyZXR1cm47XCJyZWZcIj09PXM/bT0hMDpcImNsYXNzXCI9PT1zP2c9ITA6XCJzdHlsZVwiPT09cz92PSEwOlwia2V5XCI9PT1zfHxTLmluY2x1ZGVzKHMpfHxTLnB1c2gocyksIW98fFwiY2xhc3NcIiE9PXMmJlwic3R5bGVcIiE9PXN8fFMuaW5jbHVkZXMocyl8fFMucHVzaChzKX1lbHNlIF89ITB9O2ZvcihsZXQgeD0wO3g8bi5sZW5ndGg7eCsrKXtjb25zdCBvPW5beF07aWYoNj09PW8udHlwZSl7Y29uc3R7bG9jOmUsbmFtZTpuLHZhbHVlOnJ9PW87bGV0IHM9ITA7aWYoXCJyZWZcIj09PW4mJihtPSEwLHQuc2NvcGVzLnZGb3I+MCYmYS5wdXNoKGtjKFRjKFwicmVmX2ZvclwiLCEwKSxUYyhcInRydWVcIikpKSksXCJpc1wiPT09biYmKGJ1KGkpfHxyJiZyLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikpKWNvbnRpbnVlO2EucHVzaChrYyhUYyhuLCEwLGpjKGUsMCxuLmxlbmd0aCkpLFRjKHI/ci5jb250ZW50OlwiXCIscyxyP3IubG9jOmUpKSl9ZWxzZXtjb25zdHtuYW1lOm4sYXJnOnIsZXhwOmMsbG9jOmh9PW8sbT1cImJpbmRcIj09PW4sZz1cIm9uXCI9PT1uO2lmKFwic2xvdFwiPT09biljb250aW51ZTtpZihcIm9uY2VcIj09PW58fFwibWVtb1wiPT09biljb250aW51ZTtpZihcImlzXCI9PT1ufHxtJiZ6YyhyLFwiaXNcIikmJmJ1KGkpKWNvbnRpbnVlO2lmKGcmJnMpY29udGludWU7aWYoKG0mJnpjKHIsXCJrZXlcIil8fGcmJmYmJnpjKHIsXCJ2dWU6YmVmb3JlLXVwZGF0ZVwiKSkmJihkPSEwKSxtJiZ6YyhyLFwicmVmXCIpJiZ0LnNjb3Blcy52Rm9yPjAmJmEucHVzaChrYyhUYyhcInJlZl9mb3JcIiwhMCksVGMoXCJ0cnVlXCIpKSksIXImJihtfHxnKSl7Xz0hMCxjJiYoYS5sZW5ndGgmJih1LnB1c2god2MoeXUoYSksbCkpLGE9W10pLHUucHVzaChtP2M6e3R5cGU6MTQsbG9jOmgsY2FsbGVlOnQuaGVscGVyKGNjKSxhcmd1bWVudHM6W2NdfSkpO2NvbnRpbnVlfWNvbnN0IHY9dC5kaXJlY3RpdmVUcmFuc2Zvcm1zW25dO2lmKHYpe2NvbnN0e3Byb3BzOm4sbmVlZFJ1bnRpbWU6cn09dihvLGUsdCk7IXMmJm4uZm9yRWFjaChDKSxhLnB1c2goLi4ubiksciYmKHAucHVzaChvKSxBKHIpJiZtdS5zZXQobyxyKSl9ZWxzZSBEKG4pfHwocC5wdXNoKG8pLGYmJihkPSEwKSl9fWxldCB3O2lmKHUubGVuZ3RoPyhhLmxlbmd0aCYmdS5wdXNoKHdjKHl1KGEpLGwpKSx3PXUubGVuZ3RoPjE/RWModC5oZWxwZXIob2MpLHUsbCk6dVswXSk6YS5sZW5ndGgmJih3PXdjKHl1KGEpLGwpKSxfP2h8PTE2OihnJiYhbyYmKGh8PTIpLHYmJiFvJiYoaHw9NCksUy5sZW5ndGgmJihofD04KSx5JiYoaHw9MzIpKSxkfHwwIT09aCYmMzIhPT1ofHwhKG18fGJ8fHAubGVuZ3RoPjApfHwoaHw9NTEyKSwhdC5pblNTUiYmdylzd2l0Y2gody50eXBlKXtjYXNlIDE1OmxldCBlPS0xLG49LTEsbz0hMTtmb3IobGV0IHQ9MDt0PHcucHJvcGVydGllcy5sZW5ndGg7dCsrKXtjb25zdCByPXcucHJvcGVydGllc1t0XS5rZXk7UmMocik/XCJjbGFzc1wiPT09ci5jb250ZW50P2U9dDpcInN0eWxlXCI9PT1yLmNvbnRlbnQmJihuPXQpOnIuaXNIYW5kbGVyS2V5fHwobz0hMCl9Y29uc3Qgcj13LnByb3BlcnRpZXNbZV0scz13LnByb3BlcnRpZXNbbl07bz93PUVjKHQuaGVscGVyKGljKSxbd10pOihyJiYhUmMoci52YWx1ZSkmJihyLnZhbHVlPUVjKHQuaGVscGVyKHJjKSxbci52YWx1ZV0pKSxzJiYodnx8ND09PXMudmFsdWUudHlwZSYmXCJbXCI9PT1zLnZhbHVlLmNvbnRlbnQudHJpbSgpWzBdfHwxNz09PXMudmFsdWUudHlwZSkmJihzLnZhbHVlPUVjKHQuaGVscGVyKHNjKSxbcy52YWx1ZV0pKSk7YnJlYWs7Y2FzZSAxNDpicmVhaztkZWZhdWx0Onc9RWModC5oZWxwZXIoaWMpLFtFYyh0LmhlbHBlcihsYyksW3ddKV0pfXJldHVybntwcm9wczp3LGRpcmVjdGl2ZXM6cCxwYXRjaEZsYWc6aCxkeW5hbWljUHJvcE5hbWVzOlMsc2hvdWxkVXNlQmxvY2s6ZH19ZnVuY3Rpb24geXUoZSl7Y29uc3QgdD1uZXcgTWFwLG49W107Zm9yKGxldCBvPTA7bzxlLmxlbmd0aDtvKyspe2NvbnN0IHI9ZVtvXTtpZig4PT09ci5rZXkudHlwZXx8IXIua2V5LmlzU3RhdGljKXtuLnB1c2gocik7Y29udGludWV9Y29uc3Qgcz1yLmtleS5jb250ZW50LGk9dC5nZXQocyk7aT8oXCJzdHlsZVwiPT09c3x8XCJjbGFzc1wiPT09c3x8eChzKSkmJl91KGkscik6KHQuc2V0KHMsciksbi5wdXNoKHIpKX1yZXR1cm4gbn1mdW5jdGlvbiBfdShlLHQpezE3PT09ZS52YWx1ZS50eXBlP2UudmFsdWUuZWxlbWVudHMucHVzaCh0LnZhbHVlKTplLnZhbHVlPUNjKFtlLnZhbHVlLHQudmFsdWVdLGUubG9jKX1mdW5jdGlvbiBidShlKXtyZXR1cm5cImNvbXBvbmVudFwiPT09ZXx8XCJDb21wb25lbnRcIj09PWV9Y29uc3QgU3U9KGUsdCk9PntpZihKYyhlKSl7Y29uc3R7Y2hpbGRyZW46bixsb2M6b309ZSx7c2xvdE5hbWU6cixzbG90UHJvcHM6c309ZnVuY3Rpb24oZSx0KXtsZXQgbixvPSdcImRlZmF1bHRcIic7Y29uc3Qgcj1bXTtmb3IobGV0IHM9MDtzPGUucHJvcHMubGVuZ3RoO3MrKyl7Y29uc3QgdD1lLnByb3BzW3NdOzY9PT10LnR5cGU/dC52YWx1ZSYmKFwibmFtZVwiPT09dC5uYW1lP289SlNPTi5zdHJpbmdpZnkodC52YWx1ZS5jb250ZW50KToodC5uYW1lPXoodC5uYW1lKSxyLnB1c2godCkpKTpcImJpbmRcIj09PXQubmFtZSYmemModC5hcmcsXCJuYW1lXCIpP3QuZXhwJiYobz10LmV4cCk6KFwiYmluZFwiPT09dC5uYW1lJiZ0LmFyZyYmUmModC5hcmcpJiYodC5hcmcuY29udGVudD16KHQuYXJnLmNvbnRlbnQpKSxyLnB1c2godCkpfWlmKHIubGVuZ3RoPjApe2NvbnN0e3Byb3BzOm8sZGlyZWN0aXZlczpzfT12dShlLHQsciwhMSwhMSk7bj1vfXJldHVybntzbG90TmFtZTpvLHNsb3RQcm9wczpufX0oZSx0KSxpPVt0LnByZWZpeElkZW50aWZpZXJzP1wiX2N0eC4kc2xvdHNcIjpcIiRzbG90c1wiLHIsXCJ7fVwiLFwidW5kZWZpbmVkXCIsXCJ0cnVlXCJdO2xldCBsPTI7cyYmKGlbMl09cyxsPTMpLG4ubGVuZ3RoJiYoaVszXT0kYyhbXSxuLCExLCExLG8pLGw9NCksdC5zY29wZUlkJiYhdC5zbG90dGVkJiYobD01KSxpLnNwbGljZShsKSxlLmNvZGVnZW5Ob2RlPUVjKHQuaGVscGVyKGVjKSxpLG8pfX07Y29uc3QgeHU9L15cXHMqKFtcXHckX10rfChhc3luY1xccyopP1xcKFteKV0qP1xcKSlcXHMqPT58XlxccyooYXN5bmNcXHMrKT9mdW5jdGlvbig/OlxccytbXFx3JF0rKT9cXHMqXFwoLyxDdT0oZSx0LG4sbyk9Pntjb25zdHtsb2M6cixtb2RpZmllcnM6cyxhcmc6aX09ZTtsZXQgbDtpZig0PT09aS50eXBlKWlmKGkuaXNTdGF0aWMpe2xldCBlPWkuY29udGVudDtlLnN0YXJ0c1dpdGgoXCJ2dWU6XCIpJiYoZT1gdm5vZGUtJHtlLnNsaWNlKDQpfWApLGw9VGMoSih6KGUpKSwhMCxpLmxvYyl9ZWxzZSBsPU5jKFtgJHtuLmhlbHBlclN0cmluZyhwYyl9KGAsaSxcIilcIl0pO2Vsc2UgbD1pLGwuY2hpbGRyZW4udW5zaGlmdChgJHtuLmhlbHBlclN0cmluZyhwYyl9KGApLGwuY2hpbGRyZW4ucHVzaChcIilcIik7bGV0IGM9ZS5leHA7YyYmIWMuY29udGVudC50cmltKCkmJihjPXZvaWQgMCk7bGV0IGE9bi5jYWNoZUhhbmRsZXJzJiYhYyYmIW4uaW5WT25jZTtpZihjKXtjb25zdCBlPUxjKGMuY29udGVudCksdD0hKGV8fHh1LnRlc3QoYy5jb250ZW50KSksbj1jLmNvbnRlbnQuaW5jbHVkZXMoXCI7XCIpOyh0fHxhJiZlKSYmKGM9TmMoW2Ake3Q/XCIkZXZlbnRcIjpcIiguLi5hcmdzKVwifSA9PiAke24/XCJ7XCI6XCIoXCJ9YCxjLG4/XCJ9XCI6XCIpXCJdKSl9bGV0IHU9e3Byb3BzOltrYyhsLGN8fFRjKFwiKCkgPT4ge31cIiwhMSxyKSldfTtyZXR1cm4gbyYmKHU9byh1KSksYSYmKHUucHJvcHNbMF0udmFsdWU9bi5jYWNoZSh1LnByb3BzWzBdLnZhbHVlKSksdS5wcm9wcy5mb3JFYWNoKChlPT5lLmtleS5pc0hhbmRsZXJLZXk9ITApKSx1fSx3dT0oZSx0LG4pPT57Y29uc3R7ZXhwOm8sbW9kaWZpZXJzOnIsbG9jOnN9PWUsaT1lLmFyZztyZXR1cm4gNCE9PWkudHlwZT8oaS5jaGlsZHJlbi51bnNoaWZ0KFwiKFwiKSxpLmNoaWxkcmVuLnB1c2goJykgfHwgXCJcIicpKTppLmlzU3RhdGljfHwoaS5jb250ZW50PWAke2kuY29udGVudH0gfHwgXCJcImApLHIuaW5jbHVkZXMoXCJjYW1lbFwiKSYmKDQ9PT1pLnR5cGU/aS5jb250ZW50PWkuaXNTdGF0aWM/eihpLmNvbnRlbnQpOmAke24uaGVscGVyU3RyaW5nKGFjKX0oJHtpLmNvbnRlbnR9KWA6KGkuY2hpbGRyZW4udW5zaGlmdChgJHtuLmhlbHBlclN0cmluZyhhYyl9KGApLGkuY2hpbGRyZW4ucHVzaChcIilcIikpKSxuLmluU1NSfHwoci5pbmNsdWRlcyhcInByb3BcIikmJmt1KGksXCIuXCIpLHIuaW5jbHVkZXMoXCJhdHRyXCIpJiZrdShpLFwiXlwiKSksIW98fDQ9PT1vLnR5cGUmJiFvLmNvbnRlbnQudHJpbSgpP3twcm9wczpba2MoaSxUYyhcIlwiLCEwLHMpKV19Ontwcm9wczpba2MoaSxvKV19fSxrdT0oZSx0KT0+ezQ9PT1lLnR5cGU/ZS5jb250ZW50PWUuaXNTdGF0aWM/dCtlLmNvbnRlbnQ6YFxcYCR7dH1cXCR7JHtlLmNvbnRlbnR9fVxcYGA6KGUuY2hpbGRyZW4udW5zaGlmdChgJyR7dH0nICsgKGApLGUuY2hpbGRyZW4ucHVzaChcIilcIikpfSxUdT0oZSx0KT0+e2lmKDA9PT1lLnR5cGV8fDE9PT1lLnR5cGV8fDExPT09ZS50eXBlfHwxMD09PWUudHlwZSlyZXR1cm4oKT0+e2NvbnN0IG49ZS5jaGlsZHJlbjtsZXQgbyxyPSExO2ZvcihsZXQgZT0wO2U8bi5sZW5ndGg7ZSsrKXtjb25zdCB0PW5bZV07aWYoS2ModCkpe3I9ITA7Zm9yKGxldCByPWUrMTtyPG4ubGVuZ3RoO3IrKyl7Y29uc3Qgcz1uW3JdO2lmKCFLYyhzKSl7bz12b2lkIDA7YnJlYWt9b3x8KG89bltlXT1OYyhbdF0sdC5sb2MpKSxvLmNoaWxkcmVuLnB1c2goXCIgKyBcIixzKSxuLnNwbGljZShyLDEpLHItLX19fWlmKHImJigxIT09bi5sZW5ndGh8fDAhPT1lLnR5cGUmJigxIT09ZS50eXBlfHwwIT09ZS50YWdUeXBlfHxlLnByb3BzLmZpbmQoKGU9Pjc9PT1lLnR5cGUmJiF0LmRpcmVjdGl2ZVRyYW5zZm9ybXNbZS5uYW1lXSkpKSkpZm9yKGxldCBlPTA7ZTxuLmxlbmd0aDtlKyspe2NvbnN0IG89bltlXTtpZihLYyhvKXx8OD09PW8udHlwZSl7Y29uc3Qgcj1bXTsyPT09by50eXBlJiZcIiBcIj09PW8uY29udGVudHx8ci5wdXNoKG8pLHQuc3NyfHwwIT09RmEobyx0KXx8ci5wdXNoKFwiMVwiKSxuW2VdPXt0eXBlOjEyLGNvbnRlbnQ6byxsb2M6by5sb2MsY29kZWdlbk5vZGU6RWModC5oZWxwZXIoS2wpLHIpfX19fX0sTnU9bmV3IFdlYWtTZXQsRXU9KGUsdCk9PntpZigxPT09ZS50eXBlJiZIYyhlLFwib25jZVwiLCEwKSl7aWYoTnUuaGFzKGUpfHx0LmluVk9uY2UpcmV0dXJuO3JldHVybiBOdS5hZGQoZSksdC5pblZPbmNlPSEwLHQuaGVscGVyKGZjKSwoKT0+e3QuaW5WT25jZT0hMTtjb25zdCBlPXQuY3VycmVudE5vZGU7ZS5jb2RlZ2VuTm9kZSYmKGUuY29kZWdlbk5vZGU9dC5jYWNoZShlLmNvZGVnZW5Ob2RlLCEwKSl9fX0sJHU9KGUsdCxuKT0+e2NvbnN0e2V4cDpvLGFyZzpyfT1lO2lmKCFvKXJldHVybiBPdSgpO2NvbnN0IHM9by5sb2Muc291cmNlLGk9ND09PW8udHlwZT9vLmNvbnRlbnQ6cztpZighaS50cmltKCl8fCFMYyhpKSlyZXR1cm4gT3UoKTtjb25zdCBsPXJ8fFRjKFwibW9kZWxWYWx1ZVwiLCEwKSxjPXI/UmMocik/YG9uVXBkYXRlOiR7ci5jb250ZW50fWA6TmMoWydcIm9uVXBkYXRlOlwiICsgJyxyXSk6XCJvblVwZGF0ZTptb2RlbFZhbHVlXCI7bGV0IGE7YT1OYyhbYCR7bi5pc1RTP1wiKCRldmVudDogYW55KVwiOlwiJGV2ZW50XCJ9ID0+ICgoYCxvLFwiKSA9ICRldmVudClcIl0pO2NvbnN0IHU9W2tjKGwsZS5leHApLGtjKGMsYSldO2lmKGUubW9kaWZpZXJzLmxlbmd0aCYmMT09PXQudGFnVHlwZSl7Y29uc3QgdD1lLm1vZGlmaWVycy5tYXAoKGU9PihNYyhlKT9lOkpTT04uc3RyaW5naWZ5KGUpKStcIjogdHJ1ZVwiKSkuam9pbihcIiwgXCIpLG49cj9SYyhyKT9gJHtyLmNvbnRlbnR9TW9kaWZpZXJzYDpOYyhbciwnICsgXCJNb2RpZmllcnNcIiddKTpcIm1vZGVsTW9kaWZpZXJzXCI7dS5wdXNoKGtjKG4sVGMoYHsgJHt0fSB9YCwhMSxlLmxvYywyKSkpfXJldHVybiBPdSh1KX07ZnVuY3Rpb24gT3UoZT1bXSl7cmV0dXJue3Byb3BzOmV9fWNvbnN0IFJ1PW5ldyBXZWFrU2V0LEZ1PShlLHQpPT57aWYoMT09PWUudHlwZSl7Y29uc3Qgbj1IYyhlLFwibWVtb1wiKTtpZighbnx8UnUuaGFzKGUpKXJldHVybjtyZXR1cm4gUnUuYWRkKGUpLCgpPT57Y29uc3Qgbz1lLmNvZGVnZW5Ob2RlfHx0LmN1cnJlbnROb2RlLmNvZGVnZW5Ob2RlO28mJjEzPT09by50eXBlJiYoMSE9PWUudGFnVHlwZSYmbmEobyx0KSxlLmNvZGVnZW5Ob2RlPUVjKHQuaGVscGVyKHljKSxbbi5leHAsJGModm9pZCAwLG8pLFwiX2NhY2hlXCIsU3RyaW5nKHQuY2FjaGVkKyspXSkpfX19O2Z1bmN0aW9uIFB1KGUsdD17fSl7Y29uc3Qgbj10Lm9uRXJyb3J8fEZsLG89XCJtb2R1bGVcIj09PXQubW9kZTshMD09PXQucHJlZml4SWRlbnRpZmllcnM/bihBbCg0NikpOm8mJm4oQWwoNDcpKTt0LmNhY2hlSGFuZGxlcnMmJm4oQWwoNDgpKSx0LnNjb3BlSWQmJiFvJiZuKEFsKDQ5KSk7Y29uc3Qgcj1QKGUpP2lhKGUsdCk6ZSxbcyxpXT1bW0V1LFphLEZ1LHR1LFN1LGd1LGF1LFR1XSx7b246Q3UsYmluZDp3dSxtb2RlbDokdX1dO3JldHVybiBMYShyLHcoe30sdCx7cHJlZml4SWRlbnRpZmllcnM6ZmFsc2Usbm9kZVRyYW5zZm9ybXM6Wy4uLnMsLi4udC5ub2RlVHJhbnNmb3Jtc3x8W11dLGRpcmVjdGl2ZVRyYW5zZm9ybXM6dyh7fSxpLHQuZGlyZWN0aXZlVHJhbnNmb3Jtc3x8e30pfSkpLEhhKHIsdyh7fSx0LHtwcmVmaXhJZGVudGlmaWVyczpmYWxzZX0pKX1jb25zdCBBdT1TeW1ib2woXCJcIiksTXU9U3ltYm9sKFwiXCIpLFZ1PVN5bWJvbChcIlwiKSxJdT1TeW1ib2woXCJcIiksQnU9U3ltYm9sKFwiXCIpLEx1PVN5bWJvbChcIlwiKSxqdT1TeW1ib2woXCJcIiksVXU9U3ltYm9sKFwiXCIpLER1PVN5bWJvbChcIlwiKSxIdT1TeW1ib2woXCJcIik7dmFyIFd1O2xldCB6dTtXdT17W0F1XTpcInZNb2RlbFJhZGlvXCIsW011XTpcInZNb2RlbENoZWNrYm94XCIsW1Z1XTpcInZNb2RlbFRleHRcIixbSXVdOlwidk1vZGVsU2VsZWN0XCIsW0J1XTpcInZNb2RlbER5bmFtaWNcIixbTHVdOlwid2l0aE1vZGlmaWVyc1wiLFtqdV06XCJ3aXRoS2V5c1wiLFtVdV06XCJ2U2hvd1wiLFtEdV06XCJUcmFuc2l0aW9uXCIsW0h1XTpcIlRyYW5zaXRpb25Hcm91cFwifSxPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKFd1KS5mb3JFYWNoKChlPT57YmNbZV09V3VbZV19KSk7Y29uc3QgS3U9ZShcInN0eWxlLGlmcmFtZSxzY3JpcHQsbm9zY3JpcHRcIiwhMCksR3U9e2lzVm9pZFRhZzpmLGlzTmF0aXZlVGFnOmU9PnUoZSl8fHAoZSksaXNQcmVUYWc6ZT0+XCJwcmVcIj09PWUsZGVjb2RlRW50aXRpZXM6ZnVuY3Rpb24oZSx0PSExKXtyZXR1cm4genV8fCh6dT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSx0Pyh6dS5pbm5lckhUTUw9YDxkaXYgZm9vPVwiJHtlLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIil9XCI+YCx6dS5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoXCJmb29cIikpOih6dS5pbm5lckhUTUw9ZSx6dS50ZXh0Q29udGVudCl9LGlzQnVpbHRJbkNvbXBvbmVudDplPT5GYyhlLFwiVHJhbnNpdGlvblwiKT9EdTpGYyhlLFwiVHJhbnNpdGlvbkdyb3VwXCIpP0h1OnZvaWQgMCxnZXROYW1lc3BhY2UoZSx0KXtsZXQgbj10P3QubnM6MDtpZih0JiYyPT09bilpZihcImFubm90YXRpb24teG1sXCI9PT10LnRhZyl7aWYoXCJzdmdcIj09PWUpcmV0dXJuIDE7dC5wcm9wcy5zb21lKChlPT42PT09ZS50eXBlJiZcImVuY29kaW5nXCI9PT1lLm5hbWUmJm51bGwhPWUudmFsdWUmJihcInRleHQvaHRtbFwiPT09ZS52YWx1ZS5jb250ZW50fHxcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiPT09ZS52YWx1ZS5jb250ZW50KSkpJiYobj0wKX1lbHNlL15tKD86W2lvbnNdfHRleHQpJC8udGVzdCh0LnRhZykmJlwibWdseXBoXCIhPT1lJiZcIm1hbGlnbm1hcmtcIiE9PWUmJihuPTApO2Vsc2UgdCYmMT09PW4mJihcImZvcmVpZ25PYmplY3RcIiE9PXQudGFnJiZcImRlc2NcIiE9PXQudGFnJiZcInRpdGxlXCIhPT10LnRhZ3x8KG49MCkpO2lmKDA9PT1uKXtpZihcInN2Z1wiPT09ZSlyZXR1cm4gMTtpZihcIm1hdGhcIj09PWUpcmV0dXJuIDJ9cmV0dXJuIG59LGdldFRleHRNb2RlKHt0YWc6ZSxuczp0fSl7aWYoMD09PXQpe2lmKFwidGV4dGFyZWFcIj09PWV8fFwidGl0bGVcIj09PWUpcmV0dXJuIDE7aWYoS3UoZSkpcmV0dXJuIDJ9cmV0dXJuIDB9fSxxdT0oZSx0KT0+e2NvbnN0IG49bChlKTtyZXR1cm4gVGMoSlNPTi5zdHJpbmdpZnkobiksITEsdCwzKX07Y29uc3QgSnU9ZShcInBhc3NpdmUsb25jZSxjYXB0dXJlXCIpLFl1PWUoXCJzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0LG1pZGRsZVwiKSxadT1lKFwibGVmdCxyaWdodFwiKSxRdT1lKFwib25rZXl1cCxvbmtleWRvd24sb25rZXlwcmVzc1wiLCEwKSxYdT0oZSx0KT0+UmMoZSkmJlwib25jbGlja1wiPT09ZS5jb250ZW50LnRvTG93ZXJDYXNlKCk/VGModCwhMCk6NCE9PWUudHlwZT9OYyhbXCIoXCIsZSxgKSA9PT0gXCJvbkNsaWNrXCIgPyBcIiR7dH1cIiA6IChgLGUsXCIpXCJdKTplLGVwPShlLHQpPT57MSE9PWUudHlwZXx8MCE9PWUudGFnVHlwZXx8XCJzY3JpcHRcIiE9PWUudGFnJiZcInN0eWxlXCIhPT1lLnRhZ3x8dC5yZW1vdmVOb2RlKCl9LHRwPVtlPT57MT09PWUudHlwZSYmZS5wcm9wcy5mb3JFYWNoKCgodCxuKT0+ezY9PT10LnR5cGUmJlwic3R5bGVcIj09PXQubmFtZSYmdC52YWx1ZSYmKGUucHJvcHNbbl09e3R5cGU6NyxuYW1lOlwiYmluZFwiLGFyZzpUYyhcInN0eWxlXCIsITAsdC5sb2MpLGV4cDpxdSh0LnZhbHVlLmNvbnRlbnQsdC5sb2MpLG1vZGlmaWVyczpbXSxsb2M6dC5sb2N9KX0pKX1dLG5wPXtjbG9hazooKT0+KHtwcm9wczpbXX0pLGh0bWw6KGUsdCxuKT0+e2NvbnN0e2V4cDpvLGxvYzpyfT1lO3JldHVybiB0LmNoaWxkcmVuLmxlbmd0aCYmKHQuY2hpbGRyZW4ubGVuZ3RoPTApLHtwcm9wczpba2MoVGMoXCJpbm5lckhUTUxcIiwhMCxyKSxvfHxUYyhcIlwiLCEwKSldfX0sdGV4dDooZSx0LG4pPT57Y29uc3R7ZXhwOm8sbG9jOnJ9PWU7cmV0dXJuIHQuY2hpbGRyZW4ubGVuZ3RoJiYodC5jaGlsZHJlbi5sZW5ndGg9MCkse3Byb3BzOltrYyhUYyhcInRleHRDb250ZW50XCIsITApLG8/RmEobyxuKT4wP286RWMobi5oZWxwZXJTdHJpbmcobmMpLFtvXSxyKTpUYyhcIlwiLCEwKSldfX0sbW9kZWw6KGUsdCxuKT0+e2NvbnN0IG89JHUoZSx0LG4pO2lmKCFvLnByb3BzLmxlbmd0aHx8MT09PXQudGFnVHlwZSlyZXR1cm4gbztjb25zdHt0YWc6cn09dCxzPW4uaXNDdXN0b21FbGVtZW50KHIpO2lmKFwiaW5wdXRcIj09PXJ8fFwidGV4dGFyZWFcIj09PXJ8fFwic2VsZWN0XCI9PT1yfHxzKXtsZXQgZT1WdSxpPSExO2lmKFwiaW5wdXRcIj09PXJ8fHMpe2NvbnN0IG49V2ModCxcInR5cGVcIik7aWYobil7aWYoNz09PW4udHlwZSllPUJ1O2Vsc2UgaWYobi52YWx1ZSlzd2l0Y2gobi52YWx1ZS5jb250ZW50KXtjYXNlXCJyYWRpb1wiOmU9QXU7YnJlYWs7Y2FzZVwiY2hlY2tib3hcIjplPU11O2JyZWFrO2Nhc2VcImZpbGVcIjppPSEwfX1lbHNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLnByb3BzLnNvbWUoKGU9PiEoNyE9PWUudHlwZXx8XCJiaW5kXCIhPT1lLm5hbWV8fGUuYXJnJiY0PT09ZS5hcmcudHlwZSYmZS5hcmcuaXNTdGF0aWMpKSl9KSh0KSYmKGU9QnUpfWVsc2VcInNlbGVjdFwiPT09ciYmKGU9SXUpO2l8fChvLm5lZWRSdW50aW1lPW4uaGVscGVyKGUpKX1yZXR1cm4gby5wcm9wcz1vLnByb3BzLmZpbHRlcigoZT0+ISg0PT09ZS5rZXkudHlwZSYmXCJtb2RlbFZhbHVlXCI9PT1lLmtleS5jb250ZW50KSkpLG99LG9uOihlLHQsbik9PkN1KGUsMCxuLCh0PT57Y29uc3R7bW9kaWZpZXJzOm99PWU7aWYoIW8ubGVuZ3RoKXJldHVybiB0O2xldHtrZXk6cix2YWx1ZTpzfT10LnByb3BzWzBdO2NvbnN0e2tleU1vZGlmaWVyczppLG5vbktleU1vZGlmaWVyczpsLGV2ZW50T3B0aW9uTW9kaWZpZXJzOmN9PSgoZSx0LG4sbyk9Pntjb25zdCByPVtdLHM9W10saT1bXTtmb3IobGV0IGw9MDtsPHQubGVuZ3RoO2wrKyl7Y29uc3Qgbj10W2xdO0p1KG4pP2kucHVzaChuKTpadShuKT9SYyhlKT9RdShlLmNvbnRlbnQpP3IucHVzaChuKTpzLnB1c2gobik6KHIucHVzaChuKSxzLnB1c2gobikpOll1KG4pP3MucHVzaChuKTpyLnB1c2gobil9cmV0dXJue2tleU1vZGlmaWVyczpyLG5vbktleU1vZGlmaWVyczpzLGV2ZW50T3B0aW9uTW9kaWZpZXJzOml9fSkocixvKTtpZihsLmluY2x1ZGVzKFwicmlnaHRcIikmJihyPVh1KHIsXCJvbkNvbnRleHRtZW51XCIpKSxsLmluY2x1ZGVzKFwibWlkZGxlXCIpJiYocj1YdShyLFwib25Nb3VzZXVwXCIpKSxsLmxlbmd0aCYmKHM9RWMobi5oZWxwZXIoTHUpLFtzLEpTT04uc3RyaW5naWZ5KGwpXSkpLCFpLmxlbmd0aHx8UmMocikmJiFRdShyLmNvbnRlbnQpfHwocz1FYyhuLmhlbHBlcihqdSksW3MsSlNPTi5zdHJpbmdpZnkoaSldKSksYy5sZW5ndGgpe2NvbnN0IGU9Yy5tYXAocSkuam9pbihcIlwiKTtyPVJjKHIpP1RjKGAke3IuY29udGVudH0ke2V9YCwhMCk6TmMoW1wiKFwiLHIsYCkgKyBcIiR7ZX1cImBdKX1yZXR1cm57cHJvcHM6W2tjKHIscyldfX0pKSxzaG93OihlLHQsbik9Pih7cHJvcHM6W10sbmVlZFJ1bnRpbWU6bi5oZWxwZXIoVXUpfSl9O2NvbnN0IG9wPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gcnAoZSx0KXtpZighUChlKSl7aWYoIWUubm9kZVR5cGUpcmV0dXJuIF87ZT1lLmlubmVySFRNTH1jb25zdCBuPWUsbz1vcFtuXTtpZihvKXJldHVybiBvO2lmKFwiI1wiPT09ZVswXSl7Y29uc3QgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpO2U9dD90LmlubmVySFRNTDpcIlwifWNvbnN0e2NvZGU6cn09ZnVuY3Rpb24oZSx0PXt9KXtyZXR1cm4gUHUoZSx3KHt9LEd1LHQse25vZGVUcmFuc2Zvcm1zOltlcCwuLi50cCwuLi50Lm5vZGVUcmFuc2Zvcm1zfHxbXV0sZGlyZWN0aXZlVHJhbnNmb3Jtczp3KHt9LG5wLHQuZGlyZWN0aXZlVHJhbnNmb3Jtc3x8e30pLHRyYW5zZm9ybUhvaXN0Om51bGx9KSl9KGUsdyh7aG9pc3RTdGF0aWM6ITAsb25FcnJvcjp2b2lkIDAsb25XYXJuOl99LHQpKSxzPW5ldyBGdW5jdGlvbihcIlZ1ZVwiLHIpKFJsKTtyZXR1cm4gcy5fcmM9ITAsb3Bbbl09c31GcyhycCk7ZXhwb3J0e2lvIGFzIEJhc2VUcmFuc2l0aW9uLEtyIGFzIENvbW1lbnQsbmUgYXMgRWZmZWN0U2NvcGUsV3IgYXMgRnJhZ21lbnQsX28gYXMgS2VlcEFsaXZlLGdlIGFzIFJlYWN0aXZlRWZmZWN0LEdyIGFzIFN0YXRpYyxVbiBhcyBTdXNwZW5zZSxIciBhcyBUZWxlcG9ydCx6ciBhcyBUZXh0LEZpIGFzIFRyYW5zaXRpb24sWWkgYXMgVHJhbnNpdGlvbkdyb3VwLE5pIGFzIFZ1ZUVsZW1lbnQsWnQgYXMgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsWXQgYXMgY2FsbFdpdGhFcnJvckhhbmRsaW5nLHogYXMgY2FtZWxpemUscSBhcyBjYXBpdGFsaXplLGZzIGFzIGNsb25lVk5vZGUsaWkgYXMgY29tcGF0VXRpbHMscnAgYXMgY29tcGlsZSxqcyBhcyBjb21wdXRlZCxObCBhcyBjcmVhdGVBcHAsbnMgYXMgY3JlYXRlQmxvY2ssbXMgYXMgY3JlYXRlQ29tbWVudFZOb2RlLHRzIGFzIGNyZWF0ZUVsZW1lbnRCbG9jayxhcyBhcyBjcmVhdGVFbGVtZW50Vk5vZGUsTXIgYXMgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsSnMgYXMgY3JlYXRlUHJvcHNSZXN0UHJveHksQXIgYXMgY3JlYXRlUmVuZGVyZXIsRWwgYXMgY3JlYXRlU1NSQXBwLHFvIGFzIGNyZWF0ZVNsb3RzLGhzIGFzIGNyZWF0ZVN0YXRpY1ZOb2RlLGRzIGFzIGNyZWF0ZVRleHRWTm9kZSx1cyBhcyBjcmVhdGVWTm9kZSxVdCBhcyBjdXN0b21SZWYsZ28gYXMgZGVmaW5lQXN5bmNDb21wb25lbnQsaG8gYXMgZGVmaW5lQ29tcG9uZW50LHdpIGFzIGRlZmluZUN1c3RvbUVsZW1lbnQsRHMgYXMgZGVmaW5lRW1pdHMsSHMgYXMgZGVmaW5lRXhwb3NlLFVzIGFzIGRlZmluZVByb3BzLGtpIGFzIGRlZmluZVNTUkN1c3RvbUVsZW1lbnQseG4gYXMgZGV2dG9vbHMseWUgYXMgZWZmZWN0LG9lIGFzIGVmZmVjdFNjb3BlLHdzIGFzIGdldEN1cnJlbnRJbnN0YW5jZSxzZSBhcyBnZXRDdXJyZW50U2NvcGUsZm8gYXMgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLHBzIGFzIGd1YXJkUmVhY3RpdmVQcm9wcyxacyBhcyBoLFF0IGFzIGhhbmRsZUVycm9yLFRsIGFzIGh5ZHJhdGUsZWkgYXMgaW5pdEN1c3RvbUZvcm1hdHRlcixPbCBhcyBpbml0RGlyZWN0aXZlc0ZvclNTUixxbiBhcyBpbmplY3QsbmkgYXMgaXNNZW1vU2FtZSx3dCBhcyBpc1Byb3h5LFN0IGFzIGlzUmVhY3RpdmUseHQgYXMgaXNSZWFkb25seSxSdCBhcyBpc1JlZixQcyBhcyBpc1J1bnRpbWVPbmx5LEN0IGFzIGlzU2hhbGxvdyxvcyBhcyBpc1ZOb2RlLFR0IGFzIG1hcmtSYXcscXMgYXMgbWVyZ2VEZWZhdWx0cyxfcyBhcyBtZXJnZVByb3BzLGRuIGFzIG5leHRUaWNrLGMgYXMgbm9ybWFsaXplQ2xhc3MsYSBhcyBub3JtYWxpemVQcm9wcyxyIGFzIG5vcm1hbGl6ZVN0eWxlLFNvIGFzIG9uQWN0aXZhdGVkLCRvIGFzIG9uQmVmb3JlTW91bnQsUG8gYXMgb25CZWZvcmVVbm1vdW50LFJvIGFzIG9uQmVmb3JlVXBkYXRlLHhvIGFzIG9uRGVhY3RpdmF0ZWQsQm8gYXMgb25FcnJvckNhcHR1cmVkLE9vIGFzIG9uTW91bnRlZCxJbyBhcyBvblJlbmRlclRyYWNrZWQsVm8gYXMgb25SZW5kZXJUcmlnZ2VyZWQsaWUgYXMgb25TY29wZURpc3Bvc2UsTW8gYXMgb25TZXJ2ZXJQcmVmZXRjaCxBbyBhcyBvblVubW91bnRlZCxGbyBhcyBvblVwZGF0ZWQsWXIgYXMgb3BlbkJsb2NrLEZuIGFzIHBvcFNjb3BlSWQsR24gYXMgcHJvdmlkZSxMdCBhcyBwcm94eVJlZnMsUm4gYXMgcHVzaFNjb3BlSWQsdm4gYXMgcXVldWVQb3N0Rmx1c2hDYixndCBhcyByZWFjdGl2ZSx5dCBhcyByZWFkb25seSxGdCBhcyByZWYsRnMgYXMgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsa2wgYXMgcmVuZGVyLEdvIGFzIHJlbmRlckxpc3QsSm8gYXMgcmVuZGVyU2xvdCxVbyBhcyByZXNvbHZlQ29tcG9uZW50LFdvIGFzIHJlc29sdmVEaXJlY3RpdmUsSG8gYXMgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsc2kgYXMgcmVzb2x2ZUZpbHRlcixjbyBhcyByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLFhyIGFzIHNldEJsb2NrVHJhY2tpbmcsd24gYXMgc2V0RGV2dG9vbHNIb29rLHBvIGFzIHNldFRyYW5zaXRpb25Ib29rcyx2dCBhcyBzaGFsbG93UmVhY3RpdmUsX3QgYXMgc2hhbGxvd1JlYWRvbmx5LFB0IGFzIHNoYWxsb3dSZWYsUXMgYXMgc3NyQ29udGV4dEtleSxyaSBhcyBzc3JVdGlscyxfZSBhcyBzdG9wLG0gYXMgdG9EaXNwbGF5U3RyaW5nLEogYXMgdG9IYW5kbGVyS2V5LFpvIGFzIHRvSGFuZGxlcnMsa3QgYXMgdG9SYXcsV3QgYXMgdG9SZWYsRHQgYXMgdG9SZWZzLHNzIGFzIHRyYW5zZm9ybVZOb2RlQXJncyxWdCBhcyB0cmlnZ2VyUmVmLEl0IGFzIHVucmVmLEtzIGFzIHVzZUF0dHJzLEVpIGFzIHVzZUNzc01vZHVsZSwkaSBhcyB1c2VDc3NWYXJzLFhzIGFzIHVzZVNTUkNvbnRleHQsenMgYXMgdXNlU2xvdHMscm8gYXMgdXNlVHJhbnNpdGlvblN0YXRlLHJsIGFzIHZNb2RlbENoZWNrYm94LHBsIGFzIHZNb2RlbER5bmFtaWMsaWwgYXMgdk1vZGVsUmFkaW8sbGwgYXMgdk1vZGVsU2VsZWN0LG9sIGFzIHZNb2RlbFRleHQseWwgYXMgdlNob3csb2kgYXMgdmVyc2lvbixHdCBhcyB3YXJuLFhuIGFzIHdhdGNoLEpuIGFzIHdhdGNoRWZmZWN0LFluIGFzIHdhdGNoUG9zdEVmZmVjdCxabiBhcyB3YXRjaFN5bmNFZmZlY3QsWXMgYXMgd2l0aEFzeW5jQ29udGV4dCxBbiBhcyB3aXRoQ3R4LFdzIGFzIHdpdGhEZWZhdWx0cyxMbyBhcyB3aXRoRGlyZWN0aXZlcyx2bCBhcyB3aXRoS2V5cyx0aSBhcyB3aXRoTWVtbyxtbCBhcyB3aXRoTW9kaWZpZXJzLFBuIGFzIHdpdGhTY29wZUlkfTtcbiIsImltcG9ydCB7IGRvX3BpZSB9IGZyb20gJy4vY2hhcnRzL3BpZS1jaGFydCdcblxud2luZG93LmRvX3BpZSA9IGRvX3BpZVxuXG5pbXBvcnQgeyBDaGFydFdpZGdldCwgV2lkZ2V0VXRpbHMgfSBmcm9tICcuL3dpZGdldC93aWRnZXRzJ1xuaW1wb3J0ICcuL3NpZGViYXIvc2lkZWJhcidcbmltcG9ydCB7IG50b3BDaGFydEFwZXggfSBmcm9tIFwiLi9udG9wQ2hhcnRBcGV4XCI7XG5cbi8qIGRhdGF0YWJsZXMubmV0IGV4dGVuc2lvbnMgKi9cbmltcG9ydCB7IERhdGFUYWJsZUZpbHRlcnNNZW51LCBEYXRhVGFibGVVdGlscywgRGF0YVRhYmxlUmVuZGVycyB9IGZyb20gJy4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlscy5qcydcblxud2luZG93LkRhdGFUYWJsZVV0aWxzID0gRGF0YVRhYmxlVXRpbHNcbndpbmRvdy5EYXRhVGFibGVGaWx0ZXJzTWVudSA9IERhdGFUYWJsZUZpbHRlcnNNZW51XG53aW5kb3cuRGF0YVRhYmxlUmVuZGVycyA9IERhdGFUYWJsZVJlbmRlcnNcblxud2luZG93LkNoYXJ0V2lkZ2V0ID0gQ2hhcnRXaWRnZXQ7XG53aW5kb3cuV2lkZ2V0VXRpbHMgPSBXaWRnZXRVdGlscztcbndpbmRvdy5udG9wQ2hhcnRBcGV4ID0gbnRvcENoYXJ0QXBleDtcbiIsIi8qIEhhbmRsZSBCbG9nIE5vdGlmaWNhdGlvbnMgKi9cbiQoZnVuY3Rpb24gKCkge1xuXG4gIGZ1bmN0aW9uIGJsb2dOb3RpZmNhdGlvbkNsaWNrKGUpIHtcblxuICAgIGlmIChlLnR5cGUgPT0gXCJtb3VzZWRvd25cIiAmJiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSB8fCBlLndoaWNoICE9PSAyKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgaWQgPSAkKHRoaXMpLmRhdGEoJ2lkJyk7XG5cbiAgICAkLnBvc3QoYCR7aHR0cF9wcmVmaXh9L2x1YS91cGRhdGVfYmxvZ19wb3N0cy5sdWFgLCB7XG4gICAgICBibG9nX25vdGlmaWNhdGlvbl9pZDogaWQsXG4gICAgICBjc3JmOiB3aW5kb3cuX19CTE9HX05PVElGSUNBVElPTl9DU1JGX19cbiAgICB9LFxuICAgICAgKGRhdGEpID0+IHtcblxuICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG5cbiAgICAgICAgICAkKHRoaXMpLm9mZignY2xpY2snKS5vZmYoJ21vdXNlZG93bicpLmF0dHIoJ2RhdGEtcmVhZCcsICd0cnVlJykuZGF0YSgncmVhZCcsICd0cnVlJykuZmluZCgnLmJhZGdlJykucmVtb3ZlKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgY291bnQgPSAkKGAuYmxvZy1ub3RpZmljYXRpb25bZGF0YS1yZWFkPSdmYWxzZSddYCkubGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKGNvdW50ID09IDApIHtcbiAgICAgICAgICAgICQoJy5ub3RpZmljYXRpb24tYmVsbCcpLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICQoJy5ub3RpZmljYXRpb24tYmVsbCcpLmh0bWwoY291bnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvLyBvbiB0aGUgbm90aWZpY2F0aW9ucyBub3QgeWV0IHJlYWQgZGVsZWdhdGUgdGhlIGNsaWNrIGV2ZW50XG4gICQoYC5ibG9nLW5vdGlmaWNhdGlvbltkYXRhLXJlYWQ9J2ZhbHNlJ11gKS5vbignY2xpY2snLCBibG9nTm90aWZjYXRpb25DbGljaykub24oJ21vdXNlZG93bicsIGJsb2dOb3RpZmNhdGlvbkNsaWNrKTtcbn0pOyIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0Y2hhcnRfdHlwZTogU3RyaW5nLFxuXHRyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlOiBCb29sZWFuLFxuXHRiYXNlX3VybF9yZXF1ZXN0OiBTdHJpbmcsXG5cdGdldF9wYXJhbXNfdXJsX3JlcXVlc3Q6IEZ1bmN0aW9uLFxuXHRnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM6IEZ1bmN0aW9uLFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCIsIFwiaGlkZGVuXCIsIFwic2hvd2VkXCIsIFwiY2hhcnRfcmVsb2FkZWRcIiwgXCJ6b29tXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgYmVmb3JlVW5tb3VudCgpIHtcblx0dGhpcy5jaGFydC5kZXN0cm95Q2hhcnQoKTtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBjaGFydDogbnVsbCxcblx0ICAgIGNoYXJ0X29wdGlvbnM6IG51bGwsXG5cdCAgICBmcm9tX3pvb206IGZhbHNlLFxuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG5cdGF3YWl0IHRoaXMuaW5pdCgpO1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0aW5pdDogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0ICAgIGxldCB1cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdCAgICBpZiAodGhpcy5yZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlKSB7XG5cdFx0dGhpcy5yZWdpc3Rlcl9zdGF0dXMoc3RhdHVzKTtcblx0ICAgIH1cblx0ICAgIGF3YWl0IHRoaXMuZHJhd19jaGFydCh1cmxfcmVxdWVzdCk7XG5cdH0sXG5cdGdldF9kYXRhX3VyaTogYXN5bmMgZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgaWYgKHRoaXMuY2hhcnQgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXHQgICAgbGV0IGRhdGFfdXJpID0gYXdhaXQgdGhpcy5jaGFydC50b19kYXRhX3VyaSgpO1xuXHQgICAgcmV0dXJuIGRhdGFfdXJpO1xuXHR9LFxuXHRkb3dubG9hZF9jaGFydF9wbmc6IGFzeW5jIGZ1bmN0aW9uKGZpbGVfbmFtZSwgb3B0aW9ucykge1xuXHQgICAgaWYgKHRoaXMuY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIGxldCBkYXRhX3VyaSA9IGF3YWl0IHRoaXMuY2hhcnQudG9fZGF0YV91cmkoKTtcblx0ICAgIGRvd25sb2FkVVJJKGRhdGFfdXJpLCBmaWxlX25hbWUpO1xuXHR9LFxuXHRyZWdpc3Rlcl9zdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0ICAgIG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHRoaXMuaWQsIChuZXdfc3RhdHVzKSA9PiB7XG5cdFx0aWYgKHRoaXMuZnJvbV96b29tID09IHRydWUpIHtcblx0XHQgICAgdGhpcy5mcm9tX3pvb20gPSBmYWxzZTtcblx0XHQgICAgLy9yZXR1cm47XG5cdFx0fVxuXHRcdGxldCBuZXdfdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChuZXdfc3RhdHVzKTtcblx0XHRpZiAobmV3X3VybF9yZXF1ZXN0ID09IHVybF9yZXF1ZXN0KSB7XG5cdFx0ICAgIHVybF9yZXF1ZXN0ID0gbmV3X3VybF9yZXF1ZXN0O1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdHVybF9yZXF1ZXN0ID0gbmV3X3VybF9yZXF1ZXN0O1xuXHRcdHRoaXMudXBkYXRlX2NoYXJ0KG5ld191cmxfcmVxdWVzdCk7XG5cdCAgICB9LCBmYWxzZSk7XG5cdH0sXG5cdGdldF91cmxfcmVxdWVzdDogZnVuY3Rpb24oc3RhdHVzKSB7XG5cdCAgICBsZXQgdXJsX3BhcmFtcztcblx0ICAgIGlmICh0aGlzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3QgIT0gbnVsbCkge1xuXHRcdGlmIChzdGF0dXMgPT0gbnVsbCkge1xuXHRcdCAgICBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdH1cblx0XHR1cmxfcGFyYW1zID0gdGhpcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0ICAgIH1cblx0ICAgIFxuXHQgICAgcmV0dXJuIGAke3RoaXMuYmFzZV91cmxfcmVxdWVzdH0/JHt1cmxfcGFyYW1zfWA7XG5cdH0sXG5cdGRyYXdfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uKHVybF9yZXF1ZXN0KSB7XG5cdCAgICBsZXQgY2hhcnRBcGV4ID0gbnRvcENoYXJ0QXBleDtcblx0ICAgIGxldCBjaGFydF90eXBlID0gdGhpcy5jaGFydF90eXBlO1xuXHQgICAgaWYgKGNoYXJ0X3R5cGUgPT0gbnVsbCkge1xuXHRcdGNoYXJ0X3R5cGUgPSBjaGFydEFwZXgudHlwZUNoYXJ0LlRTX1NUQUNLRUQ7XG5cdCAgICB9XG5cdCAgICB0aGlzLmNoYXJ0ID0gY2hhcnRBcGV4Lm5ld0NoYXJ0KGNoYXJ0X3R5cGUpO1xuXHQgICAgbGV0IG1lID0gdGhpcztcblx0ICAgIHRoaXMuY2hhcnQucmVnaXN0ZXJFdmVudChcInpvb21lZFwiLCBmdW5jdGlvbihjaGFydF9jb250ZXh0LCBheGlzKSB7XG5cdFx0bWUub25fem9vbWVkKGNoYXJ0X2NvbnRleHQsIGF4aXMpO1xuXHQgICAgfSk7XG5cdCAgICBsZXQgY2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHQgICAgdGhpcy5jaGFydC5kcmF3Q2hhcnQodGhpcy4kcmVmc1tcImNoYXJ0XCJdLCBjaGFydF9vcHRpb25zKTtcblx0fSxcblx0dXBkYXRlX2NoYXJ0OiBhc3luYyBmdW5jdGlvbih1cmxfcmVxdWVzdCkge1xuXHQgICAgbGV0IGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0ICAgIHRoaXMuY2hhcnQudXBkYXRlQ2hhcnQoY2hhcnRfb3B0aW9ucyk7XG5cdH0sXG5cdHVwZGF0ZV9jaGFydF9vcHRpb25zOiBmdW5jdGlvbihjaGFydF9vcHRpb25zKSB7XG5cdCAgICB0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHR9LFxuXHR1cGRhdGVfY2hhcnRfc2VyaWVzOiBmdW5jdGlvbihzZXJpZXMpIHtcblx0ICAgIGlmIChzZXJpZXMgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIHRoaXMuY2hhcnQudXBkYXRlU2VyaWVzKHNlcmllcyk7XG5cdH0sXG5cdGdldF9jaGFydF9vcHRpb25zOiBhc3luYyBmdW5jdGlvbih1cmxfcmVxdWVzdCkge1xuXHQgICAgbGV0IGNoYXJ0X29wdGlvbnM7XG5cdCAgICBpZiAodGhpcy5nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPT0gbnVsbCkge1x0XHRcblx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0ICAgIH1cblx0ICAgIHRoaXMuJGVtaXQoJ2NoYXJ0X3JlbG9hZGVkJywgY2hhcnRfb3B0aW9ucyk7XG5cdCAgICByZXR1cm4gY2hhcnRfb3B0aW9ucztcblx0fSxcblx0b25fem9vbWVkOiBmdW5jdGlvbihjaGFydF9jb250ZXh0LCB7IHhheGlzLCB5YXhpcyB9KSB7XG5cdCAgICB0aGlzLmZyb21fem9vbSA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBiZWdpbiA9IG1vbWVudCh4YXhpcy5taW4pO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gbW9tZW50KHhheGlzLm1heCk7XG4gICAgICAgICAgICAvLyB0aGUgdGltZXN0YW1wcyBhcmUgaW4gbWlsbGlzZWNvbmRzLCBjb252ZXJ0IHRoZW0gaW50byBzZWNvbmRzXG5cdCAgICBsZXQgbmV3X2Vwb2NoX3N0YXR1cyA9IHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChiZWdpbi51bml4KCkpLCBlcG9jaF9lbmQ6IE51bWJlci5wYXJzZUludChlbmQudW5peCgpKSB9O1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIG5ld19lcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuXHQgICAgdGhpcy4kZW1pdCgnem9vbScsIG5ld19lcG9jaF9zdGF0dXMpO1xuXHR9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxzZWxlY3QgY2xhc3M9XCJzZWxlY3QyIGZvcm0tc2VsZWN0XCIgcmVmPVwic2VsZWN0MlwiIHJlcXVpcmVkIG5hbWU9XCJmaWx0ZXJfdHlwZVwiID5cbiAgICA8b3B0aW9uIGNsYXNzPVwibnRvcG5nLWRyb3Bkb3duLW1pbi13aWR0aCBuby13cmFwXCIgdi1mb3I9XCIoaXRlbSwgaSkgaW4gb3B0aW9uc18yXCIgOnNlbGVjdGVkPVwiKGl0ZW0udmFsdWUgPT0gc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUpXCIgOnZhbHVlPVwiaXRlbS52YWx1ZVwiIDpkaXNhYmxlZD1cIml0ZW0uZGlzYWJsZWRcIj5cbiAgICAgIHt7aXRlbS5sYWJlbH19XG4gICAgPC9vcHRpb24+XG4gICAgPG9wdGdyb3VwIHYtZm9yPVwiKGl0ZW0sIGkpIGluIGdyb3Vwc19vcHRpb25zXzJcIiA6bGFiZWw9XCJpdGVtLmdyb3VwXCI+XG4gICAgICA8b3B0aW9uIHYtZm9yPVwiKG9wdCwgaikgaW4gaXRlbS5vcHRpb25zXCIgOnNlbGVjdGVkPVwiKG9wdC52YWx1ZSA9PSBzZWxlY3RlZF9vcHRpb25fMi52YWx1ZSlcIiA6dmFsdWU9XCJvcHQudmFsdWVcIiA6ZGlzYWJsZWQ9XCJvcHQuZGlzYWJsZWRcIj5cbiAgICAgICAge3tvcHQubGFiZWx9fVxuICAgICAgPC9vcHRpb24+XG4gICAgPC9vcHRncm91cD5cbiAgPC9zZWxlY3Q+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBzZWxlY3QyID0gcmVmKG51bGwpO1xuXG4vLyBjb25zdCBzZWxlY3RlZDJfb3B0aW9uID0gcmVmKHt9KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsICdzZWxlY3Rfb3B0aW9uJ10pO1xuXG5jb25zdCBvcHRpb25zXzIgPSByZWYoW10pO1xuY29uc3QgZ3JvdXBzX29wdGlvbnNfMiA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9vcHRpb25fMiA9IHJlZih7fSk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsXG4gICAgb3B0aW9uczogQXJyYXksXG4gICAgc2VsZWN0ZWRfb3B0aW9uOiBPYmplY3QsXG4gICAgZGlzYWJsZV9jaGFuZ2U6IEJvb2xlYW4sXG59KTtcblxuZnVuY3Rpb24gZ2V0X3Byb3BzX3NlbGVjdGVkX29wdGlvbigpIHtcbiAgICBpZiAocHJvcHMuc2VsZWN0ZWRfb3B0aW9uID09IG51bGwpIHtcblx0cmV0dXJuIHByb3BzLm9wdGlvbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBwcm9wcy5zZWxlY3RlZF9vcHRpb247XG59XG5cbmZ1bmN0aW9uIHNldF9zZWxlY3RlZF9vcHRpb24oc2VsZWN0ZWRfb3B0aW9uKSB7XG4gICAgaWYgKHNlbGVjdGVkX29wdGlvbiA9PSBudWxsKSB7XG5cdHNlbGVjdGVkX29wdGlvbiA9IGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUgPSBzZWxlY3RlZF9vcHRpb247XG4gICAgaWYgKHNlbGVjdGVkX29wdGlvbl8yLnZhbHVlLnZhbHVlID09IG51bGwpIHtcblx0c2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUudmFsdWUgPSBzZWxlY3RlZF9vcHRpb24ubGFiZWw7XG4gICAgfVxufVxuXG53YXRjaCgoKSA9PiBwcm9wcy5zZWxlY3RlZF9vcHRpb24sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHNldF9zZWxlY3RlZF9vcHRpb24oY3VyX3ZhbHVlKTtcbiAgICBsZXQgc2VsZWN0MkRpdiA9IHNlbGVjdDIudmFsdWU7XG4gICAgbGV0IHZhbHVlID0gZ2V0X3ZhbHVlX2Zyb21fc2VsZWN0ZWRfb3B0aW9uKGN1cl92YWx1ZSk7XG5cdCQoc2VsZWN0MkRpdikudmFsKHZhbHVlKVxuXHQkKHNlbGVjdDJEaXYpLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgLy8gfVxufSwgeyBmbHVzaDogJ3ByZSd9KTtcblxuZnVuY3Rpb24gZ2V0X3ZhbHVlX2Zyb21fc2VsZWN0ZWRfb3B0aW9uKHNlbGVjdGVkX29wdGlvbikge1xuICAgIGlmIChzZWxlY3RlZF9vcHRpb24gPT0gbnVsbCkge1xuXHRzZWxlY3RlZF9vcHRpb24gPSBnZXRfcHJvcHNfc2VsZWN0ZWRfb3B0aW9uKCk7XG4gICAgfVxuICAgIGxldCB2YWx1ZTtcbiAgICBpZiAoc2VsZWN0ZWRfb3B0aW9uLnZhbHVlKSB7XG5cdHZhbHVlID0gc2VsZWN0ZWRfb3B0aW9uLnZhbHVlO1xuICAgIH0gZWxzZSB7XG5cdHZhbHVlID0gc2VsZWN0ZWRfb3B0aW9uLmxhYmVsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGZpbmRfb3B0aW9uXzJfZnJvbV92YWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdHZhbHVlID0gZ2V0X3ZhbHVlX2Zyb21fc2VsZWN0ZWRfb3B0aW9uKCk7XG4gICAgfVxuICAgIC8vIGxldCBvcHRpb24gPSBvcHRpb25zXzIudmFsdWUuZmluZCgobykgPT4gby52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgbGV0IG9wdGlvbiA9IG9wdGlvbnNfMi52YWx1ZS5maW5kKChvKSA9PiBvLnZhbHVlID09IHZhbHVlKTtcbiAgICBpZiAob3B0aW9uICE9IG51bGwpIHsgcmV0dXJuIG9wdGlvbjsgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzX29wdGlvbnNfMi52YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgZyA9IGdyb3Vwc19vcHRpb25zXzIudmFsdWVbaV07XG5cdG9wdGlvbiA9IGcub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IHZhbHVlKTtcblx0aWYgKG9wdGlvbiAhPSBudWxsKSB7XG5cdCAgICByZXR1cm4gb3B0aW9uO1xuXHR9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5sZXQgZmlyc3RfdGltZV9yZW5kZXIgPSB0cnVlO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5vcHRpb25zLCAoY3VycmVudF92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVfY2hhbmdlID09IHRydWUgfHwgY3VycmVudF92YWx1ZSA9PSBudWxsKSB7IHJldHVybjsgfSAgICBcbiAgICBzZXRfaW5wdXQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgaWYgKCFwcm9wcy5vcHRpb25zKSB7IHJldHVybjsgfVxuICAgIGlmICghcHJvcHMuZGlzYWJsZV9jaGFuZ2UgfHwgIWZpcnN0X3RpbWVfcmVuZGVyKSB7XG4gICAgXHRzZXRfaW5wdXQoKTtcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gc2V0X29wdGlvbnMoKSB7XG4gICAgb3B0aW9uc18yLnZhbHVlID0gW107XG4gICAgZ3JvdXBzX29wdGlvbnNfMi52YWx1ZSA9IFtdO1xuICAgIFxuICAgIGlmIChwcm9wcy5vcHRpb25zID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IGdyb3Vwc19kaWN0ID0ge307XG4gICAgcHJvcHMub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0bGV0IG9wdF8yID0geyAuLi5vcHRpb24gfTtcblx0aWYgKG9wdF8yLnZhbHVlID09IDAgfHwgb3B0XzIudmFsdWUgPT0gXCIwXCIpIHtcblx0ICAgIG9wdF8yLnZhbHVlID0gbnVsbDtcblx0fVxuXHRpZiAob3B0XzIudmFsdWUgPT0gbnVsbCkge1xuXHQgICAgb3B0XzIudmFsdWUgPSBvcHRfMi5sYWJlbDtcblx0fVxuXHRpZiAob3B0aW9uLmdyb3VwID09IG51bGwpIHtcblx0ICAgIG9wdGlvbnNfMi52YWx1ZS5wdXNoKG9wdF8yKTtcblx0fSBlbHNlIHtcblx0ICAgIGlmIChncm91cHNfZGljdFtvcHRpb24uZ3JvdXBdID09IG51bGwpIHtcblx0XHRncm91cHNfZGljdFtvcHRpb24uZ3JvdXBdID0geyBncm91cDogb3B0XzIuZ3JvdXAsIG9wdGlvbnM6IFtdIH07XG5cdCAgICB9XG5cdCAgICBncm91cHNfZGljdFtvcHRpb24uZ3JvdXBdLm9wdGlvbnMucHVzaChvcHRfMik7XG5cdH1cbiAgICB9KTtcbiAgICBncm91cHNfb3B0aW9uc18yLnZhbHVlID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KGdyb3Vwc19kaWN0KTtcbiAgICBcbn1cblxud2F0Y2goW29wdGlvbnNfMiwgZ3JvdXBzX29wdGlvbnNfMl0sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHJlbmRlcigpO1xufSwgeyBmbHVzaDogJ3Bvc3QnfSk7XG5cbmZ1bmN0aW9uIHNldF9pbnB1dCgpIHtcbiAgICBzZXRfb3B0aW9ucygpO1xuICAgIHNldF9zZWxlY3RlZF9vcHRpb24oKTtcbn1cblxuY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIGxldCBzZWxlY3QyRGl2ID0gc2VsZWN0Mi52YWx1ZTtcbiAgICBpZiAoZmlyc3RfdGltZV9yZW5kZXIgPT0gZmFsc2UpIHtcblx0ZGVzdHJveSgpO1xuICAgIH1cbiAgICBpZiAoISQoc2VsZWN0MkRpdikuaGFzQ2xhc3MoXCJzZWxlY3QyLWhpZGRlbi1hY2Nlc3NpYmxlXCIpKSB7XG5cdCQoc2VsZWN0MkRpdikuc2VsZWN0Mih7XG5cdCAgICB3aWR0aDogJzEwMCUnLFxuXHQgICAgaGVpZ2h0OiAnNTAwcHgnLFxuXHQgICAgdGhlbWU6ICdib290c3RyYXAtNScsXG5cdCAgICBkcm9wZG93blBhcmVudDogJChzZWxlY3QyRGl2KS5wYXJlbnQoKSxcblx0ICAgIGRyb3Bkb3duQXV0b1dpZHRoIDogdHJ1ZSxcblx0fSk7XG5cdCQoc2VsZWN0MkRpdikub24oJ3NlbGVjdDI6c2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIGxldCBkYXRhID0gZS5wYXJhbXMuZGF0YTtcblx0ICAgIGxldCB2YWx1ZSA9IGRhdGEuZWxlbWVudC5fdmFsdWU7XG5cdCAgICBsZXQgb3B0aW9uXzIgPSBmaW5kX29wdGlvbl8yX2Zyb21fdmFsdWUodmFsdWUpO1xuXHQgICAgbGV0IG9wdGlvbiA9IHByb3BzLm9wdGlvbnMuZmluZCgobykgPT4gby5sYWJlbCA9PSBvcHRpb25fMi5sYWJlbCk7XG5cdCAgICBpZiAodmFsdWUgIT0gcHJvcHMuc2VsZWN0ZWRfb3B0aW9uKSB7XG5cdFx0Ly8gZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsIHZhbHVlKTtcblx0XHQvLyBlbWl0KCdzZWxlY3Rfb3B0aW9uJywgdmFsdWUpO1xuXHRcdGVtaXQoJ3VwZGF0ZTpzZWxlY3RlZF9vcHRpb24nLCBvcHRpb24pO1xuXHRcdGVtaXQoJ3NlbGVjdF9vcHRpb24nLCBvcHRpb24pO1xuXHQgICAgfVxuXHR9KTtcbiAgICB9XG4gICAgZmlyc3RfdGltZV9yZW5kZXIgPSBmYWxzZTtcbiAgICAvLyB0aGlzLiRmb3JjZVVwZGF0ZSgpO1xuICAgIC8vICQoc2VsZWN0MkRpdikudmFsKHByb3BzLnNlbGVjdGVkX29wdGlvbik7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyByZW5kZXIgfSk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdHJ5IHtcblx0JChzZWxlY3QyLnZhbHVlKS5zZWxlY3QyKCdkZXN0cm95Jyk7XG5cdCQoc2VsZWN0Mi52YWx1ZSkub2ZmKCdzZWxlY3QyOnNlbGVjdCcpOyAgICBcbiAgICB9IGNhdGNoKGVycikge1xuXHRjb25zb2xlLmVycm9yKFwiRGVzdHJveSBzZWxlY3Qtc2VhcmNoIGNhdGNoIGVycm9yOlwiKTtcblx0Y29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn1cblxub25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBkZXN0cm95KCk7XG59KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+ICAgIFxuICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgIDxkaXYgY2xhc3M9XCJjb250cm9scyBkLWZsZXggZmxleC13cmFwXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1lLWF1dG8gYnRuLWdyb3VwLXNtXCI+XG4gICAgICAgIDxzbG90IG5hbWU9XCJiZWdpblwiPjwvc2xvdD5cbiAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF90aW1lX29wdGlvblwiXG4gICAgICAgICAgOmlkPVwiJ3RpbWVfcHJlc2V0X3JhbmdlX3BpY2tlcidcIlxuICAgICAgICAgIDpvcHRpb25zPVwidGltZV9wcmVzZXRfbGlzdFwiXG4gICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfc2VsZWN0X3RpbWUobnVsbClcIj5cbiAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1zLTJcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWNhbGVuZGFyLWFsdFwiPjwvaT5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCAgY2xhc3M9XCJmbGF0cGlja3IgZmxhdHBpY2tyLWlucHV0XCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkNob29zZSBhIGRhdGUuLlwiIGRhdGEtaWQ9XCJkYXRldGltZVwiIHJlZj1cImJlZ2luLWRhdGVcIj5cbiAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLWRhdGVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiBAY2hhbmdlPVwiY2hhbmdlX2JlZ2luX2RhdGVcIiB0eXBlPVwiZGF0ZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJiZWdpbi10aW1lXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgdHlwZT1cInRpbWVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBiZWdpbi10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItcmlnaHQtMCBmaXgtc2FmYXJpLWlucHV0XCI+IC0tPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIj48L2k+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8aW5wdXQgIGNsYXNzPVwiZmxhdHBpY2tyIGZsYXRwaWNrci1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJDaG9vc2UgYSBkYXRlLi5cIiBkYXRhLWlkPVwiZGF0ZXRpbWVcIiByZWY9XCJlbmQtZGF0ZVwiPlxuICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiZW5kLWRhdGVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwiZGF0ZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGVuZC10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItbGVmdC0wIGZpeC1zYWZhcmktaW5wdXRcIiBzdHlsZT1cIndpZHRoOiAyLjVyZW07XCI+IC0tPlxuICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiZW5kLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGVuZC10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItbGVmdC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICA8c3BhbiB2LXNob3c9XCJ3cm9uZ19kYXRlXCIgOnRpdGxlPVwiaTE4bignd3JvbmdfZGF0ZV9yYW5nZScpXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDowLjJyZW07Y29sb3I6cmVkO1wiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXMtMlwiPlxuICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCIhZW5hYmxlX2FwcGx5IHx8IHdyb25nX2RhdGVcIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJqdW1wX3RpbWVfYmFjaygpXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgcmVmPVwiYnRuLWp1bXAtdGltZS1iYWNrXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fbW92ZV9sZWZ0JylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1sZWZ0XCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwianVtcF90aW1lX2FoZWFkKClcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmsgbWUtMlwiIHJlZj1cImJ0bi1qdW1wLXRpbWUtYWhlYWRcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9tb3ZlX3JpZ2h0JylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInpvb20oMilcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1pblwiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21faW4nKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXNlYXJjaC1wbHVzXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiem9vbSgwLjUpXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgcmVmPVwiYnRuLXpvb20tb3V0XCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fem9vbV9vdXQnKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXNlYXJjaC1taW51c1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImhpc3RvcnlfbGFzdF9zdGF0dXMgPT0gbnVsbFwiIEBjbGljaz1cImFwcGx5X3N0YXR1c19ieV9oaXN0b3J5KClcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl91bmRvJylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS11bmRvXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwic2VsZWN0X3RpbWVfdmFsdWUgPT0gJ2N1c3RvbSdcIiBAY2xpY2s9XCJjaGFuZ2Vfc2VsZWN0X3RpbWUoKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3JlZnJlc2gnKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG5cdFx0PHNsb3QgbmFtZT1cImV4dHJhX2J1dHRvbnNcIj48L3Nsb3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+ICBcbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcblx0J3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRlbmFibGVfcmVmcmVzaDogQm9vbGVhbixcbiAgICB9LFxuICAgIHdhdGNoOiB7XG5cdFwiZW5hYmxlX3JlZnJlc2hcIjogZnVuY3Rpb24odmFsLCBvbGRWYWwpIHtcblx0ICAgIGlmICh2YWwgPT0gdHJ1ZSkge1xuXHRcdHRoaXMuc3RhcnRfcmVmcmVzaCgpO1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgIT0gbnVsbCkge1xuXHRcdGNsZWFySW50ZXJ2YWwodGhpcy5yZWZyZXNoX2ludGVydmFsKTtcblx0XHR0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgPSBudWxsO1xuXHQgICAgfVxuXHR9XG4gICAgfSxcdFxuICAgIGVtaXRzOiBbXCJlcG9jaF9jaGFuZ2VcIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XHRcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdGxldCBlcG9jaF9iZWdpbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIik7XG5cdGxldCBlcG9jaF9lbmQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKTtcblx0aWYgKGVwb2NoX2JlZ2luICE9IG51bGwgJiYgZXBvY2hfZW5kICE9IG51bGwpIHtcblx0ICAgIC8vIHVwZGF0ZSB0aGUgc3RhdHVzXG5cdCAgICBcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCB7IGVwb2NoX2JlZ2luOiBOdW1iZXIucGFyc2VJbnQoZXBvY2hfYmVnaW4pLCBlcG9jaF9lbmQ6IE51bWJlci5wYXJzZUludChlcG9jaF9lbmQpIH0sIHRoaXMuJHByb3BzLmlkKTtcblx0fVxuXHRsZXQgbWUgPSB0aGlzO1xuXHRsZXQgZl9zZXRfcGlja2VyID0gKHBpY2tlciwgdmFyX25hbWUpID0+IHtcblx0ICAgIHJldHVybiBmbGF0cGlja3IoJCh0aGlzLiRyZWZzW3BpY2tlcl0pLCB7XG5cdFx0ZW5hYmxlVGltZTogdHJ1ZSxcblx0XHRkYXRlRm9ybWF0OiBcImQvbS9ZIEg6aVwiLFxuXHRcdC8vYWx0SW5wdXQ6IHRydWUsXG5cdFx0Ly9kYXRlRm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIixcblx0XHQvL2FsdEZvcm1hdDogXCJkLW0tWSBIOmlcIixcblx0XHQvL2xvY2FsZTogXCJpdFwiLFxuXHRcdHRpbWVfMjRocjogdHJ1ZSxcblx0XHRjbGlja09wZW5zOiB0cnVlLFx0XHRcblx0XHQvL21vZGU6IFwicmFuZ2VcIixcblx0XHQvL3N0YXRpYzogdHJ1ZSxcblx0XHRvbkNoYW5nZTogZnVuY3Rpb24oc2VsZWN0ZWREYXRlcywgZGF0ZVN0ciwgaW5zdGFuY2UpIHtcblx0XHQgICAgbWUuZW5hYmxlX2FwcGx5ID0gdHJ1ZTtcblx0XHQgICAgbWUud3JvbmdfZGF0ZSA9IG1lLmZsYXRfYmVnaW5fZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSA+IG1lLmZsYXRfZW5kX2RhdGUuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCk7XG5cdFx0ICAgIC8vbWUuYVtkYXRhXSA9IGQ7XG5cdFx0fSxcblx0ICAgIH0pO1xuXHR9O1xuXHR0aGlzLmZsYXRfYmVnaW5fZGF0ZSA9IGZfc2V0X3BpY2tlcihcImJlZ2luLWRhdGVcIiwgXCJiZWdpbl9kYXRlXCIpO1xuXHR0aGlzLmZsYXRfZW5kX2RhdGUgPSBmX3NldF9waWNrZXIoXCJlbmQtZGF0ZVwiLCBcImVuZF9kYXRlXCIpO1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fZXZlbnRfY2hhbmdlKHRoaXMuJHByb3BzLmlkLCBudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgKG5ld19zdGF0dXMpID0+IHRoaXMub25fc3RhdHVzX3VwZGF0ZWQobmV3X3N0YXR1cyksIHRydWUpO1xuXHRcblx0Ly8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcblx0Ly9jb25zb2xlLmxvZyh0aGlzLiRwcm9wc1tcImlkXCJdKTtcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG5cdGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoKSB7XG5cdCAgICB0aGlzLnN0YXJ0X3JlZnJlc2goKTtcblx0fVxuICAgIH0sXG4gICAgXG4gICAgLyoqIE1ldGhvZHMgb2YgdGhlIGNvbXBvbmVudC4gKi9cbiAgICBtZXRob2RzOiB7XG5cdHN0YXJ0X3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5yZWZyZXNoX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdGxldCB2YWx1ZSA9IHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24/LnZhbHVlO1xuXHRcdGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT0gXCJjdXN0b21cIikge1xuXHRcdCAgICB0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID0gdHJ1ZTtcblx0XHQgICAgdGhpcy5jaGFuZ2Vfc2VsZWN0X3RpbWUodHJ1ZSk7XG5cdFx0fVxuXHQgICAgfSwgdGhpcy5yZWZyZXNoX2ludGVydmFsX3NlY29uZHMgKiAxMDAwKTtcblx0ICAgIC8vIH0sIDEwKiAxMDAwKTtcblx0fSxcblx0dXRjX3NfdG9fc2VydmVyX2RhdGU6IGZ1bmN0aW9uKHV0Y19zZWNvbmRzKSB7XG5cdCAgICBsZXQgdXRjID0gdXRjX3NlY29uZHMgKiAxMDAwO1xuXHQgICAgbGV0IGRfbG9jYWwgPSBuZXcgRGF0ZSh1dGMpO1xuXHQgICAgbGV0IGxvY2FsX29mZnNldCA9IGRfbG9jYWwuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblx0ICAgIGxldCBzZXJ2ZXJfb2Zmc2V0ID0gbW9tZW50LnR6KHV0YywgbnRvcF96b25laW5mbykuX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbWludXRlcyA9ICBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuXHQgICAgdmFyIGRfc2VydmVyID0gbmV3IERhdGUodXRjICsgb2Zmc2V0X21zKTtcblx0ICAgIHJldHVybiBkX3NlcnZlcjtcblx0fSxcblx0c2VydmVyX2RhdGVfdG9fZGF0ZTogZnVuY3Rpb24oZGF0ZSwgZm9ybWF0KSB7XG5cdCAgICBsZXQgdXRjID0gZGF0ZS5nZXRUaW1lKCk7XG5cdCAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXHQgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9taW51dGVzID0gIHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG5cdCAgICB2YXIgZF9sb2NhbCA9IG5ldyBEYXRlKHV0YyAtIG9mZnNldF9tcyk7XG5cdCAgICByZXR1cm4gZF9sb2NhbDtcblx0fSxcbiAgICAgICAgb25fc3RhdHVzX3VwZGF0ZWQ6IGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgICAgbGV0IGVuZF9kYXRlX3RpbWVfdXRjID0gRGF0ZS5ub3coKTsgICAgICAgIFxuICAgICAgICAgICAgLy8gZGVmYXVsdCBiZWdpbiBkYXRlIHRpbWUgbm93IC0gMzAgbWludXRlc1xuICAgICAgICAgICAgbGV0IGJlZ2luX2RhdGVfdGltZV91dGMgPSBlbmRfZGF0ZV90aW1lX3V0YyAtIDMwICogNjAgKiAxMDAwO1xuICAgICAgICAgICAgaWYgKHN0YXR1cy5lcG9jaF9lbmQgIT0gbnVsbCAmJiBzdGF0dXMuZXBvY2hfYmVnaW4gIT0gbnVsbFxuXHRcdCYmIE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfZW5kKSA+IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfYmVnaW4pKSB7XG5cdFx0c3RhdHVzLmVwb2NoX2JlZ2luID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbik7XG5cdFx0c3RhdHVzLmVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfZW5kKTtcbiAgICAgICAgICAgICAgICBlbmRfZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwO1xuICAgICAgICAgICAgICAgIGJlZ2luX2RhdGVfdGltZV91dGMgPSBzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX2RhdGVfdGltZV91dGMpO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9iZWdpbiA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX2RhdGVfdGltZV91dGMpO1xuXHRcdG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChzdGF0dXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzLCB0aGlzLiRwcm9wcy5pZCk7XG4gICAgICAgICAgICB9XG5cdCAgICAvLyB0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZXREYXRlKG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDApKTtcblx0ICAgIC8vIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwKSk7XG5cdCAgICB0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2JlZ2luKSk7XG5cdCAgICB0aGlzLmZsYXRfZW5kX2RhdGUuc2V0RGF0ZSh0aGlzLnV0Y19zX3RvX3NlcnZlcl9kYXRlKHN0YXR1cy5lcG9jaF9lbmQpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImJlZ2luLWRhdGVcIiwgYmVnaW5fZGF0ZV90aW1lX3V0YywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tdGltZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC1kYXRlXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJlbmQtdGltZVwiLCBlbmRfZGF0ZV90aW1lX3V0YywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldF9zZWxlY3RfdGltZV92YWx1ZShiZWdpbl9kYXRlX3RpbWVfdXRjLCBlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cyA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG5cdCAgICBpZiAodGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9PSBmYWxzZSkge1xuXHRcdHRoaXMuYWRkX3N0YXR1c19pbl9oaXN0b3J5KHRoaXMuZXBvY2hfc3RhdHVzKTtcblx0ICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW5hYmxlX2FwcGx5ID0gZmFsc2U7XG5cdCAgICB0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID0gZmFsc2U7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRfc2VsZWN0X3RpbWVfdmFsdWU6IGZ1bmN0aW9uKGJlZ2luX3V0YywgZW5kX3V0Yykge1xuICAgICAgICAgICAgbGV0IHNfdmFsdWVzID0gdGhpcy5nZXRfc2VsZWN0X3ZhbHVlcygpO1xuICAgICAgICAgICAgY29uc3QgdG9sZXJhbmNlID0gNjA7XG4gICAgICAgICAgICBjb25zdCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZF91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF91dGMpO1xuICAgICAgICAgICAgY29uc3QgYmVnaW5fdXRjX3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl91dGMpO1xuXG5cdCAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX2JldHdlZW4oZW5kX3V0Y19zLCBub3csIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSBzX3ZhbHVlcy5taW5fNSwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJtaW5fNVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSBzX3ZhbHVlcy5taW5fMzAsIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwibWluXzMwXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLmhvdXIsIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiaG91clwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSBzX3ZhbHVlcy5kYXksIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiZGF5XCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLndlZWssIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwid2Vla1wiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSBzX3ZhbHVlcy5tb250aCwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJtb250aFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSBzX3ZhbHVlcy55ZWFyLCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcInllYXJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJjdXN0b21cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImN1c3RvbVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50bHlfYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgICAgaWYoZWxlbWVudC52YWx1ZSA9PSB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbiA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50bHlfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2JlZ2luID0gdGhpcy4kcmVmc1tcImJlZ2luLWRhdGVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBsZXQgZF90aW1lX2JlZ2luID0gdGhpcy4kcmVmc1tcImJlZ2luLXRpbWVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldEhvdXJzKGRfdGltZV9iZWdpbi5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0TWludXRlcyhkX3RpbWVfYmVnaW4uZ2V0TWludXRlcygpICsgZF90aW1lX2JlZ2luLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRTZWNvbmRzKGRfdGltZV9iZWdpbi5nZXRTZWNvbmRzKCkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBsZXQgZGF0ZV9lbmQgPSB0aGlzLiRyZWZzW1wiZW5kLWRhdGVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBsZXQgZF90aW1lX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldEhvdXJzKGRfdGltZV9lbmQuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2VuZC5zZXRNaW51dGVzKGRfdGltZV9lbmQuZ2V0TWludXRlcygpICsgZF90aW1lX2VuZC5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldFNlY29uZHMoZF90aW1lX2VuZC5nZXRTZWNvbmRzKCkpO1xuICAgICAgICAgICAgLy8gbGV0IGVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9iZWdpbi52YWx1ZU9mKCkpO1xuICAgICAgICAgICAgLy8gbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGRhdGVfZW5kLnZhbHVlT2YoKSk7XG5cdCAgICBsZXQgbm93X3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcblx0ICAgIGxldCBiZWdpbl9kYXRlID0gdGhpcy5zZXJ2ZXJfZGF0ZV90b19kYXRlKHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuXHQgICAgbGV0IGVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZS5nZXRUaW1lKCkpO1xuXHQgICAgbGV0IGVuZF9kYXRlID0gdGhpcy5zZXJ2ZXJfZGF0ZV90b19kYXRlKHRoaXMuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdKTtcblx0ICAgIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZS5nZXRUaW1lKCkpO1xuXHQgICAgaWYgKGVwb2NoX2VuZCA+IG5vd19zKSB7XG5cdFx0ZXBvY2hfZW5kID0gbm93X3M7XG5cdCAgICB9XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0geyBlcG9jaF9iZWdpbiAsIGVwb2NoX2VuZCB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBzZXRfZGF0ZV90aW1lOiBmdW5jdGlvbihyZWZfbmFtZSwgdXRjX3RzLCBpc190aW1lKSB7XG4gICAgICAgIC8vICAgICB1dGNfdHMgPSB0aGlzLmdldF91dGNfc2Vjb25kcyh1dGNfdHMpICogMTAwMDsgICAgICAgIFxuICAgICAgICAvLyAgICAgbGV0IGRhdGVfdGltZSA9IG5ldyBEYXRlKHV0Y190cyk7XG4gICAgICAgIC8vICAgICBkYXRlX3RpbWUuc2V0TWludXRlcyhkYXRlX3RpbWUuZ2V0TWludXRlcygpIC0gZGF0ZV90aW1lLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuXHQvLyAgICAgaWYgKGlzX3RpbWUpIHtcblx0Ly8gXHR0aGlzLiRyZWZzW3JlZl9uYW1lXS52YWx1ZSA9IGRhdGVfdGltZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygxMSwxNik7XG5cdC8vICAgICB9IGVsc2Uge1xuXHQvLyBcdHRoaXMuJHJlZnNbcmVmX25hbWVdLnZhbHVlID0gZGF0ZV90aW1lLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsMTApO1xuXHQvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBjaGFuZ2Vfc2VsZWN0X3RpbWU6IGZ1bmN0aW9uKHJlZnJlc2hfZGF0YSkge1xuICAgICAgICAgICAgbGV0IHNfdmFsdWVzID0gdGhpcy5nZXRfc2VsZWN0X3ZhbHVlcygpO1xuICAgICAgICAgICAgbGV0IGludGVydmFsX3MgPSBzX3ZhbHVlc1t0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uLnZhbHVlXTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9iZWdpbiA9IGVwb2NoX2VuZCAtIGludGVydmFsX3M7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0geyBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZXBvY2hfZW5kLCByZWZyZXNoX2RhdGEgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X3NlbGVjdF92YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IG1pbiA9IDYwO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaW5fNTogbWluICogNSxcbiAgICAgICAgICAgICAgICBtaW5fMzA6IG1pbiAqIDMwLFxuICAgICAgICAgICAgICAgIGhvdXI6IG1pbiAqIDYwLFxuICAgICAgICAgICAgICAgIGRheTogdGhpcy5nZXRfbGFzdF9kYXlfc2Vjb25kcygpLCBcbiAgICAgICAgICAgICAgICB3ZWVrOiB0aGlzLmdldF9sYXN0X3dlZWtfc2Vjb25kcygpLCBcbiAgICAgICAgICAgICAgICBtb250aDogdGhpcy5nZXRfbGFzdF9tb250aF9zZWNvbmRzKCksIFxuICAgICAgICAgICAgICAgIHllYXI6IHRoaXMuZ2V0X2xhc3RfeWVhcl9zZWNvbmRzKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBnZXRfdXRjX3NlY29uZHM6IGZ1bmN0aW9uKHV0Y190cykge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludCh1dGNfdHMgLyAxMDAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNfYmV0d2VlbjogZnVuY3Rpb24oeCwgeSwgdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4geCA+PSB5IC0gdG9sZXJhbmNlICYmIHggPD0geTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X2xhc3RfZGF5X3NlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0LnNldERhdGUodC5nZXREYXRlKCkgLSAxKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9sYXN0X3dlZWtfc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHQuc2V0RGF0ZSh0LmdldERhdGUoKSAtIDcpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X2xhc3RfbW9udGhfc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHQuc2V0TW9udGgodC5nZXRNb250aCgpIC0gMSkpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbGFzdF95ZWFyX3NlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0LnNldE1vbnRoKHQuZ2V0TW9udGgoKSAtIDEyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHpvb206IGZ1bmN0aW9uKHNjYWxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbikgLyBzY2FsZTtcbiAgICAgICAgICAgIGxldCBjZW50ZXIgPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC8gMiArIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC8gMik7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IGNlbnRlciAtIGludGVydmFsIC8gMjtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IGNlbnRlciArIGludGVydmFsIC8gMjtcbiAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPiBub3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBOdW1iZXIucGFyc2VJbnQodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gTnVtYmVyLnBhcnNlSW50KHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9PSB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAtPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGp1bXBfdGltZV9iYWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAtPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAganVtcF90aW1lX2FoZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICBsZXQgcHJldmlvdXNfZW5kID0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgKz0gKDMwICogbWluKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPiBub3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiArPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gcHJldmlvdXNfZW5kKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBlbWl0X2Vwb2NoX2NoYW5nZTogZnVuY3Rpb24oZXBvY2hfc3RhdHVzLCBpZCkge1xuICAgICAgICAgICAgaWYgKGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPT0gbnVsbCB8fCBlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPT0gbnVsbCkgeyByZXR1cm47IH07XG4gICAgICAgICAgICB0aGlzLndyb25nX2RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPiBlcG9jaF9zdGF0dXMuZXBvY2hfZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53cm9uZ19kYXRlID0gdHJ1ZTtcblx0XHRyZXR1cm47XG4gICAgICAgICAgICB9XG5cdCAgICBpZiAoaWQgIT0gdGhpcy5pZCkge1xuXHRcdHRoaXMub25fc3RhdHVzX3VwZGF0ZWQoZXBvY2hfc3RhdHVzKTtcblx0ICAgIH1cbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCBlcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuICAgICAgICAgICAgdGhpcy4kZW1pdChcImVwb2NoX2NoYW5nZVwiLCBlcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuXHRhZGRfc3RhdHVzX2luX2hpc3Rvcnk6IGZ1bmN0aW9uKGVwb2NoX3N0YXR1cykge1xuXHQgICAgdGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzID0gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAxXTtcblx0ICAgIGlmICh0aGlzLmhpc3RvcnkubGVuZ3RoID4gNSkge1xuXHRcdHRoaXMuaGlzdG9yeS5zaGlmdCgpO1xuXHQgICAgfVxuXHQgICAgdGhpcy5oaXN0b3J5LnB1c2goZXBvY2hfc3RhdHVzKTtcblx0fSxcblx0XG5cdGFwcGx5X3N0YXR1c19ieV9oaXN0b3J5OiBmdW5jdGlvbigpIHtcblx0ICAgIGlmICh0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcblx0ICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcblx0ICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzKTtcblx0fSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAgIFByaXZhdGUgZGF0ZSBvZiB2dWUgY29tcG9uZW50LlxuICAgICovXG4gIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgLy9zdGF0dXNfaWQ6IFwiZGF0YS10aW1lLXJhbmdlLXBpY2tlclwiICsgdGhpcy4kcHJvcHMuaWQsXG5cdCAgZXBvY2hfc3RhdHVzOiBudWxsLFxuXHQgIHJlZnJlc2hfaW50ZXJ2YWw6IG51bGwsXG5cdCAgcmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzOiA2MCxcblx0ICB1cGRhdGVfZnJvbV9pbnRlcnZhbDogZmFsc2UsXG5cdCAgaGlzdG9yeTogW10sXG5cdCAgaGlzdG9yeV9sYXN0X3N0YXR1czogbnVsbCxcbiAgICAgIGVuYWJsZV9hcHBseTogZmFsc2UsXG5cdCAgc2VsZWN0X3RpbWVfdmFsdWU6IFwibWluXzVcIixcblx0ICBzZWxlY3RlZF90aW1lX29wdGlvbjogeyB2YWx1ZTogXCJtaW5fNVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy41X21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgd3JvbmdfZGF0ZTogZmFsc2UsXG4gICAgICBmbGF0X2JlZ2luX2RhdGU6IG51bGwsXG4gICAgICBmbGF0X2VuZF9kYXRlOiBudWxsLFxuICAgICAgdGltZV9wcmVzZXRfbGlzdDogW1xuICAgICAgICB7IHZhbHVlOiBcIm1pbl81XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjVfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwibWluXzMwXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiaG91clwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5ob3VyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiZGF5XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmRheScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICB7IHZhbHVlOiBcIndlZWtcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMud2VlaycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICB7IHZhbHVlOiBcIm1vbnRoXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLm1vbnRoJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwieWVhclwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy55ZWFyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiY3VzdG9tXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmN1c3RvbScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSwgZGlzYWJsZWQ6IHRydWUsIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbn1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4uZGF0ZV90aW1lX2lucHV0IHtcbiAgd2lkdGg6IDEwLjVyZW07XG4gIG1heC13aWR0aDogMTAuNXJlbTtcbiAgbWluLXdpZHRoOiAxMC41cmVtO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4gICAgXG4gIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIGQtZmxleCBmbGV4LXdyYXBcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbWUtYXV0byBidG4tZ3JvdXAtc21cIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3RpbWVfb3B0aW9uXCJcbiAgICAgICAgICA6aWQ9XCIndGltZV9wcmVzZXRfcmFuZ2VfcGlja2VyJ1wiXG4gICAgICAgICAgOm9wdGlvbnM9XCJ0aW1lX3ByZXNldF9saXN0XCJcbiAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zZWxlY3RfdGltZShudWxsKVwiPlxuICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXMtMlwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY2FsZW5kYXItYWx0XCI+PC9pPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPGlucHV0ICBjbGFzcz1cImZsYXRwaWNrciBmbGF0cGlja3ItaW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCIgZGF0YS1pZD1cImRhdGV0aW1lXCIgcmVmPVwiYmVnaW4tZGF0ZVwiPlxuICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiYmVnaW4tZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIEBjaGFuZ2U9XCJjaGFuZ2VfYmVnaW5fZGF0ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgYmVnaW4tdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLXJpZ2h0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCAgY2xhc3M9XCJmbGF0cGlja3IgZmxhdHBpY2tyLWlucHV0XCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkNob29zZSBhIGRhdGUuLlwiIGRhdGEtaWQ9XCJkYXRldGltZVwiIHJlZj1cImVuZC1kYXRlXCI+XG4gICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiIHN0eWxlPVwid2lkdGg6IDIuNXJlbTtcIj4gLS0+XG4gICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtdGltZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJ0aW1lXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cIndyb25nX2RhdGVcIiA6dGl0bGU9XCJpMThuKCd3cm9uZ19kYXRlX3JhbmdlJylcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjAuMnJlbTtjb2xvcjpyZWQ7XCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtcy0yXCI+XG4gICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cIiFlbmFibGVfYXBwbHkgfHwgd3JvbmdfZGF0ZVwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cImp1bXBfdGltZV9iYWNrKClcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tanVtcC10aW1lLWJhY2tcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9tb3ZlX2xlZnQnKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LWxlZnRcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJqdW1wX3RpbWVfYWhlYWQoKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGluayBtZS0yXCIgcmVmPVwiYnRuLWp1bXAtdGltZS1haGVhZFwiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfcmlnaHQnKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0XCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiem9vbSgyKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi16b29tLWluXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fem9vbV9pbicpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLXBsdXNcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJ6b29tKDAuNSlcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1vdXRcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl96b29tX291dCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLW1pbnVzXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsXCIgQGNsaWNrPVwiYXBwbHlfc3RhdHVzX2J5X2hpc3RvcnkoKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3VuZG8nKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXVuZG9cIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJzZWxlY3RfdGltZV92YWx1ZSA9PSAnY3VzdG9tJ1wiIEBjbGljaz1cImNoYW5nZV9zZWxlY3RfdGltZSgpXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fcmVmcmVzaCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblx0XHQ8c2xvdCBuYW1lPVwiZXh0cmFfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj4gIFxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuXHQnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGVuYWJsZV9yZWZyZXNoOiBCb29sZWFuLFxuICAgIH0sXG4gICAgd2F0Y2g6IHtcblx0XCJlbmFibGVfcmVmcmVzaFwiOiBmdW5jdGlvbih2YWwsIG9sZFZhbCkge1xuXHQgICAgaWYgKHZhbCA9PSB0cnVlKSB7XG5cdFx0dGhpcy5zdGFydF9yZWZyZXNoKCk7XG5cdCAgICB9IGVsc2UgaWYgKHRoaXMucmVmcmVzaF9pbnRlcnZhbCAhPSBudWxsKSB7XG5cdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLnJlZnJlc2hfaW50ZXJ2YWwpO1xuXHRcdHRoaXMucmVmcmVzaF9pbnRlcnZhbCA9IG51bGw7XG5cdCAgICB9XG5cdH1cbiAgICB9LFx0XG4gICAgZW1pdHM6IFtcImVwb2NoX2NoYW5nZVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcdFxuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0bGV0IGVwb2NoX2JlZ2luID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKTtcblx0bGV0IGVwb2NoX2VuZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuXHRpZiAoZXBvY2hfYmVnaW4gIT0gbnVsbCAmJiBlcG9jaF9lbmQgIT0gbnVsbCkge1xuXHQgICAgLy8gdXBkYXRlIHRoZSBzdGF0dXNcblx0ICAgIFxuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChlcG9jaF9iZWdpbiksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVwb2NoX2VuZCkgfSwgdGhpcy4kcHJvcHMuaWQpO1xuXHR9XG5cdGxldCBtZSA9IHRoaXM7XG5cdGxldCBmX3NldF9waWNrZXIgPSAocGlja2VyLCB2YXJfbmFtZSkgPT4ge1xuXHQgICAgcmV0dXJuIGZsYXRwaWNrcigkKHRoaXMuJHJlZnNbcGlja2VyXSksIHtcblx0XHRlbmFibGVUaW1lOiB0cnVlLFxuXHRcdGRhdGVGb3JtYXQ6IFwiZC9tL1kgSDppXCIsXG5cdFx0Ly9hbHRJbnB1dDogdHJ1ZSxcblx0XHQvL2RhdGVGb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuXHRcdC8vYWx0Rm9ybWF0OiBcImQtbS1ZIEg6aVwiLFxuXHRcdC8vbG9jYWxlOiBcIml0XCIsXG5cdFx0dGltZV8yNGhyOiB0cnVlLFxuXHRcdGNsaWNrT3BlbnM6IHRydWUsXHRcdFxuXHRcdC8vbW9kZTogXCJyYW5nZVwiLFxuXHRcdC8vc3RhdGljOiB0cnVlLFxuXHRcdG9uQ2hhbmdlOiBmdW5jdGlvbihzZWxlY3RlZERhdGVzLCBkYXRlU3RyLCBpbnN0YW5jZSkge1xuXHRcdCAgICBtZS5lbmFibGVfYXBwbHkgPSB0cnVlO1xuXHRcdCAgICBtZS53cm9uZ19kYXRlID0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpID4gbWUuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKTtcblx0XHQgICAgLy9tZS5hW2RhdGFdID0gZDtcblx0XHR9LFxuXHQgICAgfSk7XG5cdH07XG5cdHRoaXMuZmxhdF9iZWdpbl9kYXRlID0gZl9zZXRfcGlja2VyKFwiYmVnaW4tZGF0ZVwiLCBcImJlZ2luX2RhdGVcIik7XG5cdHRoaXMuZmxhdF9lbmRfZGF0ZSA9IGZfc2V0X3BpY2tlcihcImVuZC1kYXRlXCIsIFwiZW5kX2RhdGVcIik7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9ldmVudF9jaGFuZ2UodGhpcy4kcHJvcHMuaWQsIG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCAobmV3X3N0YXR1cykgPT4gdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChuZXdfc3RhdHVzKSwgdHJ1ZSk7XG5cdFxuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHQvL2NvbnNvbGUubG9nKHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcblx0aWYgKHRoaXMuZW5hYmxlX3JlZnJlc2gpIHtcblx0ICAgIHRoaXMuc3RhcnRfcmVmcmVzaCgpO1xuXHR9XG4gICAgfSxcbiAgICBcbiAgICAvKiogTWV0aG9kcyBvZiB0aGUgY29tcG9uZW50LiAqL1xuICAgIG1ldGhvZHM6IHtcblx0c3RhcnRfcmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0bGV0IHZhbHVlID0gdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbj8udmFsdWU7XG5cdFx0aWYgKHRoaXMuZW5hYmxlX3JlZnJlc2ggJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPSBcImN1c3RvbVwiKSB7XG5cdFx0ICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSB0cnVlO1xuXHRcdCAgICB0aGlzLmNoYW5nZV9zZWxlY3RfdGltZSh0cnVlKTtcblx0XHR9XG5cdCAgICB9LCB0aGlzLnJlZnJlc2hfaW50ZXJ2YWxfc2Vjb25kcyAqIDEwMDApO1xuXHQgICAgLy8gfSwgMTAqIDEwMDApO1xuXHR9LFxuXHR1dGNfc190b19zZXJ2ZXJfZGF0ZTogZnVuY3Rpb24odXRjX3NlY29uZHMpIHtcblx0ICAgIGxldCB1dGMgPSB1dGNfc2Vjb25kcyAqIDEwMDA7XG5cdCAgICBsZXQgZF9sb2NhbCA9IG5ldyBEYXRlKHV0Yyk7XG5cdCAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZF9sb2NhbC5nZXRUaW1lem9uZU9mZnNldCgpO1xuXHQgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9taW51dGVzID0gIHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG5cdCAgICB2YXIgZF9zZXJ2ZXIgPSBuZXcgRGF0ZSh1dGMgKyBvZmZzZXRfbXMpO1xuXHQgICAgcmV0dXJuIGRfc2VydmVyO1xuXHR9LFxuXHRzZXJ2ZXJfZGF0ZV90b19kYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHtcblx0ICAgIGxldCB1dGMgPSBkYXRlLmdldFRpbWUoKTtcblx0ICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cdCAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSAgc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcblx0ICAgIHZhciBkX2xvY2FsID0gbmV3IERhdGUodXRjIC0gb2Zmc2V0X21zKTtcblx0ICAgIHJldHVybiBkX2xvY2FsO1xuXHR9LFxuICAgICAgICBvbl9zdGF0dXNfdXBkYXRlZDogZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICBsZXQgZW5kX2RhdGVfdGltZV91dGMgPSBEYXRlLm5vdygpOyAgICAgICAgXG4gICAgICAgICAgICAvLyBkZWZhdWx0IGJlZ2luIGRhdGUgdGltZSBub3cgLSAzMCBtaW51dGVzXG4gICAgICAgICAgICBsZXQgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IGVuZF9kYXRlX3RpbWVfdXRjIC0gMzAgKiA2MCAqIDEwMDA7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLmVwb2NoX2VuZCAhPSBudWxsICYmIHN0YXR1cy5lcG9jaF9iZWdpbiAhPSBudWxsXG5cdFx0JiYgTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpID4gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbikpIHtcblx0XHRzdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2JlZ2luKTtcblx0XHRzdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgICAgIGVuZF9kYXRlX3RpbWVfdXRjID0gc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDA7XG4gICAgICAgICAgICAgICAgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZV90aW1lX3V0Yyk7XG5cdFx0bnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMsIHRoaXMuJHByb3BzLmlkKTtcbiAgICAgICAgICAgIH1cblx0ICAgIC8vIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCkpO1xuXHQgICAgLy8gdGhpcy5mbGF0X2VuZF9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApKTtcblx0ICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUodGhpcy51dGNfc190b19zZXJ2ZXJfZGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4pKTtcblx0ICAgIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2VuZCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tZGF0ZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJiZWdpbi10aW1lXCIsIGJlZ2luX2RhdGVfdGltZV91dGMsIHRydWUpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiZW5kLWRhdGVcIiwgZW5kX2RhdGVfdGltZV91dGMsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC10aW1lXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X3NlbGVjdF90aW1lX3ZhbHVlKGJlZ2luX2RhdGVfdGltZV91dGMsIGVuZF9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcblx0ICAgIGlmICh0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID09IGZhbHNlKSB7XG5cdFx0dGhpcy5hZGRfc3RhdHVzX2luX2hpc3RvcnkodGhpcy5lcG9jaF9zdGF0dXMpO1xuXHQgICAgfVxuICAgICAgICAgICAgdGhpcy5lbmFibGVfYXBwbHkgPSBmYWxzZTtcblx0ICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSBmYWxzZTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybCh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldF9zZWxlY3RfdGltZV92YWx1ZTogZnVuY3Rpb24oYmVnaW5fdXRjLCBlbmRfdXRjKSB7XG4gICAgICAgICAgICBsZXQgc192YWx1ZXMgPSB0aGlzLmdldF9zZWxlY3RfdmFsdWVzKCk7XG4gICAgICAgICAgICBjb25zdCB0b2xlcmFuY2UgPSA2MDtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgY29uc3QgZW5kX3V0Y19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX3V0Yyk7XG4gICAgICAgICAgICBjb25zdCBiZWdpbl91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX3V0Yyk7XG5cblx0ICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfYmV0d2VlbihlbmRfdXRjX3MsIG5vdywgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLm1pbl81LCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcIm1pbl81XCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLm1pbl8zMCwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJtaW5fMzBcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMuaG91ciwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJob3VyXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLmRheSwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJkYXlcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMud2VlaywgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJ3ZWVrXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLm1vbnRoLCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcIm1vbnRoXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLnllYXIsIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwieWVhclwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImN1c3RvbVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSBmYWxzZVxuICAgICAgICAgICAgICBpZihlbGVtZW50LnZhbHVlID09IHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gbGV0IGRhdGVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0SG91cnMoZF90aW1lX2JlZ2luLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRNaW51dGVzKGRfdGltZV9iZWdpbi5nZXRNaW51dGVzKCkgKyBkX3RpbWVfYmVnaW4uZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldFNlY29uZHMoZF90aW1lX2JlZ2luLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfZW5kID0gdGhpcy4kcmVmc1tcImVuZC10aW1lXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0SG91cnMoZF90aW1lX2VuZC5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldE1pbnV0ZXMoZF90aW1lX2VuZC5nZXRNaW51dGVzKCkgKyBkX3RpbWVfZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0U2Vjb25kcyhkX3RpbWVfZW5kLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhkYXRlX2JlZ2luLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9lbmQudmFsdWVPZigpKTtcblx0ICAgIGxldCBub3dfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXHQgICAgbGV0IGJlZ2luX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXSk7XG5cdCAgICBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl9kYXRlLmdldFRpbWUoKSk7XG5cdCAgICBsZXQgZW5kX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuXHQgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF9kYXRlLmdldFRpbWUoKSk7XG5cdCAgICBpZiAoZXBvY2hfZW5kID4gbm93X3MpIHtcblx0XHRlcG9jaF9lbmQgPSBub3dfcztcblx0ICAgIH1cbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luICwgZXBvY2hfZW5kIH07XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHNldF9kYXRlX3RpbWU6IGZ1bmN0aW9uKHJlZl9uYW1lLCB1dGNfdHMsIGlzX3RpbWUpIHtcbiAgICAgICAgLy8gICAgIHV0Y190cyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKHV0Y190cykgKiAxMDAwOyAgICAgICAgXG4gICAgICAgIC8vICAgICBsZXQgZGF0ZV90aW1lID0gbmV3IERhdGUodXRjX3RzKTtcbiAgICAgICAgLy8gICAgIGRhdGVfdGltZS5zZXRNaW51dGVzKGRhdGVfdGltZS5nZXRNaW51dGVzKCkgLSBkYXRlX3RpbWUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG5cdC8vICAgICBpZiAoaXNfdGltZSkge1xuXHQvLyBcdHRoaXMuJHJlZnNbcmVmX25hbWVdLnZhbHVlID0gZGF0ZV90aW1lLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDExLDE2KTtcblx0Ly8gICAgIH0gZWxzZSB7XG5cdC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwxMCk7XG5cdC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGNoYW5nZV9zZWxlY3RfdGltZTogZnVuY3Rpb24ocmVmcmVzaF9kYXRhKSB7XG4gICAgICAgICAgICBsZXQgc192YWx1ZXMgPSB0aGlzLmdldF9zZWxlY3RfdmFsdWVzKCk7XG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWxfcyA9IHNfdmFsdWVzW3RoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24udmFsdWVdO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2JlZ2luID0gZXBvY2hfZW5kIC0gaW50ZXJ2YWxfcztcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBlcG9jaF9lbmQsIHJlZnJlc2hfZGF0YSB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfc2VsZWN0X3ZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgbWluID0gNjA7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbl81OiBtaW4gKiA1LFxuICAgICAgICAgICAgICAgIG1pbl8zMDogbWluICogMzAsXG4gICAgICAgICAgICAgICAgaG91cjogbWluICogNjAsXG4gICAgICAgICAgICAgICAgZGF5OiB0aGlzLmdldF9sYXN0X2RheV9zZWNvbmRzKCksIFxuICAgICAgICAgICAgICAgIHdlZWs6IHRoaXMuZ2V0X2xhc3Rfd2Vla19zZWNvbmRzKCksIFxuICAgICAgICAgICAgICAgIG1vbnRoOiB0aGlzLmdldF9sYXN0X21vbnRoX3NlY29uZHMoKSwgXG4gICAgICAgICAgICAgICAgeWVhcjogdGhpcy5nZXRfbGFzdF95ZWFyX3NlY29uZHMoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldF91dGNfc2Vjb25kczogZnVuY3Rpb24odXRjX3RzKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHV0Y190cyAvIDEwMDApO1xuICAgICAgICB9LFxuICAgICAgICBpc19iZXR3ZWVuOiBmdW5jdGlvbih4LCB5LCB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID49IHkgLSB0b2xlcmFuY2UgJiYgeCA8PSB5O1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbGFzdF9kYXlfc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHQuc2V0RGF0ZSh0LmdldERhdGUoKSAtIDEpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X2xhc3Rfd2Vla19zZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdC5zZXREYXRlKHQuZ2V0RGF0ZSgpIC0gNykpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbGFzdF9tb250aF9zZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdC5zZXRNb250aCh0LmdldE1vbnRoKCkgLSAxKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9sYXN0X3llYXJfc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHQuc2V0TW9udGgodC5nZXRNb250aCgpIC0gMTIpKTtcbiAgICAgICAgfSxcbiAgICAgICAgem9vbTogZnVuY3Rpb24oc2NhbGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgbGV0IGludGVydmFsID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luKSAvIHNjYWxlO1xuICAgICAgICAgICAgbGV0IGNlbnRlciA9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLyAyICsgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLyAyKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gY2VudGVyIC0gaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gY2VudGVyICsgaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA+IG5vdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAganVtcF90aW1lX2JhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLT0gKDMwICogbWluKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYWhlYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIGxldCBwcmV2aW91c19lbmQgPSB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQ7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCArPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA+IG5vdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luICs9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSBwcmV2aW91c19lbmQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVtaXRfZXBvY2hfY2hhbmdlOiBmdW5jdGlvbihlcG9jaF9zdGF0dXMsIGlkKSB7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9PSBudWxsIHx8IGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsKSB7IHJldHVybjsgfTtcbiAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA+IGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyb25nX2RhdGUgPSB0cnVlO1xuXHRcdHJldHVybjtcbiAgICAgICAgICAgIH1cblx0ICAgIGlmIChpZCAhPSB0aGlzLmlkKSB7XG5cdFx0dGhpcy5vbl9zdGF0dXNfdXBkYXRlZChlcG9jaF9zdGF0dXMpO1xuXHQgICAgfVxuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIGVwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KFwiZXBvY2hfY2hhbmdlXCIsIGVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cdGFkZF9zdGF0dXNfaW5faGlzdG9yeTogZnVuY3Rpb24oZXBvY2hfc3RhdHVzKSB7XG5cdCAgICB0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPSB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdO1xuXHQgICAgaWYgKHRoaXMuaGlzdG9yeS5sZW5ndGggPiA1KSB7XG5cdFx0dGhpcy5oaXN0b3J5LnNoaWZ0KCk7XG5cdCAgICB9XG5cdCAgICB0aGlzLmhpc3RvcnkucHVzaChlcG9jaF9zdGF0dXMpO1xuXHR9LFxuXHRcblx0YXBwbHlfc3RhdHVzX2J5X2hpc3Rvcnk6IGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHQgICAgdGhpcy5oaXN0b3J5LnBvcCgpO1xuXHQgICAgdGhpcy5oaXN0b3J5LnBvcCgpO1xuXHQgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMpO1xuXHR9LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICAgUHJpdmF0ZSBkYXRlIG9mIHZ1ZSBjb21wb25lbnQuXG4gICAgKi9cbiAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAvL3N0YXR1c19pZDogXCJkYXRhLXRpbWUtcmFuZ2UtcGlja2VyXCIgKyB0aGlzLiRwcm9wcy5pZCxcblx0ICBlcG9jaF9zdGF0dXM6IG51bGwsXG5cdCAgcmVmcmVzaF9pbnRlcnZhbDogbnVsbCxcblx0ICByZWZyZXNoX2ludGVydmFsX3NlY29uZHM6IDYwLFxuXHQgIHVwZGF0ZV9mcm9tX2ludGVydmFsOiBmYWxzZSxcblx0ICBoaXN0b3J5OiBbXSxcblx0ICBoaXN0b3J5X2xhc3Rfc3RhdHVzOiBudWxsLFxuICAgICAgZW5hYmxlX2FwcGx5OiBmYWxzZSxcblx0ICBzZWxlY3RfdGltZV92YWx1ZTogXCJtaW5fNVwiLFxuXHQgIHNlbGVjdGVkX3RpbWVfb3B0aW9uOiB7IHZhbHVlOiBcIm1pbl81XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjVfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICB3cm9uZ19kYXRlOiBmYWxzZSxcbiAgICAgIGZsYXRfYmVnaW5fZGF0ZTogbnVsbCxcbiAgICAgIGZsYXRfZW5kX2RhdGU6IG51bGwsXG4gICAgICB0aW1lX3ByZXNldF9saXN0OiBbXG4gICAgICAgIHsgdmFsdWU6IFwibWluXzVcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJtaW5fMzBcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMzBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IHRydWUgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJob3VyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJkYXlcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuZGF5JyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwid2Vla1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy53ZWVrJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwibW9udGhcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMubW9udGgnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJ5ZWFyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLnllYXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJjdXN0b21cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuY3VzdG9tJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSwgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5kYXRlX3RpbWVfaW5wdXQge1xuICB3aWR0aDogMTAuNXJlbTtcbiAgbWF4LXdpZHRoOiAxMC41cmVtO1xuICBtaW4td2lkdGg6IDEwLjVyZW07XG59XG48L3N0eWxlPlxuIiwiZnVuY3Rpb24gc3R5bGVJbmplY3QoY3NzLCByZWYpIHtcbiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICB2YXIgaW5zZXJ0QXQgPSByZWYuaW5zZXJ0QXQ7XG5cbiAgaWYgKCFjc3MgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm47IH1cblxuICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgaWYgKGluc2VydEF0ID09PSAndG9wJykge1xuICAgIGlmIChoZWFkLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZUluamVjdDtcbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IEBzdWJtaXQucHJldmVudD1cInByZXZlbnRFbnRlclwiIGNsYXNzPVwibW9kYWwgZmFkZVwiIHJlZj1cIm1vZGFsX2lkXCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIiBhcmlhLWxhYmVsbGVkYnk9XCJkdC1hZGQtZmlsdGVyLW1vZGFsLXRpdGxlXCJcbiAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLWxnXCIgcm9sZT1cImRvY3VtZW50XCI+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgPGg1IGNsYXNzPVwibW9kYWwtdGl0bGVcIj5cblx0ICA8c2xvdCBuYW1lPVwidGl0bGVcIj48L3Nsb3Q+XG5cdDwvaDU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jbG9zZVwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG5cdDxzbG90IG5hbWU9XCJib2R5XCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtci1hdXRvXCI+XG4gICAgICAgIDwvZGl2PlxuXHQ8c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyB0ZXN0LWZlZWRiYWNrIHctMTAwXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICBlbWl0czogW1wiaGlkZGVuXCIsIFwic2hvd2VkXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRsZXQgbWUgPSB0aGlzO1xuXHQkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkub24oJ3Nob3duLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwic2hvd2VkXCIpO1xuXHR9KTtcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbWUuJGVtaXQoXCJoaWRkZW5cIik7XG5cdH0pO1xuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdCAgICAkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkubW9kYWwoXCJzaG93XCIpO1xuXHR9LFxuXHRwcmV2ZW50RW50ZXI6IGZ1bmN0aW9uKCkge30sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgICQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5tb2RhbChcImhpZGVcIik7XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiBAc3VibWl0LnByZXZlbnQ9XCJwcmV2ZW50RW50ZXJcIiBjbGFzcz1cIm1vZGFsIGZhZGVcIiByZWY9XCJtb2RhbF9pZFwiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCIgYXJpYS1sYWJlbGxlZGJ5PVwiZHQtYWRkLWZpbHRlci1tb2RhbC10aXRsZVwiXG4gICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICA8ZGl2IGNsYXNzPVwibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCBtb2RhbC1sZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+XG5cdCAgPHNsb3QgbmFtZT1cInRpdGxlXCI+PC9zbG90PlxuXHQ8L2g1PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY2xvc2VcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1jbG9zZVwiIGRhdGEtYnMtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxuXHQ8c2xvdCBuYW1lPVwiYm9keVwiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibXItYXV0b1wiPlxuICAgICAgICA8L2Rpdj5cblx0PHNsb3QgbmFtZT1cImZvb3RlclwiPjwvc2xvdD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm8gdGVzdC1mZWVkYmFjayB3LTEwMFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImhpZGRlblwiLCBcInNob3dlZFwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICAvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0bGV0IG1lID0gdGhpcztcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdzaG93bi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICBtZS4kZW1pdChcInNob3dlZFwiKTtcblx0fSk7XG5cdCQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwiaGlkZGVuXCIpO1xuXHR9KTtcblx0Ly8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHQgICAgJCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm1vZGFsKFwic2hvd1wiKTtcblx0fSxcblx0cHJldmVudEVudGVyOiBmdW5jdGlvbigpIHt9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICAkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkubW9kYWwoXCJoaWRlXCIpO1xuXHR9LFxuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAge3tfaTE4bihcInNuYXBzaG90cy5tYW5hZ2VcIil9fVxuICAgICAgPGEgdGFyZ2V0PVwiX25ld3RhYlwiIGhyZWY9XCIjXCIgc3R5bGU9XCJcIiBjbGFzcz1cIm5hdi1pdGVtIHRleHQtbXV0ZWRcIj48aSBjbGFzcz1cImZhcyBmYS1xdWVzdGlvbi1jaXJjbGVcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjI4cmVtO3BhZGRpbmctdG9wOjAuOHJlbTtcIj48L2k+PC9hPiAgICBcbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJhY3Rpb249J2FkZCdcIj5cblx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdhZGQnfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcInNuYXBzaG90cy5hZGRcIil9fTwvYT5cbiAgICAgIDwvbGk+XG4gICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiIEBjbGljaz1cInVwZGF0ZV9hY3Rpb24oJ3NlbGVjdCcpXCI+XG5cdDxhIDpkaXNhYmxlZD1cInNuYXBzaG90cy5sZW5ndGggPT0gMFwiIGNsYXNzPVwibmF2LWxpbmtcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGFjdGlvbiA9PSAnc2VsZWN0JywgJ25vdC1hbGxvd2VkJzogc25hcHNob3RzLmxlbmd0aCA9PSAwIH1cIiBocmVmPVwiI1wiPnt7X2kxOG4oXCJzbmFwc2hvdHMubWFuYWdlXCIpfX08L2E+XG4gICAgICA8L2xpPiAgICAgIFxuICAgIDwvdWw+XG4gICAgPGRpdiB2LWlmPVwiYWN0aW9uID09ICdhZGQnXCIgc3R5bGU9XCJtaW4taGVpZ2h0OjguNXJlbVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+PGI+e3tfaTE4bihcInNuYXBzaG90cy5uYW1lXCIpfX06PC9iPjwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuXHQgIDxpbnB1dCA6cGF0dGVybj1cInBhdHRlcm5fc2luZ2xld29yZFwiIHBsYWNlaG9sZGVyPVwiXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJzbmFwc2hvdF9uYW1lXCI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8IS0tIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPiAtLT5cbiAgICAgIDwhLS0gXHQ8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPiAtLT5cbiAgICAgIDwhLS0gXHQgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIHYtbW9kZWw9XCJzYXZlX3RpbWVcIj4gLS0+XG5cdCAgXG4gICAgICA8IS0tIFx0ICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj57e3NhdmVfdGltZV90ZXh0fX08L2xhYmVsPiAtLT5cbiAgICAgIDwhLS0gXHQ8L2Rpdj4gLS0+XG4gICAgICA8IS0tIDwvZGl2PiAgICAgICAtLT5cbiAgICA8L2Rpdj4gPCEtLSBhY3Rpb24gYWRkIC0tPlxuICAgIFxuICAgIDxkaXYgdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiIHN0eWxlPVwibWluLWhlaWdodDo4LjVyZW1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcInNuYXBzaG90cy5vcmRlcl9ieVwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tc2VsZWN0XCIgQGNsaWNrPVwic29ydF9zbmFwc2hvdHNfYnkoKVwiIHYtbW9kZWw9XCJvcmRlcl9ieVwiPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5hbWVcIj57e19pMThuKFwic25hcHNob3RzLm5hbWVcIil9fTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRhdGVcIj57e19pMThuKFwic25hcHNob3RzLmRhdGVcIil9fTwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwic25hcHNob3RzLnNlbGVjdFwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tc2VsZWN0XCIgdi1tb2RlbD1cInNuYXBzaG90X3NlbGVjdGVkXCI+XG4gICAgICAgICAgICA8b3B0aW9uIHYtZm9yPVwiaXRlbSBpbiBzbmFwc2hvdHNcIiA6dmFsdWU9XCJpdGVtXCI+e3sgZGlzcGxheV9uYW1lKGl0ZW0pIH19PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1zd2l0Y2hcIj5cblx0ICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiB2LW1vZGVsPVwiYXBwbHlfdGltZVwiPlxuXHQgIFxuXHQgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPnt7YXBwbHlfdGltZV90ZXh0fX08L2xhYmVsPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PiA8IS0tIGFjdGlvbiBzZWxlY3QgLS0+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB2LWlmPVwiYWN0aW9uID09ICdhZGQnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9zbmFwc2hvdFwiIDpkaXNhYmxlZD1cImRpc2FibGVfYWRkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwic25hcHNob3RzLmFkZFwiKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCIgQGNsaWNrPVwiZGVsZXRlX3NuYXBzaG90KHRydWUpXCIgdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwidGV4dC1hbGlnbjogbGVmdDttYXJnaW4tbGVmdDogMHB4O1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgc3RhcnQtMCBwb3NpdGlvbi1hYnNvbHV0ZSBtcy0zXCI+e3tfaTE4bihcInNuYXBzaG90cy5kZWxldGVfYWxsXCIpfX08L2J1dHRvbj4gICAgXG4gICAgPGJ1dHRvbiB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRlbGV0ZV9zbmFwc2hvdFwiIDpkaXNhYmxlZD1cImRpc2FibGVfc2VsZWN0XCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuZGVsZXRlXCIpfX08L2J1dHRvbj5cbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2VsZWN0X3NuYXBzaG90XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9zZWxlY3RcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuYXBwbHlcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGFjdGlvbiA9IHJlZihcImFkZFwiKTsgLy8gYWRkIC8gc2VsZWN0XG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcbmNvbnN0IHNuYXBzaG90X3NlbGVjdGVkID0gcmVmKFwiXCIpO1xuY29uc3QgYXBwbHlfdGltZSA9IHJlZihmYWxzZSk7XG5jb25zdCBhcHBseV90aW1lX3RleHQgPSByZWYoXCJcIik7XG5jb25zdCBzYXZlX3RpbWUgPSByZWYodHJ1ZSk7XG5jb25zdCBzYXZlX3RpbWVfdGV4dCA9IHJlZihcIlwiKTtcbmNvbnN0IHNuYXBzaG90X25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBzbmFwc2hvdHMgPSByZWYoW10pO1xuY29uc3Qgb3JkZXJfYnkgPSByZWYoXCJkYXRlXCIpOyAvLyBuYW1lIC8gZGF0ZVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgcGFnZTogU3RyaW5nLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZGVkX3NuYXBzaG90JywgJ2RlbGV0ZWRfc25hcHNob3QnLCAnZGVsZXRlZF9hbGxfc25hcHNob3RzJ10pO1xuXG5sZXQgcGF0dGVybl9zaW5nbGV3b3JkID0gTnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZDtcblxuY29uc3QgZGlzYWJsZV9hZGQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJnID0gbmV3IFJlZ0V4cChwYXR0ZXJuX3NpbmdsZXdvcmQpO1xuICAgIHJldHVybiAhcmcudGVzdChzbmFwc2hvdF9uYW1lLnZhbHVlKTtcbn0pO1xuXG5jb25zdCBkaXNhYmxlX3NlbGVjdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gc25hcHNob3Rfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIjtcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCB1cGRhdGVfYWN0aW9uID0gKGEpID0+IHtcbiAgICBpZiAoc25hcHNob3RzLnZhbHVlLmxlbmd0aCA9PSAwICYmIGEgPT0gXCJzZWxlY3RcIikgeyByZXR1cm47IH1cbiAgICBhY3Rpb24udmFsdWUgPSBhO1xufVxuXG5mdW5jdGlvbiBnZXRfcGFnZSgpIHtcbiAgICBpZiAocHJvcHMucGFnZSAhPSBudWxsKSB7XG5cdHJldHVybiBwcm9wcy5wYWdlO1xuICAgIH1cbiAgICBsZXQgaXNfYWxlcnRfc3RhdHNfdXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG4gICAgbGV0IHBhZ2UgPSBcImFsZXJ0c1wiO1xuICAgIGlmICghaXNfYWxlcnRfc3RhdHNfdXJsKSB7XG5cdHBhZ2UgPSBcImZsb3dzXCI7XG4gICAgfVxuICAgIHJldHVybiBwYWdlO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5X25hbWUoc25hcHNob3QpIHtcbiAgICBsZXQgdXRjX21zID0gc25hcHNob3QudXRjICogMTAwMDtcbiAgICBsZXQgZGF0ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdCh1dGNfbXMsIFwiREQvTU0vWVlZWVwiKTtcbiAgICByZXR1cm4gYCR7c25hcHNob3QubmFtZX0gKCR7ZGF0ZX0pYFxufVxuXG5sZXQgbGFzdF9vcmRlcl9ieSA9IG51bGw7XG5mdW5jdGlvbiBzb3J0X3NuYXBzaG90c19ieSgpIHtcbiAgICBpZiAobGFzdF9vcmRlcl9ieSA9PSBvcmRlcl9ieS52YWx1ZSkgeyByZXR1cm47IH1cbiAgICBcbiAgICBzbmFwc2hvdHMudmFsdWUuc29ydCgoYSwgYikgPT4ge1xuXHRpZiAob3JkZXJfYnkudmFsdWUgPT0gXCJuYW1lXCIpIHtcblx0ICAgIHJldHVybiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpO1xuXHR9XG5cdHJldHVybiBhLnV0YyAtIGIudXRjO1xuICAgIH0pO1xuICAgIGlmIChzbmFwc2hvdHMudmFsdWUubGVuZ3RoID4gMCkge1xuXHRzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZSA9IHNuYXBzaG90cy52YWx1ZVswXTtcbiAgICB9XG4gICAgbGFzdF9vcmRlcl9ieSA9IG9yZGVyX2J5LnZhbHVlOyAgICBcbn1cblxubGV0IGxvYWRfc25hcHNob3RzID0gdHJ1ZTtcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgYWN0aW9uLnZhbHVlID0gXCJhZGRcIjtcbiAgICBzbmFwc2hvdF9uYW1lLnZhbHVlID0gXCJcIjtcbiAgICBzYXZlX3RpbWUudmFsdWUgPSB0cnVlO1xuICAgIGFwcGx5X3RpbWUudmFsdWUgPSBmYWxzZTtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgc2F2ZV90aW1lX2ZpbHRlcl90ZXh0ID0gX2kxOG4oXCJzbmFwc2hvdHMuc2F2ZV90aW1lXCIpO1xuICAgIGxldCBiZWdpbl90aW1lID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDAsIFwiREQvTU0vWVlZWSBISDptbVwiKTtcbiAgICBsZXQgZW5kX3RpbWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDAsIFwiREQvTU0vWVlZWSBISDptbVwiKTtcbiAgICBzYXZlX3RpbWVfZmlsdGVyX3RleHQgPSBzYXZlX3RpbWVfZmlsdGVyX3RleHQucmVwbGFjZSgvXFwlYmVnaW5fdGltZS8sIGJlZ2luX3RpbWUpO1xuICAgIHNhdmVfdGltZV9maWx0ZXJfdGV4dCA9IHNhdmVfdGltZV9maWx0ZXJfdGV4dC5yZXBsYWNlKC9cXCVlbmRfdGltZS8sIGVuZF90aW1lKTtcbiAgICBzYXZlX3RpbWVfdGV4dC52YWx1ZSA9IHNhdmVfdGltZV9maWx0ZXJfdGV4dDtcbiAgICBsZXQgYXBwbHlfdGltZV9maWx0ZXJfdGV4dCA9IF9pMThuKFwic25hcHNob3RzLmFwcGx5X3RpbWVcIik7XG4gICAgYXBwbHlfdGltZV9maWx0ZXJfdGV4dCA9IGFwcGx5X3RpbWVfZmlsdGVyX3RleHQucmVwbGFjZSgvXFwlYmVnaW5fdGltZS8sIGJlZ2luX3RpbWUpO1xuICAgIGFwcGx5X3RpbWVfZmlsdGVyX3RleHQgPSBhcHBseV90aW1lX2ZpbHRlcl90ZXh0LnJlcGxhY2UoL1xcJWVuZF90aW1lLywgZW5kX3RpbWUpO1xuICAgIGFwcGx5X3RpbWVfdGV4dC52YWx1ZSA9IGFwcGx5X3RpbWVfZmlsdGVyX3RleHQ7XG4gICAgaWYgKGxvYWRfc25hcHNob3RzKSB7XG5cdGxvYWRfc25hcHNob3RzID0gZmFsc2U7XG5cdGxldCBwYWdlID0gZ2V0X3BhZ2UoKTtcblx0bGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ZpbHRlcnMvc25hcHNob3RzLmx1YT9wYWdlPSR7cGFnZX1gO1xuXHRsZXQgc25hcHNob3RzX29iaiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuXHRzbmFwc2hvdHMudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoc25hcHNob3RzX29iaik7XG4gICAgfVxuICAgIHNvcnRfc25hcHNob3RzX2J5KCk7XG4gICAgaWYgKHNuYXBzaG90cy52YWx1ZS5sZW5ndGggPiAwKSB7XG5cdHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlID0gc25hcHNob3RzLnZhbHVlWzBdO1xuICAgIH1cbn1cblxuY29uc3QgYWRkX3NuYXBzaG90ID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBmaWx0ZXJzO1xuICAgIGlmIChzYXZlX3RpbWUudmFsdWUpIHtcblx0ZmlsdGVycyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIH0gZWxzZSB7XG5cdGxldCBwYXJhbXNfb2JqID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG5cdGRlbGV0ZSBwYXJhbXNfb2JqLmVwb2NoX2JlZ2luO1xuXHRkZWxldGUgcGFyYW1zX29iai5lcG9jaF9lbmQ7XG5cdGZpbHRlcnMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zX29iaik7XG4gICAgfVxuICAgIGxldCBwYWdlID0gZ2V0X3BhZ2UoKTtcbiAgICBsZXQgcGFyYW1zID0ge1xuXHRzbmFwc2hvdF9uYW1lOiBzbmFwc2hvdF9uYW1lLnZhbHVlLFxuXHRmaWx0ZXJzLFxuXHRwYWdlXG4gICAgfTtcbiAgICBcbiAgICBwYXJhbXMuY3NyZiA9IHByb3BzLmNzcmY7XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2ZpbHRlcnMvc25hcHNob3QubHVhYDtcbiAgICB0cnkge1xuXHRsZXQgaGVhZGVycyA9IHtcblx0ICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0fTtcblx0YXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcblx0bG9hZF9zbmFwc2hvdHMgPSB0cnVlO1xuICAgIH0gY2F0Y2goZXJyKSB7XG5cdGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbiAgICBlbWl0KCdhZGRlZF9zbmFwc2hvdHMnLCBwYXJhbXMpO1xufVxuXG5jb25zdCBzZWxlY3Rfc25hcHNob3QgPSAoKSA9PiB7XG4gICAgY2xvc2UoKTsgICAgXG4gICAgbGV0IGZpbHRlcnMgPSBzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZS5maWx0ZXJzO1xuICAgIGlmIChhcHBseV90aW1lLnZhbHVlID09IHRydWUpIHtcbiAgICBcdGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIFx0bGV0IHBhcmFtc19vYmogPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoZmlsdGVycyk7XG4gICAgXHRwYXJhbXNfb2JqLmVwb2NoX2JlZ2luID0gc3RhdHVzLmVwb2NoX2JlZ2luO1xuICAgIFx0cGFyYW1zX29iai5lcG9jaF9lbmQgPSBzdGF0dXMuZXBvY2hfZW5kO1xuICAgIFx0ZmlsdGVycyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXNfb2JqKTtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlcGxhY2VfdXJsX2FuZF9yZWxvYWQoZmlsdGVycyk7XG59XG5cbmNvbnN0IGRlbGV0ZV9zbmFwc2hvdCA9IGFzeW5jIChkZWxldGVfYWxsKSA9PiB7XG4gICAgbGV0IG5hbWUgPSBzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZS5uYW1lO1xuICAgIGlmIChkZWxldGVfYWxsID09IHRydWUpIHsgbmFtZSA9IFwiKlwiOyB9XG4gICAgbGV0IHBhZ2UgPSBnZXRfcGFnZSgpO1xuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgXHRzbmFwc2hvdF9uYW1lOiBuYW1lLFxuXHRwYWdlLFxuICAgIH07XG4gICAgcGFyYW1zLmNzcmYgPSBwcm9wcy5jc3JmO1xuICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS9maWx0ZXJzL3NuYXBzaG90Lmx1YWA7XG4gICAgdHJ5IHtcbiAgICBcdGxldCBoZWFkZXJzID0ge1xuICAgIFx0ICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICBcdH07XG4gICAgXHRhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgIFx0bG9hZF9zbmFwc2hvdHMgPSB0cnVlO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgXHRjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICAgIGlmIChkZWxldGVfYWxsID09IHRydWUpIHtcblx0ZW1pdCgnZGVsZXRlZF9hbGxfc25hcHNob3RzJywgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuXHRlbWl0KCdkZWxldGVkX3NuYXBzaG90JywgcGFyYW1zKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuLm5vdC1hbGxvd2VkIHtcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48ZGl2PlxuICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTExXCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiID5cblx0PGI+e3t0aXRsZX19PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTFcIiB2LWlmPVwic2hvd19kZWxldGVfYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX3RzXCI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBib3JkZXJcIj5cblx0PHNwYW4+XG5cdCAgPGkgY2xhc3M9XCJmYXMgZmEtdHJhc2hcIj48L2k+XG5cdDwvc3Bhbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gdGltZXNlcmllc1wiIGNsYXNzPVwicm93IGN1c3RvbS1tcyBtZS0yIG10LTFcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC01XCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0ucmF3XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+e3tpdGVtLmxhYmVsfX08L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0yXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0ucGFzdFwiPlxuICAgICAgICAgIFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPlBhc3QgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMlwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIEBjaGFuZ2U9XCJ1cGRhdGVfdGltZXNlcmllc1wiIHYtbW9kZWw9XCJpdGVtLmF2Z1wiPlxuICAgICAgICAgIFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPkF2ZyA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0zXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0ucGVyY185NVwiPlxuICAgICAgICAgIFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPjk1dGggUGVyYyA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLFxuICAgIHRpbWVzZXJpZXM6IEFycmF5LFxuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgc2hvd19kZWxldGVfYnV0dG9uOiBCb29sZWFuLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RlbGV0ZV90cycsICd1cGRhdGU6dGltZXNlcmllcyddKVxuXG5mdW5jdGlvbiB1cGRhdGVfdGltZXNlcmllcygpIHtcbiAgICBlbWl0KCd1cGRhdGU6dGltZXNlcmllcycsIHByb3BzLnRpbWVzZXJpZXMpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVfdHMoKSB7XG4gICAgZW1pdCgnZGVsZXRlX3RzJywgcHJvcHMuaWQpO1xufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jdXN0b20tbXMge1xuICBtYXJnaW4tbGVmdDogMnJlbSAhaW1wb3J0YW50O1xuICB9XG4uaW5saW5lLWJsb2NrIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xufVxuLmJvcmRlciB7XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZCAhaW1wb3J0YW50O1xufVxuPC9zdHlsZT5cbiIsImltcG9ydCB7IERhdGFUYWJsZVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlsc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzLmpzXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IGJ5dGVzVG9TaXplRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJ5dGVzLmlkKTtcbmNvbnN0IGhhbmRsZXJJZEFkZExpbmsgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWxpbmtcIjtcbmNvbnN0IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcblxuY29uc3QgdG9wX2FwcGxpY2F0aW9uID0ge1xuICAgIHRhYmxlX3ZhbHVlOiBcImludGVyZmFjZVwiLFxuICAgIHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfYXBwbGljYXRpb25zJyksXG4gICAgdmlldzogXCJ0b3BfcHJvdG9jb2xzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDEsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBjb2x1bW5EZWZzOiBbXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcbiAgICBdLFxuICAgIGNvbHVtbnM6IFt7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwiYXBwbGljYXRpb25cIiksIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdwcm90b2NvbCcsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0ICAgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRsZXQgaGFuZGxlciA9IHtcblx0XHQgICAgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdCAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coc2VydmljZSk7XG5cdFx0XHRsZXQgc2NoZW1hID0gYHRvcDoke3NlcnZpY2UudHNfc2NoZW1hfWA7XG5cdFx0XHRjb250ZXh0LmFkZF9tZXRyaWNfZnJvbV9tZXRyaWNfc2NoZW1hKHNjaGVtYSwgc2VydmljZS50c19xdWVyeSlcblx0XHQgICAgfSxcblx0XHR9O1xuXHRcdHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBkYXRhLmxhYmVsLCBoYW5kbGVyIH0pO1xuXHQgICAgfSxcblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNcIiksIG5hbWU6ICd0cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndHJhZmZpYycsIG9yZGVyYWJsZTogdHJ1ZSxcblx0ICAgIHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIFx0Ly9yZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICBcdHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0ICAgIH0sXG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJwZXJjZW50YWdlXCIpLCBuYW1lOiAndHJhZmZpY19wZXJjJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBkYXRhOiAncGVyY2VudGFnZScsIG9yZGVyYWJsZTogZmFsc2UsXG5cdCAgICByZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0Y29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0XHRyZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdCAgICB9XG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0ICAgIHJlbmRlcl9pZjogZnVuY3Rpb24oY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5pc19oaXN0b3J5X2VuYWJsZWQgfSxcblx0ICAgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG5cdFx0ICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdFx0ICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bGV0IHN0YXR1cyA9IGNvbnRleHQuc3RhdHVzO1xuXHRcdFx0bGV0IGw3X3Byb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImw3cHJvdG9cIiwgYCR7c2VydmljZS5wcm90b2NvbC5pZH07ZXFgKTtcblx0XHRcdGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfSYke2w3X3Byb3RvfWA7XG5cdFx0XHRsZXQgc291cmNlX3R5cGUgPSBjb250ZXh0LnNvdXJjZV90eXBlO1xuXHRcdFx0bGV0IHNvdXJjZV9hcnJheSA9IGNvbnRleHQuc291cmNlX2FycmF5O1xuXHRcdFx0XG5cdFx0XHRsZXQgcGFyYW1zID0gXCJcIjtcblx0XHRcdGxldCBwYXJhbXNfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZiwgaSkgPT4ge1xuXHRcdFx0ICAgIGxldCBzb3VyY2UgPSBzb3VyY2VfYXJyYXlbaV07XG5cdFx0XHQgICAgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJpZmlkXCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpZmlkXCIsIHNvdXJjZS52YWx1ZSk7XG5cdFx0XHQgICAgfSBlbHNlIGlmIChzb3VyY2VfZGVmLnZhbHVlID09IFwiaG9zdFwiKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaXBcIiwgYCR7c291cmNlLnZhbHVlfTtlcWApO1xuXHRcdFx0ICAgIH1cblx0XHRcdH0pO1xuXHRcdFx0cGFyYW1zID0gcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuXHRcdFx0aGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdHdpbmRvdy5vcGVuKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHQgICAgfVxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuXHRcdCAgICB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfSxcblx0XHRdKTtcblx0ICAgIH1cblx0fSxdLFxufTtcblxuY29uc3QgdG9wX2NhdGVnb3JpZXMgPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9jYXRlZ29yaWVzJyksXG4gICAgdmlldzogXCJ0b3BfY2F0ZWdvcmllc1wiLFxuICAgIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiAyLFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgIF0sXG4gICAgY29sdW1uczogW3tcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJjYXRlZ29yeVwiKSwgbmFtZTogJ2NhdGVnb3J5JywgZGF0YTogJ2NhdGVnb3J5JywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGxldCBoYW5kbGVyID0ge1xuXHRcdCAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0ICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhzZXJ2aWNlKTtcblx0XHRcdGxldCBzY2hlbWEgPSBgdG9wOiR7c2VydmljZS50c19zY2hlbWF9YDtcblx0XHRcdGNvbnRleHQuYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEoc2NoZW1hLCBzZXJ2aWNlLnRzX3F1ZXJ5KVxuXHRcdCAgICB9LFxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGRhdGEubGFiZWwsIGhhbmRsZXIgfSk7XG5cdCAgICB9LFxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY1wiKSwgbmFtZTogJ3RyYWZmaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0cmFmZmljJywgb3JkZXJhYmxlOiB0cnVlLFxuXHQgICAgcmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgXHRyZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICBcdC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHQgICAgfSxcblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0ICAgIHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHRcdHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgIH1cblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHQgICAgcmVuZGVyX2lmOiBmdW5jdGlvbihjb250ZXh0KSB7IHJldHVybiBjb250ZXh0LmlzX2hpc3RvcnlfZW5hYmxlZCB9LFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcblx0XHQgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgc3RhdHVzID0gY29udGV4dC5zdGF0dXM7XG5cdFx0XHRsZXQgY2F0ZWdvcnkgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwibDdjYXRcIiwgYCR7c2VydmljZS5jYXRlZ29yeS5pZH07ZXFgKTtcblx0XHRcdGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfSYke2NhdGVnb3J5fWA7XG5cdFx0XHRsZXQgc291cmNlX3R5cGUgPSBjb250ZXh0LnNvdXJjZV90eXBlO1xuXHRcdFx0bGV0IHNvdXJjZV9hcnJheSA9IGNvbnRleHQuc291cmNlX2FycmF5O1xuXHRcdFx0XG5cdFx0XHRsZXQgcGFyYW1zID0gXCJcIjtcblx0XHRcdGxldCBwYXJhbXNfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZiwgaSkgPT4ge1xuXHRcdFx0ICAgIGxldCBzb3VyY2UgPSBzb3VyY2VfYXJyYXlbaV07XG5cdFx0XHQgICAgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJpZmlkXCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpZmlkXCIsIHNvdXJjZS52YWx1ZSk7XG5cdFx0XHQgICAgfSBlbHNlIGlmIChzb3VyY2VfZGVmLnZhbHVlID09IFwiaG9zdFwiKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaXBcIiwgYCR7c291cmNlLnZhbHVlfTtlcWApO1xuXHRcdFx0ICAgIH1cblx0XHRcdH0pO1xuXHRcdFx0cGFyYW1zID0gcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuXHRcdFx0aGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdHdpbmRvdy5vcGVuKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHQgICAgfVxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuXHRcdCAgICB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfSxcblx0XHRdKTtcblx0ICAgIH1cblx0fSxdLFxufTtcblxuY29uc3QgdG9wX3NlbmRlcnMgPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9zZW5kZXJzJyksXG4gICAgdmlldzogXCJ0b3Bfc2VuZGVyc1wiLFxuICAgIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiAxLFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgIF0sXG4gICAgY29sdW1uczogW3tcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLmhvc3RfbmFtZVwiKSwgbmFtZTogJ2hvc3RfbmFtZScsIGRhdGE6ICdob3N0JywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRyZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0ICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICAgIGxldCBsYWJlbCA9IGRhdGEubGFiZWw7XG4gICAgICBsZXQgaG9zdF9yZWYgPSAnJztcblx0ICAgIGxldCBoYW5kbGVyID0ge1xuXHRcdGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRvbkNsaWNrOiBhc3luYyBmdW5jdGlvbigpIHtcblx0XHQgICAgLy8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0ICAgIC8vIGNvbnNvbGUubG9nKHNlcnZpY2UpO1xuXHRcdCAgICBsZXQgc2NoZW1hID0gYGhvc3Q6dHJhZmZpY2A7XG5cdFx0ICAgIGNvbnRleHQuYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QoXCJob3N0XCIsIHNlcnZpY2UudGFncywgc2NoZW1hKTtcblx0XHR9LFxuXHQgICAgfTtcblx0ICAgIGlmIChjb250ZXh0LnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtcImhvc3RcIl0gJiYgZGF0YS5pc19sb2NhbCkge1xuICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGRhdGEubGFiZWwsIGhhbmRsZXIgfSk7XG5cdCAgICB9XG4gICAgICBpZiAoZGF0YS5pc19hdmFpbGFibGUpIHtcbiAgICAgICAgaG9zdF9yZWYgPSBgIDxhIGhyZWY9XCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGEuaWR9XCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgdGl0bGU9XCJcIj48aSBjbGFzcz1cImZhcyBmYS1sYXB0b3BcIj48L2k+PC9hPmBcbiAgICAgIH1cbiAgICAgIFxuXHQgICAgcmV0dXJuIGAke2xhYmVsfSR7aG9zdF9yZWZ9YDtcblx0fSxcbiAgICB9LCB7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5zZW50XCIpLCBuYW1lOiAnc2VudCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RyYWZmaWMnLCBvcmRlcmFibGU6IHRydWUsXG5cdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHR9LFxuICAgIH0sIC8vIHtcblx0ICAgICAgLy8gXHRjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0ICAgICAgLy8gXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICAgIC8vIFx0ICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdCAgICAgIC8vIFx0ICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgICAgLy8gXHR9XG5cdCAgICAgIC8vIH0sXG5cdCAgICAgIHtcblx0XHQgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgIHJlbmRlcl9pZjogZnVuY3Rpb24oY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5pc19oaXN0b3J5X2VuYWJsZWQgfSxcblx0XHQgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdCAgICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBob3N0ID0gc2VydmljZS5ob3N0LmlkO1xuICAgICAgICAgIGNvbnN0IGhvc3RfdHNfYXZhaWxhYmxlPSBzZXJ2aWNlLmhvc3QuaXNfbG9jYWw7XG5cdFx0ICAgICAgY29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGxldCBzdGF0dXMgPSBjb250ZXh0LnN0YXR1cztcbiAgICAgICAgICAgICAgICBsZXQgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuICAgICAgICAgICAgICAgIGxldCBzb3VyY2VfdHlwZSA9IGNvbnRleHQuc291cmNlX3R5cGU7XG4gICAgICAgICAgICAgICAgbGV0IHNvdXJjZV9hcnJheSA9IGNvbnRleHQuc291cmNlX2FycmF5O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBwYXJhbXMgPSBcIlwiO1x0XHRcdCAgICBcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1zX2FycmF5ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHNlcnZpY2UudGFncykge1xuICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBzZXJ2aWNlLnRhZ3Nba2V5XTtcbiAgICAgICAgICAgICAgbGV0IHBfdXJsID0gXCJcIjtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PSBcImlmaWRcIikge1xuICAgICAgICAgICAgICAgICAgcF91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBcImhvc3RcIikge1xuICAgICAgICAgICAgICAgICAgcF91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaXBcIiwgYCR7dmFsdWV9O2VxYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyYW1zX2FycmF5LnB1c2gocF91cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG4gICAgICAgICAgICAgICAgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGp1bXBfdG9faG9zdCA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2lmaWQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7aG9zdH0mcGFnZT1oaXN0b3JpY2FsJnRzX3F1ZXJ5PWlmaWQ6JHtpZmlkfSxob3N0OiR7aG9zdH0mdHNfc2NoZW1hPWhvc3Q6ZGV0YWlscyZlcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbihob3N0X3VybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGRyb3Bkb3duID0gW3sgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9XVxuXHQgICAgICAgIGlmIChjb250ZXh0LnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtcImhvc3RcIl0gJiYgaG9zdF90c19hdmFpbGFibGUpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnB1c2goeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5ob3N0X2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19ob3N0IH0pXG4gICAgICAgICAgfVxuXG5cdFx0ICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoZHJvcGRvd24pO1xuXHRcdCAgfVxuXHQgICAgICB9LF0sXG59O1xuXG5jb25zdCB0b3BfcmVjZWl2ZXJzID0ge1xuICAgIHRhYmxlX3ZhbHVlOiBcImludGVyZmFjZVwiLFxuICAgIHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfcmVjZWl2ZXJzJyksXG4gICAgdmlldzogXCJ0b3BfcmVjZWl2ZXJzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDEsXG4gICAgY29sdW1uRGVmczogW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgXSxcbiAgICBjb2x1bW5zOiBbe1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AuaG9zdF9uYW1lXCIpLCBuYW1lOiAnaG9zdF9uYW1lJywgZGF0YTogJ2hvc3QnLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHQgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgbGV0IGxhYmVsID0gZGF0YS5sYWJlbDtcbiAgICAgIGxldCBob3N0X3JlZiA9ICcnO1xuXHQgICAgbGV0IGhhbmRsZXIgPSB7XG5cdFx0aGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdG9uQ2xpY2s6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHRcdCAgICAvLyBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHQgICAgLy8gY29uc29sZS5sb2coc2VydmljZSk7XG5cdFx0ICAgIGxldCBzY2hlbWEgPSBgaG9zdDp0cmFmZmljYDtcblx0XHQgICAgY29udGV4dC5hZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdChcImhvc3RcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdH0sXG5cdCAgICB9O1xuXHQgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBkYXRhLmlzX2xvY2FsKSB7XG4gICAgICAgIGxhYmVsID0gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogZGF0YS5sYWJlbCwgaGFuZGxlciB9KTtcblx0ICAgIH1cbiAgICAgIGlmIChkYXRhLmlzX2F2YWlsYWJsZSkge1xuICAgICAgICBob3N0X3JlZiA9IGAgPGEgaHJlZj1cIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pZH1cIiBkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIiB0aXRsZT1cIlwiPjxpIGNsYXNzPVwiZmFzIGZhLWxhcHRvcFwiPjwvaT48L2E+YFxuICAgICAgfVxuICAgICAgXG5cdCAgICByZXR1cm4gYCR7bGFiZWx9JHtob3N0X3JlZn1gO1xuXHR9LFxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnJlY2VpdmVkXCIpLCBuYW1lOiAncmVjZWl2ZWQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0cmFmZmljJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICByZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICAvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0fSxcbiAgICB9LCAvLyB7XG5cdCAgICAgIC8vIFx0Y29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBkYXRhOiAncGVyY2VudGFnZScsXG5cdCAgICAgIC8vIFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgICAvLyBcdCAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHQgICAgICAvLyBcdCAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdCAgICAgIC8vIFx0fVxuXHQgICAgICAvLyB9LFxuXHQgICAgICB7XG5cdFx0ICBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdFx0ICByZW5kZXJfaWY6IGZ1bmN0aW9uKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuaXNfaGlzdG9yeV9lbmFibGVkIH0sXG5cdFx0ICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHQgICAgICBsZXQgY29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgY29uc3QgaG9zdCA9IHNlcnZpY2UuaG9zdC5pZDtcbiAgICAgICAgICBjb25zdCBob3N0X3RzX2F2YWlsYWJsZT0gc2VydmljZS5ob3N0LmlzX2xvY2FsO1xuXHRcdCAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcblx0XHRcdCAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHRcdCAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgICBsZXQgc3RhdHVzID0gY29udGV4dC5zdGF0dXM7XG5cdFx0XHQgICAgICBsZXQgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuXHRcdFx0ICAgICAgbGV0IHNvdXJjZV90eXBlID0gY29udGV4dC5zb3VyY2VfdHlwZTtcblx0XHRcdCAgICAgIGxldCBzb3VyY2VfYXJyYXkgPSBjb250ZXh0LnNvdXJjZV9hcnJheTtcblx0XHRcdCAgICAgIFxuXHRcdFx0ICAgICAgbGV0IHBhcmFtcyA9IFwiXCI7XG5cdFx0XHQgICAgICBsZXQgcGFyYW1zX2FycmF5ID0gW107XG5cdFx0XHQgICAgICBmb3IgKGxldCBrZXkgaW4gc2VydmljZS50YWdzKSB7XG5cdFx0XHRcdCAgbGV0IHZhbHVlID0gc2VydmljZS50YWdzW2tleV07XG5cdFx0XHRcdCAgbGV0IHBfdXJsID0gXCJcIjtcblx0XHRcdFx0ICBpZiAoa2V5ID09IFwiaWZpZFwiKSB7XG5cdFx0XHRcdCAgICAgIHBfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShrZXksIHZhbHVlKTtcblx0XHRcdFx0ICB9IGVsc2UgaWYgKGtleSA9PSBcImhvc3RcIikge1xuXHRcdFx0XHQgICAgICBwX3VybCA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHt2YWx1ZX07ZXFgKTtcblx0XHRcdFx0ICB9XG5cdFx0XHRcdCAgcGFyYW1zX2FycmF5LnB1c2gocF91cmwpO1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgICAgcGFyYW1zID0gcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuXHRcdFx0ICAgICAgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcblx0XHRcdCAgICAgIC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdCAgICAgIHdpbmRvdy5vcGVuKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdCAgfVxuXHRcdCAgICAgIH07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGp1bXBfdG9faG9zdCA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2lmaWQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7aG9zdH0mcGFnZT1oaXN0b3JpY2FsJnRzX3F1ZXJ5PWlmaWQ6JHtpZmlkfSxob3N0OiR7aG9zdH0mdHNfc2NoZW1hPWhvc3Q6ZGV0YWlscyZlcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbihob3N0X3VybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGRyb3Bkb3duID0gW3sgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9XVxuXHQgICAgICAgIGlmIChjb250ZXh0LnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtcImhvc3RcIl0gJiYgaG9zdF90c19hdmFpbGFibGUpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnB1c2goeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5ob3N0X2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19ob3N0IH0pXG4gICAgICAgICAgfVxuXG5cdFx0ICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoZHJvcGRvd24pO1xuXHRcdCAgfSxcblx0ICAgICAgfSxdLFxufTtcblxuY29uc3QgaW50ZXJmYWNlX3RvcF90YWJsZXMgPSBbdG9wX2FwcGxpY2F0aW9uLCB0b3BfY2F0ZWdvcmllcywgdG9wX3NlbmRlcnMsIHRvcF9yZWNlaXZlcnNdO1xuXG5leHBvcnQgZGVmYXVsdCBpbnRlcmZhY2VfdG9wX3RhYmxlcztcblxuIiwiaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgaW50ZXJmYWNlVG9wVGFibGVzIGZyb20gXCIuL2ludGVyZmFjZV90b3BfdGFibGVzLmpzXCI7XG5cbmxldCB0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlID0gaW50ZXJmYWNlVG9wVGFibGVzLmZpbmQoKHQpID0+IHQudmlldyA9PSBcInRvcF9wcm90b2NvbHNcIik7XG5pZiAodG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSAhPSBudWxsKSB7XG4gICAgdG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UpO1xuICAgIHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UudGFibGVfdmFsdWUgPSBcImhvc3RcIjtcbn1cblxuY29uc3QgdG9wX2FwcGxpY2F0aW9uID0gdG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZTtcblxuY29uc3QgaG9zdF90b3BfdGFibGVzID0gW3RvcF9hcHBsaWNhdGlvbl07XG5cbmV4cG9ydCBkZWZhdWx0IGhvc3RfdG9wX3RhYmxlcztcbiIsImltcG9ydCB7IERhdGFUYWJsZVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlsc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzLmpzXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cblxuY29uc3QgYnl0ZXNUb1NpemVGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnl0ZXMuaWQpO1xuY29uc3QgYnBzRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJwcy5pZCk7XG5jb25zdCBoYW5kbGVySWRBZGRMaW5rID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1saW5rXCI7XG5jb25zdCBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCA9IFwicGFnZS1zdGF0cy1hY3Rpb24tanVtcC1oaXN0b3JpY2FsXCI7XG5cbmNvbnN0IHRvcF9zbm1wX2ludGVyZmFjZSA9IHtcbiAgICB0YWJsZV92YWx1ZTogXCJzbm1wXCIsXG4gICAgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0OiB7IGlmaWQ6IHRydWUsIGRldmljZTogdHJ1ZSwgaWZfaW5kZXg6IGZhbHNlIH0sXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9pbnRlcmZhY2VzJyksXG4gICAgdmlldzogXCJ0b3Bfc25tcF9pZmFjZXNcIixcbiAgICBkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogNCxcbiAgICBjb2x1bW5EZWZzOiBbXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG4gICAgXSxcbiAgICBmX2dldF9sYWJlbDogKHRzX2dyb3VwKSA9PiB7XG5cdGxldCBzb3VyY2VfZGVmX2FycmF5ID0gdHNfZ3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheTtcblx0bGV0IHNvdXJjZV9sYWJlbDtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfZGVmX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICBpZiAoc291cmNlX2RlZl9hcnJheVtpXS52YWx1ZSAhPSBcImRldmljZVwiKSB7IGNvbnRpbnVlOyB9XG5cdCAgICBzb3VyY2VfbGFiZWwgPSB0c19ncm91cC5zb3VyY2VfYXJyYXlbaV0ubGFiZWw7XG5cdCAgICBicmVhaztcblx0fVxuXHRyZXR1cm4gYCR7aTE4bigncGFnZV9zdGF0cy50b3AudG9wX2ludGVyZmFjZXMnKX0gLSBTTk1QICR7aTE4bigncGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZScpfSAke3NvdXJjZV9sYWJlbH1gO1xuICAgIH0sXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBcbiAgICBjb2x1bW5zOiBbe1xuXHRjb2x1bW5OYW1lOiBpMThuKFwiaW50ZXJmYWNlXCIpLCBuYW1lOiAnaW50ZXJmYWNlJywgZGF0YTogJ2ludGVyZmFjZScsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0cmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdCAgICBsZXQgY29udGV4dCA9IHRoaXM7XG5cdCAgICBsZXQgaGFuZGxlciA9IHtcblx0XHRoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0b25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0ICAgIGxldCBzY2hlbWEgPSBgc25tcF9pZjp0cmFmZmljYDtcblx0XHQgICAgY29udGV4dC5hZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdChcInNubXBfaW50ZXJmYWNlXCIsIHNlcnZpY2UudGFncywgc2NoZW1hKTtcblx0XHR9LFxuXHQgICAgfTtcblx0ICAgIGxldCBsYWJlbF90ZXh0ID0gYCR7ZGF0YS5sYWJlbH0gKCR7ZGF0YS5pZH0pYDtcblx0ICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBsYWJlbF90ZXh0LCBoYW5kbGVyIH0pO1xuXHR9LFxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnNlbnRcIiksIG5hbWU6ICdzZW50JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAnc2VudCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgcmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgLy9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdH0sXG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AucmVjZWl2ZWRcIiksIG5hbWU6ICdyZWNlaXZlZCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3JjdmQnLCBvcmRlcmFibGU6IHRydWUsXG5cdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHR9LFxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNcIiksIG5hbWU6ICd0cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndG90YWwnLCBvcmRlcmFibGU6IHRydWUsXG5cdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHR9LFxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0ICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0fVxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnRocm91Z2hwdXRcIiksIG5hbWU6ICd0aHJvdWdocHV0JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndGhyb3VnaHB1dCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgcmV0dXJuIGJwc0Zvcm1hdHRlcihkYXRhKTtcblx0ICAgIC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHR9LFxuICAgIH0sXSxcbn07XG5cbmNvbnN0IHNubXBfaW50ZXJmYWNlX3RvcF90YWJsZXMgPSBbdG9wX3NubXBfaW50ZXJmYWNlXTtcblxuZXhwb3J0IGRlZmF1bHQgc25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcztcbiIsImltcG9ydCB7IERhdGFUYWJsZVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlsc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzLmpzXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgaW50ZXJmYWNlVG9wVGFibGVzIGZyb20gXCIuL2ludGVyZmFjZV90b3BfdGFibGVzLmpzXCI7XG5pbXBvcnQgaG9zdFRvcFRhYmxlcyBmcm9tIFwiLi9ob3N0X3RvcF90YWJsZXMuanNcIjtcbmltcG9ydCBzbm1wSW50ZXJmYWNlVG9wVGFibGVzIGZyb20gXCIuL3NubXBfaW50ZXJmYWNlX3RvcF90YWJsZXMuanNcIjtcblxuY29uc3QgdWlfdHlwZXMgPSB7XG4gICAgaGlkZTogXCJoaWRlXCIsXG4gICAgc2VsZWN0OiBcInNlbGVjdFwiLFxuICAgIGlucHV0OiBcImlucHV0XCIsXG59O1xuXG5jb25zdCBzb3VyY2VzX3VybF9lbF90b19zb3VyY2UgPSB7XG4gICAgaWZpZDogKHMpID0+IHtcblx0bGV0IGxhYmVsID0gcy5pZm5hbWU7XG5cdGlmIChzLm5hbWUgIT0gbnVsbCkge1xuXHQgICAgbGFiZWwgPSBzLm5hbWU7XG5cdH1cbiAgICAgICAgcmV0dXJuIHtcblx0ICAgIGxhYmVsLFxuXHQgICAgdmFsdWU6IHMuaWZpZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHBvb2w6IChwKSA9PiB7XG5cdGxldCBsYWJlbCA9IHAucG9vbF9pZDtcblx0aWYgKHAubmFtZSAhPSBudWxsKSB7IGxhYmVsID0gcC5uYW1lOyB9XG5cdHJldHVybiB7XG5cdCAgICBsYWJlbCxcblx0ICAgIHZhbHVlOiBwLnBvb2xfaWQsXG5cdH07XG4gICAgfSxcbiAgICBhbV9ob3N0OiAoYW0pID0+IHtcblx0bGV0IGxhYmVsID0gYCR7YW0ubGFiZWx9ICR7YW0ubWVhc3VyZW1lbnR9YDtcblx0bGV0IHZhbHVlID0gYCR7YW0uaG9zdH0sbWV0cmljOiR7YW0ubWVhc3VyZW1lbnRfa2V5fWA7XG5cdHJldHVybiB7XG5cdCAgICBsYWJlbCxcblx0ICAgIHZhbHVlLFxuXHR9O1xuICAgIH0sXG59O1xuXG5jb25zdCB0YWJsZV9jb2x1bW5fcmVuZGVyX3R5cGVzID0ge1xuICAgIG1ldHJpYzogXCJtZXRyaWNcIixcbiAgICB0ZXh0OiBcInRleHRcIixcbiAgICBwZXJjZW50YWdlOiBcInBlcmNlbnRhZ2VcIixcbiAgICBidXR0b25fbGluazogXCJidXR0b25fbGlua1wiLFxufTtcblxuY29uc3Qgc291cmNlc190eXBlc190YWJsZXMgPSB7XG4gICAgaW50ZXJmYWNlOiBpbnRlcmZhY2VUb3BUYWJsZXMsXG4gICAgaG9zdDogaG9zdFRvcFRhYmxlcyxcbiAgICBzbm1wX2ludGVyZmFjZTogc25tcEludGVyZmFjZVRvcFRhYmxlcyxcbiAgICBzbm1wX2RldmljZTogc25tcEludGVyZmFjZVRvcFRhYmxlcyxcbiAgICAvLyBzbm1wX2ludGVyZmFjZTogWztcbn07XG5cbmNvbnN0IHNvdXJjZXNfdHlwZXMgPSBbXG4gICAge1xuXHRpZDogXCJpbnRlcmZhY2VcIiwgLy91bmlxdWUgaWRcblx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvaWZfc3RhdHNcIiwgLy8gcmVnZXggdG8gbWF0Y2ggdXJsIHBhZ2Vcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRxdWVyeTogXCJpZmFjZVwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLCBcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHJlZ2V4X3R5cGU6IG51bGwsXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsIC8vIHVybCB0byBnZXQgc291cmNlcyBsaXN0XG5cdCAgICBzb3VyY2VzX2Z1bmN0aW9uOiBudWxsLCAvLyBjdXN0b20gZnVuY3Rpb24gdGhhdCByZXR1cm4gc291cmNlc19saXN0LCBvdmVyd3JpdGUgc291cmNlc191cmxcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgLy8gdXNlZCBpbiB0c1F1ZXJ5IHBhcmFtZXRlciwgdG8gZ2V0IGluaXQgYW5kIHNldCB2YWx1ZSBpbiB1cmxcblx0ICAgIHZhbHVlX3VybDogbnVsbCwgLy8gb3ZlcndyaXRlIHZhbHVlIHRvIGdldCBhbmQgc2V0IHZhbHVlIGluIHVybFxuXHQgICAgdmFsdWVfbWFwX3NvdXJjZXNfcmVzOiBudWxsLFxuXHQgICAgZGlzYWJsZV90c2tleTogbnVsbCxcdCAgICBcblx0ICAgIGZfZ2V0X3ZhbHVlX3VybDogbnVsbCwgLy8gb3ZlcndyaXRlIHZhbHVlIGFuZCB2YWx1ZV91cmwgdG8gZ2V0IHN0YXJ0IHZhbHVlIGZyb20gdXJsXG5cdCAgICBmX3NldF92YWx1ZV91cmw6IG51bGwsIC8vIG92ZXJ3cml0ZSB2YWx1ZSBhbmQgdmFsdWVfdXJsIHRvIHNldCBzdGFydCB2YWx1ZSBpbiB1cmxcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcImhvc3RcIixcblx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvaG9zdF9kZXRhaWxzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmhvc3RcIiksXG5cdHRhYmxlX3ZhbHVlOiBcImhvc3RcIixcblx0cXVlcnk6IFwiaG9zdFwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLCBcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmhvc3RcIiksXG5cdCAgICByZWdleF90eXBlOiBcImlwXCIsXHQgICAgXG5cdCAgICB2YWx1ZTogXCJob3N0XCIsXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcIm1hY1wiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9tYWNfZGV0YWlsc1wiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5tYWNcIiksXG5cdHF1ZXJ5OiBcIm1hY1wiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLCBcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm1hY1wiKSxcblx0ICAgIHJlZ2V4X3R5cGU6IFwibWFjQWRkcmVzc1wiLFx0ICAgIFxuXHQgICAgdmFsdWU6IFwibWFjXCIsXG5cdCAgICB2YWx1ZV91cmw6IFwiaG9zdFwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFxuICAgIH0sXG4gICAge1xuXHRpZDogXCJuZXR3b3JrXCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL25ldHdvcmtfZGV0YWlsc1wiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5uZXR3b3JrXCIpLFxuXHRxdWVyeTogXCJzdWJuZXRcIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSwgXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5uZXR3b3JrXCIpLFxuXHQgICAgcmVnZXhfdHlwZTogXCJ0ZXh0XCIsXHQgICAgXG5cdCAgICB2YWx1ZTogXCJzdWJuZXRcIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHR9XSxcdFxuICAgIH0sXG4gICAge1xuXHRpZDogXCJhc1wiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9hc19kZXRhaWxzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmFzXCIpLFxuXHRxdWVyeTogXCJhc25cIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmFzXCIpLFxuXHQgICAgcmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdCAgICB2YWx1ZTogXCJhc25cIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHR9XSxcbiAgICB9LFxuICAgIHtcblx0aWQ6IFwiY291bnRyeVwiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9jb3VudHJ5X2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuY291bnRyeVwiKSxcblx0cXVlcnk6IFwiY291bnRyeVwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuY291bnRyeVwiKSxcblx0ICAgIHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHQgICAgdmFsdWU6IFwiY291bnRyeVwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFxuICAgIH0sXG4gICAge1xuXHRpZDogXCJvc1wiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9vc19kZXRhaWxzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm9zXCIpLFxuXHRxdWVyeTogXCJvc1wiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYub3NcIiksXG5cdCAgICByZWdleF90eXBlOiBcInRleHRcIixcblx0ICAgIHZhbHVlOiBcIm9zXCIsXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcInZsYW5cIixcblx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvdmxhbl9kZXRhaWxzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnZsYW5cIiksXG5cdHF1ZXJ5OiBcInZsYW5cIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnZsYW5cIiksXG5cdCAgICByZWdleF90eXBlOiBcInRleHRcIixcblx0ICAgIHZhbHVlOiBcInZsYW5cIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHR9XSxcbiAgICB9LFxuICAgIHtcblx0aWQ6IFwicG9vbFwiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wb29sX2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9vbFwiKSxcblx0cXVlcnk6IFwiaG9zdF9wb29sXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb29sXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9vbHMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJwb29sXCIsXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdH1dLFxuICAgIH0sXG4gICAge1xuXHRpZDogXCJzeXN0ZW1cIixcblx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvc3lzdGVtX3N0YXRzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnN5c3RlbVwiKSxcblx0cXVlcnk6IFwic3lzdGVtXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJTeXN0ZW1cIiwgdmFsdWU6IC0xIH1dIH0sXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcInByb2ZpbGVcIixcdFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9maWxlX2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucHJvZmlsZVwiKSxcblx0cXVlcnk6IFwicHJvZmlsZVwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucHJvZmlsZVwiKSxcblx0ICAgIHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHQgICAgdmFsdWU6IFwicHJvZmlsZVwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0aWQ6IFwicmVkaXNcIixcbiAgICBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21vbml0b3JcXC9yZWRpc19tb25pdG9yLmx1YVwiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucmVkaXNcIiksIFxuICAgIFx0cXVlcnk6IFwicmVkaXNcIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlJlZGlzXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmhpZGUsXG5cdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0aWQ6IFwiaW5mbHV4XCIsXG4gICAgXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9tb25pdG9yXFwvaW5mbHV4ZGJfbW9uaXRvci5sdWFcIixcbiAgICBcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmluZmx1eFwiKSxcbiAgICBcdHF1ZXJ5OiBcImluZmx1eGRiXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJJbmZsdXhcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcImFjdGl2ZV9tb25pdG9yaW5nXCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21vbml0b3JcXC9hY3RpdmVfbW9uaXRvcmluZ19tb25pdG9yLmx1YVwiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5hY3RpdmVfbW9uaXRvcmluZ1wiKSxcblx0cXVlcnk6IFwiYW1cIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlwiLCB2YWx1ZTogLTEgfV0gfSxcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5hY3RpdmVfbW9uaXRvcmluZ1wiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9hbV9ob3N0L2xpc3QubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJob3N0XCIsXG5cdCAgICBkaXNhYmxlX3Rza2V5OiB0cnVlLFxuXHQgICAgdmFsdWVfbWFwX3NvdXJjZXNfcmVzOiBcImFtX2hvc3RcIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG4gICAgXHRpZDogXCJzbm1wX2ludGVyZmFjZVwiLFxuXHRpZF9ncm91cDogXCJzbm1wXCIsXG4gICAgXHQvLyBkaXNhYmxlX3N0YXRzOiB0cnVlLFxuICAgIFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL3NubXBfaW50ZXJmYWNlX2RldGFpbHNcIixcbiAgICBcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnNubXBfaW50ZXJmYWNlXCIpLFxuICAgIFx0cXVlcnk6IFwic25tcF9pbnRlcmZhY2VcIixcdFxuICAgIFx0c291cmNlX2RlZl9hcnJheTogW3tcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG4gICAgXHQgICAgc291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiXCIsIHZhbHVlOiAtMSB9XSB9LFxuICAgIFx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG4gICAgXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcbiAgICBcdH0sIHtcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG4gICAgXHQgICAgcmVnZXhfdHlwZTogXCJpcFwiLFxuICAgIFx0ICAgIHZhbHVlOiBcImRldmljZVwiLFxuXHQgICAgdmFsdWVfdXJsOiBcImhvc3RcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zbm1wX2ludGVyZmFjZVwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcInRleHRcIixcbiAgICBcdCAgICB2YWx1ZTogXCJpZl9pbmRleFwiLFxuXHQgICAgdmFsdWVfdXJsOiBcInNubXBfcG9ydF9pZHhcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0Ly90b2RvX3Rlc3RcbiAgICBcdGlkOiBcInNubXBfZGV2aWNlXCIsXG5cdGlkX2dyb3VwOiBcInNubXBcIixcbiAgICBcdC8vIGRpc2FibGVfc3RhdHM6IHRydWUsXG4gICAgXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvc25tcF9kZXZpY2VfZGV0YWlsc1wiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc25tcF9kZXZpY2VcIiksXG4gICAgXHRxdWVyeTogXCJzbm1wX2RldmljZVwiLFxuICAgIFx0c291cmNlX2RlZl9hcnJheTogW3tcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG4gICAgXHQgICAgc291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiXCIsIHZhbHVlOiAtMSB9XSB9LFxuICAgIFx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG4gICAgXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcbiAgICBcdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG4gICAgXHQgICAgcmVnZXhfdHlwZTogXCJpcFwiLFxuICAgIFx0ICAgIHZhbHVlOiBcImRldmljZVwiLFxuXHQgICAgdmFsdWVfdXJsOiBcImhvc3RcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0aWQ6IFwiZmxvd19kZXZpY2VcIixcbiAgICBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9mbG93ZGV2aWNlc19zdGF0c1wiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZmxvd19kZXZpY2VcIiksXG4gICAgXHRxdWVyeTogXCJmbG93ZGV2XCIsXG4gICAgXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcbiAgICBcdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG4gICAgXHQgICAgcmVnZXhfdHlwZTogXCJpcFwiLFxuICAgIFx0ICAgIHZhbHVlOiBcImRldmljZVwiLFxuXHQgICAgdmFsdWVfdXJsOiBcImlwXCIsXG4gICAgXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG4gICAgXHR9XSxcbiAgICB9LFxuICAgIHtcbiAgICBcdGlkOiBcImZsb3dfaW50ZXJmYWNlXCIsXG4gICAgXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvZmxvd2RldmljZV9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZmxvd19pbnRlcmZhY2VcIiksXG4gICAgXHRxdWVyeTogXCJmbG93ZGV2X3BvcnRcIixcbiAgICBcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuICAgIFx0fSwge1xuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcImlwXCIsXG4gICAgXHQgICAgdmFsdWU6IFwiZGV2aWNlXCIsXG5cdCAgICB2YWx1ZV91cmw6IFwiaXBcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb3J0XCIpLFxuICAgIFx0ICAgIHJlZ2V4X3R5cGU6IFwicG9ydFwiLFxuICAgIFx0ICAgIHZhbHVlOiBcInBvcnRcIixcblx0ICAgIHZhbHVlX3VybDogXCJzbm1wX3BvcnRfaWR4XCIsXG4gICAgXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG4gICAgXHR9XSxcbiAgICB9LFxuICAgIHtcbiAgICBcdGlkOiBcInNmbG93X2RldmljZVwiLFxuICAgIFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL3NmbG93ZGV2aWNlc19zdGF0c1wiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc2Zsb3dfZGV2aWNlXCIpLFxuICAgIFx0cXVlcnk6IFwic2Zsb3dkZXZcIixcbiAgICBcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuICAgIFx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcImlwXCIsXG4gICAgXHQgICAgdmFsdWU6IFwiZGV2aWNlXCIsXG5cdCAgICB2YWx1ZV91cmw6IFwiaXBcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0aWQ6IFwic2Zsb3dfaW50ZXJmYWNlXCIsXG4gICAgXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvc2Zsb3dkZXZpY2VfaW50ZXJmYWNlX2RldGFpbHNcIixcbiAgICBcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnNmbG93X2ludGVyZmFjZVwiKSxcbiAgICBcdHF1ZXJ5OiBcInNmbG93ZGV2X3BvcnRcIixcbiAgICBcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuICAgIFx0fSwge1xuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcImlwXCIsXG4gICAgXHQgICAgdmFsdWU6IFwiZGV2aWNlXCIsXG5cdCAgICB2YWx1ZV91cmw6IFwiaXBcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb3J0XCIpLFxuICAgIFx0ICAgIHJlZ2V4X3R5cGU6IFwicG9ydFwiLFxuICAgIFx0ICAgIHZhbHVlOiBcInBvcnRcIixcblx0ICAgIHZhbHVlX3VybDogXCJzbm1wX3BvcnRfaWR4XCIsXG4gICAgXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG4gICAgXHR9XSxcbiAgICB9LFxuICAgIHtcbiAgICBcdGlkOiBcIm9ic2VydmF0aW9uX3BvaW50XCIsXG4gICAgXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvb2JzZXJ2YXRpb25fcG9pbnRzXCIsXG4gICAgXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5vYnNlcnZhdGlvbl9wb2ludFwiKSxcbiAgICBcdHF1ZXJ5OiBcIm9ic19wb2ludFwiLFxuICAgIFx0c291cmNlX2RlZl9hcnJheTogW3tcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG4gICAgXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuICAgIFx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG4gICAgXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuICAgIFx0fSwge1xuICAgIFx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcbiAgICBcdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5vYnNlcnZhdGlvbl9wb2ludFwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcInRleHRcIixcbiAgICBcdCAgICB2YWx1ZTogXCJvYnNfcG9pbnRcIixcbiAgICBcdCAgICB2YWx1ZV91cmw6IFwib2JzZXJ2YXRpb25fcG9pbnRcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH1dLFxuICAgIH0sXG4gICAge1xuXHQvL3RvZG9fdGVzdFxuXHRpZDogXCJwb2RcIixcblx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcG9kX2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9kXCIpLFx0XG5cdHF1ZXJ5OiBcInBvZFwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9kXCIpLFxuXHQgICAgcmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdCAgICB2YWx1ZTogXCJwb2RcIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHR9XSxcbiAgICB9LCB7XG5cdC8vdG9kb190ZXN0XG5cdGlkOiBcImNvbnRhaW5lclwiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9jb250YWluZXJfZGV0YWlsc1wiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb250YWluZXJcIiksXG5cdHF1ZXJ5OiBcImNvbnRhaW5lclwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuY29udGFpbmVyXCIpLFxuXHQgICAgcmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdCAgICB2YWx1ZTogXCJjb250YWluZXJcIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHR9XSxcbiAgICB9LFxuICAgIC8vIHtcbiAgICAvLyBcdGlkOiBcIm5fZWRnZV9pbnRlcmZhY2VcIixcbiAgICAvLyBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL25lZGdlXFwvaWZfc3RhdHMubHVhXCIsXG4gICAgLy8gXHRsYWJlbDogXCJQcm9maWxlIG5FZGdlXCIsXG4gICAgLy8gXHR2YWx1ZTogXCJpZmlkXCIsXG4gICAgLy8gXHRyZWdleF90eXBlOiBcInRleHRcIixcbiAgICAvLyBcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdF9hbmRfaW5wdXQsXG4gICAgLy8gXHRxdWVyeTogXCJpZmFjZTpuZWRnZVwiLFxuICAgIC8vIH0sXG5dO1xuXG5jb25zdCBtZXRyaWNzQ29uc3RzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcblx0dWlfdHlwZXMsXG5cdHNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZSxcblx0c291cmNlc190eXBlcyxcblx0c291cmNlc190eXBlc190YWJsZXMsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgbWV0cmljc0NvbnN0cztcbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBtZXRyaWNzQ29uc3RzIGZyb20gXCIuLi9jb25zdGFudHMvbWV0cmljcy1jb25zdHMuanNcIlxuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi9udG9wLXV0aWxzLmpzXCI7XG5cbmNvbnN0IHNldF90aW1lc2VyaWVzX2dyb3Vwc19pbl91cmwgPSAodGltZXNlcmllc19ncm91cHMpID0+IHtcbiAgICBsZXQgcGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzID0gW107XG4gICAgdGltZXNlcmllc19ncm91cHMuZm9yRWFjaCgodHNfZ3JvdXApID0+IHtcblx0bGV0IHBhcmFtID0gZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSh0c19ncm91cCk7XG5cdHBhcmFtc190aW1lc2VyaWVzX2dyb3Vwcy5wdXNoKHBhcmFtKTtcbiAgICB9KTtcbiAgICBsZXQgdXJsX3RpbWVzZXJpZXNfZ3JvdXBzID0gcGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzLmpvaW4oXCI7O1wiKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiLCB1cmxfdGltZXNlcmllc19ncm91cHMpO1xufTtcblxuZnVuY3Rpb24gZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSh0c19ncm91cCkge1xuICAgIGxldCB0aW1lc2VyaWVzID0gW107XG4gICAgdHNfZ3JvdXAudGltZXNlcmllcy5mb3JFYWNoKCh0cykgPT4ge1xuXHR0aW1lc2VyaWVzLnB1c2goYCR7dHMuaWR9PSR7dHMucmF3fToke3RzLnBhc3R9OiR7dHMuYXZnfToke3RzLnBlcmNfOTV9YCk7XG4gICAgfSk7XG4gICAgbGV0IG1ldHJpY19zY2hlbWFfcXVlcnkgPSB0c19ncm91cC5tZXRyaWMuc2NoZW1hO1xuICAgIGlmICh0c19ncm91cC5tZXRyaWMucXVlcnkgIT0gbnVsbCkge1xuXHRtZXRyaWNfc2NoZW1hX3F1ZXJ5ID0gYCR7bWV0cmljX3NjaGVtYV9xdWVyeX0rJHt0c19ncm91cC5tZXRyaWMucXVlcnl9YDtcbiAgICB9XG4gICAgbGV0IHRpbWVzZXJpZXNfcGFyYW0gPSB0aW1lc2VyaWVzLmpvaW4oXCJ8XCIpO1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXlfcXVlcnkgPSB0c19ncm91cC5zb3VyY2VfYXJyYXkubWFwKChzb3VyY2UpID0+IHNvdXJjZS52YWx1ZSkuam9pbihcIitcIik7XG4gICAgbGV0IHBhcmFtID0gYCR7dHNfZ3JvdXAuc291cmNlX3R5cGUuaWR9OyR7c291cmNlX3ZhbHVlX2FycmF5X3F1ZXJ5fTske21ldHJpY19zY2hlbWFfcXVlcnl9OyR7dGltZXNlcmllc19wYXJhbX1gO1xuICAgIHJldHVybiBwYXJhbTtcbn1cblxuY29uc3QgZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsID0gYXN5bmMgKGh0dHBfcHJlZml4LCB1cmxfdGltZXNlcmllc19ncm91cHMpID0+IHtcbiAgICBpZiAodXJsX3RpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcblx0dXJsX3RpbWVzZXJpZXNfZ3JvdXBzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiKTtcbiAgICB9XG4gICAgaWYgKHVybF90aW1lc2VyaWVzX2dyb3VwcyA9PSBudWxsIHx8IHVybF90aW1lc2VyaWVzX2dyb3VwcyA9PSBcIlwiKSB7XG5cdHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgZ3JvdXBzID0gdXJsX3RpbWVzZXJpZXNfZ3JvdXBzLnNwbGl0KFwiOztcIik7XG4gICAgaWYgKCFncm91cHM/Lmxlbmd0aCA+IDApIHtcblx0cmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IFByb21pc2UuYWxsKGdyb3Vwcy5tYXAoYXN5bmMgKGcpID0+IHtcblx0bGV0IHRzX2dyb3VwID0gYXdhaXQgZ2V0X3VybF9wYXJhbV9mcm9tX3RzX2dyb3VwKGcpO1xuXHRyZXR1cm4gdHNfZ3JvdXA7XG4gICAgfSkpO1xuICAgIHJldHVybiB0aW1lc2VyaWVzX2dyb3Vwcztcbn07XG5cbmNvbnN0IGdldF90c19ncm91cCA9IChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpID0+IHtcbiAgICBsZXQgaWQgPSBnZXRfdHNfZ3JvdXBfaWQoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICBsZXQgdGltZXNlcmllcyA9IFtdO1xuICAgIGZvciAobGV0IGtleSBpbiBtZXRyaWMudGltZXNlcmllcykge1xuXHRsZXQgdHMgPSBtZXRyaWMudGltZXNlcmllc1trZXldO1xuXHR0aW1lc2VyaWVzLnB1c2goe1xuXHQgICAgaWQ6IGtleSxcblx0ICAgIGxhYmVsOiB0cy5sYWJlbCxcblx0ICAgIHJhdzogdHJ1ZSxcblx0ICAgIHBhc3Q6IGZhbHNlLFxuXHQgICAgYXZnOiBmYWxzZSxcblx0ICAgIHBlcmNfOTU6IGZhbHNlLFxuXHR9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcblx0aWQsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYywgdGltZXNlcmllcyxcbiAgICB9O1xufTtcblxuY29uc3QgZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMgPSBhc3luYyAoaHR0cF9wcmVmaXgsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSkgPT4ge1xuICAgIGxldCBzb3VyY2VfdHlwZSA9IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSk7XG4gICAgbGV0IG1ldHJpY3MgPSBhd2FpdCBnZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSk7XG4gICAgbGV0IG1ldHJpYyA9IGdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpO1xuICAgIGxldCB0c19ncm91cCA9IGdldF90c19ncm91cChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpO1xuICAgIHJldHVybiBbdHNfZ3JvdXBdO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3VybF9wYXJhbV9mcm9tX3RzX2dyb3VwKHRzX2dyb3VwX3VybF9wYXJhbSkge1xuICAgIGxldCBnID0gdHNfZ3JvdXBfdXJsX3BhcmFtO1xuICAgIGxldCBpbmZvID0gZy5zcGxpdChcIjtcIik7XG4gICAgbGV0IHNvdXJjZV90eXBlX2lkID0gaW5mb1swXTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX3F1ZXJ5ID0gaW5mb1sxXTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gc291cmNlX3ZhbHVlX3F1ZXJ5LnNwbGl0KFwiK1wiKTtcblxuICAgIGxldCBtZXRyaWNfc2NoZW1hX3F1ZXJ5ID0gaW5mb1syXTtcbiAgICBsZXQgbWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheSA9IG1ldHJpY19zY2hlbWFfcXVlcnkuc3BsaXQoXCIrXCIpO1xuICAgIGlmIChtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5Lmxlbmd0aCA8IDIpIHtcblx0bWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheS5wdXNoKG51bGwpO1xuICAgIH1cblxuICAgIGxldCB0aW1lc2VyaWVzX3VybCA9IGluZm9bM107XG5cbiAgICBsZXQgc291cmNlX3R5cGUgPSBnZXRfc291cmNlX3R5cGVfZnJvbV9pZChzb3VyY2VfdHlwZV9pZCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9hcnJheSk7XG4gICAgbGV0IG1ldHJpYyA9IGF3YWl0IGdldF9tZXRyaWNfZnJvbV9zY2hlbWEoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXlbMF0sIG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXlbMV0pO1xuICAgIGxldCB0aW1lc2VyaWVzID0gZ2V0X3RpbWVzZXJpZXModGltZXNlcmllc191cmwsIG1ldHJpYyk7XG4gICAgcmV0dXJuIHtcblx0aWQ6IGdldF90c19ncm91cF9pZChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpLFxuXHRzb3VyY2VfdHlwZSxcblx0c291cmNlX2FycmF5LFxuXHRtZXRyaWMsXG5cdHRpbWVzZXJpZXMsXG4gICAgfTtcbn1cblxuY29uc3QgZ2V0X3RzX2dyb3VwX2lkID0gKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYywgZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgc2V0X3NvdXJjZV90eXBlX2lkX2dyb3VwKSA9PiB7XG4gICAgbGV0IG1ldHJpY19pZCA9IFwiXCI7XG4gICAgaWYgKG1ldHJpYyAhPSBudWxsKSB7XG5cdG1ldHJpY19pZCA9IG1ldHJpYy5zY2hlbWE7ICAgIFxuXHRpZiAobWV0cmljLnF1ZXJ5ICE9IG51bGwpIHtcblx0ICAgIG1ldHJpY19pZCA9IGAke21ldHJpY19pZH0gLSAke21ldHJpYy5xdWVyeX1gO1xuXHR9XG4gICAgfVxuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gc291cmNlX2FycmF5Lm1hcCgoc291cmNlLCBpKSA9PiB7XG5cdGxldCBzb3VyY2VfZGVmX3ZhbHVlID0gc291cmNlX2RlZl9hcnJheVtpXS52YWx1ZTtcblx0aWYgKGVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QgIT0gbnVsbCAmJiAhZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdFtzb3VyY2VfZGVmX3ZhbHVlXSkgeyByZXR1cm4gbnVsbDsgfVxuXHRyZXR1cm4gc291cmNlLnZhbHVlO1xuICAgIH0pLmZpbHRlcigocykgPT4gcyAhPSBudWxsKS5qb2luKFwiX1wiKTtcbiAgICBsZXQgc291cmNlX3R5cGVfaWQgPSBzb3VyY2VfdHlwZS5pZDtcbiAgICBpZiAoc2V0X3NvdXJjZV90eXBlX2lkX2dyb3VwICYmIHNvdXJjZV90eXBlLmlkX2dyb3VwICE9IG51bGwpIHtcblx0c291cmNlX3R5cGVfaWQgPSBzb3VyY2VfdHlwZS5pZF9ncm91cDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3NvdXJjZV90eXBlX2lkfSAtICR7c291cmNlX3ZhbHVlX2FycmF5fSAtICR7bWV0cmljX2lkfWA7XG59O1xuXG5mdW5jdGlvbiBnZXRfdGltZXNlcmllcyh0aW1lc2VyaWVzX3VybCwgbWV0cmljKSB7XG4gICAgbGV0IHRzX3VybF9hcnJheSA9IHRpbWVzZXJpZXNfdXJsLnNwbGl0KFwifFwiKTtcbiAgICBsZXQgciA9IC8oLispPSguKyk6KC4rKTooLispOiguKykvO1xuICAgIGxldCB0aW1lc2VyaWVzID0gW107XG4gICAgdHNfdXJsX2FycmF5LmZvckVhY2goKHRzX3VybCkgPT4ge1xuXHRsZXQgdmFsdWVzID0gci5leGVjKHRzX3VybCk7XG5cdGxldCBpZCA9IHZhbHVlc1sxXTtcblx0bGV0IGxhYmVsID0gbWV0cmljLnRpbWVzZXJpZXNbaWRdLmxhYmVsO1xuXHRsZXQgcmF3ID0gSlNPTi5wYXJzZSh2YWx1ZXNbMl0pO1xuXHRsZXQgcGFzdCA9IEpTT04ucGFyc2UodmFsdWVzWzNdKTtcblx0bGV0IGF2ZyA9IEpTT04ucGFyc2UodmFsdWVzWzRdKTtcblx0bGV0IHBlcmNfOTUgPSBKU09OLnBhcnNlKHZhbHVlc1s1XSk7XG5cdHRpbWVzZXJpZXMucHVzaCh7XG5cdCAgICBpZCwgbGFiZWwsIHJhdywgcGFzdCwgYXZnLCBwZXJjXzk1LFxuXHR9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGltZXNlcmllcztcbn1cblxuY29uc3QgdWlfdHlwZXMgPSBtZXRyaWNzQ29uc3RzLnVpX3R5cGVzO1xuXG4vLyBkaWN0aW9uYXJ5IG9mIGZ1bmN0aW9ucyB0byBjb252ZXJ0IGFuIGVsZW1lbnQgb2Ygc291cmNlX3VybCByZXN0IHJlc3VsdCB0byBhIHNvdXJjZSAoe2xhYmVsLCB2YWx1ZSB9KVxuY29uc3Qgc291cmNlc191cmxfZWxfdG9fc291cmNlID0gbWV0cmljc0NvbnN0cy5zb3VyY2VzX3VybF9lbF90b19zb3VyY2U7XG5cbmNvbnN0IHNvdXJjZXNfdHlwZXMgPSBtZXRyaWNzQ29uc3RzLnNvdXJjZXNfdHlwZXM7XG5jb25zdCBzb3VyY2VzX3R5cGVzX3RhYmxlcyA9IG1ldHJpY3NDb25zdHMuc291cmNlc190eXBlc190YWJsZXM7XG5cbmNvbnN0IGdldF9zb3VyY2VfdHlwZV9mcm9tX2lkID0gKHNvdXJjZV90eXBlX2lkKSA9PiB7XG4gICAgcmV0dXJuIHNvdXJjZXNfdHlwZXMuZmluZCgoc3QpID0+IHN0LmlkID09IHNvdXJjZV90eXBlX2lkKTtcbn07XG5cbmNvbnN0IGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUpID0+IHtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5KHNvdXJjZV90eXBlKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2FycmF5KTtcbiAgICByZXR1cm4gc291cmNlX2FycmF5O1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfZGljdCkge1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4gc291cmNlX3ZhbHVlX2RpY3Rbc291cmNlX2RlZi52YWx1ZV0pO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59XG5cbmNvbnN0IGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9hcnJheSkgPT4ge1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG5cdHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBsZXQgc291cmNlX2FycmF5ID0gW107XG4gICAgbGV0IHNvdXJjZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV92YWx1ZV9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgc291cmNlX3ZhbHVlID0gc291cmNlX3ZhbHVlX2FycmF5W2ldO1xuXHRsZXQgc291cmNlX2RlZiA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbaV07XG5cdGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfdXJsIHx8IHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbikge1xuXHQgICAgbGV0IHNvdXJjZXMgPSBbXTtcblx0ICAgIGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfdXJsKSB7XG5cdFx0c291cmNlcyA9IGF3YWl0IGdldF9zb3VyY2VzKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZS5pZCwgc291cmNlX2RlZik7XG5cdCAgICB9IGVsc2Uge1xuXHRcdHNvdXJjZXMgPSBzb3VyY2VfZGVmLnNvdXJjZXNfZnVuY3Rpb24oKTtcblx0ICAgIH1cblx0ICAgIHNvdXJjZSA9IHNvdXJjZXMuZmluZCgocykgPT4gcy52YWx1ZSA9PSBzb3VyY2VfdmFsdWUpO1xuXHQgICAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG5cdFx0c291cmNlID0gc291cmNlc1swXTtcblx0ICAgIH1cblx0fSBlbHNlIHtcblx0ICAgIHNvdXJjZSA9IHsgbGFiZWw6IHNvdXJjZV92YWx1ZSwgdmFsdWU6IHNvdXJjZV92YWx1ZSB9O1xuXHR9XG5cdHNvdXJjZV9hcnJheS5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59O1xuXG5sZXQgY2FjaGVfc291cmNlcyA9IHt9O1xuXG5jb25zdCBnZXRfc291cmNlcyA9IGFzeW5jIChodHRwX3ByZWZpeCwgaWQsIHNvdXJjZV9kZWYpID0+IHtcbiAgICBsZXQga2V5ID0gYCR7aWR9XyR7c291cmNlX2RlZi52YWx1ZX1gO1xuICAgIGlmIChjYWNoZV9zb3VyY2VzW2tleV0gPT0gbnVsbCkge1xuXHRpZiAoc291cmNlX2RlZi5zb3VyY2VzX3VybCkge1xuXHQgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS8ke3NvdXJjZV9kZWYuc291cmNlc191cmx9YDtcblx0ICAgIGNhY2hlX3NvdXJjZXNba2V5XSA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuXHR9IGVsc2UgaWYgKHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbikge1xuXHQgICAgY2FjaGVfc291cmNlc1trZXldID0gc291cmNlX2RlZi5zb3VyY2VzX2Z1bmN0aW9uKCk7XG5cdH0gZWxzZSB7XG5cdCAgICByZXR1cm4gW107XG5cdH1cbiAgICB9XG4gICAgbGV0IHNvdXJjZXMgPSBhd2FpdCBjYWNoZV9zb3VyY2VzW2tleV07XG4gICAgaWYgKHNvdXJjZV9kZWYuc291cmNlc191cmwpIHtcblx0bGV0IGZfbWFwX3NvdXJjZV9lbGVtZW50ID0gc291cmNlc191cmxfZWxfdG9fc291cmNlW3NvdXJjZV9kZWYudmFsdWVfbWFwX3NvdXJjZXNfcmVzXTtcblx0aWYgKGZfbWFwX3NvdXJjZV9lbGVtZW50ID09IG51bGwpIHtcblx0ICAgIGZfbWFwX3NvdXJjZV9lbGVtZW50ID0gc291cmNlc191cmxfZWxfdG9fc291cmNlW3NvdXJjZV9kZWYudmFsdWVdO1xuXHR9XG5cdGlmIChmX21hcF9zb3VyY2VfZWxlbWVudCA9PSBudWxsKSB7XG5cdCAgICB0aHJvdyBgOkVycm9yOiBtZXRyaWNzLW1hbmFnZXIuanMsIG1pc3Npbmcgc291cmNlc191cmxfdG9fc291cmNlICR7c291cmNlX2RlZi52YWx1ZX0ga2V5YDtcblx0fVxuXHRzb3VyY2VzID0gc291cmNlcy5tYXAoKHMpID0+IGZfbWFwX3NvdXJjZV9lbGVtZW50KHMpKVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcy5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpICAgIFxufTtcblxuZnVuY3Rpb24gc2V0X3NvdXJjZV92YWx1ZV9vYmplY3RfaW5fdXJsKHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfb2JqZWN0KSB7XG4gICAgc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5mb3JFYWNoKChzb3VyY2VfZGVmKSA9PiB7XHRcdFxuXHRsZXQgc291cmNlX3ZhbHVlID0gc291cmNlX3ZhbHVlX29iamVjdFtzb3VyY2VfZGVmLnZhbHVlXTtcblx0aWYgKHNvdXJjZV92YWx1ZSA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRpZiAoc291cmNlX2RlZi5mX3NldF92YWx1ZV91cmwgIT0gbnVsbCkge1xuXHQgICAgc291cmNlX2RlZi5mX3NldF92YWx1ZV91cmwoKTtcblx0fSBlbHNlIGlmIChzb3VyY2VfZGVmLnZhbHVlX3VybCAhPSBudWxsKSB7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoc291cmNlX2RlZi52YWx1ZV91cmwsIHNvdXJjZV92YWx1ZSk7XG5cdH0gZWxzZSB7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoc291cmNlX2RlZi52YWx1ZSwgc291cmNlX3ZhbHVlKTtcblx0fVxuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfZGVmYXVsdF9zb3VyY2VfdmFsdWVfYXJyYXkgPSAoc291cmNlX3R5cGUpID0+IHtcbiAgICBpZiAoc291cmNlX3R5cGUgPT0gbnVsbCkge1xuXHRzb3VyY2VfdHlwZSA9IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICB9XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmKSA9PiB7XG5cdGlmIChzb3VyY2VfZGVmLmZfZ2V0X3ZhbHVlX3VybCAhPSBudWxsKSB7XG5cdCAgICByZXR1cm4gc291cmNlX2RlZi5mX2dldF92YWx1ZV91cmwoKTtcblx0fVxuXHRsZXQgc291cmNlX2RlZl92YWx1ZSA9IHNvdXJjZV9kZWYudmFsdWVfdXJsO1xuXHRpZiAoc291cmNlX2RlZl92YWx1ZSA9PSBudWxsKSB7XG5cdCAgICBzb3VyY2VfZGVmX3ZhbHVlID0gc291cmNlX2RlZi52YWx1ZTtcblx0fVxuXHRsZXQgc291cmNlX3ZhbHVlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoc291cmNlX2RlZl92YWx1ZSk7XG5cdHJldHVybiBzb3VyY2VfdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZV92YWx1ZV9hcnJheTtcbn07XG5cbmZ1bmN0aW9uIGdldF9tZXRyaWNzX3VybChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSkge1xuICAgIGxldCBwYXJhbXMgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZiwgaSkgPT4ge1xuXHRyZXR1cm4gYCR7c291cmNlX2RlZi52YWx1ZX09JHtzb3VyY2VfYXJyYXlbaV0udmFsdWV9YDtcbiAgICB9KS5qb2luKFwiJlwiKTtcbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC90aW1lc2VyaWVzL3R5cGUvY29uc3RzLmx1YT9xdWVyeT0ke3NvdXJjZV90eXBlLnF1ZXJ5fSYke3BhcmFtc31gO1xuICAgIHJldHVybiB1cmw7XG59XG5cbmZ1bmN0aW9uIGdldF9tZXRyaWNfa2V5KHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpIHtcbiAgICBsZXQgc291cmNlX2FycmF5X2tleSA9IHNvdXJjZV9hcnJheS5tYXAoKHNvdXJjZSkgPT4gc291cmNlLnZhbHVlKS5qb2luKFwiX1wiKTtcbiAgICBsZXQga2V5ID0gYCR7c291cmNlX3R5cGUuaWR9XyR7c291cmNlX2FycmF5X2tleX1gO1xuICAgIHJldHVybiBrZXk7XG59XG5cbmxldCBjYWNoZV9tZXRyaWNzID0ge307XG5sZXQgbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwgPSBudWxsO1xuY29uc3QgZ2V0X21ldHJpY3MgPSBhc3luYyAoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpID0+IHtcbiAgICBsZXQgZXBvY2hfYmVnaW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgIGxldCBlcG9jaF9lbmQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKTtcbiAgICBsZXQgY3VycmVudF9sYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCA9IGAke2Vwb2NoX2JlZ2lufV8ke2Vwb2NoX2VuZH1gO1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG5cdHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBpZiAoc291cmNlX2FycmF5ID09IG51bGwpIHtcblx0c291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSk7XG4gICAgfVxuICAgIC8vIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHlwZS9jb25zdHMubHVhP3F1ZXJ5PSR7c291cmNlX3R5cGUudmFsdWV9YDtcbiAgICBsZXQgdXJsID0gZ2V0X21ldHJpY3NfdXJsKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5KTtcbiAgICBsZXQga2V5ID0gZ2V0X21ldHJpY19rZXkoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSk7XG4gICAgaWYgKGN1cnJlbnRfbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwgIT0gbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwpIHtcblx0Y2FjaGVfbWV0cmljc1trZXldID0gbnVsbDtcblx0bGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwgPSBjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsO1xuICAgIH1cbiAgICBpZiAoY2FjaGVfbWV0cmljc1trZXldID09IG51bGwpIHtcblx0Y2FjaGVfbWV0cmljc1trZXldID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgfVxuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgY2FjaGVfbWV0cmljc1trZXldO1xuICAgIGlmIChtZXRyaWNzID09IG51bGwpIHsgcmV0dXJuIFt7fV07IH1cbiAgICBpZiAobWV0cmljcy5zb21lKChtKSA9PiBtLmRlZmF1bHRfdmlzaWJsZSA9PSB0cnVlKSA9PSBmYWxzZSkge1xuXHRtZXRyaWNzWzBdLmRlZmF1bHRfdmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5jbG9uZShtZXRyaWNzKTtcbn07XG5cbmNvbnN0IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUgPSAoKSA9PiB7XG4gICAgbGV0IHBhdGhuYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlc190eXBlcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgcmVnRXhwID0gbmV3IFJlZ0V4cChzb3VyY2VzX3R5cGVzW2ldLnJlZ2V4X3BhZ2VfdXJsKTtcblx0aWYgKHJlZ0V4cC50ZXN0KHBhdGhuYW1lKSA9PSB0cnVlKSB7XG5cdCAgICByZXR1cm4gc291cmNlc190eXBlc1tpXTtcblx0fVxuICAgIH1cbiAgICB0aHJvdyBgc291cmNlX3R5cGUgbm90IGZvdW5kIGZvciAke3BhdGhuYW1lfWA7XG59O1xuXG5jb25zdCBnZXRfbWV0cmljX2Zyb21fc2NoZW1hID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpID0+IHtcbiAgICBsZXQgbWV0cmljcyA9IGF3YWl0IGdldF9tZXRyaWNzKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5KTtcbiAgICByZXR1cm4gbWV0cmljcy5maW5kKChtKSA9PiBtLnNjaGVtYSA9PSBtZXRyaWNfc2NoZW1hICYmIG0ucXVlcnkgPT0gbWV0cmljX3F1ZXJ5KTsgXG59O1xuXG5jb25zdCBnZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnkgPSAodHNfcXVlcnksIHNvdXJjZV90eXBlKSA9PiB7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcblx0c291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfZGVmX2RpY3QgPSB7fTtcbiAgICBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5LmZvckVhY2goKHNfZGVmKSA9PiBzb3VyY2VfZGVmX2RpY3Rbc19kZWYudmFsdWVdID0gdHJ1ZSk7XG4gICAgbGV0IHRzX3F1ZXJ5X2FycmF5ID0gdHNfcXVlcnkuc3BsaXQoXCIsXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHNfcXVlcnlfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0bGV0IHRzX3ZhbF9rZXkgPSB0c19xdWVyeV9hcnJheVtpXS5zcGxpdChcIjpcIilbMF07XG5cdGlmIChzb3VyY2VfZGVmX2RpY3RbdHNfdmFsX2tleV0gPT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIHRzX3F1ZXJ5X2FycmF5W2ldO1xuXHR9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBnZXRfZGVmYXVsdF9tZXRyaWMgPSAobWV0cmljcywgbWV0cmljX3RzX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KSA9PiB7XG4gICAgbGV0IGRlZmF1bHRfbWV0cmljO1xuICAgIGlmIChtZXRyaWNfdHNfc2NoZW1hICE9IG51bGwpIHtcblx0ZGVmYXVsdF9tZXRyaWMgPSBtZXRyaWNzLmZpbmQoKG0pID0+IG0uc2NoZW1hID09IG1ldHJpY190c19zY2hlbWEgJiYgKG1ldHJpY19xdWVyeSA9PSBudWxsIHx8IG0ucXVlcnkgPT0gbWV0cmljX3F1ZXJ5KSk7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0X21ldHJpYyA9PSBudWxsKSB7XG5cdGRlZmF1bHRfbWV0cmljID0gbWV0cmljcy5maW5kKChtKSA9PiBtLmRlZmF1bHRfdmlzaWJsZSA9PSB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRfbWV0cmljICE9IG51bGwpIHtcblx0cmV0dXJuIGRlZmF1bHRfbWV0cmljO1xuICAgIH1cbiAgICByZXR1cm4gbWV0cmljc1swXTtcbn07XG5cbmNvbnN0IG1ldHJpY3NNYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcblx0c2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2luX3VybCxcblx0Z2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsLFxuXHRnZXRfZGVmYXVsdF90aW1lc2VyaWVzX2dyb3Vwcyxcblx0Z2V0X3RzX2dyb3VwLFxuXHRnZXRfdHNfZ3JvdXBfaWQsXG5cblx0c291cmNlc190eXBlcyxcblx0c291cmNlc190eXBlc190YWJsZXMsXHRcblx0Z2V0X3NvdXJjZV90eXBlX2Zyb21faWQsXG5cdGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUsXG5cblx0Z2V0X3NvdXJjZXMsXG5cdGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSxcblx0Z2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QsXG5cdGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSxcblx0Z2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5LFxuXG5cdGdldF9tZXRyaWNzLFxuXHRnZXRfbWV0cmljX2Zyb21fc2NoZW1hLFxuXHRnZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnksXG5cdGdldF9kZWZhdWx0X21ldHJpYyxcblxuXHRzZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwsXG5cblx0dWlfdHlwZXMsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgbWV0cmljc01hbmFnZXI7XG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnXG4qL1xuXG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4vZm9ybWF0dGVyLXV0aWxzXCI7XG5pbXBvcnQgY29sb3JzSW50ZXJwb2xhdGlvbiBmcm9tIFwiLi9jb2xvcnMtaW50ZXJwb2xhdGlvbi5qc1wiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmZ1bmN0aW9uIHRzVG9BcGV4T3B0aW9ucyh0c09wdGlvbnMsIG1ldHJpYykge1xuICAgIGxldCBzdGFydFRpbWUgPSB0c09wdGlvbnMuc3RhcnQ7XG4gICAgbGV0IHN0ZXAgPSB0c09wdGlvbnMuc3RlcCAqIDEwMDA7XG4gICAgdHNPcHRpb25zLnNlcmllcy5mb3JFYWNoKChzKSA9PiB7XG5cdHMubmFtZSA9IHMubGFiZWw7XG5cdGRlbGV0ZSBzLnR5cGU7XG5cdGxldCB0aW1lID0gc3RhcnRUaW1lICogMTAwMDtcblx0cy5kYXRhID0gcy5kYXRhLm1hcCgoZCkgPT4ge1xuXHQgICAgLy9sZXQgZDIgPSB7IHg6IHRpbWUsIHk6IGQgKiA4IH07XG5cdCAgICBsZXQgZDIgPSB7IHg6IHRpbWUsIHk6IGQgfTtcblx0ICAgIHRpbWUgKz0gc3RlcDtcblx0ICAgIHJldHVybiBkMjtcblx0fSk7XG5cdGxldCB5QXhpcyA9IHtcblx0fTtcbiAgICB9KTtcbiAgICB0c09wdGlvbnMueGF4aXMgPSB7XG5cdGxhYmVsczoge1xuXHQgICAgc2hvdzogdHJ1ZSxcblx0fSxcblx0YXhpc1RpY2tzOiB7XG5cdCAgICBzaG93OiB0cnVlLFxuXHR9LFxuICAgIH07XG4gICAgXG4gICAgdHNPcHRpb25zLnlheGlzID0ge1xuXHQvL3JldmVyc2VkOiB0cnVlLFxuXHQvL3Nlcmllc05hbWU6IFxuXHRsYWJlbHM6IHtcblx0ICAgIGZvcm1hdHRlcjogZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKG1ldHJpYy5tZWFzdXJlX3VuaXQpLFxuXHR9LFxuXHRheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuXHR9LFxuXHR0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogbWV0cmljLm1lYXN1cmVfdW5pdCxcblx0fSxcbiAgICB9O1xuICAgIC8vdHNJbnRlcmZhY2UuY29sb3JzID0gW1wiI2ZmMzIzMVwiLCBcIiNmZmMwMDdcIl07XG59XG5cbmZ1bmN0aW9uIGdldFNlcmllSWQoc2VyaWUpIHtcbiAgICByZXR1cm4gYCR7c2VyaWUubGFiZWx9YDtcbn1cblxuZnVuY3Rpb24gZ2V0WWF4aXNOYW1lKG1lYXN1cmVVbml0LCBzY2FsZSkge1xuICAgIGlmIChtZWFzdXJlVW5pdCA9PSBcIm51bWJlclwiKSB7XG5cdHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgcmV0dXJuIG1lYXN1cmVVbml0O1xufVxuXG5mdW5jdGlvbiBnZXRTZXJpZU5hbWUobmFtZSwgaWQsIHRzR3JvdXAsIGV4dGVuZFNlcmllc05hbWUpIHtcbiAgICBpZiAobmFtZSA9PSBudWxsKSB7XG5cdG5hbWUgPSBpZDtcbiAgICB9XG4gICAgbGV0IG5hbWVfbW9yZV9zcGFjZSA9IFwiXCI7XG4gICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuXHRuYW1lX21vcmVfc3BhY2UgPSBgJHtuYW1lfSBgO1xuICAgIH1cbiAgICBpZiAoZXh0ZW5kU2VyaWVzTmFtZSA9PSBmYWxzZSkge1xuXHRyZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgbGV0IHNvdXJjZV9pbmRleCA9IGdldE1haW5Tb3VyY2VEZWZJbmRleCh0c0dyb3VwKTtcbiAgICBsZXQgc291cmNlID0gdHNHcm91cC5zb3VyY2VfYXJyYXlbc291cmNlX2luZGV4XTtcbiAgICBsZXQgcHJlZml4ID0gYCR7c291cmNlLmxhYmVsfWA7XG4gICAgbGV0IHlheGlzTmFtZSA9IGdldFlheGlzTmFtZSh0c0dyb3VwLm1ldHJpYy5tZWFzdXJlX3VuaXQsIHRzR3JvdXAubWV0cmljLnNjYWxlKTtcbiAgICByZXR1cm4gYCR7cHJlZml4fSAke25hbWVfbW9yZV9zcGFjZX0oJHt5YXhpc05hbWV9KWA7XG59XG5cbmZ1bmN0aW9uIGdldEFkZFNlcmllc05hbWVTb3VyY2UodHNHcnB1cHNBcnJheSkge1xuICAgIHJldHVybiB0c0dycHVwc0FycmF5WzBdPy5zb3VyY2U/Lm5hbWUgIT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0WWF4aXNJZChtZXRyaWMpIHtcbiAgICByZXR1cm4gYCR7bWV0cmljLm1lYXN1cmVfdW5pdH1fJHttZXRyaWMuc2NhbGV9YDtcbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWVzSW5BcGV4Rm9ybWF0KHRzT3B0aW9ucywgdHNHcm91cCwgZXh0ZW5kU2VyaWVzTmFtZSwgZm9yY2VEcmF3VHlwZSwgdHNDb21wYXJlKSB7XG4gICAgLy8gZXh0cmFjdCBzdGFydCB0aW1lIGFuZCBzdGVwXG4gICAgbGV0IHN0YXJ0VGltZSA9IHRzT3B0aW9ucy5zdGFydCAqIDEwMDA7XG4gICAgbGV0IHN0ZXAgPSB0c09wdGlvbnMuc3RlcCAqIDEwMDA7XG4gICAgbGV0IHNlcmllc0FwZXggPSBbXTtcbiAgICBsZXQgc2VyaWVzS2V5cyA9IE9iamVjdC5rZXlzKHRzR3JvdXAubWV0cmljLnRpbWVzZXJpZXMpO1xuICAgIGlmICh0c0dyb3VwLm1ldHJpYy50eXBlICE9IFwidG9wXCIgJiYgdHNPcHRpb25zLnNlcmllcz8ubGVuZ3RoICE9IHNlcmllc0tleXMubGVuZ3RoKSB7XHRcblx0dHNPcHRpb25zLnNlcmllcyA9IHNlcmllc0tleXMubWFwKChzaywgaSkgPT4ge1xuXHQgICAgbGV0IHNlcmllID0gdHNPcHRpb25zLnNlcmllcy5maW5kKChzKSA9PiBnZXRTZXJpZUlkKHMpID09IHNrKTtcblx0ICAgIGlmIChzZXJpZSAhPSBudWxsKSB7IHJldHVybiBzZXJpZTsgfVxuXHQgICAgcmV0dXJuIHtcblx0XHRsYWJlbDogc2ssXG5cdFx0ZGF0YTogW251bGxdLFxuXHQgICAgfTtcblx0fSk7XG4gICAgfVxuICAgIHRzT3B0aW9ucy5zZXJpZXMuZm9yRWFjaCgocywgaSkgPT4ge1xuXHQvLyBleHRyYWN0IGlkXG5cdGxldCBpZCA9IGdldFNlcmllSWQocyk7XG5cdC8vIGZpbmQgdGltZXNlcmllcyBtZXRhZGF0YVxuXHRsZXQgc01ldGFkYXRhID0gdHNHcm91cC5tZXRyaWMudGltZXNlcmllc1tpZF07XG5cdGlmIChzTWV0YWRhdGEgPT0gbnVsbCkge1xuXHQgICAgdGhyb3cgYEltcG9zc2libGUgZmluZCB0aW1lc2VyaWVfaWQgPSAke2lkfSBpbiBtZXRyaWMgbWV0YWRhdGEgKGlkLHNjaGVtYSxxdWVyeSkgPSAoJHttZXRyaWMuaWR9LCR7bWV0cmljLnNjaGVtYX0sJHttZXRyaWMuaWR9KWA7XG5cdH1cblx0Ly8gZXh0cmFjdCBkYXRhIGFuZCBjaGVjayBpZiB3ZSBuZWVkIGludmVydCBkaXJlY3Rpb25cblx0bGV0IHNjYWxhciA9IDE7XG5cdGlmIChzTWV0YWRhdGEuaW52ZXJ0X2RpcmVjdGlvbiA9PSB0cnVlKSB7XG5cdCAgICBzY2FsYXIgPSAtMTtcblx0fVxuXHRsZXQgZk1hcERhdGEgPSAoZGF0YSkgPT4ge1xuXHQgICAgbGV0IHRpbWUgPSBzdGFydFRpbWU7XG5cdCAgICBsZXQgcmVzID0gZGF0YS5tYXAoKGQpID0+IHtcblx0XHRsZXQgZDIgPSB7IHg6IHRpbWUsIHk6IGQgKiBzY2FsYXIgfTtcblx0XHR0aW1lICs9IHN0ZXA7XG5cdFx0cmV0dXJuIGQyO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gcmVzO1xuXHR9O1xuXHRcblx0Ly8gZXh0cmFjdCB0cyB2aXNpYmlsaXR5IChyYXcsIGF2ZywgcGVyY185NSlcblx0bGV0IHRzVmlzaWJpbGl0eSA9IHRzR3JvdXAudGltZXNlcmllcz8uZmluZCgodCkgPT4gdC5pZCA9PSBpZCk7XG5cdGxldCBuYW1lID0gc01ldGFkYXRhLmxhYmVsO1xuXHRpZiAocy5leHRfbGFiZWwgIT0gbnVsbCAmJiB0c0dyb3VwLm1ldHJpYy50eXBlID09IFwidG9wXCIpIHtcblx0ICAgIG5hbWUgPSBzLmV4dF9sYWJlbDtcblx0fVxuXHRsZXQgc05hbWUgPSBnZXRTZXJpZU5hbWUobmFtZSwgaWQsIHRzR3JvdXAsIGV4dGVuZFNlcmllc05hbWUpO1xuXHQvLyBjaGVjayBhbmQgYWRkIHJhdyBzZXJpZSB2aXNpYmlsaXR5XG5cdGlmICh0c1Zpc2liaWxpdHkgPT0gbnVsbCB8fCB0c1Zpc2liaWxpdHkucmF3ID09IHRydWUpIHtcblx0ICAgIGxldCBkYXRhID0gZk1hcERhdGEocy5kYXRhKTtcblxuXHQgICAgbGV0IGRyYXdUeXBlID0gc01ldGFkYXRhLmRyYXdfdHlwZTtcblx0ICAgIGlmIChkcmF3VHlwZSA9PSBudWxsICYmIGZvcmNlRHJhd1R5cGUgIT0gbnVsbCkgeyBkcmF3VHlwZSA9IGZvcmNlRHJhd1R5cGU7IH1cblx0ICAgIGVsc2UgaWYgKGRyYXdUeXBlID09IG51bGwpIHsgZHJhd1R5cGUgPSBcImFyZWFcIjsgfVxuXHQgICAgXG5cdCAgICAvLyBjcmVhdGUgYW4gYXBleCBjaGFydCBzZXJpZVxuXHQgICAgbGV0IHNBcGV4ID0ge1xuXHRcdGlkLFxuXHRcdGNvbG9yUGFsZXR0ZTogMCxcblx0XHRjb2xvcjogc01ldGFkYXRhLmNvbG9yLFxuXHRcdC8vIHN0YWNrZWQ6IHRzR3JvdXAubWV0cmljLmRyYXdfc3RhY2tlZCxcblx0XHR0eXBlOiBkcmF3VHlwZSxcblx0XHRuYW1lOiBzTmFtZSxcdFx0XG5cdFx0ZGF0YSxcblx0XHRpbnZlcnRfZGlyZWN0aW9uOiBzTWV0YWRhdGEuaW52ZXJ0X2RpcmVjdGlvbixcblx0ICAgIH07XG5cdCAgICBzZXJpZXNBcGV4LnB1c2goc0FwZXgpO1xuXHR9XG5cblx0Ly8gY2hlY2sgYW5kIGFkZCBwYXN0IHNlcmllIHZpc2liaWxpdHlcblx0aWYgKHRzVmlzaWJpbGl0eT8ucGFzdCA9PSB0cnVlXG5cdCAgICAmJiBudG9wbmdfdXRpbGl0eS5pc19vYmplY3QodHNPcHRpb25zLmFkZGl0aW9uYWxfc2VyaWVzKSkge1xuXHQgICAgbGV0IHNlcmllc0RhdGEgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkodHNPcHRpb25zLmFkZGl0aW9uYWxfc2VyaWVzKVswXTtcblx0ICAgIGxldCBzQXBleCA9IHtcblx0XHRpZCxcblx0XHRjb2xvclBhbGV0dGU6IDEsXG5cdFx0Ly8gY29sb3I6IHNNZXRhZGF0YS5jb2xvcixcblx0XHR0eXBlOiBcImxpbmVcIixcblx0XHQvLyBzdGFja2VkOiB0c0dyb3VwLm1ldHJpYy5kcmF3X3N0YWNrZWQsXG5cdFx0bmFtZTogYCR7c05hbWV9ICR7dHNDb21wYXJlfSBBZ29gLFxuXHRcdGRhdGE6IGZNYXBEYXRhKHNlcmllc0RhdGEpLFxuXHRcdGRhc2hlZDogdHJ1ZSxcblx0XHRpbnZlcnRfZGlyZWN0aW9uOiBzTWV0YWRhdGEuaW52ZXJ0X2RpcmVjdGlvbixcblx0ICAgIH07XG5cdCAgICBzZXJpZXNBcGV4LnB1c2goc0FwZXgpO1xuXHR9XG5cblx0Ly8gZGVmaW5lIGEgZnVuY3Rpb24gdG8gYnVpbGQgYSBjb25zdGFudCBzZXJpZVxuXHRsZXQgZkJ1aWxkQ29uc3RhbnRTZXJpZSA9IChwcmVmaXgsIGlkLCB2YWx1ZSkgPT4ge1xuXHQgICAgaWYgKHZhbHVlID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblx0ICAgIGxldCBuYW1lID0gYCR7c05hbWV9ICgke3ByZWZpeH0pYDtcblx0ICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0dmFsdWUgKj0gc2NhbGFyO1xuXHQgICAgfVxuXHQgICAgbGV0IHRpbWUgPSBzdGFydFRpbWU7XG5cdCAgICBsZXQgZGF0YSA9IHMuZGF0YS5tYXAoKGQpID0+IHtcblx0XHRsZXQgZDIgPSB7IHg6IHRpbWUsIHk6IHZhbHVlIH07XG5cdFx0dGltZSArPSBzdGVwO1xuXHRcdHJldHVybiBkMjtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHtcblx0XHRpZCxcblx0XHRuYW1lOiBuYW1lLFxuXHRcdGNvbG9yUGFsZXR0ZTogMSxcblx0XHQvLyBjb2xvcjogc01ldGFkYXRhLmNvbG9yLFxuXHRcdHR5cGU6ICdsaW5lJyxcblx0XHQvLyBzdGFja2VkOiB0c0dyb3VwLm1ldHJpYy5kcmF3X3N0YWNrZWQsXG5cdFx0ZGF0YSxcblx0XHRpbnZlcnRfZGlyZWN0aW9uOiBzTWV0YWRhdGEuaW52ZXJ0X2RpcmVjdGlvbixcblx0ICAgIH07XG5cdH07XG5cdC8vIGNoZWNrIGFuZCBhZGQgYXZnIHNlcmllIHZpc2liaWxpdHlcblx0aWYgKHRzVmlzaWJpbGl0eT8uYXZnID09IHRydWUpIHtcblx0ICAgIGxldCB2YWx1ZSA9IHRzT3B0aW9ucy5zdGF0aXN0aWNzPy5ieV9zZXJpZVtpXS5hdmVyYWdlO1xuXHQgICAgLy8gY3JlYXRlIGFuIGFwZXggY2hhcnQgc2VyaWVcblx0ICAgIGxldCBzQXBleCA9IGZCdWlsZENvbnN0YW50U2VyaWUoXCJBdmdcIiwgaWQsIHZhbHVlKTtcblx0ICAgIHNlcmllc0FwZXgucHVzaChzQXBleCk7XG5cdH1cblx0Ly8gY2hlY2sgYW5kIGFkZCA5NXRocGVyYyBzZXJpZSB2aXNpYmlsaXR5XG5cdGlmICh0c1Zpc2liaWxpdHk/LnBlcmNfOTUgPT0gdHJ1ZSkge1xuXHQgICAgbGV0IHZhbHVlID0gdHNPcHRpb25zLnN0YXRpc3RpY3M/LmJ5X3NlcmllW2ldW1wiOTV0aF9wZXJjZW50aWxlXCJdO1xuXHQgICAgLy8gY3JlYXRlIGFuIGFwZXggY2hhcnQgc2VyaWVcblx0ICAgIGxldCBzQXBleCA9IGZCdWlsZENvbnN0YW50U2VyaWUoXCI5NXRoIFBlcmNcIiwgaWQsIHZhbHVlKTtcblx0ICAgIHNlcmllc0FwZXgucHVzaChzQXBleCk7XG5cdH1cblxuICAgIH0pO1xuICAgIHJldHVybiBzZXJpZXNBcGV4O1xufVxuXG5jb25zdCBkZWZhdWx0Q29sb3JzID0gWyBcbiAgICBcIiNDNkQ5RkRcIixcbiAgICBcIiM5MEVFOTBcIixcbiAgICBcIiNFRTg0MzRcIixcbiAgICBcIiNDOTVENjNcIiwgXG4gICAgXCIjQUU4Nzk5XCIsIFxuICAgIFwiIzcxN0VDM1wiLCBcbiAgICBcIiM0OTZEREJcIiwgXG4gICAgXCIjNUE3QURFXCIsIFxuICAgIFwiIzY5ODZFMVwiLCBcbiAgICBcIiM3NzkxRTRcIiwgXG4gICAgXCIjODM5QkU2XCIsXG4gICAgXCIjOEVBNEU4XCIsIFxuXTtcblxuZnVuY3Rpb24gc2V0U2VyaWVzQ29sb3JzKHNlcmllc0FycmF5KSB7ICAgIFxuICAgIGxldCBjb2xvcnMgPSBzZXJpZXNBcnJheS5tYXAoKHMpID0+IHtcblx0aWYgKHMuY29sb3IgIT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIHMuY29sb3I7XG5cdH1cblx0bGV0IGhhc2ggPSBudG9wbmdfdXRpbGl0eS5zdHJpbmdfaGFzaF9jb2RlKHMubmFtZSk7XG5cdGlmIChoYXNoIDwgMCkgeyBoYXNoICo9IC0xOyB9XG5cdGxldCBjb2xvckluZGV4ID0gaGFzaCAlIGRlZmF1bHRDb2xvcnMubGVuZ3RoO1xuXHRyZXR1cm4gZGVmYXVsdENvbG9yc1tjb2xvckluZGV4XTtcbiAgICB9KTtcbiAgICBjb2xvcnMgPSBjb2xvcnNJbnRlcnBvbGF0aW9uLnRyYW5zZm9ybUNvbG9ycyhjb2xvcnMpO1xuICAgIHNlcmllc0FycmF5LmZvckVhY2goKHMsIGkpID0+IHMuY29sb3IgPSBjb2xvcnNbaV0pO1xufVxuXG5mdW5jdGlvbiBzZXRTZXJpZXNDb2xvcnMyKHNlcmllc0FycmF5KSB7XG4gICAgbGV0IGNvdW50MCA9IDAsIGNvdW50MSA9IDA7XG4gICAgbGV0IGNvbG9yczAgPSBkZWZhdWx0Q29sb3JzO1xuICAgIGxldCBjb2xvcnMxID0gZDN2Ny5zY2hlbWVDYXRlZ29yeTEwO1xuICAgIHNlcmllc0FycmF5LmZvckVhY2goKHMpID0+IHtcblx0aWYgKHMuY29sb3JQYWxldHRlID09IDApIHtcblx0ICAgIHMuY29sb3IgPSBjb2xvcnMwW2NvdW50MCAlIGNvbG9yczAubGVuZ3RoXTtcblx0ICAgIGNvdW50MCArPSAxO1xuXHR9IGVsc2UgaWYgKHMuY29sb3JQYWxldHRlID09IDEpIHtcblx0ICAgIHMuY29sb3IgPSBjb2xvcnMxW2NvdW50MSAlIGNvbG9yczEubGVuZ3RoXTtcblx0ICAgIGNvdW50MSArPSAxO1xuXHR9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldE1pbk1heFlheGlzKHlBeGlzQXJyYXksIHNlcmllc0FycmF5KSB7XG4gICAgbGV0IHlBeGlzQXJyYXlEaWN0ID0ge307XG4gICAgbGV0IG1pbk1heERpY3QgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllc0FycmF5Lmxlbmd0aDsgaSs9IDEpIHtcblx0bGV0IHMgPSBzZXJpZXNBcnJheVtpXTtcblx0bGV0IHkgPSB5QXhpc0FycmF5W2ldO1xuXHRsZXQgaWQgPSB5LnNlcmllc05hbWU7XG5cdGlmICh5QXhpc0FycmF5RGljdFtpZF0gPT0gbnVsbCkge1xuXHQgICAgeUF4aXNBcnJheURpY3RbaWRdID0gW107XG5cdCAgICBtaW5NYXhEaWN0W2lkXSA9IHsgbWluOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgbWF4OiBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiwgaW52ZXJ0X2RpcmVjdGlvbjogZmFsc2UgfTtcblx0fVxuXHR5QXhpc0FycmF5RGljdFtpZF0ucHVzaCh5KTtcblx0bGV0IG1pbk1heCA9IG1pbk1heERpY3RbaWRdO1xuXHRzLmRhdGEuZm9yRWFjaCgoZCkgPT4ge1xuXHQgICAgbWluTWF4Lm1heCA9IE1hdGgubWF4KG1pbk1heC5tYXgsIGQueSk7XG5cdCAgICBtaW5NYXgubWluID0gTWF0aC5taW4obWluTWF4Lm1pbiwgZC55KTtcblx0fSk7XG5cdG1pbk1heC5pbnZlcnRfZGlyZWN0aW9uIHw9IHMuaW52ZXJ0X2RpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBsZXQgZkFkZE9yU3VidHJhYzNQZXJjID0gKHgsIGlzQWRkKSA9PiB7XG5cdGlmICh4ID09IDAgfHwgeCA9PSBudWxsIHx8IHggPT0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgeCA9PSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikge1xuXHQgICAgcmV0dXJuIDA7XG5cdH1cblx0bGV0IG9uZVBlcmMgPSB4IC8gMTAwICogMztcblx0aWYgKChpc0FkZCAmJiB4ID4gMCkgfHwgKCFpc0FkZCAmJiB4IDwgMCkpIHtcblx0ICAgIHJldHVybiB4ICsgb25lUGVyYztcblx0fSBlbHNlIHtcblx0ICAgIHJldHVybiB4IC0gb25lUGVyYztcblx0fVxuICAgIH1cbiAgICBmb3IgKGxldCBzTmFtZSBpbiB5QXhpc0FycmF5RGljdCkge1xuXHRsZXQgeUFycmF5ID0geUF4aXNBcnJheURpY3Rbc05hbWVdO1xuXHRsZXQgbWluTWF4ID0gbWluTWF4RGljdFtzTmFtZV07XG5cdG1pbk1heC5taW4gPSBmQWRkT3JTdWJ0cmFjM1BlcmMobWluTWF4Lm1pbiwgZmFsc2UpO1xuXHRtaW5NYXgubWF4ID0gZkFkZE9yU3VidHJhYzNQZXJjKG1pbk1heC5tYXgsIHRydWUpO1xuXHRcblx0eUFycmF5LmZvckVhY2goKHkpID0+IHtcblx0ICAgIGxldCBtaW5fYWJzID0gTWF0aC5hYnMobWluTWF4Lm1pbik7XG5cdCAgICBsZXQgbWF4X2FicyA9IE1hdGguYWJzKG1pbk1heC5tYXgpO1xuXHQgICAgaWYgKG1pbl9hYnMgPiBtYXhfYWJzKSB7XG5cdCAgICBcdHkubWluID0gbWluTWF4Lm1pbjtcblx0ICAgIFx0eS5tYXggPSBtaW5fYWJzO1xuXHQgICAgfSBlbHNlIGlmIChtaW5fYWJzIDwgbWF4X2FicyAmJiBtaW5NYXguaW52ZXJ0X2RpcmVjdGlvbiA9PSB0cnVlKSB7XG5cdCAgICBcdHkubWluID0gLTEgKiBtYXhfYWJzO1xuXHQgICAgXHR5Lm1heCA9IG1pbk1heC5tYXg7XG5cdCAgICB9IGVsc2Uge1xuXHRcdHkubWluID0gbWluTWF4Lm1pbjtcblx0XHR5Lm1heCA9IG1pbk1heC5tYXg7XG5cdCAgICB9XG5cdH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0WWF4aXNJbkFwZXhGb3JtYXQoc2VyaWVzQXBleCwgdHNHcm91cCwgeWF4aXNEaWN0LCBmb3JtYXR0ZXJEaWN0KSB7XG4gICAgbGV0IG1ldHJpYyA9IHRzR3JvdXAubWV0cmljO1xuICAgIGxldCB5YXhpc0lkID0gZ2V0WWF4aXNJZChtZXRyaWMpO1xuICAgIGxldCBpbnZlcnREaXJlY3Rpb24gPSBmYWxzZTtcbiAgICBsZXQgY291bnRZYXhpc0lkID0gT2JqZWN0LmtleXMoeWF4aXNEaWN0KS5sZW5ndGg7XG5cbiAgICBsZXQgeWF4aXNBcGV4ID0gW107ICAgIFxuXG4gICAgZm9yIChsZXQgbWRLZXkgaW4gdHNHcm91cC5tZXRyaWMudGltZXNlcmllcykge1xuXHRpbnZlcnREaXJlY3Rpb24gfD0gdHNHcm91cC5tZXRyaWMudGltZXNlcmllc1ttZEtleV0uaW52ZXJ0X2RpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBzZXJpZXNBcGV4LmZvckVhY2goKHMpID0+IHtcblx0bGV0IHlheGlzU2VyaWVzTmFtZSA9IHlheGlzRGljdFt5YXhpc0lkXTtcblx0bGV0IG1heCA9IDA7XG5cdGxldCBzY2FsZUZhY3RvckluZGV4ID0gbnVsbDtcblx0aWYgKHMuZGF0YSAhPSBudWxsKSB7XG5cdCAgICAvLyBjYWxjdWxhdGUgc2NhbGVGYWN0b3Igb2YgbWVhc3VyZVVuaXRcblx0ICAgICBsZXQgdmFsdWVzID0gcy5kYXRhLm1hcCgobykgPT4ge1xuXHRcdGlmIChvLnkgPT0gbnVsbCkgeyByZXR1cm4gMDsgfVxuXHRcdHJldHVybiBNYXRoLmFicyhvLnkpO1xuXHQgICAgIH0pO1xuXHQgICAgbWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgdmFsdWVzKTtcblx0ICAgIHNjYWxlRmFjdG9ySW5kZXggPSBmb3JtYXR0ZXJVdGlscy5nZXRTY2FsZUZhY3RvckluZGV4KG1ldHJpYy5tZWFzdXJlX3VuaXQsIG1heCk7XG5cdH1cblx0aWYgKHlheGlzU2VyaWVzTmFtZSA9PSBudWxsKSB7XG5cdCAgICBmb3JtYXR0ZXJEaWN0W3lheGlzSWRdID0gc2NhbGVGYWN0b3JJbmRleDtcblx0ICAgIGxldCB5YXhpcyA9IHtcblx0XHRzZXJpZXNOYW1lOiBzLm5hbWUsXG5cdFx0c2hvdzogdHJ1ZSxcblx0XHQvL2ZvcmNlTmljZVNjYWxlOiB0cnVlLFxuXHRcdGxhYmVsczoge1xuXHRcdCAgICAvLyBmb3JtYXR0ZXI6IGZvcm1hdHRlckRpY3RbeWF4aXNJZF0sXG5cdFx0ICAgIC8vIG1pbldpZHRoOiA2MCxcblx0XHQgICAgIC8vIG1heFdpZHRoOiA3NSxcblx0XHQgICAgLy8gb2Zmc2V0WDogLTIwLFxuXHRcdH0sXG5cdFx0YXhpc1RpY2tzOiB7XG5cdFx0ICAgIHNob3c6IHRydWVcblx0XHR9LFxuXHRcdGF4aXNCb3JkZXI6IHtcblx0XHQgICAgLy8gb2Zmc2V0WDogNjAsXG5cdFx0ICAgIHNob3c6IHRydWUsXG5cdFx0fSxcblx0XHR0aXRsZToge1xuXHRcdCAgICB0ZXh0OiBnZXRZYXhpc05hbWUodHNHcm91cC5tZXRyaWMubWVhc3VyZV91bml0LCB0c0dyb3VwLm1ldHJpYy5zY2FsZSksXG5cdFx0fSxcblx0XHRvcHBvc2l0ZTogKGNvdW50WWF4aXNJZCAlIDIpID09IDEsXG5cdCAgICB9O1xuXHQgICAgeWF4aXNEaWN0W3lheGlzSWRdID0geWF4aXMuc2VyaWVzTmFtZTtcblx0ICAgIHlheGlzQXBleC5wdXNoKHlheGlzKTtcblx0fSBlbHNlIHtcblx0ICAgIHlheGlzQXBleC5wdXNoKHtcblx0XHRzZXJpZXNOYW1lOiB5YXhpc1Nlcmllc05hbWUsXG5cdFx0bGFiZWxzOiB7XG5cdFx0ICAgIC8vIGZvcm1hdHRlcjogZm9ybWF0dGVyRGljdFt5YXhpc0lkXSxcblx0XHR9LFxuXHRcdHNob3c6IGZhbHNlLFxuXHQgICAgfSk7XG5cdH1cblx0Zm9ybWF0dGVyRGljdFt5YXhpc0lkXSA9IE1hdGgubWF4KGZvcm1hdHRlckRpY3RbeWF4aXNJZF0sIHNjYWxlRmFjdG9ySW5kZXgpO1xuICAgIH0pO1xuICAgIHlheGlzQXBleC5mb3JFYWNoKCh5KSA9PiB5LmxhYmVscy5mb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIobWV0cmljLm1lYXN1cmVfdW5pdCwgaW52ZXJ0RGlyZWN0aW9uLCBmb3JtYXR0ZXJEaWN0W3lheGlzSWRdKSk7XG4gICAgcmV0dXJuIHlheGlzQXBleDtcbn1cblxuY29uc3QgZ3JvdXBzT3B0aW9uc01vZGVzRW51bSA9IHtcbiAgJzFfY2hhcnRfeF9tZXRyaWMnOiB7IHZhbHVlOiBcIjFfY2hhcnRfeF9tZXRyaWNcIiwgbGFiZWw6IGkxOG4oJ3BhZ2Vfc3RhdHMubGF5b3V0XzFfcGVyXzEnKSB9LFxuICAnMV9jaGFydF94X3lheGlzJzogeyB2YWx1ZTogXCIxX2NoYXJ0X3hfeWF4aXNcIiwgbGFiZWw6IGkxOG4oJ3BhZ2Vfc3RhdHMubGF5b3V0XzFfcGVyX3knKSB9LFxuICAnMV9jaGFydCc6IHsgdmFsdWU6IFwiMV9jaGFydFwiLCBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5sYXlvdXRfMV9wZXJfYWxsJykgfSxcbn1cblxuZnVuY3Rpb24gZ2V0R3JvdXBPcHRpb25Nb2RlKGdyb3VwX2lkKSB7XG4gIHJldHVybiBncm91cHNPcHRpb25zTW9kZXNFbnVtW2dyb3VwX2lkXSB8fCBudWxsO1xufTsgIFxuXG5mdW5jdGlvbiB0c0FycmF5VG9BcGV4T3B0aW9uc0FycmF5KHRzT3B0aW9uc0FycmF5LCB0c0dycHVwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZSwgdHNDb21wYXJlKSB7XG4gICAgaWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0XCJdLnZhbHVlKSB7XHRcblx0bGV0IGFwZXhPcHRpb25zID0gdHNBcnJheVRvQXBleE9wdGlvbnModHNPcHRpb25zQXJyYXksIHRzR3JwdXBzQXJyYXksIHRzQ29tcGFyZSk7XG5cdGxldCBhcGV4T3B0aW9uc0FycmF5ID0gW2FwZXhPcHRpb25zXTtcblx0c2V0TGVmdFBhZGRpbmcoYXBleE9wdGlvbnNBcnJheSk7XG5cdHJldHVybiBhcGV4T3B0aW9uc0FycmF5O1xuICAgIH0gZWxzZSBpZiAoZ3JvdXBzT3B0aW9uc01vZGUudmFsdWUgPT0gZ3JvdXBzT3B0aW9uc01vZGVzRW51bVtcIjFfY2hhcnRfeF95YXhpc1wiXS52YWx1ZSkge1xuXHRsZXQgdHNEaWN0ID0ge307XG5cdHRzR3JwdXBzQXJyYXkuZm9yRWFjaCgodHNHcm91cCwgaSkgPT4ge1xuXHQgICAgbGV0IHlheGlzSWQgPSBnZXRZYXhpc0lkKHRzR3JvdXAubWV0cmljKTtcblx0ICAgIGxldCB0c0VsID0ge3RzR3JvdXAsIHRzT3B0aW9uczogdHNPcHRpb25zQXJyYXlbaV19O1xuXHQgICAgaWYgKHRzRGljdFt5YXhpc0lkXSA9PSBudWxsKSB7XG5cdFx0dHNEaWN0W3lheGlzSWRdID0gW3RzRWxdO1xuXHQgICAgfSBlbHNlIHtcblx0XHR0c0RpY3RbeWF4aXNJZF0ucHVzaCh0c0VsKTtcblx0ICAgIH1cblx0fSk7XHRcblx0bGV0IGFwZXhPcHRpb25zQXJyYXkgPSBbXTtcblx0Zm9yIChsZXQga2V5IGluIHRzRGljdCkge1xuXHQgICAgbGV0IHRzQXJyYXkgPSB0c0RpY3Rba2V5XTtcblx0ICAgIGxldCB0c09wdGlvbnNBcnJheTIgPSB0c0FycmF5Lm1hcCgodHMpID0+IHRzLnRzT3B0aW9ucyk7XG5cdCAgICBsZXQgdHNHcnB1cHNBcnJheTIgPSB0c0FycmF5Lm1hcCgodHMpID0+IHRzLnRzR3JvdXApO1xuXHQgICAgbGV0IGFwZXhPcHRpb25zID0gdHNBcnJheVRvQXBleE9wdGlvbnModHNPcHRpb25zQXJyYXkyLCB0c0dycHVwc0FycmF5MiwgdHNDb21wYXJlKTtcblx0ICAgIGFwZXhPcHRpb25zQXJyYXkucHVzaChhcGV4T3B0aW9ucyk7XG5cdH1cblx0c2V0TGVmdFBhZGRpbmcoYXBleE9wdGlvbnNBcnJheSk7XG5cdHJldHVybiBhcGV4T3B0aW9uc0FycmF5O1xuICAgIH0gZWxzZSBpZiAoZ3JvdXBzT3B0aW9uc01vZGUudmFsdWUgPT0gZ3JvdXBzT3B0aW9uc01vZGVzRW51bVtcIjFfY2hhcnRfeF9tZXRyaWNcIl0udmFsdWUpIHtcblx0bGV0IGFwZXhPcHRpb25zQXJyYXkgPSBbXTtcblx0dHNPcHRpb25zQXJyYXkuZm9yRWFjaCgodHNPcHRpb25zLCBpKSA9PiB7XG5cdCAgICBsZXQgYXBleE9wdGlvbnMgPSB0c0FycmF5VG9BcGV4T3B0aW9ucyhbdHNPcHRpb25zXSwgW3RzR3JwdXBzQXJyYXlbaV1dLCB0c0NvbXBhcmUpO1xuXHQgICAgYXBleE9wdGlvbnNBcnJheS5wdXNoKGFwZXhPcHRpb25zKTtcdCAgICBcblx0fSk7XG5cdHNldExlZnRQYWRkaW5nKGFwZXhPcHRpb25zQXJyYXkpO1xuXHRyZXR1cm4gYXBleE9wdGlvbnNBcnJheTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBzZXRMZWZ0UGFkZGluZyhhcGV4T3B0aW9uc0FycmF5KSB7XG4gICAgLy8gYXBleE9wdGlvbnMueWF4aXMuZmlsdGVyKCh5YXhpcykgPT4geWF4aXMuc2hvdykuZm9yRWFjaCgoeWF4aXMpID0+IHlheGlzXG4gICAgbGV0IG9uZUNoYXJ0ID0gYXBleE9wdGlvbnNBcnJheS5sZW5ndGggPT0gMTtcbiAgICBhcGV4T3B0aW9uc0FycmF5LmZvckVhY2goKGFwZXhPcHRpb25zKSA9PiB7XG5cdGlmICghb25lQ2hhcnQpIHtcblx0ICAgIGFwZXhPcHRpb25zLnlheGlzLmZpbHRlcigoeWF4aXMpID0+IHlheGlzLnNob3cpLmZvckVhY2goKHlheGlzKSA9PiB7XG5cdFx0eWF4aXMubGFiZWxzLm1pbldpZHRoID0gNjA7XG5cdCAgICB9KTtcblx0fVxuXHRpZiAoYXBleE9wdGlvbnMueWF4aXMubGVuZ3RoIDwgMikge1xuXHQgICAgcmV0dXJuO1xuXHR9ICAgIFxuXHRhcGV4T3B0aW9ucy55YXhpcy5mb3JFYWNoKCh5YXhpcykgPT4ge1xuXHQgICAgeWF4aXMubGFiZWxzLm9mZnNldFggPSAtMjA7XG5cdH0pO1xuXHRhcGV4T3B0aW9ucy5ncmlkLnBhZGRpbmcubGVmdCA9IC03O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0c0FycmF5VG9BcGV4T3B0aW9ucyh0c09wdGlvbnNBcnJheSwgdHNHcnB1cHNBcnJheSwgdHNDb21wYXJlKSB7XG4gICAgaWYgKHRzT3B0aW9uc0FycmF5Lmxlbmd0aCAhPSB0c0dycHVwc0FycmF5Lmxlbmd0aCkge1xuXHRjb25zb2xlLmVycm9yKGBFcnJvciBpbiB0aW1lc2VyaWVzLXV0aWxzOnRzQXJyYXlUb0FwZXhPcHRpb25zOiB0c09wdGlvbnNBcnJheSAke3RzT3B0aW9uc0FycmF5fSBkaWZmZXJlbnQgbGVuZ3RoIGZyb20gdHNHcnB1cHNBcnJheSAke3RzR3JwdXBzQXJyYXl9YCk7XG5cdHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNlcmllc0FycmF5ID0gW107XG4gICAgbGV0IHlheGlzQXJyYXkgPSBbXTtcbiAgICBsZXQgeWF4aXNEaWN0ID0ge307XG4gICAgbGV0IGZvcm1hdHRlckRpY3QgPSB7fTtcbiAgICBsZXQgYWRkU2VyaWVzTmFtZVNvdXJjZSA9IGdldEFkZFNlcmllc05hbWVTb3VyY2UodHNHcnB1cHNBcnJheSk7XG4gICAgbGV0IGZvcmNlRHJhd1R5cGUgPSBudWxsO1xuICAgIHRzT3B0aW9uc0FycmF5LmZvckVhY2goKHRzT3B0aW9ucywgaSkgPT4ge1xuXHRsZXQgdHNHcm91cCA9IHRzR3JwdXBzQXJyYXlbaV07XG5cblx0aWYgKGkgPiAwKSB7XG5cdCAgICBmb3JjZURyYXdUeXBlID0gXCJsaW5lXCI7XG5cdH1cblx0Ly8gZ2V0IHNlcmllc0RhdGFcblx0bGV0IHNlcmllc0FwZXggPSBnZXRTZXJpZXNJbkFwZXhGb3JtYXQodHNPcHRpb25zLCB0c0dyb3VwLCB0cnVlLCBmb3JjZURyYXdUeXBlLCB0c0NvbXBhcmUpO1xuXG5cdHNlcmllc0FycmF5ID0gc2VyaWVzQXJyYXkuY29uY2F0KHNlcmllc0FwZXgpO1xuXG5cdC8vIGdldCB5YXhpc1xuXHRsZXQgeWF4aXNBcGV4ID0gZ2V0WWF4aXNJbkFwZXhGb3JtYXQoc2VyaWVzQXBleCwgdHNHcm91cCwgeWF4aXNEaWN0LCBmb3JtYXR0ZXJEaWN0KTtcblx0eWF4aXNBcnJheSA9IHlheGlzQXJyYXkuY29uY2F0KHlheGlzQXBleCk7XG4gICAgfSk7XG5cbiAgICAvLyBzZXQgY29sb3JzIGluIHNlcmllc1xuICAgIHNldFNlcmllc0NvbG9yczIoc2VyaWVzQXJyYXkpO1xuICAgIHNldE1pbk1heFlheGlzKHlheGlzQXJyYXksIHNlcmllc0FycmF5KTtcbiAgICBcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gYnVpbGRDaGFydE9wdGlvbnMoc2VyaWVzQXJyYXksIHlheGlzQXJyYXkpOyAgICBcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xufVxuXG5cbmZ1bmN0aW9uIGJ1aWxkQ2hhcnRPcHRpb25zKHNlcmllc0FycmF5LCB5YXhpc0FycmF5KSB7XG4gICAgcmV0dXJuIHtcblx0Y2hhcnQ6IHtcblx0ICAgIGlkOiBudG9wbmdfdXRpbGl0eS5nZXRfcmFuZG9tX3N0cmluZygpLFxuXHQgICAgZ3JvdXA6IFwidGltZXNlcmllc1wiLFxuXHQgICAgLy8gaGVpZ2h0OiAzMDAsXG5cdH0sXG5cdGdyaWQ6IHtcblx0ICAgIHBhZGRpbmc6IHtcblx0ICAgIFx0Ly8gbGVmdDogLTgsXG5cdCAgICB9LFxuXHQgICAgcm93OiB7XG5cdFx0Ly8gb3BhY2l0eTogMSxcblx0ICAgIH1cblx0fSxcblx0ZmlsbDoge1xuXHQgICAgb3BhY2l0eTogMC45LFxuXHQgICAgdHlwZTogJ3NvbGlkJyxcblx0ICAgIHBhdHRlcm46IHtcblx0XHRzdHJva2VXaWR0aDogMTAsXG5cdCAgICB9LFxuXHR9LFxuXHQvLyBmaWxsOiB7XG5cdCAgICBcblx0Ly8gfVxuXHRtYXJrZXJzOiB7XG4gICAgICAgICAgICBzaXplOiAyLjUsXG5cdCAgICBzdHJva2VXaWR0aDogMSxcblx0ICAgIC8vIGZpbGxPcGFjaXR5OiAwLFxuXHQgICAgLy8gc3Ryb2tlQ29sb3JzOiAnIzAwMCcsXG5cdCAgICAvLyBjb2xvcnM6ICcjMDAwJyxcblx0ICAgIHN0cm9rZUNvbG9yczogc2VyaWVzQXJyYXkubWFwKChzKSA9PiBzLmNvbG9yKSxcblx0ICAgIC8vIGNvbG9yczogbnVsbCxcblx0ICAgIC8vIHN0cm9rZU9wYWNpdHk6IDEsXG5cdH0sXG5cdHN0cm9rZToge1xuXHQgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGN1cnZlOiAnc3RyYWlnaHQnLFxuXHQgICAgbGluZUNhcDogJ2J1dHQnLFxuXHQgICAgd2lkdGg6IDMsXG5cdCAgICBkYXNoQXJyYXk6IHNlcmllc0FycmF5Lm1hcCgocykgPT4geyBpZiAocy5kYXNoZWQpIHsgcmV0dXJuIDQ7IH0gcmV0dXJuIDA7IH0pLFxuXHR9LFxuXHRsZWdlbmQ6IHtcblx0ICAgIHNob3c6IHRydWUsXG5cdCAgICBzaG93Rm9yU2luZ2xlU2VyaWVzOiB0cnVlLFxuXHQgICAgcG9zaXRpb246IFwidG9wXCIsXG5cdCAgICBob3Jpem9udGFsQWxpZ246IFwicmlnaHRcIixcblx0ICAgIG9uSXRlbUNsaWNrOiB7XG5cdFx0dG9nZ2xlRGF0YVNlcmllczogZmFsc2UsXG5cdCAgICB9LFxuXHR9LFxuXHRzZXJpZXM6IHNlcmllc0FycmF5LFxuXHQvLyBjb2xvcnM6IGNvbG9yc0ludGVycG9sYXRpb24udHJhbnNmb3JtQ29sb3JzKGNvbG9ycyksXG5cdHlheGlzOiB5YXhpc0FycmF5LFxuXHR4YXhpczoge1xuXHQgICAgbGFiZWxzOiB7XG5cdFx0c2hvdzogdHJ1ZSxcblx0ICAgIH0sXG5cdCAgICBheGlzVGlja3M6IHtcblx0XHRzaG93OiB0cnVlLFxuXHQgICAgfSxcblx0fSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUc1F1ZXJ5KHRzR3JvdXAsIG5vdF9tZXRyaWNfcXVlcnksIGVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QpIHtcbiAgICBsZXQgdHNRdWVyeSA9IHRzR3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYsIGkpID0+IHtcblx0aWYgKGVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QgIT0gbnVsbCAmJiAhZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdFtzb3VyY2VfZGVmLnZhbHVlXSkgeyByZXR1cm4gbnVsbDsgfVxuXHRsZXQgc291cmNlX3ZhbHVlID0gdHNHcm91cC5zb3VyY2VfYXJyYXlbaV0udmFsdWU7XG5cdHJldHVybiBgJHtzb3VyY2VfZGVmLnZhbHVlfToke3NvdXJjZV92YWx1ZX1gO1xuICAgIH0pLmZpbHRlcigocykgPT4gcyAhPSBudWxsKS5qb2luKFwiLFwiKTtcbiAgICBcbiAgICBpZiAoIW5vdF9tZXRyaWNfcXVlcnkgJiYgdHNHcm91cC5tZXRyaWMucXVlcnkgIT0gbnVsbCkge1xuXHR0c1F1ZXJ5ID0gYCR7dHNRdWVyeX0sJHt0c0dyb3VwLm1ldHJpYy5xdWVyeX1gXG4gICAgfVxuICAgIHJldHVybiB0c1F1ZXJ5O1xufVxuXG5mdW5jdGlvbiBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCkge1xuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX2RlZl9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgc291cmNlX2RlZiA9IHNvdXJjZV9kZWZfYXJyYXlbaV07XG5cdGlmIChzb3VyY2VfZGVmLm1haW5fc291cmNlX2RlZiA9PSB0cnVlKSB7IHJldHVybiBpOyB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICAgIFxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRUc0NoYXJ0c09wdGlvbnMoaHR0cFByZWZpeCwgZXBvY2hTdGF0dXMsIHRzQ29tcGFyZSwgdGltZXNlcmllc0dyb3VwcywgaXNQcm8pIHtcbiAgICBsZXQgcGFyYW1zRXBvY2hPYmogPSB7IGVwb2NoX2JlZ2luOiBlcG9jaFN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBlcG9jaFN0YXR1cy5lcG9jaF9lbmQgfTtcbiAgICBcbiAgICBsZXQgdHNDaGFydHNPcHRpb25zO1xuICAgIGlmICghaXNQcm8pIHtcblx0bGV0IHRzRGF0YVVybCA9IGAke2h0dHBQcmVmaXh9L2x1YS9yZXN0L3YyL2dldC90aW1lc2VyaWVzL3RzLmx1YWA7XG5cdGxldCBwYXJhbXNVcmxSZXF1ZXN0ID0gYHRzX2NvbXBhcmU9JHt0c0NvbXBhcmV9JnZlcnNpb249NCZ6b29tPSR7dHNDb21wYXJlfSZpbml0aWFsX3BvaW50PXRydWUmbGltaXQ9MTgwYDtcblx0bGV0IHRzR3JvdXAgPSB0aW1lc2VyaWVzR3JvdXBzWzBdO1xuXHRsZXQgbWFpbl9zb3VyY2VfaW5kZXggPSBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCk7XG5cdGxldCB0c1F1ZXJ5ID0gZ2V0VHNRdWVyeSh0c0dyb3VwKTtcblx0bGV0IHBPYmogPSB7XG5cdCAgICAuLi5wYXJhbXNFcG9jaE9iaixcblx0ICAgIHRzX3F1ZXJ5OiB0c1F1ZXJ5LFxuXHQgICAgdHNfc2NoZW1hOiBgJHt0c0dyb3VwLm1ldHJpYy5zY2hlbWF9YCxcblx0fTtcblx0aWYgKCF0c0dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbbWFpbl9zb3VyY2VfaW5kZXhdLmRpc2FibGVfdHNrZXkpIHtcblx0ICAgIHBPYmoudHNrZXkgPSB0c0dyb3VwLnNvdXJjZV9hcnJheVttYWluX3NvdXJjZV9pbmRleF0udmFsdWU7XG5cdH1cblx0bGV0IHBVcmxSZXF1ZXN0ID0gIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChwT2JqLCBwYXJhbXNVcmxSZXF1ZXN0KTtcblx0bGV0IHVybCA9IGAke3RzRGF0YVVybH0/JHtwVXJsUmVxdWVzdH1gO1xuXHRsZXQgdHNDaGFydE9wdGlvbiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuXHR0c0NoYXJ0c09wdGlvbnMgPSBbdHNDaGFydE9wdGlvbl07XG4gICAgfSBlbHNlIHtcblx0bGV0IHBhcmFtc0NoYXJ0ID0ge1xuXHRcdHpvb206IHRzQ29tcGFyZSxcblx0XHRpbml0aWFsX3BvaW50OiB0cnVlLFxuXHRcdGxpbWl0OiAxODAsXG5cdFx0dmVyc2lvbjogNCxcblx0XHR0c19jb21wYXJlOiB0c0NvbXBhcmUsXG5cdH07XG5cdGxldCB0c1JlcXVlc3RzID0gdGltZXNlcmllc0dyb3Vwcy5tYXAoKHRzR3JvdXApID0+IHtcblx0ICAgIGxldCBtYWluX3NvdXJjZV9pbmRleCA9IGdldE1haW5Tb3VyY2VEZWZJbmRleCh0c0dyb3VwKTtcblx0ICAgIGxldCB0c1F1ZXJ5ID0gZ2V0VHNRdWVyeSh0c0dyb3VwKTtcblx0ICAgIGxldCBwT2JqID0ge1xuXHRcdHRzX3F1ZXJ5OiB0c1F1ZXJ5LFxuXHRcdHRzX3NjaGVtYTogYCR7dHNHcm91cC5tZXRyaWMuc2NoZW1hfWAsXG5cdCAgICB9O1xuXHQgICAgaWYgKCF0c0dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbbWFpbl9zb3VyY2VfaW5kZXhdLmRpc2FibGVfdHNrZXkpIHtcblx0XHRwT2JqLnRza2V5ID0gdHNHcm91cC5zb3VyY2VfYXJyYXlbbWFpbl9zb3VyY2VfaW5kZXhdLnZhbHVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHBPYmo7XG5cdH0pO1xuXHRsZXQgdHNEYXRhVXJsTXVsdGkgPSBgJHtodHRwUHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHNfbXVsdGkubHVhYDtcblx0bGV0IHJlcSA9IHsgdHNfcmVxdWVzdHM6IHRzUmVxdWVzdHMsIC4uLnBhcmFtc0Vwb2NoT2JqLCAuLi5wYXJhbXNDaGFydCB9O1xuXHRsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0fTtcblx0dHNDaGFydHNPcHRpb25zID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHRzRGF0YVVybE11bHRpLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShyZXEpfSk7XG4gICAgfVxuICAgIHJldHVybiB0c0NoYXJ0c09wdGlvbnM7XG59XG5cbmNvbnN0IHRpbWVzZXJpZXNVdGlscyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG5cdGdyb3Vwc09wdGlvbnNNb2Rlc0VudW0sXG5cdHRzVG9BcGV4T3B0aW9ucyxcblx0dHNBcnJheVRvQXBleE9wdGlvbnMsXG5cdHRzQXJyYXlUb0FwZXhPcHRpb25zQXJyYXksXG5cdGdldEdyb3VwT3B0aW9uTW9kZSxcblx0Z2V0U2VyaWVJZCxcblx0Z2V0U2VyaWVOYW1lLFxuXHRnZXRUc0NoYXJ0c09wdGlvbnMsXG5cdGdldFRzUXVlcnksXG5cdGdldE1haW5Tb3VyY2VEZWZJbmRleCxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCB0aW1lc2VyaWVzVXRpbHM7XG4iLCJpbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuL250b3AtdXRpbHMuanNcIjtcblxuY29uc3QgVXRpbHMgPSBOdG9wVXRpbHM7XG5mdW5jdGlvbiBnZXRfZGF0YV9wYXR0ZXJuKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PSBcInRleHRcIikge1xuXHRyZXR1cm4gYC4qYDtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJ2bGFuXCIpIHtcblx0bGV0IHZsYW4gPSBTdHJpbmcucmF3YEAoKFsxLTldKXwoWzEtOV1bMC05XXsxLDJ9KXwoWzEtM11bMC05XXszfSl8KDQwWzAtOF1bMC05XSl8KDQwOVswLTVdKSlgO1xuXHRyZXR1cm4gdmxhbjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJpcFwiIHx8IHR5cGUgPT0gXCJjaWRyXCIpIHtcblx0bGV0IHZsYW4gPSBnZXRfZGF0YV9wYXR0ZXJuKFwidmxhblwiKTtcblx0bGV0IHJfaXB2NCA9IFV0aWxzLlJFR0VYRVMuaXB2NDtcblx0bGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2UoXCIkXCIsIGAke3ZsYW59JGApO1xuXHRsZXQgcl9pcHY2ID0gVXRpbHMuUkVHRVhFUy5pcHY2O1xuXHRsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgYCR7dmxhbn0kYCk7XG5cdGlmICh0eXBlID09IFwiY2lkclwiKSB7XG5cdCAgICBsZXQgbmV0d29ya19pcHY0ID0gU3RyaW5nLnJhd2AoXFwvKChbMS05XSl8KFsxLTJdWzAtOV0pfCgzWzAtMl0pKSlgO1xuXHQgICAgbGV0IGlwdjRfY2lkciA9IHJfaXB2NC5yZXBsYWNlKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjR9JGApO1xuXHQgICAgbGV0IGlwdjRfY2lkcl92bGFuID0gcl9pcHY0LnJlcGxhY2UoXCIkXCIsIGAke25ldHdvcmtfaXB2NH0ke3ZsYW59JGApO1xuXHQgICAgbGV0IG5ldHdvcmtfaXB2NiA9IFN0cmluZy5yYXdgKFxcLygoWzEtOV0pfChbMS05XVswLTldKXwoMVswLTFdWzAtOV0pfCgxMlswLThdKSkpYDtcblx0ICAgIGxldCBpcHY2X2NpZHIgPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgYCR7bmV0d29ya19pcHY2fSRgKTtcblx0ICAgIGxldCBpcHY2X2NpZHJfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjZ9JHt2bGFufSRgKTtcblx0ICAgIHJldHVybiBgKCR7aXB2NF9jaWRyfXwke2lwdjRfY2lkcl92bGFufXwke2lwdjZfY2lkcn18JHtpcHY2X2NpZHJfdmxhbn0pYDtcblx0fVxuXHRcblx0cmV0dXJuIGAoJHtyX2lwdjR9KXwoJHtyX2lwdjRfdmxhbn0pfCgke3JfaXB2Nn0pfCgke3JfaXB2Nl92bGFufSlgO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcIm1hY1wiKSB7XG5cdHJldHVybiBVdGlscy5SRUdFWEVTW1wibWFjQWRkcmVzc1wiXTtcbiAgICB9XG4gICAgcmV0dXJuIFV0aWxzLlJFR0VYRVNbdHlwZV07XG59XG5cbmNvbnN0IHJlZ2V4VmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG5cdGdldF9kYXRhX3BhdHRlcm4sXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgcmVnZXhWYWxpZGF0aW9uO1xuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLnRpdGxlXCIpfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aW9uKCdhZGQnKVwiPlxuICAgIFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdhZGQnfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcIm1vZGFsX3RpbWVzZXJpZXMuYWRkX3RpbWVzZXJpZXNcIil9fVxuXHQ8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aW9uKCdzZWxlY3QnKVwiPlxuICAgIFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdzZWxlY3QnIH1cIiBocmVmPVwiI1wiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLm1hbmFnZV90aW1lc2VyaWVzXCIpfX08L2E+XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gICAgPCEtLSBhY3Rpb24gYWRkIC0tPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWN0aW9uID09ICdhZGQnXCI+XG4gICAgICA8IS0tIFNvdXJjZXMgVHlwZXMgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5zb3VyY2VfdHlwZVwiKX19PC9iPlxuXHQgIDwvbGFiZWw+XG5cdCAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX3R5cGVcIlxuXHRcdFx0ICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zb3VyY2VfdHlwZSgpXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJzb3VyY2VzX3R5cGVzXCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPCEtLSBTb3VyY2VzIC0tPlxuICAgICAgPGRpdiB2LWlmPVwiIWhpZGVfc291cmNlc1wiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbWItMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3cgXCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5zb3VyY2VcIil9fTwvYj5cblx0ICA8L2xhYmVsPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInNlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWxcIiA6dGl0bGU9XCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsXCIgc3R5bGU9XCJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7XCIgdHlwZT1cInRleHRcIiBkaXNhYmxlZD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG5cdDx0ZW1wbGF0ZSB2LWZvcj1cIihzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4KSBpbiBzZWxlY3RlZF9zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5XCI+XG5cdCAgPCEtLSBzZWxlY3QgLS0+XG5cdCAgPGRpdiB2LWlmPVwic291cmNlX2RlZi51aV90eXBlID09IHVpX3R5cGVzLnNlbGVjdFwiIGNsYXNzPVwiZm9ybS1ncm91cCBtdC0yIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICAgIDxiPnt7c291cmNlX2RlZi5sYWJlbH19IHt7c291cmNlX2RlZl9pbmRleH19PC9iPlxuXHQgICAgPC9sYWJlbD5cblx0ICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuXHQgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCJcblx0XHRcdCAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zZWxlY3RlZF9zb3VyY2UoKVwiXG5cdFx0XHQgICAgOm9wdGlvbnM9XCJzb3VyY2VzX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCI+XG5cdCAgICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgICAgPC9kaXY+XG5cdCAgPC9kaXY+IDwhLS0gZW5kIHNlbGVjdCAtLT5cblxuXHQgIDwhLS0gaW5wdXQgdGV4dCAtLT5cblx0ICA8ZGl2IHYtaWY9XCJzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXRcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXQtMiByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgICA8Yj57e3NvdXJjZV9kZWYubGFiZWx9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cblx0ICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgQGlucHV0PVwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZSgpXCIgdi1tb2RlbD1cInNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCIgOnBhdHRlcm49XCJzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlwiPlxuXHQgICAgPC9kaXY+XG5cdCAgPC9kaXY+IDwhLS0gaW5wdXQgdGV4dCAtLT5cdCAgXG5cdDwvdGVtcGxhdGU+XG5cdFxuXHQ8ZGl2IHYtc2hvdz1cImVuYWJsZV9hcHBseV9zb3VyY2VcIiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93IG10LTJcIiBzdHlsZT1cInRleHQtYWxpZ246ZW5kO1wiPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgIFx0ICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5X3NvdXJjZV9hcnJheVwiIDpkaXNhYmxlZD1cImVuYWJsZV9hcHBseV9zb3VyY2UgPT0gZmFsc2VcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFwcGx5X3NvdXJjZVwiKX19PC9idXR0b24+XG5cdCAgPC9kaXY+XHQgIFxuXHQ8L2Rpdj5cdFxuICAgICAgPC9kaXY+IDwhLS0gZW5kIFNvdXJjZXMgLS0+XG4gICAgICBcbiAgICAgIDwhLS0gTWV0cmljcyAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0ICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLm1ldHJpY1wiKX19PC9iPlxuXHQgIDwvbGFiZWw+XG5cdCAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHJlZj1cInNlbGVjdF9zZWFyY2hfbWV0cmljc1wiXG5cdCAgXHRcdCAgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfdGltZXNlcmllc190b19hZGQoKVwiXG5cdCAgXHRcdCAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9tZXRyaWNcIlxuXHQgIFx0XHQgIDpvcHRpb25zPVwibWV0cmljc1wiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG5cdCAgICBcblx0ICA8L2Rpdj5cdCAgXG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxMaXN0VGltZXNlcmllc1xuXHRpZD1cIlwiXG5cdDp0aXRsZT1cIl9pMThuKCdtb2RhbF90aW1lc2VyaWVzLnRpbWVzZXJpZXNfbGlzdCcpXCJcblx0di1tb2RlbDp0aW1lc2VyaWVzPVwidGltZXNlcmllc190b19hZGRcIj5cbiAgICAgIDwvTGlzdFRpbWVzZXJpZXM+ICAgICAgXG4gICAgPC90ZW1wbGF0ZT48IS0tIGFjdGlvbiA9PSBhZGQgLS0+XG5cbiAgICA8IS0tIGFjdGlvbiBzZWxlY3QtLT5cbiAgICA8dGVtcGxhdGUgdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZFwiPlxuXHQ8TGlzdFRpbWVzZXJpZXNcblx0ICA6aWQ9XCJnZXRfdGltZXNlcmllc19ncm91cF9pZChpdGVtKVwiXG5cdCAgOnRpdGxlPVwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZShpdGVtKVwiXG5cdCAgdi1tb2RlbDp0aW1lc2VyaWVzPVwiaXRlbS50aW1lc2VyaWVzXCJcblx0ICA6c2hvd19kZWxldGVfYnV0dG9uPVwidGltZXNlcmllc19ncm91cHNfYWRkZWQubGVuZ3RoID4gMVwiXG5cdCAgQGRlbGV0ZV90cz1cImRlbGV0ZV90c1wiPlxuXHQ8L0xpc3RUaW1lc2VyaWVzPiAgICAgIFxuICAgICAgPC90ZW1wbGF0ZT48IS0tIHYtZm9yIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkIC0tPlxuICAgIDwvdGVtcGxhdGU+PCEtLSBhY3Rpb24gPT0gc2VsZWN0IC0tPlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdi1zaG93PVwiYWN0aW9uID09ICdhZGQnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hZGRcIil9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1zaG93PVwiYWN0aW9uID09ICdzZWxlY3QnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hcHBseVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExpc3RUaW1lc2VyaWVzIH0gZnJvbSBcIi4vbGlzdC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5pbXBvcnQgbWV0cmljc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanNcIjtcbmltcG9ydCB0aW1lc2VyaWVzVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90aW1lc2VyaWVzLXV0aWxzLmpzXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBzb3VyY2VzX3R5cGVzX2VuYWJsZWQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNlbGVjdF9zZWFyY2hfbWV0cmljcyA9IHJlZihudWxsKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IGFjdGlvbiA9IHJlZihcInNlbGVjdFwiKTsgLy8gYWRkL3NlbGVjdCBcblxubGV0IGN1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcblxuY29uc3Qgc291cmNlc190eXBlcyA9IG1ldHJpY3NNYW5hZ2VyLnNvdXJjZXNfdHlwZXM7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfdHlwZSA9IHJlZihjdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUpO1xuXG5jb25zdCB1aV90eXBlcyA9IG1ldHJpY3NNYW5hZ2VyLnVpX3R5cGVzO1xuY29uc3Qgc291cmNlc19hcnJheSA9IHJlZihbXSk7IC8vIGFycmF5IG9mIHNvdXJjZXMsIGVhY2ggZWxlbWVudCBpcyB0aGUgc291cmNlcyBsaXN0IG9mIHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbaV1cbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV9hcnJheSA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheSA9IHJlZihbXSk7IC8vIGFycmF5IG9mIHNvdXJjZV92YWx1ZSBiaW5kaW5nIHdpdGggaW5wdXQgdGV4dFxuLy8gY29uc3Qgc3ViX3NvdXJjZXMgPSByZWYoW10pO1xuLy8gY29uc3Qgc2VsZWN0ZWRfc3ViX3NvdXJjZSA9IHJlZih7fSk7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsID0gcmVmKFwiXCIpO1xuY29uc3Qgc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheSA9IHJlZiAoW10pO1xuXG5jb25zdCBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZCA9IHJlZihmYWxzZSk7XG5jb25zdCBlbmFibGVfYXBwbHlfc291cmNlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9PSBmYWxzZSkge1xuXHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheS52YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgcmdfdGV4dCA9IHNvdXJjZV90ZXh0X3ZhbGlkYXRpb25fYXJyYXkudmFsdWVbaV07XG5cdGlmIChyZ190ZXh0ID09IG51bGwpIHsgY29udGludWU7IH1cblx0bGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZ190ZXh0KTtcblx0bGV0IHNvdXJjZV90ZXh0ID0gc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWVbaV07XG5cdGlmIChyZWdleC50ZXN0KHNvdXJjZV90ZXh0KSA9PSBmYWxzZSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHR9XHRcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59KTtcbmNvbnN0IGhpZGVfc291cmNlcyA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IG1ldHJpY3MgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KTtcblxuY29uc3QgdGltZXNlcmllc19ncm91cHNfYWRkZWQgPSByZWYoW10pO1xuXG5jb25zdCB0aW1lc2VyaWVzX3RvX2FkZCA9IHJlZihbXSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FwcGx5J10pXG5cbmxldCB3YWl0X2luaXQgPSBudWxsO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBzb3VyY2VzX3R5cGVzLmZvckVhY2goKHNvdXJjZV90eXBlKSA9PiB7XG5cdGxldCBzb3VyY2VfdHlwZV9lbmFibGVkID0gcHJvcHMuc291cmNlc190eXBlc19lbmFibGVkW3NvdXJjZV90eXBlLmlkXTtcblx0aWYgKHNvdXJjZV90eXBlX2VuYWJsZWQgPT0gbnVsbCB8fCBzb3VyY2VfdHlwZV9lbmFibGVkID09IGZhbHNlKSB7XG5cdCAgICAvLyBzb3VyY2VfdHlwZS5kaXNhYmxlZCA9IHRydWU7XG5cdH1cbiAgICB9KTsgICAgXG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICB3YWl0X2luaXQgPSBpbml0KCk7XG59KTtcblxuY29uc3Qgc2hvdyA9IGFzeW5jICh0aW1lc2VyaWVzX2dyb3VwcykgPT4ge1xuICAgIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlID0gdGltZXNlcmllc19ncm91cHM7XG4gICAgYXdhaXQgd2FpdF9pbml0O1xuICAgIGFjdGlvbi52YWx1ZSA9IFwic2VsZWN0XCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuZnVuY3Rpb24gY2hhbmdlX2FjdGlvbihhKSB7XG4gICAgYWN0aW9uLnZhbHVlID0gYTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX3NvdXJjZV90eXBlKCkge1xuICAgIGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkLnZhbHVlID0gZmFsc2U7XG4gICAgc2V0X3JlZ2V4KCk7XG4gICAgc2V0X2hpZGVfc291cmNlcygpO1xuICAgIGF3YWl0IHNldF9zb3VyY2VzX2FycmF5KCk7XG4gICAgYXdhaXQgc2V0X21ldHJpY3MoKTtcbn1cblxuZnVuY3Rpb24gc2V0X2hpZGVfc291cmNlcygpIHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZTtcbiAgICBoaWRlX3NvdXJjZXMudmFsdWUgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc2QpID0+IHNkLnVpX3R5cGUgPT0gdWlfdHlwZXMuaGlkZSkuZXZlcnkoKGhpZGUpID0+IGhpZGUgPT0gdHJ1ZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5X3NvdXJjZV9hcnJheSgpIHtcbiAgICBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9IGZhbHNlO1xuICAgIHNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5LnZhbHVlLmZvckVhY2goKHNvdXJjZV92YWx1ZSwgaSkgPT4ge1xuXHRsZXQgc291cmNlX2RlZiA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnNvdXJjZV9kZWZfYXJyYXlbaV07XG5cdGlmIChzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXQpIHtcblx0ICAgIGxldCBzb3VyY2UgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWVbaV07XG5cdCAgICBzb3VyY2UudmFsdWUgPSBzb3VyY2VfdmFsdWU7XG5cdCAgICBzb3VyY2UubGFiZWwgPSBzb3VyY2VfdmFsdWU7XG5cdH1cbiAgICB9KTsgICAgXG4gICAgYXdhaXQgY2hhbmdlX3NvdXJjZV9hcnJheSgpO1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9zb3VyY2VfYXJyYXkoKSB7ICAgIFxuICAgIGF3YWl0IHNldF9tZXRyaWNzKCk7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZV9zZWxlY3RlZF9zb3VyY2UoKSB7XG4gICAgaXNfc2VsZWN0ZWRfc291cmNlX2NoYW5nZWQudmFsdWUgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRfcmVnZXgoKSB7XG4gICAgbGV0IHJlZ2V4X3NvdXJjZV9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlPy5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4gc291cmNlX2RlZi5yZWdleF90eXBlKTtcbiAgICBpZiAocmVnZXhfc291cmNlX2FycmF5ID09IG51bGwpIHsgcmVnZXhfc291cmNlX2FycmF5ID0gW107IH1cbiAgICBzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5LnZhbHVlID0gcmVnZXhfc291cmNlX2FycmF5Lm1hcCgocmVnZXhfc291cmNlKSA9PiB7XG5cdGlmIChyZWdleF9zb3VyY2UgPT0gbnVsbCkgeyByZXR1cm4gIG51bGw7IH1cblx0cmV0dXJuIHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKHJlZ2V4X3NvdXJjZSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCkge1xuICAgIGxldCBzb3VyY2VfbGFiZWxfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUuZmlsdGVyKChzb3VyY2UpID0+IHNvdXJjZS5sYWJlbCAhPSBudWxsICYmIHNvdXJjZS5sYWJlbCAhPSBcIlwiKS5tYXAoKHNvdXJjZSkgPT4gc291cmNlLmxhYmVsKTtcbiAgICBsZXQgbGFiZWwgPSBzb3VyY2VfbGFiZWxfYXJyYXkuam9pbihcIiAtIFwiKTtcbiAgICByZXR1cm4gYCR7bGFiZWx9YDtcbn1cblxuZnVuY3Rpb24gc2V0X3NlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwoKSB7XG4gICAgc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbC52YWx1ZSA9IGdldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zb3VyY2VzX2FycmF5KCkge1xuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUuc291cmNlX2RlZl9hcnJheTtcbiAgICBsZXQgc291cmNlc19hcnJheV90ZW1wID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfZGVmX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBzb3VyY2VzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZXMoaHR0cF9wcmVmaXgsIHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLmlkLCBzb3VyY2VfZGVmX2FycmF5W2ldKTtcblx0c291cmNlc19hcnJheV90ZW1wLnB1c2goc291cmNlcyk7XG4gICAgfVxuICAgIGxldCBkZWZhdWx0X3NvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUpO1xuICAgIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSA9IGRlZmF1bHRfc291cmNlX2FycmF5O1xuICAgIHNvdXJjZXNfYXJyYXkudmFsdWUgPSBzb3VyY2VzX2FycmF5X3RlbXA7XG4gICAgc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWUgPSBkZWZhdWx0X3NvdXJjZV9hcnJheS5tYXAoKHMpID0+IHMudmFsdWUpO1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9tZXRyaWNzKCkge1xuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUsIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSk7XG4gICAgbWV0cmljcy52YWx1ZS5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpO1xuICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLnZhbHVlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBhd2FpdCBjaGFuZ2Vfc291cmNlX3R5cGUoKTtcbiAgICAvLyB0YWtlIGRlZmF1bHQgdmlzaWJsZVxuICAgIHVwZGF0ZV90aW1lc2VyaWVzX3RvX2FkZChmYWxzZSk7XG4gICAgLy9lbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX3RpbWVzZXJpZXNfdG9fYWRkKGRlZmF1bHRfY29uZmlnKSB7XG4gICAgdGltZXNlcmllc190b19hZGQudmFsdWUgPSBbXTtcbiAgICBsZXQgdGltZXNlcmllcyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS50aW1lc2VyaWVzO1xuICAgIGZvciAobGV0IHRzX2lkIGluIHRpbWVzZXJpZXMpIHtcbiAgICBcdHRpbWVzZXJpZXNfdG9fYWRkLnZhbHVlLnB1c2goe1xuICAgIFx0ICAgIGlkOiB0c19pZCxcbiAgICBcdCAgICBsYWJlbDogdGltZXNlcmllc1t0c19pZF0ubGFiZWwsXG4gICAgXHQgICAgcmF3OiB0cnVlLFxuXHQgICAgcGFzdDogZmFsc2UsXG4gICAgXHQgICAgYXZnOiBmYWxzZSxcbiAgICBcdCAgICBwZXJjXzk1OiBmYWxzZSxcbiAgICBcdH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZSh0c19ncm91cCkge1xuICAgIGxldCBzb3VyY2VfdHlwZV9uYW1lID0gdHNfZ3JvdXAuc291cmNlX3R5cGUubGFiZWw7XG4gICAgbGV0IHNvdXJjZV9kZWZfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcbiAgICBsZXQgc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdO1xuICAgIGxldCBzb3VyY2VfbmFtZSA9IHNvdXJjZS5sYWJlbDtcbiAgICBsZXQgbWV0cmljX25hbWUgPSB0c19ncm91cC5tZXRyaWMubGFiZWw7XG4gICAgcmV0dXJuIGAke3NvdXJjZV90eXBlX25hbWV9IC0gJHtzb3VyY2VfbmFtZX0gLSAke21ldHJpY19uYW1lfWA7XG59XG5cbmZ1bmN0aW9uIGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSB7XG4gICAgbGV0IHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYztcbiAgICBpZiAodHNfZ3JvdXAgPT0gbnVsbCkge1xuXHRzb3VyY2VfdHlwZSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlO1xuXHRzb3VyY2VfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWU7XG5cdG1ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZTtcbiAgICB9IGVsc2Uge1xuXHRzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuXHRzb3VyY2VfYXJyYXkgPSB0c19ncm91cC5zb3VyY2VfYXJyYXk7XG5cdG1ldHJpYyA9IHRzX2dyb3VwLm1ldHJpYztcbiAgICB9XG4gICAgbGV0IGlkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgcmV0dXJuIGlkO1xufVxuXG5jb25zdCBkZWxldGVfdHMgPSAodHNfZ3JvdXBfaWQpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlLmZpbHRlcigodHNfZ3JvdXApID0+IGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSAhPSB0c19ncm91cF9pZCk7XG59O1xuXG5jb25zdCBzZXRfdGltZXNlcmllc19ncm91cHMgPSAodGltZXNlcmllc19ncm91cHMsIGVtaXRfYXBwbHkpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzO1xuICAgIGlmIChlbWl0X2FwcGx5KSB7XG5cdGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIH1cbn07XG5cbmNvbnN0IGFkZF90c19ncm91cCA9ICh0c19ncm91cF90b19hZGQsIGVtaXRfYXBwbHkpID0+IHtcbiAgICBsZXQgdHNfZ3JvdXBfaW5kZXggPSB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZS5maW5kSW5kZXgoKHRzX2dyb3VwKSA9PiB0c19ncm91cC5pZCA9PSB0c19ncm91cF90b19hZGQuaWQpO1xuICAgIGlmICh0c19ncm91cF9pbmRleCA8IDApIHtcblx0dGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUucHVzaCh0c19ncm91cF90b19hZGQpO1xuICAgIH0gZWxzZSB7XG5cdHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlW3RzX2dyb3VwX2luZGV4XSA9IHRzX2dyb3VwX3RvX2FkZDtcbiAgICB9XG5cbiAgICBpZiAoZW1pdF9hcHBseSkge1xuXHRlbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbiAgICB9XG59O1xuXG5jb25zdCBhcHBseSA9ICgpID0+IHtcbiAgICBpZiAoYWN0aW9uLnZhbHVlID09IFwiYWRkXCIpIHtcblx0bGV0IHRzX2dyb3VwX2lkID0gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQoKTtcblx0bGV0IHRzX2dyb3VwID0ge1xuXHQgICAgaWQ6IHRzX2dyb3VwX2lkLFxuXHQgICAgc291cmNlX3R5cGU6IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLFxuXHQgICAgc291cmNlX2FycmF5OiBudG9wbmdfdXRpbGl0eS5jbG9uZShzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUpLFxuXHQgICAgbWV0cmljOiBzZWxlY3RlZF9tZXRyaWMudmFsdWUsXG5cdCAgICB0aW1lc2VyaWVzOiBudG9wbmdfdXRpbGl0eS5jbG9uZSh0aW1lc2VyaWVzX3RvX2FkZC52YWx1ZSksXG5cdH07XG5cdGFkZF90c19ncm91cCh0c19ncm91cCk7XG4gICAgfVxuICAgIGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBhZGRfdHNfZ3JvdXAsIHNldF90aW1lc2VyaWVzX2dyb3VwcyB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuXG4uY3VzdG9tLW1hcmdpbiB7XG5tYXJnaW4tbGVmdDogLTAuNHJlbTtcbn1cbi53YXJuIHtcbmJvcmRlci1jb2xvcjogI2ZmZDUwMDtcbmJvcmRlci1zdHlsZTogc29saWQ7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgQGFwcGx5PVwiYXBwbHlcIiByZWY9XCJtb2RhbFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9leHRyYWN0Jyl9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiIHYtaHRtbD1cImRlc2NyaXB0aW9uXCI+PC9kaXY+XG4gICAgPGZvcm0gc3R5bGU9XCJoZWlnaHQ6OTUlO1wiPlxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cdFxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtMyBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19oaWRlX21lbnVcIj57e2kxOG4oJ2FkdmFuY2VkJyl9fTxpIDpjbGFzcz1cInsgJ2ZhcyBmYS1jYXJldC1kb3duJzogc2hvd19tZW51LCAnZmFzIGZhLWNhcmV0LXVwJzogIXNob3dfbWVudX1cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cdCAgXG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtOSB0ZXh0LXJpZ2h0IGFzZFwiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMXJlbTtcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImV4dHJhY3Rfbm93XCIgdi1tb2RlbD1cImV4dHJhY3Rfbm93XCIgIHZhbHVlPVwidHJ1ZVwiIGNoZWNrZWQ9XCJcIj4ge3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0X25vdycpfX0gPC9sYWJlbD5cblx0ICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvLWlubGluZVwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZXh0cmFjdF9ub3dcIiB2LW1vZGVsPVwiZXh0cmFjdF9ub3dcIiB2YWx1ZT1cImZhbHNlXCI+IHt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucXVldWVfYXNfam9iJyl9fSA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblx0XG4gICAgICAgIDxkaXYgdi1zaG93PVwic2hvd19tZW51XCIgY2xhc3M9XCJyb3dcIiBpZD1cInBjYXBEb3dubG9hZE1vZGFsX2FkdmFuY2VkXCIgc3R5bGU9XCJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC0xMiBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxicj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9icGYnKX19IDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubnRvcC5vcmcvZ3VpZGVzL24yZGlzay9maWx0ZXJzLmh0bWxcIj48aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZpbHRlclwiPjwvc3Bhbj48L3NwYW4+XG4gICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiYnBmX2ZpbHRlclwiIHYtbW9kZWw9XCJicGZfZmlsdGVyXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiBkYXRhLWJwZj1cImJwZlwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9XCJpbnZhbGlkX2JwZlwiIHN0eWxlPVwibWFyZ2luOiAwcHg7cGFkZGluZzowO2Rpc3BsYXk6YmxvY2s7XCIgY2xhc3M9XCJpbnZhbGlkLWZlZWRiYWNrIFwiPnt7aTE4bignaW52YWxpZF92YWx1ZScpfX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblx0ICAgIDxicj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9leGFtcGxlcycpfX06PC9sYWJlbD5cblx0ICAgIDxicj5cblx0ICAgIDx1bD5cblx0ICAgICAgPGxpPkhvc3Q6IDxpPmhvc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgICAgPGxpPkhUVFA6IDxpPnRjcCBhbmQgcG9ydCA4MDwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBiZXR3ZWVuIGhvc3RzOiA8aT5pcCBob3N0IDE5Mi4xNjguMS4xIGFuZCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBmcm9tIGFuIGhvc3QgdG8gYW5vdGhlcjogPGk+aXAgc3JjIDE5Mi4xNjguMS4xIGFuZCBkc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgIDwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXHRcbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+ICBcbjwvbW9kYWw+ICBcbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG5cdCdtb2RhbCc6IE1vZGFsLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgZGVzY3JpcHRpb246IFwiXCIsXG5cdCAgICBpbnZhbGlkX2JwZjogZmFsc2UsXG5cdCAgICBicGZfZmlsdGVyOiBcIlwiLFxuXHQgICAgZXh0cmFjdF9ub3c6IHRydWUsXG5cdCAgICBzaG93X21lbnU6IHRydWUsXG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGlkX21vZGFsOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxgLFxuXHR9O1xuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCJdLFxuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRwYWQyX251bWJlcjogZnVuY3Rpb24obnVtYmVyKSB7XG5cdCAgICByZXR1cm4gU3RyaW5nKG51bWJlcikucGFkU3RhcnQoMiwgJzAnKTtcblx0fSxcblx0Zm9ybWF0X2RhdGU6IGZ1bmN0aW9uKGQpIHtcblx0ICAgIC8vIGxldCBkYXkgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0RGF0ZSgpKTtcblx0ICAgIC8vIGxldCBtb250aCA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRNb250aCgpKTtcblx0ICAgIC8vIGxldCBob3VycyA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRIb3VycygpKTtcblx0ICAgIC8vIGxldCBtaW51dGVzID0gdGhpcy5wYWQyX251bWJlcihkLmdldE1pbnV0ZXMoKSk7XG5cdCAgICAvLyBsZXQgcyA9IGAke2RheX0vJHttb250aH0vJHtkLmdldEZ1bGxZZWFyKCl9ICR7aG91cnN9OiR7bWludXRlc31gO1xuXHQgICAgbGV0IGRfbXMgPSBkLnZhbHVlT2YoKTtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZF9tcyk7XG5cdH0sXG5cdGFwcGx5OiBhc3luYyBmdW5jdGlvbigpIHtcblx0ICAgIGlmICh0aGlzLmJwZl9maWx0ZXIgIT0gbnVsbCAmJiB0aGlzLmJwZl9maWx0ZXIgIT0gXCJcIikge1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvY2hlY2svZmlsdGVyLmx1YT9xdWVyeT0ke3RoaXMuYnBmX2ZpbHRlcn1gO1xuXHRcdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHR0aGlzLmludmFsaWRfYnBmID0gIXJlcy5yZXNwb25zZTtcblx0XHRpZiAodGhpcy5pbnZhbGlkX2JwZiA9PSB0cnVlKSB7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XHRcdFxuXHQgICAgfVxuXHQgICAgbGV0IHVybF9yZXF1ZXN0X29iaiA9IHtcblx0XHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG5cdFx0ZXBvY2hfYmVnaW46IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIiksXG5cdFx0ZXBvY2hfZW5kOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKSxcblx0XHRicGZfZmlsdGVyOiB0aGlzLmJwZl9maWx0ZXIsXG5cdCAgICB9O1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0X3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcmVxdWVzdF9vYmopO1xuXHQgICAgaWYgKHRoaXMuZXh0cmFjdF9ub3cgPT0gdHJ1ZSkge1xuXHRcdFxuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvcGNhcC9saXZlX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0d2luZG93Lm9wZW4odXJsX3JlcXVlc3QsICdfc2VsZicsIGZhbHNlKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS90cmFmZmljX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0bGV0IHJlc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHRsZXQgam9iX2lkID0gcmVzcC5pZDtcblx0XHQvL2xldCBqb2JfaWQgPSAyO1xuXHRcdGxldCBhbGVydF90ZXh0X2h0bWwgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0aW9uX3NjaGVkdWxlZCcpO1xuXHRcdGxldCBwYWdlX25hbWUgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy50cmFmZmljX2V4dHJhY3Rpb25fam9icycpO1xuXHRcdGxldCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpO1xuXHRcdGxldCBocmVmID0gYDxhIGhyZWY9XCIvbHVhL2lmX3N0YXRzLmx1YT9pZmlkPSR7aWZpZH0mcGFnZT10cmFmZmljX3JlY29yZGluZyZ0YWI9am9icyZqb2JfaWQ9JHtqb2JfaWR9XCI+JHtwYWdlX25hbWV9PC9hPmA7IFxuXHRcdGFsZXJ0X3RleHRfaHRtbCA9IGFsZXJ0X3RleHRfaHRtbC5yZXBsYWNlKCcle3BhZ2V9JywgaHJlZik7XG5cdFx0YWxlcnRfdGV4dF9odG1sID0gYCR7YWxlcnRfdGV4dF9odG1sfSAke2pvYl9pZH1gO1xuXHRcdG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCB7IHRleHRfaHRtbDogYWxlcnRfdGV4dF9odG1sLCB0eXBlOiBcImFsZXJ0LXN1Y2Nlc3NcIiB9KTtcblx0ICAgIH1cblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5jbG9zZSgpO1xuXHR9LFxuXHRzaG93OiBhc3luYyBmdW5jdGlvbihicGZfZmlsdGVyKSB7XG5cdCAgICBpZiAoYnBmX2ZpbHRlciA9PSBudWxsKSB7XG5cdFx0bGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0XHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0XHRpZiAocmVzID09IG51bGwgfHwgcmVzLmJwZiA9PSBudWxsKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoYG1vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbjogJHt1cmxfcmVxdWVzdH0gcmV0dXJuIG51bGwgdmFsdWVgKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRicGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIH1cblx0ICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHQgICAgaWYgKHN0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsIHx8IHN0YXR1cy5lcG9jaF9lbmQgPT0gbnVsbCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJtb2RhbC10cmFmZmljLWV4dHJhY3Rpb246IGVwb2NoX2JlZ2luIGFuZCBlcG9jaF9lbmQgdW5kZWZpbmVkIGluIHVybFwiKTtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBsZXQgZGF0ZV9iZWdpbiA9IG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDApO1xuXHQgICAgbGV0IGRhdGVfZW5kID0gbmV3IERhdGUoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApO1xuXHQgICAgXG5cdCAgICBsZXQgZGVzYyA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmFib3V0X3RvX2Rvd25sb2FkX2Zsb3cnKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9iZWdpbn0nLCB0aGlzLmZvcm1hdF9kYXRlKGRhdGVfYmVnaW4pKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9lbmR9JywgdGhpcy5mb3JtYXRfZGF0ZShkYXRlX2VuZCkpO1xuXHQgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2M7XG5cdCAgICBcblx0ICAgIC8vIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICAvLyBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0ICAgIC8vIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHQgICAgLy8gdGhpcy5icGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIHRoaXMuYnBmX2ZpbHRlciA9IGJwZl9maWx0ZXI7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHR9LFxuXHRzaG93X2hpZGVfbWVudTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnNob3dfbWVudSA9ICF0aGlzLnNob3dfbWVudTtcblx0fSxcbiAgICB9LFxufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBub25lO1xufVxuaW5wdXQ6aW52YWxpZCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxtb2RhbCA6aWQ9XCJpZF9tb2RhbFwiIEBhcHBseT1cImFwcGx5XCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnBjYXBfZXh0cmFjdCcpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgXG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIiB2LWh0bWw9XCJkZXNjcmlwdGlvblwiPjwvZGl2PlxuICAgIDxmb3JtIHN0eWxlPVwiaGVpZ2h0Ojk1JTtcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiIHN0eWxlPVwiaGVpZ2h0OjEwMCU7XCI+XHRcbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTMgaGFzLWZlZWRiYWNrXCI+XG5cdCAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfaGlkZV9tZW51XCI+e3tpMThuKCdhZHZhbmNlZCcpfX08aSA6Y2xhc3M9XCJ7ICdmYXMgZmEtY2FyZXQtZG93bic6IHNob3dfbWVudSwgJ2ZhcyBmYS1jYXJldC11cCc6ICFzaG93X21lbnV9XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXHQgIFxuXHQgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTkgdGV4dC1yaWdodCBhc2RcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvLWlubGluZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDFyZW07XCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJleHRyYWN0X25vd1wiIHYtbW9kZWw9XCJleHRyYWN0X25vd1wiICB2YWx1ZT1cInRydWVcIiBjaGVja2VkPVwiXCI+IHt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZXh0cmFjdF9ub3cnKX19IDwvbGFiZWw+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmVcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImV4dHJhY3Rfbm93XCIgdi1tb2RlbD1cImV4dHJhY3Rfbm93XCIgdmFsdWU9XCJmYWxzZVwiPiB7e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnF1ZXVlX2FzX2pvYicpfX0gPC9sYWJlbD5cblx0ICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cdFxuICAgICAgICA8ZGl2IHYtc2hvdz1cInNob3dfbWVudVwiIGNsYXNzPVwicm93XCIgaWQ9XCJwY2FwRG93bmxvYWRNb2RhbF9hZHZhbmNlZFwiIHN0eWxlPVwiXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtMTIgaGFzLWZlZWRiYWNrXCI+XG5cdCAgICA8YnI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5maWx0ZXJfYnBmJyl9fSA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm50b3Aub3JnL2d1aWRlcy9uMmRpc2svZmlsdGVycy5odG1sXCI+PGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1maWx0ZXJcIj48L3NwYW4+PC9zcGFuPlxuICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cImJwZl9maWx0ZXJcIiB2LW1vZGVsPVwiYnBmX2ZpbHRlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGlucHV0LXNtXCIgZGF0YS1icGY9XCJicGZcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBzcGVsbGNoZWNrPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgPHNwYW4gdi1zaG93PVwiaW52YWxpZF9icGZcIiBzdHlsZT1cIm1hcmdpbjogMHB4O3BhZGRpbmc6MDtkaXNwbGF5OmJsb2NrO1wiIGNsYXNzPVwiaW52YWxpZC1mZWVkYmFjayBcIj57e2kxOG4oJ2ludmFsaWRfdmFsdWUnKX19PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cdCAgICA8YnI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5maWx0ZXJfZXhhbXBsZXMnKX19OjwvbGFiZWw+XG5cdCAgICA8YnI+XG5cdCAgICA8dWw+XG5cdCAgICAgIDxsaT5Ib3N0OiA8aT5ob3N0IDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5IVFRQOiA8aT50Y3AgYW5kIHBvcnQgODA8L2k+PC9saT5cblx0ICAgICAgPGxpPlRyYWZmaWMgYmV0d2VlbiBob3N0czogPGk+aXAgaG9zdCAxOTIuMTY4LjEuMSBhbmQgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgICAgPGxpPlRyYWZmaWMgZnJvbSBhbiBob3N0IHRvIGFub3RoZXI6IDxpPmlwIHNyYyAxOTIuMTY4LjEuMSBhbmQgZHN0IDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICA8L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblx0XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPiAgXG48L21vZGFsPiAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuXHQnbW9kYWwnOiBNb2RhbCxcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICB1cGRhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuXHQgICAgaW52YWxpZF9icGY6IGZhbHNlLFxuXHQgICAgYnBmX2ZpbHRlcjogXCJcIixcblx0ICAgIGV4dHJhY3Rfbm93OiB0cnVlLFxuXHQgICAgc2hvd19tZW51OiB0cnVlLFxuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBpZF9tb2RhbDogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsYCxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0cGFkMl9udW1iZXI6IGZ1bmN0aW9uKG51bWJlcikge1xuXHQgICAgcmV0dXJuIFN0cmluZyhudW1iZXIpLnBhZFN0YXJ0KDIsICcwJyk7XG5cdH0sXG5cdGZvcm1hdF9kYXRlOiBmdW5jdGlvbihkKSB7XG5cdCAgICAvLyBsZXQgZGF5ID0gdGhpcy5wYWQyX251bWJlcihkLmdldERhdGUoKSk7XG5cdCAgICAvLyBsZXQgbW9udGggPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0TW9udGgoKSk7XG5cdCAgICAvLyBsZXQgaG91cnMgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0SG91cnMoKSk7XG5cdCAgICAvLyBsZXQgbWludXRlcyA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRNaW51dGVzKCkpO1xuXHQgICAgLy8gbGV0IHMgPSBgJHtkYXl9LyR7bW9udGh9LyR7ZC5nZXRGdWxsWWVhcigpfSAke2hvdXJzfToke21pbnV0ZXN9YDtcblx0ICAgIGxldCBkX21zID0gZC52YWx1ZU9mKCk7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRfbXMpO1xuXHR9LFxuXHRhcHBseTogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdCAgICBpZiAodGhpcy5icGZfZmlsdGVyICE9IG51bGwgJiYgdGhpcy5icGZfZmlsdGVyICE9IFwiXCIpIHtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2NoZWNrL2ZpbHRlci5sdWE/cXVlcnk9JHt0aGlzLmJwZl9maWx0ZXJ9YDtcblx0XHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0dGhpcy5pbnZhbGlkX2JwZiA9ICFyZXMucmVzcG9uc2U7XG5cdFx0aWYgKHRoaXMuaW52YWxpZF9icGYgPT0gdHJ1ZSkge1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVx0XHRcblx0ICAgIH1cblx0ICAgIGxldCB1cmxfcmVxdWVzdF9vYmogPSB7XG5cdFx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpLFxuXHRcdGVwb2NoX2JlZ2luOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpLFxuXHRcdGVwb2NoX2VuZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIiksXG5cdFx0YnBmX2ZpbHRlcjogdGhpcy5icGZfZmlsdGVyLFxuXHQgICAgfTtcblx0ICAgIGxldCB1cmxfcmVxdWVzdF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3JlcXVlc3Rfb2JqKTtcblx0ICAgIGlmICh0aGlzLmV4dHJhY3Rfbm93ID09IHRydWUpIHtcblx0XHRcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3BjYXAvbGl2ZV9leHRyYWN0aW9uLmx1YT8ke3VybF9yZXF1ZXN0X3BhcmFtc31gO1xuXHRcdHdpbmRvdy5vcGVuKHVybF9yZXF1ZXN0LCAnX3NlbGYnLCBmYWxzZSk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvdHJhZmZpY19leHRyYWN0aW9uLmx1YT8ke3VybF9yZXF1ZXN0X3BhcmFtc31gO1xuXHRcdGxldCByZXNwID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0bGV0IGpvYl9pZCA9IHJlc3AuaWQ7XG5cdFx0Ly9sZXQgam9iX2lkID0gMjtcblx0XHRsZXQgYWxlcnRfdGV4dF9odG1sID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcuZXh0cmFjdGlvbl9zY2hlZHVsZWQnKTtcblx0XHRsZXQgcGFnZV9uYW1lID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcudHJhZmZpY19leHRyYWN0aW9uX2pvYnMnKTtcblx0XHRsZXQgaWZpZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKTtcblx0XHRsZXQgaHJlZiA9IGA8YSBocmVmPVwiL2x1YS9pZl9zdGF0cy5sdWE/aWZpZD0ke2lmaWR9JnBhZ2U9dHJhZmZpY19yZWNvcmRpbmcmdGFiPWpvYnMmam9iX2lkPSR7am9iX2lkfVwiPiR7cGFnZV9uYW1lfTwvYT5gOyBcblx0XHRhbGVydF90ZXh0X2h0bWwgPSBhbGVydF90ZXh0X2h0bWwucmVwbGFjZSgnJXtwYWdlfScsIGhyZWYpO1xuXHRcdGFsZXJ0X3RleHRfaHRtbCA9IGAke2FsZXJ0X3RleHRfaHRtbH0gJHtqb2JfaWR9YDtcblx0XHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgeyB0ZXh0X2h0bWw6IGFsZXJ0X3RleHRfaHRtbCwgdHlwZTogXCJhbGVydC1zdWNjZXNzXCIgfSk7XG5cdCAgICB9XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0fSxcblx0c2hvdzogYXN5bmMgZnVuY3Rpb24oYnBmX2ZpbHRlcikge1xuXHQgICAgaWYgKGJwZl9maWx0ZXIgPT0gbnVsbCkge1xuXHRcdGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2JwZi5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdFx0bGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdFx0aWYgKHJlcyA9PSBudWxsIHx8IHJlcy5icGYgPT0gbnVsbCkge1xuXHRcdCAgICBjb25zb2xlLmVycm9yKGBtb2RhbC10cmFmZmljLWV4dHJhY3Rpb246ICR7dXJsX3JlcXVlc3R9IHJldHVybiBudWxsIHZhbHVlYCk7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0YnBmX2ZpbHRlciA9IHJlcy5icGY7XG5cdCAgICB9XG5cdCAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0ICAgIGlmIChzdGF0dXMuZXBvY2hfYmVnaW4gPT0gbnVsbCB8fCBzdGF0dXMuZXBvY2hfZW5kID09IG51bGwpIHtcblx0XHRjb25zb2xlLmVycm9yKFwibW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uOiBlcG9jaF9iZWdpbiBhbmQgZXBvY2hfZW5kIHVuZGVmaW5lZCBpbiB1cmxcIik7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgbGV0IGRhdGVfYmVnaW4gPSBuZXcgRGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwKTtcblx0ICAgIGxldCBkYXRlX2VuZCA9IG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwKTtcblx0ICAgIFxuXHQgICAgbGV0IGRlc2MgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5hYm91dF90b19kb3dubG9hZF9mbG93Jyk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2RhdGVfYmVnaW59JywgdGhpcy5mb3JtYXRfZGF0ZShkYXRlX2JlZ2luKSk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2RhdGVfZW5kfScsIHRoaXMuZm9ybWF0X2RhdGUoZGF0ZV9lbmQpKTtcblx0ICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjO1xuXHQgICAgXG5cdCAgICAvLyBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHQgICAgLy8gbGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2JwZi5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdCAgICAvLyBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0ICAgIC8vIHRoaXMuYnBmX2ZpbHRlciA9IHJlcy5icGY7XG5cdCAgICB0aGlzLmJwZl9maWx0ZXIgPSBicGZfZmlsdGVyO1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLnNob3coKTtcblx0fSxcblx0c2hvd19oaWRlX21lbnU6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zaG93X21lbnUgPSAhdGhpcy5zaG93X21lbnU7XG5cdH0sXG4gICAgfSxcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0IH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmlucHV0OmludmFsaWQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3twcm9wcy50aXRsZX19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtdC0yIHJvd1wiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJtb2RhbF9kb3dubG9hZF9maWxlLmZpbGVuYW1lXCIpfX06PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuXHQ8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiByZXF1aXJlZCA6cGF0dGVybj1cImZpbGVuYW1lX3ZhbGlkYXRpb25cIiB2LW1vZGVsPVwiZmlsZW5hbWVcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiXCI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG5cdC57e3Byb3BzLmV4dH19XG4gICAgICA8L2xhYmVsPlxuICAgIDwvZGl2PiAgICBcbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiZW5hYmxlX2Rvd25sb2FkID09IGZhbHNlXCIgPnt7X2kxOG4oXCJtb2RhbF9kb3dubG9hZF9maWxlLmRvd25sb2FkXCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBmaWxlbmFtZSA9IHJlZihcIlwiKTtcblxuLy9jb25zdCBmaWxlbmFtZV92YWxpZGF0aW9uID0gYFtcXGB+IUAjJCVeJipffCstPT87OidcIiwuPD57fVtdXFxcXC9dYDtcbmNvbnN0IGJhY2t0aWNrID0gJ2AnO1xuY29uc3QgZmlsZW5hbWVfdmFsaWRhdGlvbiA9IFN0cmluZy5yYXdgXltefiR7YmFja3RpY2t9IUAjJCVeJip8Ky09Pzs6J1wiXFxcXCwuPD5cXC97fSgpXFxbXFxdXFxzXSskYDtcblxuY29uc3QgZW5hYmxlX2Rvd25sb2FkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCByZ190ZXh0ID0gZmlsZW5hbWVfdmFsaWRhdGlvbjtcbiAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJnX3RleHQpO1xuICAgIHJldHVybiByZWdleC50ZXN0KGZpbGVuYW1lLnZhbHVlKTtcbn0pO1xuXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgZXh0OiBTdHJpbmcsXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRvd25sb2FkXCJdKTtcblxuY29uc3Qgc2hvdyA9IChuYW1lKSA9PiB7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkgeyBuYW1lID0gXCJcIjsgfVxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2VBbGwoL1stPT87Olxcc10vZywgXCJfXCIpO1xuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2VBbGwoL1tgfiFAIyQlXiYqfCstPT87OidcIixcXC48Plxcc1xcL3t9XFxbXFxdKCldL2csIFwiXCIpO1xuICAgIGZpbGVuYW1lLnZhbHVlID0gbmFtZTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5mdW5jdGlvbiBkb3dubG9hZCgpIHtcbiAgICBsZXQgbmFtZSA9IGAke2ZpbGVuYW1lLnZhbHVlfS4ke3Byb3BzLmV4dH1gO1xuICAgIGVtaXQoJ2Rvd25sb2FkJywgbmFtZSk7XG4gICAgY2xvc2UoKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbi5ub3QtYWxsb3dlZCB7XG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIiB2LWlmPVwic2hvd19hbGVydCA9PSB0cnVlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1kaXNtaXNzYWJsZVwiIDpjbGFzcz1cImFsZXJ0X3R5cGVcIj5cbiAgPHNwYW4gdi1odG1sPVwiYm9keVwiPjwvc3Bhbj5cbjxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImNsb3NlXCIgY2xhc3M9XCJidG4tY2xvc2VcIiAgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PC9idXR0b24+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRnbG9iYWw6IEJvb2xlYW5cbiAgICB9LFxuICAgIGVtaXRzOiBbXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBzaG93X2FsZXJ0OiBmYWxzZSxcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgYm9keTogXCJcIixcblx0ICAgIGFsZXJ0X3R5cGU6IFwiYWxlcnQtc3VjY2Vzc1wiLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0aWYgKHRoaXMuZ2xvYmFsID09IHRydWUpIHtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgKGluZm8pID0+IHtcblx0XHRpZiAoaW5mby50eXBlICE9IG51bGwpIHtcblx0XHQgICAgdGhpcy5hbGVydF90eXBlID0gaW5mby50eXBlO1xuXHRcdH1cblx0XHRpZiAoaW5mby50aW1lb3V0ICE9IG51bGwpIHtcblx0XHQgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuY2xvc2UoKTsgfSwgMTAwMCAqIGluZm8udGltZW91dCk7XG5cdFx0fVxuXHRcdHRoaXMuc2hvdyhpbmZvLnRleHRfaHRtbCk7XG5cdCAgICB9KTtcdFxuXHR9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuc2hvd19hbGVydCA9IGZhbHNlO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbihib2R5LCBhbGVydF90eXBlKSB7XG5cdCAgICB0aGlzLnNob3dfYWxlcnQgPSB0cnVlO1xuXHQgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgIGlmIChhbGVydF90eXBlICE9IG51bGwpIHtcblx0XHR0aGlzLmFsZXJ0X3R5cGUgPSBhbGVydF90eXBlO1xuXHQgICAgfVxuXHR9LFxuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIiB2LWlmPVwic2hvd19hbGVydCA9PSB0cnVlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1kaXNtaXNzYWJsZVwiIDpjbGFzcz1cImFsZXJ0X3R5cGVcIj5cbiAgPHNwYW4gdi1odG1sPVwiYm9keVwiPjwvc3Bhbj5cbjxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImNsb3NlXCIgY2xhc3M9XCJidG4tY2xvc2VcIiAgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PC9idXR0b24+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRnbG9iYWw6IEJvb2xlYW5cbiAgICB9LFxuICAgIGVtaXRzOiBbXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBzaG93X2FsZXJ0OiBmYWxzZSxcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgYm9keTogXCJcIixcblx0ICAgIGFsZXJ0X3R5cGU6IFwiYWxlcnQtc3VjY2Vzc1wiLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0aWYgKHRoaXMuZ2xvYmFsID09IHRydWUpIHtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgKGluZm8pID0+IHtcblx0XHRpZiAoaW5mby50eXBlICE9IG51bGwpIHtcblx0XHQgICAgdGhpcy5hbGVydF90eXBlID0gaW5mby50eXBlO1xuXHRcdH1cblx0XHRpZiAoaW5mby50aW1lb3V0ICE9IG51bGwpIHtcblx0XHQgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuY2xvc2UoKTsgfSwgMTAwMCAqIGluZm8udGltZW91dCk7XG5cdFx0fVxuXHRcdHRoaXMuc2hvdyhpbmZvLnRleHRfaHRtbCk7XG5cdCAgICB9KTtcdFxuXHR9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuc2hvd19hbGVydCA9IGZhbHNlO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbihib2R5LCBhbGVydF90eXBlKSB7XG5cdCAgICB0aGlzLnNob3dfYWxlcnQgPSB0cnVlO1xuXHQgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgIGlmIChhbGVydF90eXBlICE9IG51bGwpIHtcblx0XHR0aGlzLmFsZXJ0X3R5cGUgPSBhbGVydF90eXBlO1xuXHQgICAgfVxuXHR9LFxuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXY+ICBcbjx0YWJsZSByZWY9XCJ0YWJsZV9pZFwiIGNsYXNzPVwidGFibGUgdy0xMDAgdGFibGUtc3RyaXBlZCB0YWJsZS1ob3ZlciB0YWJsZS1ib3JkZXJlZFwiPlxuICA8dGhlYWQ+XG4gICAgPHRyPlxuICAgICAgPHRoIGNsYXNzPVwidGV4dC1jZW50ZXJcIiB2LWZvcj1cIml0ZW0gaW4gY29sdW1uc19jb25maWdcIj57eyBpdGVtLmNvbHVtbk5hbWUgfX08L3RoPlxuICAgIDwvdHI+XG4gIDwvdGhlYWQ+XG4gIDx0Ym9keT48L3Rib2R5PlxuPC90YWJsZT5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgdGFibGVfYnV0dG9uczogQXJyYXksXG4gIGNvbHVtbnNfY29uZmlnOiBBcnJheSxcbiAgZGF0YV91cmw6IFN0cmluZyxcbiAgZW5hYmxlX3NlYXJjaDogQm9vbGVhbixcbiAgZmlsdGVyX2J1dHRvbnM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gIH0sXG4gIHRhYmxlX2NvbmZpZzoge1xuICAgIHR5cGU6IE9iamVjdCxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gIH0sXG4gIGJhc2VfdXJsOiBTdHJpbmcsXG4gIGJhc2VfcGFyYW1zOiBPYmplY3QsIFxufSk7XG5cbmxldCBuZXdfcGFyYW1zID0gcHJvcHMuYmFzZV9wYXJhbXNcbmNvbnN0IHRhYmxlX2lkID0gcmVmKG51bGwpO1xuXG5mdW5jdGlvbiBsb2FkRGF0YXRhYmxlKCkge1xuICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuICAvKiBDcmVhdGUgYSBkYXRhdGFibGUgd2l0aCB0aGUgYnV0dG9ucyAqL1xuICBsZXQgZXh0ZW5kX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBzY3JvbGxYOiBmYWxzZSxcbiAgICBkZXN0cm95OiB0cnVlLFxuICAgIHNlYXJjaGluZzogcHJvcHMuZW5hYmxlX3NlYXJjaCxcbiAgICBvcmRlcjogW1swLCBcImFzY1wiXV0sXG4gICAgcGFnaW5nVHlwZTogJ2Z1bGxfbnVtYmVycycsXG4gICAgY29sdW1uRGVmczogcHJvcHMuY29sdW1uc19jb25maWcsXG4gICAgY29sdW1uczogcHJvcHMuY29sdW1uc19jb25maWcsXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgIGFqYXg6IHtcbiAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICB1cmw6IHByb3BzLmRhdGFfdXJsLFxuICAgICAgZGF0YVNyYzogJ3JzcCcsXG4gICAgICBkYXRhOiAoZGF0YSwgc2V0dGluZ3MpID0+IHtcbiAgICAgICAgaWYoT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YWJsZUFwaSA9IHNldHRpbmdzLm9JbnN0YW5jZS5hcGkoKTtcbiAgICAgICAgY29uc3Qgb3JkZXJDb2x1bW5JbmRleCA9IGRhdGEub3JkZXJbMF0uY29sdW1uO1xuICAgICAgICBjb25zdCBvcmRlckNvbHVtbk5hbWUgPSB0YWJsZUFwaS5jb2x1bW4ob3JkZXJDb2x1bW5JbmRleCkubmFtZSgpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgXG4gICAgICAgIGlmIChkYXRhLm9yZGVyKSB7XG4gICAgICAgICAgZGF0YS5vcmRlciA9IGRhdGEub3JkZXJbMF0uZGlyO1xuICAgICAgICAgIGRhdGEuc29ydCA9IG9yZGVyQ29sdW1uTmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhLmNvbHVtbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRlbGV0ZSBkYXRhLmNvbHVtbnM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YS5zZWFyY2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRhdGEubWFwX3NlYXJjaCA9IGRhdGEuc2VhcmNoLnZhbHVlO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhLnNlYXJjaFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0sXG4gICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIGRyYXdDYWxsYmFjazogZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCk7XG4gICAgfVxuICB9O1xuICBmb3IgKGNvbnN0IGl0ZW0gaW4gKHByb3BzLnRhYmxlX2NvbmZpZyB8fCB7fSkpIHtcbiAgICBleHRlbmRfY29uZmlnW2l0ZW1dID0gcHJvcHMudGFibGVfY29uZmlnW2l0ZW1dXG4gIH1cblxuICBsZXQgY29uZmlnID0gRGF0YVRhYmxlVXRpbHMuZ2V0U3RkRGF0YXRhYmxlQ29uZmlnKHByb3BzLnRhYmxlX2J1dHRvbnMpO1xuICBjb25maWcgPSBEYXRhVGFibGVVdGlscy5leHRlbmRDb25maWcoY29uZmlnLCBleHRlbmRfY29uZmlnKTtcbiAgdGFibGUgPSAkKHRhYmxlX2lkLnZhbHVlKS5EYXRhVGFibGUoY29uZmlnKTtcbiAgZm9yIChjb25zdCBmaWx0ZXIgb2YgKHByb3BzLmZpbHRlcl9idXR0b25zIHx8IFtdKSkge1xuICAgIC8qIFNldCBmaWx0ZXJzIHRvIGFjdGl2ZSBpZiBhdmFpbGFibGUgaW4gdGhlIHVybCAqL1xuICAgIGNvbnN0IGN1cnJfdmFsdWUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXIuZmlsdGVyTWVudUtleSlcbiAgICBpZihjdXJyX3ZhbHVlICYmIGN1cnJfdmFsdWUgIT0gJycpIHtcbiAgICAgIGxldCBudW1fbm9uX2FjdGl2ZV9lbnRyaWVzID0gMFxuICAgICAgZmlsdGVyLmZpbHRlcnMuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICBpLmN1cnJlbnRseV9hY3RpdmUgPSBmYWxzZVxuICAgICAgICBudW1fbm9uX2FjdGl2ZV9lbnRyaWVzICs9IDFcbiAgICAgICAgaWYoaS5pZCA9PSBjdXJyX3ZhbHVlKSB7XG4gICAgICAgICAgaS5jdXJyZW50bHlfYWN0aXZlID0gdHJ1ZVxuICAgICAgICAgIG51bV9ub25fYWN0aXZlX2VudHJpZXMgLT0gMVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBpZihudW1fbm9uX2FjdGl2ZV9lbnRyaWVzID09IGZpbHRlci5maWx0ZXJzLmxlbmd0aCkge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksICcnKTtcbiAgICAgICAgdXBkYXRlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXcgRGF0YVRhYmxlRmlsdGVyc01lbnUoe1xuICAgICAgZmlsdGVyVGl0bGU6IGZpbHRlci5maWx0ZXJUaXRsZSxcbiAgICAgIHRhYmxlQVBJOiB0YWJsZSxcbiAgICAgIGZpbHRlcnM6IGZpbHRlci5maWx0ZXJzLFxuICAgICAgZmlsdGVyTWVudUtleTogZmlsdGVyLmZpbHRlck1lbnVLZXksXG4gICAgICBjb2x1bW5JbmRleDogZmlsdGVyLmNvbHVtbkluZGV4LFxuICAgICAgdXJsOiBwcm9wcy5kYXRhX3VybCxcbiAgICAgIGlkOiBmaWx0ZXIuaWQsXG4gICAgICByZW1vdmVBbGxFbnRyeTogZmlsdGVyLnJlbW92ZUFsbEVudHJ5LFxuICAgICAgY2FsbGJhY2tGdW5jdGlvbjogZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb25cbiAgICB9KS5pbml0KCk7XG4gIH1cblxuICBpZih1cGRhdGVkICYmIHByb3BzLmJhc2VfcGFyYW1zKSB7XG4gICAgY29uc3QgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKVxuICAgIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgKGVudHJpZXMpKSB7XG4gICAgICBuZXdfcGFyYW1zW2tleV0gPSB2YWx1ZVxuICAgIH1cbiAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIG5ld19wYXJhbXMpKVxuICAgIHJlbG9hZCgpXG4gIH1cbn1cblxubGV0IHRhYmxlID0gbnVsbDtcbm9uTW91bnRlZCgoKSA9PiB7XG4gIGxvYWREYXRhdGFibGUoKVxufSk7XG5cbmNvbnN0IHJlbG9hZCA9ICgpID0+IHtcbiAgaWYgKHRhYmxlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gIHRhYmxlLmFqYXgucmVsb2FkKCk7XG59XG5cbmNvbnN0IHVwZGF0ZV91cmwgPSAobmV3X3VybCkgPT4ge1xuICBpZiAodGFibGUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgdGFibGUuYWpheC51cmwobmV3X3VybCk7XG59XG5cbmNvbnN0IGRlbGV0ZV9idXR0b25faGFuZGxlcnMgPSAoaGFuZGxlcklkKSA9PiB7XG4gICAgRGF0YVRhYmxlVXRpbHMuZGVsZXRlQnV0dG9uSGFuZGxlcnMoaGFuZGxlcklkKTtcbn07XG5cbmxldCBpc19kZXN0cm95ZWQgPSBmYWxzZTtcblxuY29uc3QgZGVzdHJveV90YWJsZSA9ICgpID0+IHtcbiAgICB0YWJsZS5jbGVhcigpO1xuICAgIHRhYmxlLmRlc3Ryb3kodHJ1ZSk7XG4gICAgaXNfZGVzdHJveWVkID0gdHJ1ZTtcbiAgICBwcm9wcy5jb2x1bW5zX2NvbmZpZy5maWx0ZXIoKGNvbmZpZykgPT4gY29uZmlnLmhhbmRsZXJJZCAhPSBudWxsKS5mb3JFYWNoKChjb25maWcpID0+IHtcblx0ZGVsZXRlX2J1dHRvbl9oYW5kbGVycyhjb25maWcuaGFuZGxlcklkKTtcbiAgICB9KTtcbn1cblxuZGVmaW5lRXhwb3NlKHsgcmVsb2FkLCBkZWxldGVfYnV0dG9uX2hhbmRsZXJzLCBkZXN0cm95X3RhYmxlLCB1cGRhdGVfdXJsIH0pO1xuXG5vbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGlmIChpc19kZXN0cm95ZWQgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICBkZXN0cm95X3RhYmxlKCk7XG4gICAgLy8gdGFibGUuZGVzdHJveSh0cnVlKTtcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cImNvbC0xMiBtYi0yIG10LTJcIj5cbiAgPEFsZXJ0SW5mbz48L0FsZXJ0SW5mbz5cbiAgPGRpdiBjbGFzcz1cImNhcmQgaC0xMDAgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgPERhdGFUaW1lUmFuZ2VQaWNrZXIgc3R5bGU9XCJtYXJnaW4tdG9wOjAuNXJlbTtcIlxuXHRcdFx0IDppZD1cImlkX2RhdGVfdGltZV9waWNrZXJcIlxuXHRcdFx0IDplbmFibGVfcmVmcmVzaD1cInRydWVcIlxuXHRcdFx0IHJlZj1cImRhdGVfdGltZV9waWNrZXJcIlxuXHRcdFx0IEBlcG9jaF9jaGFuZ2U9XCJlcG9jaF9jaGFuZ2VcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9idXR0b25zPlxuXHQ8YnV0dG9uIHYtaWY9XCJlbmFibGVfc25hcHNob3RzXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgQGNsaWNrPVwic2hvd19tb2RhbF9zbmFwc2hvdFwiIDp0aXRsZT1cIl9pMThuKCdwYWdlX3N0YXRzLm1hbmFnZV9zbmFwc2hvdHNfYnRuJylcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1jYW1lcmEtcmV0cm9cIj48L2k+PC9idXR0b24+XG5cdDxidXR0b24gdi1pZj1cInRyYWZmaWNfZXh0cmFjdGlvbl9wZXJtaXR0ZWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiIDp0aXRsZT1cIl9pMThuKCd0cmFmZmljX3JlY29yZGluZy5wY2FwX2Rvd25sb2FkJylcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1kb3dubG9hZFwiPjwvaT48L2J1dHRvbj5cblx0PGJ1dHRvbiAgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgQGNsaWNrPVwic2hvd19tb2RhbF9kb3dubG9hZF9maWxlXCIgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMudGl0bGVfbW9kYWxfZG93bmxvYWRfZmlsZScpXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGcgZmEtZmlsZS1pbWFnZVwiPjwvaT48L2J1dHRvbj5cblx0PGJ1dHRvbiB2LWlmPVwiaXNfaGlzdG9yeV9lbmFibGVkXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgQGNsaWNrPVwianVtcF90b19oaXN0b3JpY2FsX2Zsb3dzXCIgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMuaGlzdG9yaWNhbF9mbG93cycpXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGcgZmEtdGFibGVcIj48L2k+PC9idXR0b24+XHRcbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9EYXRhVGltZVJhbmdlUGlja2VyPlxuICAgIDwhLS0gc2VsZWN0IG1ldHJpYyAtLT5cbiAgICA8ZGl2IHYtc2hvdz1cInRzX21lbnVfcmVhZHlcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMSBtZS0xIG10LTFcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJpbmxpbmUgc2VsZWN0Mi1zaXplIG1lLTIgbXQtMlwiPlxuXHQ8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbWV0cmljXCJcblx0XHQgICAgICA6b3B0aW9ucz1cIm1ldHJpY3NcIlxuXHRcdCAgICAgIEBzZWxlY3Rfb3B0aW9uPVwic2VsZWN0X21ldHJpY1wiPlxuXHQ8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImlubGluZSBzZWxlY3QyLXNpemUgbWUtMiBtdC0yXCI+XG5cdDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJjdXJyZW50X2dyb3Vwc19vcHRpb25zX21vZGVcIlxuXHRcdCAgICAgIDpvcHRpb25zPVwiZ3JvdXBzX29wdGlvbnNfbW9kZXNcIlxuXHRcdCAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2dyb3Vwc19vcHRpb25zX21vZGVcIj5cblx0PC9TZWxlY3RTZWFyY2g+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfbWFuYWdlX3RpbWVzZXJpZXNcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnkgaW5saW5lXCIgc3R5bGU9J3ZlcnRpY2FsLWFsaWduOiBzdXBlcjsnIHYtaWY9XCJpc19udG9wX3Byb1wiPlxuICAgICAgXHRNYW5hZ2UgVGltZXNlcmllc1xuICAgICAgPC9idXR0b24+XG4gICAgICBcbiAgICA8L2Rpdj5cbiAgICBcbiAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwgaSkgaW4gY2hhcnRzX29wdGlvbnNfaXRlbXNcIiA6a2V5PVwiaXRlbS5rZXlcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtLTNcIiBzdHlsZT1cImhlaWdodDozMDBweDtcIj5cblx0PENoYXJ0IDppZD1cImlkX2NoYXJ0ICsgaVwiIDpyZWY9XCJlbCA9PiB7IGNoYXJ0c1tpXSA9IGVsIH1cIlxuXHQgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgIFx0ICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIlxuXHQgICAgICAgOmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucz1cImdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyhpKVwiXG5cdCAgICAgICBAem9vbT1cImVwb2NoX2NoYW5nZVwiXG5cdCAgICAgICBAY2hhcnRfcmVsb2FkZWQ9XCJjaGFydF9yZWxvYWRlZFwiPlxuXHQ8L0NoYXJ0PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9kaXY+XG4gIFxuICA8ZGl2IGNsYXNzPVwibXQtNCBjYXJkIGNhcmQtc2hhZG93XCIgdi1pZj1cImVuYWJsZV9zdGF0c190YWJsZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIDxCb290c3RyYXBUYWJsZVxuXHRpZD1cInBhZ2Vfc3RhdHNfYm9vdHN0cmFwX3RhYmxlXCJcblx0OmNvbHVtbnM9XCJzdGF0c19jb2x1bW5zXCJcblx0OnJvd3M9XCJzdGF0c19yb3dzXCJcblx0OnByaW50X2h0bWxfY29sdW1uPVwiKGNvbCkgPT4gcHJpbnRfc3RhdHNfY29sdW1uKGNvbClcIlxuXHQ6cHJpbnRfaHRtbF9yb3c9XCIoY29sLCByb3cpID0+IHByaW50X3N0YXRzX3Jvdyhjb2wsIHJvdylcIj5cbiAgICAgIDwvQm9vdHN0cmFwVGFibGU+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICBcbiAgPGRpdiBjbGFzcz1cIm10LTQgY2FyZCBjYXJkLXNoYWRvd1wiIHYtaWY9XCJpc19udG9wX3Byb1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIDxkaXYgdi1pZj1cInNlbGVjdGVkX3RvcF90YWJsZT8udGFibGVfY29uZmlnX2RlZlwiIGNsYXNzPVwiaW5saW5lIHNlbGVjdDItc2l6ZSBtZS0yIG10LTJcIj5cblx0PFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3RvcF90YWJsZVwiXG5cdFx0ICAgICAgOm9wdGlvbnM9XCJ0b3BfdGFibGVfb3B0aW9uc1wiPlxuXHQ8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgICAgPERhdGF0YWJsZSB2LWlmPVwic2VsZWN0ZWRfdG9wX3RhYmxlPy50YWJsZV9jb25maWdfZGVmXCIgOmtleT1cInNlbGVjdGVkX3RvcF90YWJsZT8udmFsdWVcIiByZWY9XCJ0b3BfdGFibGVfcmVmXCJcbiAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJzZWxlY3RlZF90b3BfdGFibGUudGFibGVfY29uZmlnX2RlZi50YWJsZV9idXR0b25cIlxuICAgICAgICA6Y29sdW1uc19jb25maWc9XCJzZWxlY3RlZF90b3BfdGFibGUudGFibGVfY29uZmlnX2RlZi5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgIDpkYXRhX3VybD1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLmRhdGFfdXJsXCJcbiAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJzZWxlY3RlZF90b3BfdGFibGUudGFibGVfY29uZmlnX2RlZi5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgOnRhYmxlX2NvbmZpZz1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgPC9EYXRhdGFibGU+ICAgICAgXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG5cbjxNb2RhbFNuYXBzaG90IHYtaWY9XCJlbmFibGVfc25hcHNob3RzXCIgcmVmPVwibW9kYWxfc25hcHNob3RcIlxuXHQgICAgICAgOmNzcmY9XCJjc3JmXCJcblx0ICAgICAgIDpwYWdlPVwicGFnZV9zbmFwc2hvdHNcIlxuXHQgICAgICAgQGFkZGVkX3NuYXBzaG90PVwicmVmcmVzaF9zbmFwc2hvdHNcIlxuXHQgICAgICAgQGRlbGV0ZWRfc25hcHNob3RzPVwicmVmcmVzaF9zbmFwc2hvdHNcIlxuXHQgICAgICAgQGRlbGV0ZWRfYWxsX3NuYXBzaG90cz1cInJlZnJlc2hfc25hcHNob3RzXCI+XG48L01vZGFsU25hcHNob3Q+XG5cbjxNb2RhbFRpbWVzZXJpZXMgdi1pZj1cImlzX250b3BfcHJvXCJcblx0XHQgcmVmPVwibW9kYWxfdGltZXNlcmllc1wiXG5cdFx0IDpzb3VyY2VzX3R5cGVzX2VuYWJsZWQ9XCJzb3VyY2VzX3R5cGVzX2VuYWJsZWRcIlxuXHRcdCBAYXBwbHk9XCJhcHBseV9tb2RhbF90aW1lc2VyaWVzXCI+XG48L01vZGFsVGltZXNlcmllcz5cblxuPE1vZGFsVHJhZmZpY0V4dHJhY3Rpb25cbiAgaWQ9XCJwYWdlX3N0YXRzX21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiXG4gIHJlZj1cIm1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiPlxuPC9Nb2RhbFRyYWZmaWNFeHRyYWN0aW9uPlxuXG48TW9kYWxEb3dubG9hZEZpbGVcbiAgcmVmPVwibW9kYWxfZG93bmxvYWRfZmlsZVwiXG4gIDp0aXRsZT1cIl9pMThuKCdwYWdlX3N0YXRzLnRpdGxlX21vZGFsX2Rvd25sb2FkX2ZpbGUnKVwiXG4gIGV4dD1cInBuZ1wiXG4gIEBkb3dubG9hZD1cImRvd25sb2FkX2NoYXJ0X3BuZ1wiPlxuPC9Nb2RhbERvd25sb2FkRmlsZT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0YS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTbmFwc2hvdCB9IGZyb20gXCIuL21vZGFsLXNuYXBzaG90LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9tb2RhbC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERvd25sb2FkRmlsZSB9IGZyb20gXCIuL21vZGFsLWRvd25sb2FkLWZpbGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBCb290c3RyYXBUYWJsZSB9IGZyb20gXCIuL2Jvb3RzdHJhcC10YWJsZS52dWVcIjtcblxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N0YXR1c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB0aW1lc2VyaWVzVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90aW1lc2VyaWVzLXV0aWxzLmpzXCI7XG5pbXBvcnQgbWV0cmljc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IHsgRGF0YVRhYmxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgaXNfbnRvcF9wcm86IEJvb2xlYW4sXG4gICAgc291cmNlX3ZhbHVlX29iamVjdDogT2JqZWN0LFxuICAgIHNvdXJjZXNfdHlwZXNfZW5hYmxlZDogT2JqZWN0LFxuICAgIHNvdXJjZXNfdHlwZXNfdG9wX2VuYWJsZWQ6IE9iamVjdCxcbiAgICBlbmFibGVfc25hcHNob3RzOiBCb29sZWFuLFxuICAgIGlzX2hpc3RvcnlfZW5hYmxlZDogQm9vbGVhbixcbiAgICB0cmFmZmljX2V4dHJhY3Rpb25fcGVybWl0dGVkOiBCb29sZWFuLFxuICAgIGlzX2RhcmtfbW9kZTogQm9vbGVhbixcbn0pO1xuXG5udG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfaW50ZXJ2YWxfdGltZSgpO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5sZXQgaWRfY2hhcnQgPSBcImNoYXJ0XCI7XG5sZXQgaWRfZGF0ZV90aW1lX3BpY2tlciA9IFwiZGF0ZV90aW1lX3BpY2tlclwiO1xubGV0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19MSU5FO1xuY29uc3QgY29uZmlnX2FwcF90YWJsZSA9IHJlZih7fSk7XG5jb25zdCBpbml0X2NvbmZpZ190YWJsZSA9IHJlZihmYWxzZSk7XG5jb25zdCBjaGFydHMgPSByZWYoW10pO1xuY29uc3QgZGF0ZV90aW1lX3BpY2tlciA9IHJlZihudWxsKTtcbmNvbnN0IHRvcF90YWJsZV9yZWYgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF90aW1lc2VyaWVzID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfc25hcHNob3QgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9kb3dubG9hZF9maWxlID0gcmVmKG51bGwpO1xuXG5jb25zdCBtZXRyaWNzID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX21ldHJpYyA9IHJlZih7fSk7XG5jb25zdCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTsgICAgXG5cbmNvbnN0IGVuYWJsZV9zdGF0c190YWJsZSA9IHJlZihmYWxzZSk7XG5jb25zdCBlbmFibGVfdG9wX3RhYmxlID0gcmVmKGZhbHNlKTtcblxuLyoqXG4gKiB7IGtleTogaWRlbnRpZmllciBvZiBDaGFydCBjb21wb25lbnQsIGlmIGNoYW5nZSBDaGFydCB3aWxsIGJlIGRlc3Ryb3llZCBhbmQgcmVjcmVhdGVkLFxuICogIGNoYXJ0X29wdGlvbnM6IGNoYXJ0IG9wdGlvbnMgfVtdXG4gKiovXG5jb25zdCBjaGFydHNfb3B0aW9uc19pdGVtcyA9IHJlZihbXSk7XG5cbi8qKlxuICogTW9kZXMgdGhhdCByZXByZXNlbnQgaG93IGl0J3MgcG9zc2libGUgZGlzcGxheSB0aW1lc2VyaWVzLlxuICovXG5jb25zdCBncm91cHNfb3B0aW9uc19tb2RlcyA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheSh0aW1lc2VyaWVzVXRpbHMuZ3JvdXBzT3B0aW9uc01vZGVzRW51bSk7XG4vKipcbiAqIEN1cnJlbnQgZGlzcGxheSB0aW1lc2VyaWVzIG1vZGUuXG4gKi9cbmNvbnN0IGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZSA9IHJlZihpbml0X2dyb3Vwc19vcHRpb25fbW9kZSgpKTtcblxubGV0IGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkID0gbnVsbDtcblxuY29uc3QgY3VzdG9tX21ldHJpYyA9IHsgbGFiZWw6IGkxOG4oJ3BhZ2Vfc3RhdHMuY3VzdG9tX21ldHJpY3MnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfVxuXG5jb25zdCBwYWdlX3NuYXBzaG90cyA9IFwidGltZXNlcmllc1wiO1xuXG5jb25zdCB0c19tZW51X3JlYWR5ID0gcmVmKGZhbHNlKTtcblxuZnVuY3Rpb24gaW5pdF9ncm91cHNfb3B0aW9uX21vZGUoKSB7XG4gICAgbGV0IGdyb3Vwc19tb2RlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc19tb2RlXCIpO1xuICAgIGlmIChncm91cHNfbW9kZSAhPSBudWxsICYmIGdyb3Vwc19tb2RlICE9IFwiXCIpIHtcblx0cmV0dXJuIHRpbWVzZXJpZXNVdGlscy5nZXRHcm91cE9wdGlvbk1vZGUoZ3JvdXBzX21vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBzX29wdGlvbnNfbW9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIHNldF9kZWZhdWx0X3NvdXJjZV9vYmplY3RfaW5fdXJsKCkge1xuICAgIGlmIChwcm9wcy5zb3VyY2VfdmFsdWVfb2JqZWN0ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHNvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIG1ldHJpY3NNYW5hZ2VyLnNldF9zb3VyY2VfdmFsdWVfb2JqZWN0X2luX3VybChzb3VyY2VfdHlwZSwgcHJvcHMuc291cmNlX3ZhbHVlX29iamVjdCk7XG59XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIHNldF9kZWZhdWx0X3NvdXJjZV9vYmplY3RfaW5fdXJsKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBpbml0KCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuXHRudG9wbmdfc3luYy5vbl9yZWFkeShpZF9kYXRlX3RpbWVfcGlja2VyKSxcbiAgICBdKTtcbiAgICAvLyBjaGFydC52YWx1ZS5yZWdpc3Rlcl9zdGF0dXMoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIC8vZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHNcbiAgICBsZXQgcHVzaF9jdXN0b21fbWV0cmljID0gdHJ1ZTtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwoaHR0cF9wcmVmaXgpO1xuICAgIGxldCBtZXRyaWNfdHNfc2NoZW1hO1xuICAgIGxldCBtZXRyaWNfcXVlcnk7XG4gICAgaWYgKHRpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcblx0cHVzaF9jdXN0b21fbWV0cmljID0gZmFsc2U7XG5cdG1ldHJpY190c19zY2hlbWEgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRzX3NjaGVtYVwiKTtcblx0bGV0IHRzX3F1ZXJ5ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0c19xdWVyeVwiKTtcblx0aWYgKHRzX3F1ZXJ5ICE9IG51bGwgJiYgdHNfcXVlcnkgIT0gXCJcIikge1xuXHQgICAgbWV0cmljX3F1ZXJ5ID0gbWV0cmljc01hbmFnZXIuZ2V0X21ldHJpY19xdWVyeV9mcm9tX3RzX3F1ZXJ5KHRzX3F1ZXJ5KTtcblx0fVxuXHRpZiAobWV0cmljX3RzX3NjaGVtYSA9PSBcIlwiKSB7IG1ldHJpY190c19zY2hlbWEgPSBudWxsOyB9XG5cdHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMoaHR0cF9wcmVmaXgsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSk7XG4gICAgfVxuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMpO1xuICAgIFxuICAgIGlmIChwdXNoX2N1c3RvbV9tZXRyaWMgPT0gdHJ1ZSkge1xuXHRzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBjdXN0b21fbWV0cmljO1xuICAgIH0gZWxzZSB7XG5cdHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLnZhbHVlLCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpO1xuICAgIH1cbiAgICB0c19tZW51X3JlYWR5LnZhbHVlID0gdHJ1ZTtcbiAgICBhd2FpdCBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgdHJ1ZSwgdHJ1ZSk7XG59XG5cbmxldCBsYXN0X3B1c2hfY3VzdG9tX21ldHJpYyA9IG51bGw7XG5hc3luYyBmdW5jdGlvbiBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIGZvcmNlX3JlZnJlc2gpIHtcbiAgICBpZiAoIWZvcmNlX3JlZnJlc2ggJiYgbGFzdF9wdXNoX2N1c3RvbV9tZXRyaWMgPT0gcHVzaF9jdXN0b21fbWV0cmljKSB7IHJldHVybiBtZXRyaWNzLnZhbHVlOyB9XG4gICAgXG4gICAgbGV0IG1ldHJpY3MgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljcyhodHRwX3ByZWZpeCk7XG4gICAgaWYgKHB1c2hfY3VzdG9tX21ldHJpYykge1xuXHRtZXRyaWNzLnB1c2goY3VzdG9tX21ldHJpYyk7XG4gICAgfVxuICAgIGlmIChjYWNoZV9zbmFwc2hvdHMgPT0gbnVsbCB8fCBmb3JjZV9yZWZyZXNoKSB7XG5cdGNhY2hlX3NuYXBzaG90cyA9IGF3YWl0IGdldF9zbmFwc2hvdHNfbWV0cmljcygpO1xuICAgIH1cbiAgICBpZihwcm9wcy5lbmFibGVfc25hcHNob3RzKSB7XG5cdGxldCBzbmFwc2hvdHNfbWV0cmljcyA9IGNhY2hlX3NuYXBzaG90cztcblx0c25hcHNob3RzX21ldHJpY3MuZm9yRWFjaCgoc20pID0+IG1ldHJpY3MucHVzaChzbSkpO1xuICAgIH1cbiAgICAvKiBPcmRlciBNZXRyaWNzICovXG4gICAgbWV0cmljcy5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpO1xuICAgIFxuICAgIHJldHVybiBtZXRyaWNzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfc25hcHNob3RzX21ldHJpY3MoKSB7XG4gICAgaWYgKCFwcm9wcy5lbmFibGVfc25hcHNob3RzKSB7IHJldHVybjsgfVxuICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9maWx0ZXJzL3NuYXBzaG90cy5sdWE/cGFnZT0ke3BhZ2Vfc25hcHNob3RzfWA7XG4gICAgXG4gICAgbGV0IHNuYXBzaG90c19vYmogPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBsZXQgc25hcHNob3RzID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KHNuYXBzaG90c19vYmopO1xuICAgIGxldCBtZXRyaWNzX3NuYXBzaG90cyA9IHNuYXBzaG90cy5tYXAoKHMpID0+IHtcblx0cmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnMsXG4gICAgICAgICAgICBpc19zbmFwc2hvdDogdHJ1ZSxcbiAgICAgICAgICAgIGxhYmVsOiBgJHtzLm5hbWV9YCxcblx0ICAgIGdyb3VwOiBcIlNuYXBzaG90c1wiLFxuXHR9O1xuICAgIH0pO1xuICAgIHJldHVybiBtZXRyaWNzX3NuYXBzaG90cztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NlbGVjdGVkX3RpbWVzZXJpZXNfZ3JvdXBzKCkge1xuICAgIGxldCBtZXRyaWMgPSBzZWxlY3RlZF9tZXRyaWMudmFsdWU7XG4gICAgcmV0dXJuIGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyhtZXRyaWMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV9tZXRyaWMobWV0cmljKSB7XG4gICAgbGV0IHNvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlKTtcbiAgICBsZXQgdHNfZ3JvdXAgPSBtZXRyaWNzTWFuYWdlci5nZXRfdHNfZ3JvdXAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBbdHNfZ3JvdXBdO1xuICAgIHJldHVybiB0aW1lc2VyaWVzX2dyb3Vwcztcbn1cblxuY29uc3QgYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QgPSBhc3luYyAoc291cmNlX3R5cGVfaWQsIHNvdXJjZV92YWx1ZV9kaWN0LCBtZXRyaWNfc2NoZW1hKSA9PiB7XG4gICAgbGV0IHNvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQoc291cmNlX3R5cGVfaWQpO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfZGljdChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9kaWN0KTtcbiAgICBsZXQgbWV0cmljID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X21ldHJpY19mcm9tX3NjaGVtYShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljX3NjaGVtYSk7XG4gICAgbGV0IHRzX2dyb3VwID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgYWRkX3RzX2dyb3VwKHRzX2dyb3VwKTtcbn07XG5cbmNvbnN0IGFkZF9tZXRyaWNfZnJvbV9tZXRyaWNfc2NoZW1hID0gYXN5bmMgKG1ldHJpY19zY2hlbWEsIG1ldHJpY19xdWVyeSkgPT4ge1xuICAgIGxldCBtZXRyaWMgPSBtZXRyaWNzLnZhbHVlLmZpbmQoKG0pID0+IG0uc2NoZW1hID09IG1ldHJpY19zY2hlbWEgJiYgbS5xdWVyeSA9PSBtZXRyaWNfcXVlcnkpO1xuICAgIGlmIChtZXRyaWMgPT0gbnVsbCkge1xuXHRjb25zb2xlLmVycm9yKGBtZXRyaWMgPSAke21ldHJpY19zY2hlbWF9LCBxdWVyeSA9ICR7bWV0cmljX3F1ZXJ5fSBub3QgZm91bmQuYCk7XG5cdHJldHVybjtcbiAgICB9XG4gICAgbGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpYyk7XG4gICAgLy8gbW9kYWxfdGltZXNlcmllcy52YWx1ZS5zZXRfdGltZXNlcmllc19ncm91cHMobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQpO1xuICAgIC8vIG1vZGFsX3RpbWVzZXJpZXMudmFsdWUuYWRkX3RzX2dyb3VwKHRpbWVzZXJpZXNfZ3JvdXBzWzBdLCB0cnVlKTtcbiAgICBhZGRfdHNfZ3JvdXAodGltZXNlcmllc19ncm91cHNbMF0pO1xufTtcblxuZnVuY3Rpb24gYWRkX3RzX2dyb3VwKHRzX2dyb3VwKSB7XG4gICAgbW9kYWxfdGltZXNlcmllcy52YWx1ZS5zZXRfdGltZXNlcmllc19ncm91cHMobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQpO1xuICAgIG1vZGFsX3RpbWVzZXJpZXMudmFsdWUuYWRkX3RzX2dyb3VwKHRzX2dyb3VwLCB0cnVlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VsZWN0X21ldHJpYyhtZXRyaWMpIHtcbiAgICBpZiAobWV0cmljLmlzX3NuYXBzaG90ID09IHRydWUpIHtcblx0bGV0IHVybF9wYXJhbWV0ZXJzID0gbWV0cmljLmZpbHRlcnM7XG5cdGxldCB0aW1lc2VyaWVzX3VybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRpbWVzZXJpZXNfZ3JvdXBzXCIsIHVybF9wYXJhbWV0ZXJzKTtcblx0bGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsKGh0dHBfcHJlZml4LCB0aW1lc2VyaWVzX3VybF9wYXJhbXMpO1xuXHRjdXJyZW50X2dyb3Vwc19vcHRpb25zX21vZGUudmFsdWUgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0R3JvdXBPcHRpb25Nb2RlKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidGltZXNlcmllc19ncm91cHNfbW9kZVwiLCB1cmxfcGFyYW1ldGVycykpO1xuXHRhd2FpdCBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgdHJ1ZSwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG5cdGF3YWl0IGxvYWRfc2VsZWN0ZWRfbWV0cmljX3BhZ2Vfc3RhdHNfZGF0YSgpO1xuXHRyZWZyZXNoX21ldHJpY3MoZmFsc2UpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF9zZWxlY3RlZF9tZXRyaWNfcGFnZV9zdGF0c19kYXRhKCkge1xuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IGF3YWl0IGdldF9zZWxlY3RlZF90aW1lc2VyaWVzX2dyb3VwcygpO1xuICAgIGF3YWl0IGxvYWRfcGFnZV9zdGF0c19kYXRhKHRpbWVzZXJpZXNfZ3JvdXBzLCB0cnVlLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGVwb2NoX2NoYW5nZShuZXdfZXBvY2gpIHtcbiAgICBsZXQgcHVzaF9jdXN0b21fbWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmxhYmVsID09IGN1c3RvbV9tZXRyaWMubGFiZWw7XG4gICAgbG9hZF9wYWdlX3N0YXRzX2RhdGEobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQsIHRydWUsIGZhbHNlLCBuZXdfZXBvY2gucmVmcmVzaF9kYXRhKTtcbiAgICByZWZyZXNoX3RvcF90YWJsZSgpO1xuICAgIHJlZnJlc2hfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBjaGFydF9yZWxvYWRlZChjaGFydF9vcHRpb25zKSB7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfc25hcHNob3QoKSB7XG4gICAgbW9kYWxfc25hcHNob3QudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBzaG93X21hbmFnZV90aW1lc2VyaWVzKCkge1xuICAgIGlmIChsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIG1vZGFsX3RpbWVzZXJpZXMudmFsdWUuc2hvdyhsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIGNhbGxlZCBieSBDaGFydCBjb21wb25lbnQgdG8gZHJhdyBvciB1cGRhdGUgdGhhdCByZXR1cm4gY2hhcnQgb3B0aW9ucy5cbiAqKi9cbmZ1bmN0aW9uIGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyhjaGFydF9pbmRleCkge1xuICAgIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG5cdHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgICB9XG59XG5cbmxldCBjYWNoZV9zbmFwc2hvdHMgPSBudWxsO1xuZnVuY3Rpb24gcmVmcmVzaF9zbmFwc2hvdHMoKSB7XG4gICAgbGV0IHB1c2hfY3VzdG9tX21ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS5sYWJlbCA9PSBjdXN0b21fbWV0cmljLmxhYmVsO1xuICAgIHJlZnJlc2hfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIHRydWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoX21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCBmb3JjZV9yZWZyZXNoKSB7XG4gICAgbWV0cmljcy52YWx1ZSA9IGF3YWl0IGdldF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgZm9yY2VfcmVmcmVzaCk7XG4gICAgaWYgKHB1c2hfY3VzdG9tX21ldHJpYykge1xuXHRzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBjdXN0b21fbWV0cmljO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gYXBwbHlfbW9kYWxfdGltZXNlcmllcyh0aW1lc2VyaWVzX2dyb3Vwcykge1xuICAgIHJlZnJlc2hfbWV0cmljcyh0cnVlKTtcbiAgICBhd2FpdCBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgdHJ1ZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZV9ncm91cHNfb3B0aW9uc19tb2RlKCkge1xuICAgIGxvYWRfcGFnZV9zdGF0c19kYXRhKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkLCBmYWxzZSwgZmFsc2UpO1xufVxuXG5sZXQgdHNfY2hhcnRzX29wdGlvbnM7XG5hc3luYyBmdW5jdGlvbiBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgcmVsb2FkX2NoYXJ0c19kYXRhLCByZWxvYWRfdG9wX3RhYmxlX29wdGlvbnMsIHJlZnJlc2hlZF90aW1lX2ludGVydmFsKSB7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IHRzX2NvbXBhcmUgPSBnZXRfdHNfY29tcGFyZShzdGF0dXMpO1xuICAgIGlmIChyZWxvYWRfY2hhcnRzX2RhdGEpIHtcblx0dHNfY2hhcnRzX29wdGlvbnMgPSBhd2FpdCB0aW1lc2VyaWVzVXRpbHMuZ2V0VHNDaGFydHNPcHRpb25zKGh0dHBfcHJlZml4LCBzdGF0dXMsIHRzX2NvbXBhcmUsIHRpbWVzZXJpZXNfZ3JvdXBzLCBwcm9wcy5pc19udG9wX3Bybyk7XG4gICAgfVxuICAgIFxuICAgIC8vIHVwZGF0ZSB0aW1lc2VyaWVzX2dyb3VwcyBzb3VyY2UgbGFiZWxcbiAgICBzZXRfdGltZXNlcmllc19ncm91cHNfc291cmNlX2xhYmVsKHRpbWVzZXJpZXNfZ3JvdXBzLCB0c19jaGFydHNfb3B0aW9ucyk7XG4gICAgXG4gICAgbGV0IGNoYXJ0c19vcHRpb25zID0gdGltZXNlcmllc1V0aWxzLnRzQXJyYXlUb0FwZXhPcHRpb25zQXJyYXkodHNfY2hhcnRzX29wdGlvbnMsIHRpbWVzZXJpZXNfZ3JvdXBzLCBjdXJyZW50X2dyb3Vwc19vcHRpb25zX21vZGUudmFsdWUsIHRzX2NvbXBhcmUpO1xuICAgIGlmIChyZWZyZXNoZWRfdGltZV9pbnRlcnZhbCkge1xuXHR1cGRhdGVfY2hhcnRzKGNoYXJ0c19vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuXHRzZXRfY2hhcnRzX29wdGlvbnNfaXRlbXMoY2hhcnRzX29wdGlvbnMpO1xuICAgIH1cbiAgICBzZXRfc3RhdHNfcm93cyh0c19jaGFydHNfb3B0aW9ucywgdGltZXNlcmllc19ncm91cHMsIHN0YXR1cyk7XG4gICAgaWYgKHJlbG9hZF90b3BfdGFibGVfb3B0aW9ucykge1xuXHRzZXRfdG9wX3RhYmxlX29wdGlvbnModGltZXNlcmllc19ncm91cHMsIHN0YXR1cyk7XG4gICAgfVxuICAgIC8vIHNldCBsYXN0X3RpbWVzZXJpZXNfZ3JvdXBkX2xvYWRlZFxuICAgIGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkID0gdGltZXNlcmllc19ncm91cHM7XG4gICAgLy8gdXBkYXRlIHVybCBwYXJhbXNcbiAgICB1cGRhdGVfdXJsX3BhcmFtcygpO1xufVxuXG5mdW5jdGlvbiBzZXRfdGltZXNlcmllc19ncm91cHNfc291cmNlX2xhYmVsKHRpbWVzZXJpZXNfZ3JvdXBzLCB0c19jaGFydHNfb3B0aW9ucykgeyAgICBcbiAgICB0aW1lc2VyaWVzX2dyb3Vwcy5mb3JFYWNoKCh0c19ncm91cCwgaSkgPT4ge1xuXHRsZXQgdHNfb3B0aW9ucyA9IHRzX2NoYXJ0c19vcHRpb25zW2ldO1xuXHRsZXQgbGFiZWwgPSB0c19vcHRpb25zPy5xdWVyeT8ubGFiZWw7XG5cdGlmIChsYWJlbCAhPSBudWxsKSB7XG5cdCAgICBsZXQgc291cmNlX2luZGV4ID0gdGltZXNlcmllc1V0aWxzLmdldE1haW5Tb3VyY2VEZWZJbmRleCh0c19ncm91cCk7XG5cdCAgICBsZXQgc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W3NvdXJjZV9pbmRleF07XG5cdCAgICBzb3VyY2UubGFiZWwgPSBsYWJlbDtcblx0fVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfdXJsX3BhcmFtcygpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJ0aW1lc2VyaWVzX2dyb3Vwc19tb2RlXCIsIGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZS52YWx1ZS52YWx1ZSk7XG4gICAgbWV0cmljc01hbmFnZXIuc2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2luX3VybChsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV9jaGFydHMoY2hhcnRzX29wdGlvbnMpIHtcbiAgICBjaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25zLCBpKSA9PiB7XG5cdC8vIGNoYXJ0cy52YWx1ZVtpXS51cGRhdGVfY2hhcnRfb3B0aW9ucyh7IHlheGlzOiBvcHRpb25zLnlheGlzIH0pO1xuXHRjaGFydHMudmFsdWVbaV0udXBkYXRlX2NoYXJ0X3NlcmllcyhvcHRpb25zPy5zZXJpZXMpO1xuICAgIH0pOyAgICBcbn1cblxuZnVuY3Rpb24gc2V0X2NoYXJ0c19vcHRpb25zX2l0ZW1zKGNoYXJ0c19vcHRpb25zKSB7XG4gICAgY2hhcnRzX29wdGlvbnNfaXRlbXMudmFsdWUgPSBjaGFydHNfb3B0aW9ucy5tYXAoKG9wdGlvbnMsIGkpID0+IHtcblx0cmV0dXJuIHtcblx0ICAgIGtleTogbnRvcG5nX3V0aWxpdHkuZ2V0X3JhbmRvbV9zdHJpbmcoKSxcblx0ICAgIGNoYXJ0X29wdGlvbnM6IG9wdGlvbnMsXG5cdH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF90c19jb21wYXJlKHN0YXR1cykge1xuICAgIC8vIDVtLCAzMG0sIDFoLCAxZCwgMXcsIDFNLCAxWVxuICAgIGxldCByID0gTnVtYmVyLnBhcnNlSW50KChzdGF0dXMuZXBvY2hfZW5kIC0gc3RhdHVzLmVwb2NoX2JlZ2luKSAvIDYwKTtcbiAgICBpZiAociA8PSA1KSB7XG5cdHJldHVybiBcIjVtXCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDMwKSB7XG5cdHJldHVybiBcIjMwbVwiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCkge1xuXHRyZXR1cm4gXCIxaFwiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCAqIDI0KSB7XG5cdHJldHVybiBcIjFkXCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDYwICogMjQgKiA3KSB7XG5cdHJldHVybiBcIjF3XCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDYwICogMjQgKiAzMCkge1xuXHRyZXR1cm4gXCIxTVwiO1xuICAgIH0gZWxzZSB7XG5cdHJldHVybiBcIjFZXCI7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfdG9wX3RhYmxlX3VybCh0c19ncm91cCwgdGFibGVfdmFsdWUsIHRhYmxlX3ZpZXcsIHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgc3RhdHVzKSB7XG4gICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XG5cdHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XHRcbiAgICB9XG4gICAgbGV0IHRzX3F1ZXJ5ID0gdGltZXNlcmllc1V0aWxzLmdldFRzUXVlcnkodHNfZ3JvdXAsIHRydWUsIHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCk7XG4gICAgbGV0IHYgPSB0YWJsZV92YWx1ZTtcbiAgICBsZXQgZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC8ke3Z9L3RvcC90c19zdGF0cy5sdWFgO1xuICAgIC8vdG9kbzogZ2V0IHRzX3F1ZXJ5XG4gICAgbGV0IHBfb2JqID0ge1xuXHR6b29tOiAnNW0nLFxuXHR0c19xdWVyeSxcblx0Ly8gdHNfcXVlcnk6IGBpZmlkOiR7bnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2lmaWQnKX1gLFxuXHRlcG9jaF9iZWdpbjogYCR7c3RhdHVzLmVwb2NoX2JlZ2lufWAsXG5cdGVwb2NoX2VuZDogYCR7c3RhdHVzLmVwb2NoX2VuZH1gLFxuXHRkZXRhaWxfdmlldzogYCR7dGFibGVfdmlld31gLFxuXHRuZXdfY2hhcnRzOiBgdHJ1ZWBcbiAgICB9O1xuICAgIFxuICAgIGxldCBwX3VybF9yZXF1ZXN0ID0gIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChwX29iaiwgJycpO1xuICAgIHJldHVybiBgJHtkYXRhX3VybH0/JHtwX3VybF9yZXF1ZXN0fWA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdG9wX3RhYmxlKCkge1xuICAgIGlmICghcHJvcHMuaXNfbnRvcF9wcm8pIHsgcmV0dXJuOyB9XG4gICAgbGV0IHRhYmxlX2NvbmZpZyA9IHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZT8udGFibGVfY29uZmlnX2RlZjtcbiAgICBpZiAodGFibGVfY29uZmlnID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgLy8gTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgIGxldCBkYXRhX3VybCA9IGdldF90b3BfdGFibGVfdXJsKHRhYmxlX2NvbmZpZy50c19ncm91cCwgdGFibGVfY29uZmlnLnRhYmxlX2RlZi50YWJsZV92YWx1ZSwgdGFibGVfY29uZmlnLnRhYmxlX2RlZi52aWV3LCB0YWJsZV9jb25maWcudGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KTtcbiAgICB0b3BfdGFibGVfcmVmLnZhbHVlLnVwZGF0ZV91cmwoZGF0YV91cmwpO1xuICAgIHRvcF90YWJsZV9yZWYudmFsdWUucmVsb2FkKCk7XG4gICAgLy8gTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIFxufVxuXG5jb25zdCB0b3BfdGFibGVfb3B0aW9ucyA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF90b3BfdGFibGUgPSByZWYoe30pO1xuZnVuY3Rpb24gc2V0X3RvcF90YWJsZV9vcHRpb25zKHRpbWVzZXJpZXNfZ3JvdXBzLCBzdGF0dXMpIHtcbiAgICBpZiAoIXByb3BzLmlzX250b3BfcHJvKSB7IHJldHVybjsgfVxuICAgIGlmICh0aW1lc2VyaWVzX2dyb3VwcyA9PSBudWxsKSB7XG5cdHRpbWVzZXJpZXNfZ3JvdXBzID0gbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQ7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT0gbnVsbCkge1xuXHRzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIH1cbiAgICBcbiAgICBsZXQgc291cmNlc190eXBlc190YWJsZXMgPSBtZXRyaWNzTWFuYWdlci5zb3VyY2VzX3R5cGVzX3RhYmxlcztcbiAgICBsZXQgdHNfZ3JvdXBfZGljdCA9IHt9OyAvLyBkaWN0aW9uYXJ5IHdpdGggMSB0c19ncm91cCBmb3IgZWFjaCAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSlcbiAgICB0aW1lc2VyaWVzX2dyb3Vwcy5mb3JFYWNoKCh0c19ncm91cCkgPT4ge1xuXHRsZXQgc291cmNlX3R5cGUgPSB0c19ncm91cC5zb3VyY2VfdHlwZTtcblx0Ly8gbGV0IHNvdXJjZV90eXBlX3RhYmxlcyA9IHNvdXJjZXNfdHlwZXNfdGFibGVzW3NvdXJjZV90eXBlLmlkXTtcblx0Ly8gbGV0IHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCA9IHNvdXJjZV90eXBlX3RhYmxlcy50YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3Rcblx0XG5cdGxldCBpZCA9IG1ldHJpY3NNYW5hZ2VyLmdldF90c19ncm91cF9pZCh0c19ncm91cC5zb3VyY2VfdHlwZSwgdHNfZ3JvdXAuc291cmNlX2FycmF5KTtcblx0dHNfZ3JvdXBfZGljdFtpZF0gPSB0c19ncm91cDtcbiAgICB9KTtcbiAgICBsZXQgdG9wX3RhYmxlX2lkX2RpY3QgPSB7fVxuICAgIHRvcF90YWJsZV9vcHRpb25zLnZhbHVlID0gW107XG4gICAgbGV0IHNlbGVjdF9vcHRpb25zID0gW107XG4gICAgZm9yIChsZXQgaWQgaW4gdHNfZ3JvdXBfZGljdCkge1xuXHRsZXQgdHNfZ3JvdXAgPSB0c19ncm91cF9kaWN0W2lkXTtcblx0bGV0IG1haW5fc291cmNlX2luZGV4ID0gdGltZXNlcmllc1V0aWxzLmdldE1haW5Tb3VyY2VEZWZJbmRleCh0c19ncm91cCk7XG5cdGxldCBtYWluX3NvdXJjZSA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheVttYWluX3NvdXJjZV9pbmRleF07XG5cdGxldCBzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuXHRsZXQgc291cmNlX3R5cGVfdGFibGVzID0gc291cmNlc190eXBlc190YWJsZXNbc291cmNlX3R5cGUuaWRdO1xuXHRpZiAoc291cmNlX3R5cGVfdGFibGVzID09IG51bGwpIHsgY29udGludWU7IH1cblx0XG5cdHNvdXJjZV90eXBlX3RhYmxlcy5mb3JFYWNoKCh0YWJsZV9kZWYpID0+IHtcblx0ICAgIGxldCBlbmFibGVzX3RhYmxlX3ZhbHVlID0gcHJvcHMuc291cmNlc190eXBlc190b3BfZW5hYmxlZFt0YWJsZV9kZWYudGFibGVfdmFsdWVdO1xuXHQgICAgaWYgKGVuYWJsZXNfdGFibGVfdmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIGxldCBlbmFibGVfdGFibGVfZGVmID0gZW5hYmxlc190YWJsZV92YWx1ZVt0YWJsZV9kZWYudmlld107XG5cdCAgICBpZiAoIWVuYWJsZV90YWJsZV9kZWYpIHsgcmV0dXJuOyB9XG5cdCAgICBsZXQgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0ID0gdGFibGVfZGVmLnRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdFxuXHQgICAgXG5cdCAgICBsZXQgZGF0YV91cmwgPSBnZXRfdG9wX3RhYmxlX3VybCh0c19ncm91cCwgdGFibGVfZGVmLnRhYmxlX3ZhbHVlLCB0YWJsZV9kZWYudmlldywgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0LCBzdGF0dXMpO1xuXHQgICAgbGV0IHRhYmxlX2lkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHRzX2dyb3VwLnNvdXJjZV90eXBlLCB0c19ncm91cC5zb3VyY2VfYXJyYXksIG51bGwsIHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgdHJ1ZSk7XG5cdCAgICB0YWJsZV9pZCA9IGAke3RhYmxlX2lkfV8ke3RhYmxlX2RlZi52aWV3fWA7XG5cdCAgICBpZiAodG9wX3RhYmxlX2lkX2RpY3RbdGFibGVfaWRdICE9IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICB0b3BfdGFibGVfaWRfZGljdFt0YWJsZV9pZF0gPSB0cnVlO1xuXHQgICAgXG5cdCAgICBsZXQgdmFsdWUgPSBgJHt0YWJsZV9kZWYudGFibGVfdmFsdWV9XyR7dGFibGVfZGVmLnZpZXd9XyR7dGFibGVfaWR9YDtcblx0ICAgIGxldCBsYWJlbDtcblx0ICAgIGlmICh0YWJsZV9kZWYuZl9nZXRfbGFiZWwgPT0gbnVsbCkge1xuXHRcdGxhYmVsID0gYCR7dGFibGVfZGVmLnRpdGxlfSAtICR7c291cmNlX3R5cGUubGFiZWx9ICR7bWFpbl9zb3VyY2UubGFiZWx9YDtcblx0ICAgIH0gZWxzZSB7XG5cdFx0bGFiZWwgPSB0YWJsZV9kZWYuZl9nZXRfbGFiZWwodHNfZ3JvdXApXG5cdCAgICB9XG5cdCAgICBjb25zdCB0YWJsZV9jb25maWdfZGVmID0ge1xuXHRcdHRzX2dyb3VwLFxuXHRcdHRhYmxlX2RlZixcblx0XHQvLyB0YWJsZV92YWx1ZTogdGFibGVfZGVmLnRhYmxlX3ZhbHVlLFxuXHRcdC8vIHRhYmxlX3ZpZXc6IHRhYmxlX2RlZi52aWV3LFxuXHRcdFxuXHRcdHRhYmxlX2J1dHRvbnM6IFsgXSxcblx0XHRkYXRhX3VybCxcblx0XHRlbmFibGVfc2VhcmNoOiB0cnVlLFxuXHRcdHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyB0YWJsZV9kZWYuZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IHRhYmxlX2RlZi5jb2x1bW5EZWZzIHx8IFtdLFxuICAgIH1cblx0ICAgIH07XG5cdCAgICAvLyBpdCBzaG91bGQgYmUgaGVyZSBpbiB0aGlzIGluc3RhbmNlIHRoZSB2dWV0aWZ5IG9iamVjdCB3aXRoIGl0cyBwcm9wZXJ0aWVzXG5cdCAgICB0YWJsZV9jb25maWdfZGVmLmNvbHVtbnNfY29uZmlnID0gdGFibGVfZGVmLmNvbHVtbnMubWFwKChjb2x1bW4pID0+IHtcblx0XHRsZXQgcmVuZGVyX2lmX2NvbnRleHQgPSB7XG5cdFx0ICAgIGlzX2hpc3RvcnlfZW5hYmxlZDogcHJvcHMuaXNfaGlzdG9yeV9lbmFibGVkXG5cdFx0fTtcblx0XHRsZXQgYyA9IHtcblx0XHQgICAgdmlzaWJsZTogIWNvbHVtbi5yZW5kZXJfaWYgfHwgY29sdW1uLnJlbmRlcl9pZihyZW5kZXJfaWZfY29udGV4dCksXG5cdFx0ICAgIC4uLmNvbHVtbixcblx0XHR9O1xuXHRcdGlmIChjLmNsYXNzTmFtZSA9PSBudWxsKSB7IGMuY2xhc3NOYW1lID0gXCJ0ZXh0LW5vd3JhcFwiOyB9XG5cdFx0aWYgKGMucmVzcG9uc2l2ZVByaW9yaXR5ID09IG51bGwpIHsgYy5yZXNwb25zaXZlUHJpb3JpdHkgPSAxOyB9XG5cdFx0Yy5yZW5kZXIgPSBjb2x1bW4ucmVuZGVyLmJpbmQoe1xuXHRcdCAgICBhZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYSxcblx0XHQgICAgYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QsXG5cdFx0ICAgIHNvdXJjZXNfdHlwZXNfZW5hYmxlZDogcHJvcHMuc291cmNlc190eXBlc19lbmFibGVkLFxuXHRcdCAgICBzdGF0dXMsIHNvdXJjZV90eXBlLCAgc291cmNlX2FycmF5OiB0c19ncm91cC5zb3VyY2VfYXJyYXksXG5cdFx0fSk7XG5cdFx0cmV0dXJuIGM7XG5cdCAgICB9KTtcblx0ICAgIGxldCBvcHRpb24gPSB7IHZhbHVlLCBsYWJlbCwgdGFibGVfY29uZmlnX2RlZiB9O1xuXHQgICAgdG9wX3RhYmxlX29wdGlvbnMudmFsdWUucHVzaChvcHRpb24pO1xuXHR9KTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSAhPSBudWxsICYmIHRvcF90YWJsZV9vcHRpb25zLnZhbHVlLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlID09IHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZS52YWx1ZSkpIHtcblx0cmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBzZWxlY3RlZF90b3BfdGFibGUudmFsdWUgPSB0b3BfdGFibGVfb3B0aW9ucy52YWx1ZS5maW5kKChvcHRpb24pID0+IG9wdGlvbi50YWJsZV9jb25maWdfZGVmLmRlZmF1bHQgPT0gdHJ1ZSk7XG4gICAgaWYgKHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSA9PSBudWxsKSB7XG5cdHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSA9IHRvcF90YWJsZV9vcHRpb25zLnZhbHVlWzBdO1xuICAgIH1cbn1cblxubGV0IHN0YXRzX2NvbHVtbnMgPSBbXG4gICAgeyBpZDogXCJtZXRyaWNcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy5tZXRyaWNcIikgfSxcbiAgICB7IGlkOiBcImF2Z1wiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLmF2ZXJhZ2VcIikgfSxcbiAgICB7IGlkOiBcInBlcmNfOTVcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy45NV9wZXJjXCIpIH0sXG4gICAgeyBpZDogXCJtYXhcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy5tYXhcIikgfSxcbiAgICB7IGlkOiBcIm1pblwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLm1pblwiKSB9LFxuICAgIHsgaWQ6IFwidG90YWxcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy50b3RhbFwiKSB9LFxuXTtcblxuY29uc3Qgc3RhdHNfcm93cyA9IHJlZihbXSk7XG5cbmZ1bmN0aW9uIHNldF9zdGF0c19yb3dzKHRzX2NoYXJ0c19vcHRpb25zLCB0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKSB7XG4gICAgbGV0IGV4dGVuZF9zZXJpZV9uYW1lID0gdHJ1ZTtcbiAgICBlbmFibGVfc3RhdHNfdGFibGUudmFsdWUgPSB0aW1lc2VyaWVzX2dyb3Vwcy5tYXAoKHRzX2dyb3VwKSA9PiAhdHNfZ3JvdXAuc291cmNlX3R5cGUuZGlzYWJsZV9zdGF0cykucmVkdWNlKChyZXMsIGVsKSA9PiByZXMgfCBlbCwgZmFsc2UpO1xuICAgIGlmICghZW5hYmxlX3N0YXRzX3RhYmxlLnZhbHVlKSB7IHJldHVybjsgfVxuICAgIGNvbnN0IGZfZ2V0X3RvdGFsX2Zvcm1hdHRlcl90eXBlID0gKHR5cGUpID0+IHtcblx0aWYgKHR5cGUgPT0gXCJicHNcIikge1xuXHQgICAgcmV0dXJuIFwiYnl0ZXNcIjtcblx0ICAgIC8vIHJldHVybiBcImJ5dGVzX25ldHdvcmtcIjtcblx0fVxuXHRyZXR1cm4gdHlwZTtcbiAgICB9OyAgICBcbiAgICBzdGF0c19yb3dzLnZhbHVlID0gW107XG4gICAgdHNfY2hhcnRzX29wdGlvbnMuZm9yRWFjaCgob3B0aW9ucywgaSkgPT4ge1xuXHRsZXQgdHNfZ3JvdXAgPSB0aW1lc2VyaWVzX2dyb3Vwc1tpXTtcblx0aWYgKHRzX2dyb3VwLnNvdXJjZV90eXBlLmRpc2FibGVfc3RhdHMgPT0gdHJ1ZSkgeyByZXR1cm47IH1cblx0b3B0aW9ucy5zZXJpZXMuZm9yRWFjaCgocywgaikgPT4ge1xuXHQgICAgbGV0IHRzX2lkID0gdGltZXNlcmllc1V0aWxzLmdldFNlcmllSWQocyk7XG5cdCAgICBsZXQgc19tZXRhZGF0YSA9IHRzX2dyb3VwLm1ldHJpYy50aW1lc2VyaWVzW3RzX2lkXTtcblx0ICAgIGxldCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIodHNfZ3JvdXAubWV0cmljLm1lYXN1cmVfdW5pdCk7XG5cdCAgICBsZXQgdHNfc3RhdHM7XG5cdCAgICBpZiAodHNfZ3JvdXAubWV0cmljLnR5cGUgPT0gXCJ0b3BcIikge1xuXHRcdHRzX3N0YXRzID0gb3B0aW9ucy5zdGF0aXN0aWNzO1xuXHQgICAgfSBlbHNlIGlmIChvcHRpb25zPy5zdGF0aXN0aWNzPy5ieV9zZXJpZT8ubGVuZ3RoID4gaikge1xuXHRcdHRzX3N0YXRzID0gb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllW2pdO1xuXHQgICAgfVxuXHQgICAgaWYgKHRzX3N0YXRzID09IG51bGwgfHwgKHRzX2dyb3VwLm1ldHJpYy50eXBlID09IFwidG9wXCIgJiYgaiA+IDApKSB7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgbGV0IG5hbWUgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0U2VyaWVOYW1lKHNfbWV0YWRhdGEubGFiZWwsIHRzX2lkLCB0c19ncm91cCwgZXh0ZW5kX3NlcmllX25hbWUpO1xuXHQgICAgbGV0IHRvdGFsID0gbnVsbDtcblx0ICAgIGxldCB0b3RhbF9mb3JtYXR0ZXJfdHlwZSA9IGZfZ2V0X3RvdGFsX2Zvcm1hdHRlcl90eXBlKHRzX2dyb3VwLm1ldHJpYy5tZWFzdXJlX3VuaXQpO1xuXHQgICAgbGV0IHRvdGFsX2Zvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcih0b3RhbF9mb3JtYXR0ZXJfdHlwZSk7XG5cdCAgICBpZiAodHNfc3RhdHMudG90YWwgIT0gbnVsbCkge1xuXHRcdGxldCBpbnRlcnZhbCA9IHN0YXR1cy5lcG9jaF9lbmQgLSBzdGF0dXMuZXBvY2hfYmVnaW47XG5cdFx0dG90YWwgPSBpbnRlcnZhbCAqIHRzX3N0YXRzLmF2ZXJhZ2U7XG5cdCAgICB9XG5cdCAgICBcblx0ICAgIGxldCByb3cgPSB7XG5cdFx0bWV0cmljOiBuYW1lLFxuXHRcdC8vIHRvdGFsOiB0b3RhbF9mb3JtYXR0ZXIodG90YWwpLFxuXHRcdHRvdGFsOiB0b3RhbF9mb3JtYXR0ZXIodHNfc3RhdHMudG90YWwpLFxuXHRcdHBlcmNfOTU6IGZvcm1hdHRlcih0c19zdGF0c1tcIjk1dGhfcGVyY2VudGlsZVwiXSksXG5cdFx0YXZnOiBmb3JtYXR0ZXIodHNfc3RhdHMuYXZlcmFnZSksXG5cdFx0bWF4OiBmb3JtYXR0ZXIodHNfc3RhdHMubWF4X3ZhbCksXG5cdFx0bWluOiBmb3JtYXR0ZXIodHNfc3RhdHMubWluX3ZhbCksXG5cdCAgICB9O1xuXHQgICAgc3RhdHNfcm93cy52YWx1ZS5wdXNoKHJvdyk7XG5cdH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19jb2x1bW4oY29sKSB7XG4gICAgcmV0dXJuIGNvbC5sYWJlbDtcbn1cblxuZnVuY3Rpb24gcHJpbnRfc3RhdHNfcm93KGNvbCwgcm93KSB7XG4gICAgbGV0IGxhYmVsID0gcm93W2NvbC5pZF07XG4gICAgcmV0dXJuIGxhYmVsO1xufVxuXG5mdW5jdGlvbiBqdW1wX3RvX2hpc3RvcmljYWxfZmxvd3MoKSB7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IHBhcmFtcyA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCBoaXN0b3JpY2FsX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChoaXN0b3JpY2FsX3VybCk7XG59XG5cbmNvbnN0IG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiA9IHJlZihudWxsKTtcbmZ1bmN0aW9uIHNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uKCkge1xuICAgIG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbi52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfZG93bmxvYWRfZmlsZSgpIHtcbiAgICBpZiAoIXRzX2NoYXJ0c19vcHRpb25zPy5sZW5ndGgpIHsgcmV0dXJuOyB9IFxuICAgIGxldCB0c19ncm91cCA9IGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkWzBdO1xuICAgIGxldCBmaWxlbmFtZSA9IHRpbWVzZXJpZXNVdGlscy5nZXRTZXJpZU5hbWUobnVsbCwgbnVsbCwgdHNfZ3JvdXApO1xuICAgIG1vZGFsX2Rvd25sb2FkX2ZpbGUudmFsdWUuc2hvdyhmaWxlbmFtZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkX2NoYXJ0X3BuZyhmaWxlbmFtZSkge1xuICAgIGxldCBjaGFydF9pbWFnZV9hcnJheV9wcm9taXNlID0gY2hhcnRzLnZhbHVlLm1hcChhc3luYyAoY2hhcnQpID0+IHtcbiAgICBcdGxldCBkYXRhX3VyaSA9IGF3YWl0IGNoYXJ0LmdldF9kYXRhX3VyaSgpO1xuICAgIFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBcdCAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBcdCAgICBpbWFnZS5zcmMgPSBkYXRhX3VyaTtcbiAgICBcdCAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBcdFx0cmVzb2x2ZShpbWFnZSk7XG4gICAgXHQgICAgfTtcdCAgICBcbiAgICBcdH0pO1xuICAgIH0pO1xuICAgIGxldCBoZWlnaHQgPSAwO1xuICAgIGxldCBjaGFydF9pbWFnZV9hcnJheSA9IGF3YWl0IFByb21pc2UuYWxsKGNoYXJ0X2ltYWdlX2FycmF5X3Byb21pc2UpO1xuICAgIGNoYXJ0X2ltYWdlX2FycmF5LmZvckVhY2goKGltYWdlKSA9PiB7XG4gICAgXHRoZWlnaHQgKz0gaW1hZ2UuaGVpZ2h0O1xuICAgIH0pOyBcbiAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgbGV0IGNhbnZhc19jb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY2FudmFzLndpZHRoID0gY2hhcnRfaW1hZ2VfYXJyYXlbMF0ud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICBoZWlnaHQgPSAwO1xuICAgIGNoYXJ0X2ltYWdlX2FycmF5LmZvckVhY2goKGltYWdlKSA9PiB7XG4gICAgXHRjYW52YXNfY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIGhlaWdodCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XG4gICAgXHRoZWlnaHQgKz0gaW1hZ2UuaGVpZ2h0O1xuICAgIH0pO1xuICAgIG50b3BuZ191dGlsaXR5LmRvd25sb2FkX1VSSShjYW52YXMudG9EYXRhVVJMKCksIGZpbGVuYW1lKTtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICAuaW5saW5lIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbiAgLnNlbGVjdDItc2l6ZSB7XG4gICAgbWluLXdpZHRoOiAxOHJlbTtcbiAgfVxuPC9zdHlsZT5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXIgbWItMlwiPlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFicyBjYXJkLWhlYWRlci10YWJzXCIgcm9sZT1cInRhYmxpc3RcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInRhYiBpbiB0YWJfbGlzdFwiPlxuXHQgICAgICA8dGVtcGxhdGUgdi1pZj1cInRhYi5hY3RpdmVcIj5cblx0ICAgICAgICA8bGkgQGNsaWNrPVwiY2hhbmdlX3RhYih0YWIpXCIgOmNsYXNzPVwieyAnYWN0aXZlJzogdGFiLmFjdGl2ZSB9XCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuICAgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG4gICAgICAgICAgPC9saT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cblx0ICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cblx0ICAgICAgICA8YSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiBocmVmPVwiI1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cblx0ICAgICAgICAgIHt7IHRhYi50aXRsZSB9fVxuXHQgICAgICAgIDwvYT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC91bD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgY29tcG9uZW50czoge1xuICB9LFxuICBwcm9wczoge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGFiX2xpc3Q6IEFycmF5LFxuICB9LFxuICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICBjcmVhdGVkKCkge1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbGRfdGFiOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IHRtcCA9IG51bGw7XG4gICAgdGhpcy4kcHJvcHMudGFiX2xpc3QuZm9yRWFjaChmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmKHRhYi5hY3RpdmUpIHtcbiAgICAgICAgdG1wID0gdGFiXG4gICAgICB9XG4gICAgfSkgICAgXG4gICAgXG4gICAgdGhpcy5vbGRfdGFiID0gdG1wIHx8IHRoaXMuJHByb3BzLnRhYl9saXN0WzBdO1xuICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2hhbmdlX3RhYjogZnVuY3Rpb24odGFiKSB7XG4gICAgICBpZigodGFiLmlkICE9IG51bGwgJiYgdGhpcy5vbGRfdGFiLmlkICE9IHRhYi5pZCkgfHxcbiAgICAgICAgICh0YWIubmFtZSAhPSBudWxsICYmIHRoaXMub2xkX3RhYi5uYW1lICE9IHRhYi5uYW1lKSkge1xuICAgICAgICB0aGlzLm9sZF90YWIgPSB0YWJcbiAgICAgICAgdGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIHRhYilcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlciBtYi0yXCI+XG4gICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzIGNhcmQtaGVhZGVyLXRhYnNcIiByb2xlPVwidGFibGlzdFwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwidGFiIGluIHRhYl9saXN0XCI+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidGFiLmFjdGl2ZVwiPlxuXHQgICAgICAgIDxsaSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiB0YWIuYWN0aXZlIH1cIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG4gICAgICAgICAgICB7eyB0YWIudGl0bGUgfX1cbiAgICAgICAgICA8L2xpPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuXHQgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuXHQgICAgICAgIDxhIEBjbGljaz1cImNoYW5nZV90YWIodGFiKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuXHQgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG5cdCAgICAgICAgPC9hPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBjb21wb25lbnRzOiB7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgaWQ6IFN0cmluZyxcbiAgICB0YWJfbGlzdDogQXJyYXksXG4gIH0sXG4gIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIGNyZWF0ZWQoKSB7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9sZF90YWI6IG51bGxcbiAgICB9O1xuICB9LFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgbW91bnRlZCgpIHtcbiAgICBsZXQgdG1wID0gbnVsbDtcbiAgICB0aGlzLiRwcm9wcy50YWJfbGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYodGFiLmFjdGl2ZSkge1xuICAgICAgICB0bXAgPSB0YWJcbiAgICAgIH1cbiAgICB9KSAgICBcbiAgICBcbiAgICB0aGlzLm9sZF90YWIgPSB0bXAgfHwgdGhpcy4kcHJvcHMudGFiX2xpc3RbMF07XG4gICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBjaGFuZ2VfdGFiOiBmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmKCh0YWIuaWQgIT0gbnVsbCAmJiB0aGlzLm9sZF90YWIuaWQgIT0gdGFiLmlkKSB8fFxuICAgICAgICAgKHRhYi5uYW1lICE9IG51bGwgJiYgdGhpcy5vbGRfdGFiLm5hbWUgIT0gdGFiLm5hbWUpKSB7XG4gICAgICAgIHRoaXMub2xkX3RhYiA9IHRhYlxuICAgICAgICB0aGlzLiRlbWl0KCdjbGlja19pdGVtJywgdGFiKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIHt7Ym9keX19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRlbGV0ZV9cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+e3tfaTE4bignZGVsZXRlJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RlbGV0ZSddKVxuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYm9keTogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBkZWxldGVfID0gKCkgPT4ge1xuICAgIGVtaXQoJ2RlbGV0ZScpO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2Fzc2V0XCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICBcbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwiYXNzZXRfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXNzZXRfdGFibGVfdGFiID09ICdzdGFuZGFyZCdcIiByZWY9XCJ0YWJsZV9hc3NldF9zdGFuZGFyZFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ2NlbnRyYWxpdHknXCIgcmVmPVwidGFibGVfYXNzZXRfY2VudHJhbGl0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9hc3NldHNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJhc3NldF9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQgPSBcImNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKSB8fCAnY2VudHJhbGl0eSc7XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBpZih0aGlzLmFzc2V0X3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2Fzc2V0X2ZhbWlseScsIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuYXNzZXRfZmFtaWx5KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfYXNzZXRfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiXCIsIGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0cycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9hc3NldHNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgYXNzZXRfdGFibGVfdGFiOiBudWxsLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7ICAgICAgXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2Fzc2V0XyR7dGhpcy5hc3NldF90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIFxuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLmFzc2V0X3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmNsaWVudFwiKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnNlcnZlclwiKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2ZhbWlseVwiKSwgbmFtZTogJ2ZhbWlseScsIGRhdGE6ICdmYW1pbHknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmxhc3Rfc2VlblwiKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0geyBzZXJ2ZXJTaWRlOiBmYWxzZSwgb3JkZXI6IFtbIDMgLyogTGFzdCBTZWVuICovLCAnZGVzYycgXV0gfVxuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcblxuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLmxhYmVsIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X3RvdGFsX2VkZ2VzXCIpLCBuYW1lOiAndG90YWxfZWRnZXMnLCBkYXRhOiAndG90YWxfZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2luX2VkZ2VzXCIpLCBuYW1lOiAnaW5fZWRnZXMnLCBkYXRhOiAnaW5fZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X291dF9lZGdlc1wiKSwgbmFtZTogJ291dF9lZGdlcycsIGRhdGE6ICdvdXRfZWRnZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGxldCBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSB7IHNlcnZlclNpZGU6IGZhbHNlLCBvcmRlcjogW1sgMSAvKiBUb3RhbCBFZGdlcyAqLywgJ2Rlc2MnIF1dIH1cbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcblxuICBjb25zb2xlLmxvZyhjb25maWdEZXZpY2VzKVxuICBjb25zb2xlLmxvZyhjZW50cmFsaXR5Q29uZmlnRGV2aWNlcylcbiAgXG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19jZW50cmFsaXR5ID0gY2VudHJhbGl0eUNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImFzc2V0X3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX2Fzc2V0X3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFzc2V0X3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9hc3NldF9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5hc3NldF90YWJsZV90YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpIHx8ICdjZW50cmFsaXR5JztcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIGlmKHRoaXMuYXNzZXRfdGFibGVfdGFiID09IGkuaWQpXG4gICAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnYXNzZXRfZmFtaWx5JywgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5hc3NldF9mYW1pbHkpO1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9hc3NldF90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9hc3NldF90YWJsZV90YWJcIiwgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5hc3NldF90YWJsZV90YWIgPSB0YWI7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfYXNzZXRzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWQnKSxcbiAgICAgIGJvZHlfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBhc3NldF90YWJsZV90YWI6IG51bGwsXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5zdGFuZGFyZF92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnc3RhbmRhcmQnKSxcbiAgICAgICAgICBpZDogJ3N0YW5kYXJkJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5jZW50cmFsaXR5X3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdjZW50cmFsaXR5JyksXG4gICAgICAgICAgaWQ6ICdjZW50cmFsaXR5J1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQsIGl0ZW0uaWQpO1xuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHsgICAgICBcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sIFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfYXNzZXRfJHt0aGlzLmFzc2V0X3RhYmxlX3RhYn1gXTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgXG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ3N0YW5kYXJkJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zWyd2aWV3J10gPSBEYXRhdGFibGVWdWUuYXNzZXRfdGFibGVfdGFiO1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfZmFtaWx5XCIpLCBuYW1lOiAnZmFtaWx5JywgZGF0YTogJ2ZhbWlseScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubGFzdF9zZWVuXCIpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSB7IHNlcnZlclNpZGU6IGZhbHNlLCBvcmRlcjogW1sgMyAvKiBMYXN0IFNlZW4gKi8sICdkZXNjJyBdXSB9XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG5cbiAgLyogQ2VudHJhbGl0eSB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NlbnRyYWxpdHknICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcylcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmhvc3RcIiksIG5hbWU6ICdob3N0JywgZGF0YTogJ2hvc3QnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEubGFiZWwgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfdG90YWxfZWRnZXNcIiksIG5hbWU6ICd0b3RhbF9lZGdlcycsIGRhdGE6ICd0b3RhbF9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfaW5fZWRnZXNcIiksIG5hbWU6ICdpbl9lZGdlcycsIGRhdGE6ICdpbl9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfb3V0X2VkZ2VzXCIpLCBuYW1lOiAnb3V0X2VkZ2VzJywgZGF0YTogJ291dF9lZGdlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuICBcbiAgbGV0IGNlbnRyYWxpdHlDb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IHsgc2VydmVyU2lkZTogZmFsc2UsIG9yZGVyOiBbWyAxIC8qIFRvdGFsIEVkZ2VzICovLCAnZGVzYycgXV0gfVxuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuXG4gIGNvbnNvbGUubG9nKGNvbmZpZ0RldmljZXMpXG4gIGNvbnNvbGUubG9nKGNlbnRyYWxpdHlDb25maWdEZXZpY2VzKVxuICBcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkgPSBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBQZXJpb2RpY2l0eSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwicGVyaW9kaWNpdHktdGFibGVcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX3BlcmlvZGljaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCJcbiAgICAgICAgICAgIDpiYXNlX3VybD1cImJhc2VfdXJsXCJcbiAgICAgICAgICAgIDpiYXNlX3BhcmFtcz1cInVybF9wYXJhbXNcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHYtaWY9XCJpc19hZG1pblwiIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInBlcmlvZGljaXR5X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkgeyAgXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfcGVyaW9kaWNpdHlfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBiYXNlX3VybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWQnKSxcbiAgICAgIGJvZHlfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfcGVyaW9kaWNpdHlgXTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAwO1xuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHVybF9wYXJhbXMpXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IG51bGxcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmxhc3Rfc2VlbicpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS52YWx1ZSB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmNsaWVudCcpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5zZXJ2ZXInKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucG9ydCcpLCBuYW1lOiAncG9ydCcsIGRhdGE6ICdwb3J0JywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5wcm90b2NvbCcpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5maXJzdF9zZWVuJyksIG5hbWU6ICdmaXJzdF9zZWVuJywgZGF0YTogJ2ZpcnN0X3NlZW4nLCB2aXNpYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5vYnNlcnZhdGlvbnMnKSwgbmFtZTogJ29ic2VydmF0aW9ucycsIGRhdGE6ICdvYnNlcnZhdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZnJlcXVlbmN5JyksIG5hbWU6ICdmcmVxdWVuY3knLCBkYXRhOiAnZnJlcXVlbmN5JywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IHRydWUsIHJlc3BvbnNpdmVQcmlvcml0eTogNCwgcmVuZGVyOiAoIGRhdGEsIHR5cGUsIHJvdyApID0+IHtcbiAgICAgICAgcmV0dXJuICh0eXBlID09IFwic29ydFwiIHx8IHR5cGUgPT0gJ3R5cGUnKSA/IGRhdGEgOiBkYXRhICsgXCIgc2VjXCI7IFxuICAgICAgfVxuICAgIH0sXG4gIF07XG5cbiAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSA2IC8qIE9ic2VydmF0aW9uIGNvbHVtbiAqL1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH1cbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBQZXJpb2RpY2l0eSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwicGVyaW9kaWNpdHktdGFibGVcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX3BlcmlvZGljaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCJcbiAgICAgICAgICAgIDpiYXNlX3VybD1cImJhc2VfdXJsXCJcbiAgICAgICAgICAgIDpiYXNlX3BhcmFtcz1cInVybF9wYXJhbXNcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHYtaWY9XCJpc19hZG1pblwiIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInBlcmlvZGljaXR5X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkgeyAgXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfcGVyaW9kaWNpdHlfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBiYXNlX3VybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWQnKSxcbiAgICAgIGJvZHlfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfcGVyaW9kaWNpdHlgXTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAwO1xuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHVybF9wYXJhbXMpXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IG51bGxcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmxhc3Rfc2VlbicpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS52YWx1ZSB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmNsaWVudCcpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5zZXJ2ZXInKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucG9ydCcpLCBuYW1lOiAncG9ydCcsIGRhdGE6ICdwb3J0JywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5wcm90b2NvbCcpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5maXJzdF9zZWVuJyksIG5hbWU6ICdmaXJzdF9zZWVuJywgZGF0YTogJ2ZpcnN0X3NlZW4nLCB2aXNpYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5vYnNlcnZhdGlvbnMnKSwgbmFtZTogJ29ic2VydmF0aW9ucycsIGRhdGE6ICdvYnNlcnZhdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZnJlcXVlbmN5JyksIG5hbWU6ICdmcmVxdWVuY3knLCBkYXRhOiAnZnJlcXVlbmN5JywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IHRydWUsIHJlc3BvbnNpdmVQcmlvcml0eTogNCwgcmVuZGVyOiAoIGRhdGEsIHR5cGUsIHJvdyApID0+IHtcbiAgICAgICAgcmV0dXJuICh0eXBlID09IFwic29ydFwiIHx8IHR5cGUgPT0gJ3R5cGUnKSA/IGRhdGEgOiBkYXRhICsgXCIgc2VjXCI7IFxuICAgICAgfVxuICAgIH0sXG4gIF07XG5cbiAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSA2IC8qIE9ic2VydmF0aW9uIGNvbHVtbiAqL1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH1cbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7IFxuICBhdXRvUmVzaXplOiB0cnVlLCBcbiAgbm9kZXM6IHsgXG4gICAgICBzaGFwZTogXCJkb3RcIiwgXG4gICAgICBzY2FsaW5nOiB7XG4gICAgICAgICAgbWluOiAxMCxcbiAgICAgICAgICBtYXg6IDMwLFxuICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgIG1pbjogMTUsXG4gICAgICAgICAgICAgIG1heDogMTUsXG4gICAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzaGFkb3c6IGZhbHNlLFxuICB9LFxuICBlZGdlczoge1xuICAgICAgd2lkdGg6IDAuMTUsXG4gICAgICBjb2xvcjogeyBpbmhlcml0OiBcImZyb21cIiB9LFxuICAgICAgc21vb3RoOiB7XG4gICAgICAgICAgdHlwZTogXCJjb250aW51b3VzXCIsXG4gICAgICAgICAgcm91bmRuZXNzOiAwXG4gICAgICB9LFxuICB9LFxuICBpbnRlcmFjdGlvbjoge1xuICAgICAgdG9vbHRpcERlbGF5OiAxNTAsXG4gICAgICBoaWRlRWRnZXNPbkRyYWc6IHRydWUsXG4gICAgICBoaWRlRWRnZXNPblpvb206IHRydWUsXG4gICAgICBob3ZlcjogdHJ1ZSxcbiAgICAgIHRvb2x0aXBEZWxheTogMCxcbiAgfSxcbiAgcGh5c2ljczoge1xuICAgIGJhcm5lc0h1dDoge1xuICAgICAgICBzcHJpbmdDb25zdGFudDogMCxcbiAgICAgICAgYXZvaWRPdmVybGFwOiAwLjMsXG4gICAgICAgIGdyYXZpdGF0aW9uYWxDb25zdGFudDogLTEwMDAsXG4gICAgICAgIGRhbXBpbmc6IDAuNjUsXG4gICAgICAgIGNlbnRyYWxHcmF2aXR5OiAwXG4gICAgfSxcbiAgICBzdGFiaWxpemF0aW9uOiB7XG4gICAgICAgIG9ubHlEeW5hbWljRWRnZXM6IGZhbHNlXG4gICAgfVxuICB9LFxuICBncm91cHM6IHtcbiAgICAgIHVua25vd246IHtcbiAgICAgICAgICBzaGFwZTogXCJkb3RcIixcbiAgICAgIH0sXG4gICAgICBwcmludGVyOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6IFwiJ0ZvbnRBd2Vzb21lJ1wiLFxuICAgICAgICAgIGNvZGU6IFwiXFx1ZjAyZlwiLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgdmlkZW86IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMDNkXCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB3b3Jrc3RhdGlvbjoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYxMDlcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIGxhcHRvcDoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYxMDlcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHRhYmxldDoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYxMGFcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHBob25lOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6IFwiJ0ZvbnRBd2Vzb21lJ1wiLFxuICAgICAgICAgIGNvZGU6IFwiXFx1ZjEwYlwiLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgdHY6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMjZjXCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBuZXR3b3JraW5nOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6IFwiJ0ZvbnRBd2Vzb21lJ1wiLFxuICAgICAgICAgIGNvZGU6IFwiXFx1ZjBiMlwiLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgd2lmaToge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYxZWJcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIG5hczoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYxYzBcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIG11bHRpbWVkaWE6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMDAxXCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBpb3Q6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVlMDEyXCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgbnRvcG5nX21hcF9tYW5hZ2VyID0ge1xuICAvKipcbiAgICogQ2hhbmdlIHRoZSBzdGF0dXMgb2YgYSBzZXJ2aWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZV9pZCBpZCBvZiB0aGUgc2VydmljZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld19zdGF0ZSBpZCBvZiB0aGUgbmV3IHN0YXR1cyBvZiB0aGUgc2VydmljZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3MuXG4gICAqL1xuICB0b2dnbGVfc3RhdGU6IGZ1bmN0aW9uKHNlcnZpY2VfaWQsIG5ld19zdGF0ZSwgY2FsbGJhY2ssIGNzcmYpIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gJC5wb3N0KGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc3dpdGNoX3NlcnZpY2Vfc3RhdGUubHVhYCwgeyBcbiAgICAgIHNlcnZpY2VfaWQ6IHNlcnZpY2VfaWQsIHNlcnZpY2Vfc3RhdHVzOiBuZXdfc3RhdGUsIGNzcmY6IGNzcmZcbiAgICB9KTtcbiAgICByZXF1ZXN0LnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGlmKGRhdGEuc3VjY2VzcyAmJiBjYWxsYmFjaykgXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0sXG4gIGdldF9kZWZhdWx0X29wdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbiAgfSxcbn1cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfc2VydmljZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgXG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cInNlcnZpY2VfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJzZXJ2aWNlX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJzZXJ2aWNlX3RhYmxlX3RhYiA9PSAnc3RhbmRhcmQnXCIgcmVmPVwidGFibGVfc2VydmljZV9zdGFuZGFyZFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cInNlcnZpY2VfdGFibGVfdGFiID09ICdjZW50cmFsaXR5J1wiIHJlZj1cInRhYmxlX3NlcnZpY2VfY2VudHJhbGl0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG48IS0tXG4gICAgICAgIHslIGlmIGlzX2FkbWluIHRoZW4gJX1cbiAgICAgICAgICA8Zm9ybSBjbGFzcz1cImQtaW5saW5lXCIgaWQ9J3N3aXRjaC1zdGF0ZS1mb3JtJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgZC1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsPnsqIGkxOG4oXCJtYXBfcGFnZS5zZXRfc3RhdGVcIiwge2xhYmVsID0gXCI8c3BhbiBjbGFzcz0nY291bnQnPjwvc3Bhbj5cIn0pICp9PC9sYWJlbD5cbiAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwibmV3X3N0YXRlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBkLWlubGluZVwiIHN0eWxlPVwid2lkdGg6IDE2cmVtXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgeyUgZm9yIF8sIHN0YXR1cyBpbiBwYWlyc0J5RmllbGQobWFwLmZpbHRlcnMuc2VydmljZV9zdGF0dXNfZmlsdGVycywgbGFiZWwsIGFzY19pbnNlbnNpdGl2ZSkgZG8gJX1cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwie3sgc3RhdHVzLmlkIH19XCI+eyogc3RhdHVzLmxhYmVsICp9PC9vcHRpb24+XG4gICAgICAgICAgICAgIHslIGVuZCAlfVxuICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IGQtaW5saW5lXCIgY2xhc3M9XCJidG4tc3dpdGNoLXN0YXRlXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1yYW5kb21cIj48L2k+IHt7IGkxOG4oXCJzZXRcIikgfX1cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIHslIGVuZCAlfVxuICAgIC0tPiBcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IHsgbnRvcG5nX21hcF9tYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21hcC9udG9wbmdfdmlzX25ldHdvcmtfdXRpbHMnO1xuY29uc3QgY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50ID0gXCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2aWV3JykgfHwgJ2NlbnRyYWxpdHknO1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYodGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgc2VydmljZV90YWJsZV90YWI6IG51bGwsXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5zdGFuZGFyZF92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnc3RhbmRhcmQnKSxcbiAgICAgICAgICBpZDogJ3N0YW5kYXJkJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5jZW50cmFsaXR5X3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdjZW50cmFsaXR5JyksXG4gICAgICAgICAgaWQ6ICdjZW50cmFsaXR5J1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uczogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuICAgICAgY29uc3QgcmVsb2FkID0gdGhpcy5yZWxvYWRfdGFibGVcbiAgICAgIGNvbnN0IGNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmZcbiAgICAgIGNvbnN0IHRvZ2dsZV9hbGxvd2VkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX2RlbmllZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMV0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzJdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIGRhdGE7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdHVzID0gc2VydmljZS5hY2NlcHRhbmNlXG4gICAgICBjb25zdCBhbGxvd2VkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMF0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV9hbGxvd2VkX3N0YXRlIH07XG4gICAgICBjb25zdCBkZW5pZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2RlbmllZF9zdGF0ZSB9O1xuICAgICAgY29uc3QgdW5kZWNpZGVkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0gZGlzYWJsZWQnLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgfTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICAgIGNhc2UgMDogLyogQWxsb3dlZCAqLyAgIHsgYWxsb3dlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSc7IGJyZWFrOyB9XG4gICAgICAgIGNhc2UgMTogLyogRGVuaWVkICovICAgIHsgZGVuaWVkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAyOiAvKiBVbmRlY2lkZWQgKi8geyB1bmRlY2lkZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUgZGlzYWJsZWQnOyBicmVhazsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW3VuZGVjaWRlZEJ1dHRvbiwgYWxsb3dlZEJ1dHRvbiwgZGVuaWVkQnV0dG9uXSk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9zZXJ2aWNlXyR7dGhpcy5zZXJ2aWNlX3RhYmxlX3RhYn1gXTtcbiAgICB9LFxuICAgIHN3aXRjaF90b19zdGFuZGFyZDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbmV3X3VybCA9IHRoaXMudXJsX3BhcmFtc1xuICAgICAgbmV3X3VybFsndmlldyddID0gJ3N0YW5kYXJkJ1xuICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgLCB1cmxfcGFyYW1zKVxuICAgIH0sXG4gICAgc3dpdGNoX3RvX2NlbnRyYWxpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG5ld191cmwgPSB0aGlzLnVybF9wYXJhbXNcbiAgICAgIG5ld191cmxbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5J1xuICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgLCB1cmxfcGFyYW1zKVxuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDA7XG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ3N0YW5kYXJkJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zWyd2aWV3J10gPSBEYXRhdGFibGVWdWUuc2VydmljZV90YWJsZV90YWI7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLnZhbHVlIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5jbGllbnRcIiksIG5hbWU6ICdjbGllbnQnLCBkYXRhOiAnY2xpZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zZXJ2ZXJcIiksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5wb3J0XCIpLCBuYW1lOiAncG9ydCcsIGRhdGE6ICdwb3J0JywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucHJvdG9jb2xcIiksIG5hbWU6ICdsN3Byb3RvJywgZGF0YTogJ3Byb3RvY29sJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5maXJzdF9zZWVuXCIpLCBuYW1lOiAnZmlyc3Rfc2VlbicsIGRhdGE6ICdmaXJzdF9zZWVuJywgdmlzaWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5pbmZvXCIpLCBuYW1lOiAnaW5mbycsIGRhdGE6ICdpbmZvJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA1IH0sXG4gIF07XG5cbiAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSA2IC8qIE51bSBVc2VzICovXG5cbiAgaWYoRGF0YXRhYmxlVnVlLmlzX2FkbWluKSB7XG4gICAgY29sdW1ucy5wdXNoKHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnN0YXR1c1wiKSwgbmFtZTogJ3NlcnZpY2VfYWNjZXB0YW5jZScsIGRhdGE6ICdzZXJ2aWNlX2FjY2VwdGFuY2UnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgc2VydmljZSkgPT4ge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9ucyhkYXRhLCB0eXBlLCBzZXJ2aWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBcbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS50b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5yYW5rXCIpLCBuYW1lOiAncmFuaycsIGRhdGE6ICdyYW5rJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDIgLyogUmFuayAqL1xuICB0YWJsZV9jb25maWcub3JkZXIgPSBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfc2VydmljZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgXG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cInNlcnZpY2VfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJzZXJ2aWNlX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJzZXJ2aWNlX3RhYmxlX3RhYiA9PSAnc3RhbmRhcmQnXCIgcmVmPVwidGFibGVfc2VydmljZV9zdGFuZGFyZFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cInNlcnZpY2VfdGFibGVfdGFiID09ICdjZW50cmFsaXR5J1wiIHJlZj1cInRhYmxlX3NlcnZpY2VfY2VudHJhbGl0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG48IS0tXG4gICAgICAgIHslIGlmIGlzX2FkbWluIHRoZW4gJX1cbiAgICAgICAgICA8Zm9ybSBjbGFzcz1cImQtaW5saW5lXCIgaWQ9J3N3aXRjaC1zdGF0ZS1mb3JtJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgZC1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsPnsqIGkxOG4oXCJtYXBfcGFnZS5zZXRfc3RhdGVcIiwge2xhYmVsID0gXCI8c3BhbiBjbGFzcz0nY291bnQnPjwvc3Bhbj5cIn0pICp9PC9sYWJlbD5cbiAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwibmV3X3N0YXRlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBkLWlubGluZVwiIHN0eWxlPVwid2lkdGg6IDE2cmVtXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgeyUgZm9yIF8sIHN0YXR1cyBpbiBwYWlyc0J5RmllbGQobWFwLmZpbHRlcnMuc2VydmljZV9zdGF0dXNfZmlsdGVycywgbGFiZWwsIGFzY19pbnNlbnNpdGl2ZSkgZG8gJX1cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwie3sgc3RhdHVzLmlkIH19XCI+eyogc3RhdHVzLmxhYmVsICp9PC9vcHRpb24+XG4gICAgICAgICAgICAgIHslIGVuZCAlfVxuICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IGQtaW5saW5lXCIgY2xhc3M9XCJidG4tc3dpdGNoLXN0YXRlXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1yYW5kb21cIj48L2k+IHt7IGkxOG4oXCJzZXRcIikgfX1cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIHslIGVuZCAlfVxuICAgIC0tPiBcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IHsgbnRvcG5nX21hcF9tYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21hcC9udG9wbmdfdmlzX25ldHdvcmtfdXRpbHMnO1xuY29uc3QgY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50ID0gXCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2aWV3JykgfHwgJ2NlbnRyYWxpdHknO1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYodGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgc2VydmljZV90YWJsZV90YWI6IG51bGwsXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5zdGFuZGFyZF92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnc3RhbmRhcmQnKSxcbiAgICAgICAgICBpZDogJ3N0YW5kYXJkJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5jZW50cmFsaXR5X3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdjZW50cmFsaXR5JyksXG4gICAgICAgICAgaWQ6ICdjZW50cmFsaXR5J1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uczogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuICAgICAgY29uc3QgcmVsb2FkID0gdGhpcy5yZWxvYWRfdGFibGVcbiAgICAgIGNvbnN0IGNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmZcbiAgICAgIGNvbnN0IHRvZ2dsZV9hbGxvd2VkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX2RlbmllZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMV0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzJdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIGRhdGE7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdHVzID0gc2VydmljZS5hY2NlcHRhbmNlXG4gICAgICBjb25zdCBhbGxvd2VkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMF0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV9hbGxvd2VkX3N0YXRlIH07XG4gICAgICBjb25zdCBkZW5pZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2RlbmllZF9zdGF0ZSB9O1xuICAgICAgY29uc3QgdW5kZWNpZGVkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0gZGlzYWJsZWQnLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgfTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICAgIGNhc2UgMDogLyogQWxsb3dlZCAqLyAgIHsgYWxsb3dlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSc7IGJyZWFrOyB9XG4gICAgICAgIGNhc2UgMTogLyogRGVuaWVkICovICAgIHsgZGVuaWVkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAyOiAvKiBVbmRlY2lkZWQgKi8geyB1bmRlY2lkZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUgZGlzYWJsZWQnOyBicmVhazsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW3VuZGVjaWRlZEJ1dHRvbiwgYWxsb3dlZEJ1dHRvbiwgZGVuaWVkQnV0dG9uXSk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9zZXJ2aWNlXyR7dGhpcy5zZXJ2aWNlX3RhYmxlX3RhYn1gXTtcbiAgICB9LFxuICAgIHN3aXRjaF90b19zdGFuZGFyZDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbmV3X3VybCA9IHRoaXMudXJsX3BhcmFtc1xuICAgICAgbmV3X3VybFsndmlldyddID0gJ3N0YW5kYXJkJ1xuICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgLCB1cmxfcGFyYW1zKVxuICAgIH0sXG4gICAgc3dpdGNoX3RvX2NlbnRyYWxpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG5ld191cmwgPSB0aGlzLnVybF9wYXJhbXNcbiAgICAgIG5ld191cmxbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5J1xuICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgLCB1cmxfcGFyYW1zKVxuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDA7XG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ3N0YW5kYXJkJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zWyd2aWV3J10gPSBEYXRhdGFibGVWdWUuc2VydmljZV90YWJsZV90YWI7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLnZhbHVlIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5jbGllbnRcIiksIG5hbWU6ICdjbGllbnQnLCBkYXRhOiAnY2xpZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zZXJ2ZXJcIiksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5wb3J0XCIpLCBuYW1lOiAncG9ydCcsIGRhdGE6ICdwb3J0JywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucHJvdG9jb2xcIiksIG5hbWU6ICdsN3Byb3RvJywgZGF0YTogJ3Byb3RvY29sJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5maXJzdF9zZWVuXCIpLCBuYW1lOiAnZmlyc3Rfc2VlbicsIGRhdGE6ICdmaXJzdF9zZWVuJywgdmlzaWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5pbmZvXCIpLCBuYW1lOiAnaW5mbycsIGRhdGE6ICdpbmZvJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA1IH0sXG4gIF07XG5cbiAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSA2IC8qIE51bSBVc2VzICovXG5cbiAgaWYoRGF0YXRhYmxlVnVlLmlzX2FkbWluKSB7XG4gICAgY29sdW1ucy5wdXNoKHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnN0YXR1c1wiKSwgbmFtZTogJ3NlcnZpY2VfYWNjZXB0YW5jZScsIGRhdGE6ICdzZXJ2aWNlX2FjY2VwdGFuY2UnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgc2VydmljZSkgPT4ge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9ucyhkYXRhLCB0eXBlLCBzZXJ2aWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBcbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS50b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5yYW5rXCIpLCBuYW1lOiAncmFuaycsIGRhdGE6ICdyYW5rJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDIgLyogUmFuayAqL1xuICB0YWJsZV9jb25maWcub3JkZXIgPSBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IGlkPVwiZW1wdHktbWFwLW1lc3NhZ2VcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIiBoaWRkZW4+XG4gIHt7IGVtcHR5X21lc3NhZ2UgfX1cbjwvZGl2PlxuPGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciByZXNpemFibGUteS1jb250YWluZXJcIiBzdHlsZT1cIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDYwdmg7XCIgOmlkPW1hcF9pZD5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX21hcF9tYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21hcC9udG9wbmdfdmlzX25ldHdvcmtfdXRpbHMnO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcblxuY29uc3QgTUlOX1NDQUxFID0gMC4xNTtcbmNvbnN0IGRhdGFSZXF1ZXN0ID0geyBcbiAgaWZpZDogcHJvcHMudXJsX3BhcmFtcy5pZmlkLCBcbiAgYWN0aW9uOiAnbG9hZF9ncmFwaCcsIFxuICBtYXA6IHByb3BzLnVybF9wYXJhbXMubWFwX2lkXG59O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgZW1wdHlfbWVzc2FnZTogU3RyaW5nLFxuICBldmVudF9saXN0ZW5lcnM6IE9iamVjdCxcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIHVybDogU3RyaW5nLFxuICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIG1hcF9pZDogU3RyaW5nLFxufSk7XG5cbmxldCBuZXR3b3JrID0gbnVsbDtcbmxldCBub2Rlc19kYXRhc2V0ID0ge307XG5sZXQgZWRnZXNfZGF0YXNldCA9IHt9O1xubGV0IGNvbnRhaW5lciA9IG51bGw7XG5sZXQgbWF4X2VudHJpZXMgPSBmYWxzZTtcbmxldCB1cGRhdGVfdmlld19zdGF0ZV9pZCA9IG51bGw7XG5sZXQgdXJsX3BhcmFtcyA9IHt9O1xubGV0IGlzX2Rlc3Ryb3llZCA9IGZhbHNlO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBsb2FkX3NjYWxlKCk7XG4gIHVybF9wYXJhbXMgPSBwcm9wcy51cmxfcGFyYW1zO1xuICBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcm9wcy5tYXBfaWQpO1xuICBcbiAgLy8gaWYgYW4gaG9zdCBoYXMgYmVlbiBkZWZpbmVkIGluc2lkZSB0aGUgVVJMIHF1ZXJ5IHRoZW4gYWRkIGl0IHRvIHRoZSByZXF1ZXN0XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChwcm9wcy51cmwsIHVybF9wYXJhbXMpOyBcbiAgYXdhaXQgJC5nZXQodXJsLCBkYXRhUmVxdWVzdCwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBjb25zdCB7bm9kZXMsIGVkZ2VzLCBtYXhfZW50cnlfcmVhY2hlZH0gPSByZXNwb25zZS5yc3A7XG4gICAgbWF4X2VudHJpZXMgPSBtYXhfZW50cnlfcmVhY2hlZDtcbiAgICBub2Rlc19kYXRhc2V0ID0gbmV3IHZpcy5EYXRhU2V0KG5vZGVzKTtcbiAgICBlZGdlc19kYXRhc2V0ID0gbmV3IHZpcy5EYXRhU2V0KGVkZ2VzKTtcbiAgICBjb25zdCBkYXRhc2V0cyA9IHtub2Rlczogbm9kZXNfZGF0YXNldCwgZWRnZXM6IGVkZ2VzX2RhdGFzZXR9O1xuICAgIGVtcHR5X25ldHdvcmsoZGF0YXNldHMpO1xuICAgIG5ldHdvcmsgPSBuZXcgdmlzLk5ldHdvcmsoY29udGFpbmVyLCBkYXRhc2V0cywgbnRvcG5nX21hcF9tYW5hZ2VyLmdldF9kZWZhdWx0X29wdGlvbnMoKSk7XG4gICAgc2F2ZV90b3BvbG9neV92aWV3KCk7XG4gICAgc2V0X2V2ZW50X2xpc3RlbmVyKCk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCk7XG5cdH0pO1xufSlcblxub25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgaWYgKGlzX2Rlc3Ryb3llZCA9PSB0cnVlKSB7IHJldHVybjsgfVxuICBkZXN0cm95KCk7XG59KTtcblxuY29uc3QganVtcF90b19ob3N0ID0gKHBhcmFtcykgPT4ge1xuICBjb25zdCB0bXBIb3N0ID0gcGFyYW1zLmlkLnNwbGl0KCdAJylcbiAgdXJsX3BhcmFtc1snaG9zdCddID0gdG1wSG9zdFswXVxuICB1cmxfcGFyYW1zWyd2bGFuX2lkJ10gPSB0bXBIb3N0WzFdXG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnaG9zdCcsIHVybF9wYXJhbXNbJ2hvc3QnXSk7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbl9pZCcsIHVybF9wYXJhbXNbJ3ZsYW5faWQnXSk7XG4gIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgcGFyYW1zKVxuICByZWxvYWQoKTtcbn1cblxuY29uc3QgZW1wdHlfbmV0d29yayA9IChkYXRhc2V0cykgPT4ge1xuICBpZihkYXRhc2V0cy5ub2Rlcy5sZW5ndGggPT0gMCAmJiBkYXRhc2V0cy5lZGdlcy5sZW5ndGggPT0gMCkge1xuICAgICQoYCNlbXB0eS1tYXAtbWVzc2FnZWApLnJlbW92ZUF0dHIoJ2hpZGRlbicpO1xuICB9IGVsc2Uge1xuICAgICQoYCNlbXB0eS1tYXAtbWVzc2FnZWApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKTtcbiAgfVxufVxuXG5jb25zdCBsb2FkX3NjYWxlID0gKCkgPT4ge1xuICAvLyBsb2FkIG9sZCBzY2FsZSBmb3IgcmVzaXphYmxlIGNvbnRhaW5lcnNcbiAgY29uc3Qgb2xkU2NhbGUgPSBOdG9wVXRpbHMubG9hZEVsZW1lbnRTY2FsZSgkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkpXG5cbiAgaWYob2xkU2NhbGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHNjYWxlID0ge3dpZHRoOiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkud2lkdGgoKSwgaGVpZ2h0OiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkuaGVpZ2h0KCl9O1xuICAgIE50b3BVdGlscy5zYXZlRWxlbWVudFNjYWxlKCQodGhpcyksIHNjYWxlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkud2lkdGgob2xkU2NhbGUud2lkdGgpO1xuICAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkuaGVpZ2h0KG9sZFNjYWxlLmhlaWdodCk7XG4gICQoYC5yZXNpemFibGUteS1jb250YWluZXJgKS5vbignbW91c2V1cCcsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHNjYWxlID0ge3dpZHRoOiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkud2lkdGgoKSwgaGVpZ2h0OiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkuaGVpZ2h0KCl9O1xuICAgIE50b3BVdGlscy5zYXZlRWxlbWVudFNjYWxlKCQodGhpcyksIHNjYWxlKTtcbiAgfSk7XG5cbiAgJChgYnV0dG9uW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXWApLnRvb2x0aXAoKTtcbn1cblxuY29uc3Qgc2V0X2V2ZW50X2xpc3RlbmVyID0gKCkgPT4ge1xuICAvKiBEZWZhdWx0IGV2ZW50IGxpc3RlbmVycyAqL1xuICBuZXR3b3JrLm9uKCdob3ZlckVkZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAkKGAudmlzLXRvb2x0aXBgKS5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJylcbiAgfSk7XG4gIFxuICBuZXR3b3JrLm9uKFwiZG91YmxlQ2xpY2tcIiwgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGp1bXBfdG9faG9zdChub2Rlc19kYXRhc2V0LmdldChwYXJhbXMubm9kZXNbMF0pKVxuICB9KTtcblxuICBuZXR3b3JrLm9uKCd6b29tJywgZnVuY3Rpb24oZSkge1xuICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkID0gem9vbV9pbl9hbmRfc2F2ZV90b3BvbG9neSgpXG4gIH0pO1xuXG4gIG5ldHdvcmsub24oXCJkcmFnRW5kXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICBkcmFnKClcbiAgfSk7XG5cbiAgLyogR2l2ZW4gZXZlbnQgbGlzdGVuZXJzICovXG4gIGZvciAoY29uc3QgaXRlbSBpbiAocHJvcHMuZXZlbnRfbGlzdGVuZXJzIHx8IHt9KSkge1xuICAgIG5ldHdvcmsub24oaXRlbSwgcHJvcHMuZXZlbnRfbGlzdGVuZXJzW2l0ZW1dKTtcbiAgfVxufVxuXG5jb25zdCBzYXZlX3RvcG9sb2d5X3ZpZXcgPSAoKSA9PiB7XG4gIGlmKCFuZXR3b3JrKSByZXR1cm47XG4gIC8vIGdldCBhbGwgbm9kZXMgcG9zaXRpb25cbiAgY29uc3QgcG9zaXRpb25zID0gbmV0d29yay5nZXRQb3NpdGlvbnMobmV0d29yay5ib2R5LmRhdGEubm9kZXMubWFwKHggPT4geC5pZCkpO1xuXG4gIC8vIHNhdmUgdGhlIG5vZGVzIHBvc2l0aW9uLCB0aGUgbmV0d29yayBzY2FsZSBhbmQgdGhlIG5ldHdvcmsgdmlldyBwb3NpdGlvblxuICBjb25zdCBpbmZvID0ge1xuICAgIHBvc2l0aW9uczogcG9zaXRpb25zLFxuICAgIG5ldHdvcms6IHtcbiAgICAgIHNjYWxlOiBuZXR3b3JrLmdldFNjYWxlKCksXG4gICAgICBwb3NpdGlvbjogbmV0d29yay5nZXRWaWV3UG9zaXRpb24oKVxuICAgIH1cbiAgfTtcblxuICAkLnBvc3QocHJvcHMudXJsLCB7XG4gICAgLi4udXJsX3BhcmFtcyxcbiAgICAuLi57IFxuICAgICAgY3NyZjogcHJvcHMucGFnZV9jc3JmLFxuICAgICAgSlNPTjogSlNPTi5zdHJpbmdpZnkoaW5mbyksIFxuICAgICAgYWN0aW9uOiAnc2F2ZV92aWV3JyBcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB6b29tX2luX2FuZF9zYXZlX3RvcG9sb2d5ID0gKCkgPT4ge1xuICBpZiAobmV0d29yay5nZXRTY2FsZSgpIDw9IE1JTl9TQ0FMRSkge1xuICAgIG5ldHdvcmsubW92ZVRvKHtcbiAgICAgIHNjYWxlOiBNSU5fU0NBTEUgKyAwLjI1LFxuICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogMCB9LFxuICAgICAgYW5pbWF0aW9uOiB7IGR1cmF0aW9uOiAxMDAwLCBlYXNpbmdGdW5jdGlvbjogJ2Vhc2VJbk91dEN1YmljJyB9XG4gICAgfSk7XG4gIH1cblxuICBjbGVhclRpbWVvdXQodXBkYXRlX3ZpZXdfc3RhdGVfaWQpO1xuXG5cbiAgcmV0dXJuIHNldFRpbWVvdXQoc2F2ZV90b3BvbG9neV92aWV3KTtcbn1cblxuY29uc3QgYXV0b2xheW91dCA9ICgpID0+IHtcbiAgaWYgKG5ldHdvcmsgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgbmV0d29yayBpcyB1bmRlZmluZWQhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghKG5ldHdvcmsgaW5zdGFuY2VvZiB2aXMuTmV0d29yaykpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTm90IGEgdmlzLk5ldHdvcmsgaW5zdGFuY2UhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG5ldHdvcmsuc3RhYmlsaXplKCk7XG4gIHNldFRpbWVvdXQoKCkgPT4geyBzYXZlX3RvcG9sb2d5X3ZpZXcoKSB9LCAxMDAwKTtcbn1cblxuY29uc3QgZHJhZyA9ICgpID0+IHtcbiAgaWYgKHVwZGF0ZV92aWV3X3N0YXRlX2lkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHVwZGF0ZV92aWV3X3N0YXRlX2lkKTtcbiAgfVxuXG4gIHNhdmVfdG9wb2xvZ3lfdmlldygpO1xufVxuXG5jb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICBuZXR3b3JrLmRlc3Ryb3kodHJ1ZSk7XG4gIGlzX2Rlc3Ryb3llZCA9IHRydWVcbn1cblxuY29uc3QgaXNfbWF4X2VudHJ5X3JlYWNoZWQgPSAoKSA9PiB7XG4gIHJldHVybiBtYXhfZW50cmllcztcbn1cblxuY29uc3QgdXBkYXRlX3VybF9wYXJhbXMgPSAobmV3X3VybF9wYXJhbXMpID0+IHtcbiAgdXJsX3BhcmFtcyA9IG5ld191cmxfcGFyYW1zO1xufVxuXG5jb25zdCByZWxvYWQgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKHVybF9wYXJhbXMpXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChwcm9wcy51cmwsIHVybF9wYXJhbXMpOyBcbiAgYXdhaXQgJC5nZXQodXJsLCBkYXRhUmVxdWVzdCwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBjb25zdCB7bm9kZXMsIGVkZ2VzLCBtYXhfZW50cnlfcmVhY2hlZH0gPSByZXNwb25zZS5yc3A7XG4gICAgbWF4X2VudHJpZXMgPSBtYXhfZW50cnlfcmVhY2hlZDtcbiAgICBub2Rlc19kYXRhc2V0ID0gbmV3IHZpcy5EYXRhU2V0KG5vZGVzKTtcbiAgICBlZGdlc19kYXRhc2V0ID0gbmV3IHZpcy5EYXRhU2V0KGVkZ2VzKTtcbiAgICBjb25zdCBkYXRhc2V0cyA9IHsgbm9kZXM6IG5vZGVzX2RhdGFzZXQsIGVkZ2VzOiBlZGdlc19kYXRhc2V0IH1cbiAgICBlbXB0eV9uZXR3b3JrKGRhdGFzZXRzKTtcbiAgICBpZihuZXR3b3JrKVxuICAgICAgbmV0d29yay5zZXREYXRhKGRhdGFzZXRzKTtcbiAgICBcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVEKTtcblx0ICBzYXZlX3RvcG9sb2d5X3ZpZXcoKTtcbiAgfSk7XG59XG5cblxuZGVmaW5lRXhwb3NlKHsgcmVsb2FkLCBkZXN0cm95LCBpc19tYXhfZW50cnlfcmVhY2hlZCwgYXV0b2xheW91dCwgdXBkYXRlX3VybF9wYXJhbXMgfSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAge3tib2R5fX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXV0b2xheW91dF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2NvbmZpcm0nKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYXV0b2xheW91dCddKVxuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYm9keTogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBhdXRvbGF5b3V0XyA9ICgpID0+IHtcbiAgICBlbWl0KCdhdXRvbGF5b3V0Jyk7XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfc2VydmljZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaFxuICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJzZXJ2aWNlX21hcFwiXG4gICAgICAgICAgICA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIlxuICAgICAgICAgICAgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICAgICAgICAgIDp1cmw9XCJnZXRfdXJsXCJcbiAgICAgICAgICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgICAgICAgICA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwic2VydmljZV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgaWYodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbZmlsdGVyLmlkXSA9IGZpbHRlcjtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyX25hbWUsIGZpbHRlci5rZXkpO1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2ZpbHRlci5maWx0ZXJfbmFtZV0gPSBmaWx0ZXIua2V5O1xuICAgICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy5nZXRfbWFwKCksIG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCwgKGZpbHRlcikgPT4ge1xuICAgICAgaWYobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKVxuICAgIFxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcbiAgICBcbiAgICBzZXRUaW1lb3V0KCgpID0+IE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKSwgMCk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICB1cGRhdGVfdmlld19zdGF0ZV9pZDogbnVsbCxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBkb3dubG9hZF91cmw6IG51bGwsXG4gICAgICBmaWx0ZXJfbGlzdDogW10sXG4gICAgICBhY3RpdmVfZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgZXZlbnRfbGlzdGVuZXJzOiB7fSxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBub19zZXJ2aWNlc19tZXNzYWdlOiBpMThuKCdtYXBfcGFnZS5ub19zZXJ2aWNlcycpLFxuICAgICAgbWF4X2VudHJ5X3RpdGxlOiBpMThuKCdtYXhfZW50cmllc19yZWFjaGVkJyksXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2BzZXJ2aWNlX21hcGBdO1xuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB1cGRhdGVfYW5kX3JlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LCBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IobGV0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSkpIHtcbiAgICAgIHZhbHVlWydmaWx0ZXJfbmFtZSddID0gZmlsdGVyX25hbWVcbiAgICAgIGlmKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpIFxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSkgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2hcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwic2VydmljZV9tYXBcIlxuICAgICAgICAgICAgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCJcbiAgICAgICAgICAgIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgICAgICAgICA6dXJsPVwiZ2V0X3VybFwiXG4gICAgICAgICAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgICAgICAgICAgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ25ldHdvcmstbWFwJzogTmV0d29ya01hcCxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ21vZGFsLWF1dG9sYXlvdXQtY29uZmlybSc6IE1vZGFsQXV0b2xheW91dENvbmZpcm0sXG4gICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIGlmKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ZpbHRlci5pZF0gPSBmaWx0ZXI7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvL3RoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcbiAgICBcbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG4gICAgXG4gICAgc2V0VGltZW91dCgoKSA9PiBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCksIDApO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgc2VydmljZV9tYXBgXTtcbiAgICB9LFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVybF9wYXJhbXMpXG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBhdXRvbGF5b3V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgc2hvd19hdXRvbGF5b3V0X2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSwgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZihhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpIFxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS4kcHJvcHMudXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBQZXJpb2RpY2l0eSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfcGVyaW9kaWNpdHlcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2hcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwicGVyaW9kaWNpdHlfbWFwXCJcbiAgICAgICAgICAgIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiXG4gICAgICAgICAgICA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgICAgICAgICAgOnVybD1cImdldF91cmxcIlxuICAgICAgICAgICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICAgICAgICAgIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJwZXJpb2RpY2l0eV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy51cGRhdGVkX3VybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy51cmxfcGFyYW1zXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cGRhdGVkX3VybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcbiAgICBpZih0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgJiYgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICE9ICcnKSB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfVxuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfcGVyaW9kaWNpdHlfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuXHQgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbZmlsdGVyLmlkXSA9IGZpbHRlcjtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyX25hbWUsIGZpbHRlci5rZXkpO1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2ZpbHRlci5maWx0ZXJfbmFtZV0gPSBmaWx0ZXIua2V5O1xuICAgICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy5nZXRfbWFwKCksIG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCwgKGZpbHRlcikgPT4ge1xuICAgICAgaWYobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uKGUpe1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuICAgIFxuICAgIHNldFRpbWVvdXQoKCkgPT4gTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpLCAwKTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIHVwZGF0ZWRfdXJsX3BhcmFtczoge30sXG4gICAgICBmaWx0ZXJfbGlzdDogW10sXG4gICAgICBhY3RpdmVfZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgZXZlbnRfbGlzdGVuZXJzOiB7fSxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBub19zZXJ2aWNlc19tZXNzYWdlOiBpMThuKCdtYXBfcGFnZS5ub19zZXJ2aWNlcycpLFxuICAgICAgbWF4X2VudHJ5X3RpdGxlOiBpMThuKCdtYXhfZW50cmllc19yZWFjaGVkJyksXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2BwZXJpb2RpY2l0eV9tYXBgXVxuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICB1cGRhdGVfYW5kX3JlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXBkYXRlZF91cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuYXV0b2xheW91dCgpO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2F1dG9sYXlvdXRcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cGRhdGVkX3VybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cGRhdGVkX3VybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZihhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpIFxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS51cGRhdGVkX3VybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX3BlcmlvZGljaXR5XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cInBlcmlvZGljaXR5X21hcFwiXG4gICAgICAgICAgICA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIlxuICAgICAgICAgICAgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICAgICAgICAgIDp1cmw9XCJnZXRfdXJsXCJcbiAgICAgICAgICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgICAgICAgICA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwicGVyaW9kaWNpdHlfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ25ldHdvcmstbWFwJzogTmV0d29ya01hcCxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ21vZGFsLWF1dG9sYXlvdXQtY29uZmlybSc6IE1vZGFsQXV0b2xheW91dENvbmZpcm0sXG4gICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMudXBkYXRlZF91cmxfcGFyYW1zID0gdGhpcy4kcHJvcHMudXJsX3BhcmFtc1xuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXBkYXRlZF91cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpXG4gICAgaWYodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcblx0ICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ZpbHRlci5pZF0gPSBmaWx0ZXI7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcbiAgICBcbiAgICBzZXRUaW1lb3V0KCgpID0+IE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKSwgMCk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICB1cGRhdGVfdmlld19zdGF0ZV9pZDogbnVsbCxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBkb3dubG9hZF91cmw6IG51bGwsXG4gICAgICB1cGRhdGVkX3VybF9wYXJhbXM6IHt9LFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgcGVyaW9kaWNpdHlfbWFwYF1cbiAgICB9LFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfSAgICAgIFxuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvcihsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcikgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUudXBkYXRlZF91cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYEFzc2V0IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9hc3NldFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaFxuICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJhc3NldF9tYXBcIlxuICAgICAgICAgICAgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCJcbiAgICAgICAgICAgIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgICAgICAgICA6dXJsPVwiZ2V0X3VybFwiXG4gICAgICAgICAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgICAgICAgICAgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEF1dG9sYXlvdXRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ25ldHdvcmstbWFwJzogTmV0d29ya01hcCxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ21vZGFsLWF1dG9sYXlvdXQtY29uZmlybSc6IE1vZGFsQXV0b2xheW91dENvbmZpcm0sXG4gICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIGlmKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcblx0ICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ZpbHRlci5pZF0gPSBmaWx0ZXI7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG4gICAgXG4gICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgYXNzZXRfbWFwYF07XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICByZXR1cm4gbWFwLmlzX21heF9lbnRyeV9yZWFjaGVkKCk7XG4gICAgfSxcbiAgICByZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuYXV0b2xheW91dCgpO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2F1dG9sYXlvdXRcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZihhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpIFxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS4kcHJvcHMudXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBBc3NldCBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2hcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwiYXNzZXRfbWFwXCJcbiAgICAgICAgICAgIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiXG4gICAgICAgICAgICA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgICAgICAgICAgOnVybD1cImdldF91cmxcIlxuICAgICAgICAgICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICAgICAgICAgIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJhc3NldF9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9maWx0ZXJfZXZlbnQgPSBcImNoYW5nZV9maWx0ZXJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZih0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgJiYgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICE9ICcnKSB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfVxuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG5cdCAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtmaWx0ZXIuaWRdID0gZmlsdGVyO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZihtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uKGUpe1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuICAgIFxuICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYGFzc2V0X21hcGBdO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB1cGRhdGVfYW5kX3JlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgICAgfSAgICAgIFxuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvcihsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcikgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUuJHByb3BzLnVybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjx0ZW1wbGF0ZT5cbjxuYXYgY2xhc3M9XCJuYXZiYXIgbmF2YmFyLXNoYWRvdyBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBiZy1saWdodCBweC0yIG1iLTJcIj5cbiAgPHNwYW4gY2xhc3M9XCJtZS0xIHRleHQtbm93cmFwXCIgc3R5bGU9XCJmb250LXNpemU6IDEuMXJlbTtcIj5cbiAgICA8aSA6Y2xhc3M9XCJtYWluX3RpdGxlLmljb25cIj48L2k+XG4gICAgPGEgdi1pZj1cIm1haW5fdGl0bGUuaHJlZlwiIDpocmVmPVwibWFpbl90aXRsZS5ocmVmXCIgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvYT4gIFxuICAgIDxzcGFuIHYtZWxzZSA6dGl0bGU9XCJtYWluX3RpdGxlLnRpdGxlXCI+IHt7bWFpbl90aXRsZS5sYWJlbH19PC9zcGFuPiAgICBcbiAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHNlY29uZGFyeV90aXRsZV9saXN0XCI+IC8gXG4gICAgICA8YSB2LWlmPVwiaXRlbS5ocmVmXCIgOmhyZWY9XCJpdGVtLmhyZWZcIiA6dGl0bGU9XCJpdGVtLnRpdGxlXCI+e3tpdGVtLmxhYmVsfX08L2E+ICBcbiAgICAgIDxzcGFuIHYtZWxzZSA6dGl0bGU9XCJpdGVtLnRpdGxlXCI+e3tpdGVtLmxhYmVsfX08L3NwYW4+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9zcGFuPlxuICA8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWQgbXMtMSBkLW5vbmUgZC1sZy1pbmxpbmUgZC1tZC1ub25lXCI+fDwvc3Bhbj5cbiAgPGJ1dHRvbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgIDxzcGFuIGNsYXNzPVwibmF2YmFyLXRvZ2dsZXItaWNvblwiPjwvc3Bhbj5cbiAgPC9idXR0b24+XG4gIDxkaXYgY2xhc3M9XCJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2Ugc2Nyb2xsLXhcIiBpZD1cIm5hdmJhck5hdlwiPlxuICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXZcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gaXRlbXNfdGFibGVcIj5cblx0PHRlbXBsYXRlIHYtaWY9XCJpdGVtLmFjdGl2ZVwiPlxuXHQgIDxsaSAgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgOmNsYXNzPVwieyAnYWN0aXZlJzogaXRlbS5hY3RpdmUgfVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cblx0ICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGI+PGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgICAgPC9iPlxuXHQgIDwvbGk+XG5cdDwvdGVtcGxhdGU+XG5cdDx0ZW1wbGF0ZSB2LWVsc2U+XG5cdCAgPGEgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgaHJlZj1cIiNcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG5cdCAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICA8L2E+XG5cdDwvdGVtcGxhdGU+XG5cdFxuXHRcbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L3VsPlxuICAgICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdiBtcy1hdXRvXCI+XG4gICAgICAgIDxhIGhyZWY9XCJqYXZhc2NyaXB0Omhpc3RvcnkuYmFjaygpXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtYXJyb3ctbGVmdFwiPjwvaT5cblx0PC9hPlxuICAgICAgICA8YSB0YXJnZXQ9XCJfbmV3dGFiXCIgOmhyZWY9XCJoZWxwX2xpbmtcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rIHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1xdWVzdGlvbi1jaXJjbGVcIj48L2k+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIDwvbmF2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdG1haW5fdGl0bGU6IE9iamVjdCxcbiAgc2Vjb25kYXJ5X3RpdGxlX2xpc3Q6IEFycmF5LFxuXHRoZWxwX2xpbms6IFN0cmluZyxcblx0aXRlbXNfdGFibGU6IEFycmF5LFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImNsaWNrX2l0ZW1cIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICAvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48bmF2IGNsYXNzPVwibmF2YmFyIG5hdmJhci1zaGFkb3cgbmF2YmFyLWV4cGFuZC1sZyBuYXZiYXItbGlnaHQgYmctbGlnaHQgcHgtMiBtYi0yXCI+XG4gIDxzcGFuIGNsYXNzPVwibWUtMSB0ZXh0LW5vd3JhcFwiIHN0eWxlPVwiZm9udC1zaXplOiAxLjFyZW07XCI+XG4gICAgPGkgOmNsYXNzPVwibWFpbl90aXRsZS5pY29uXCI+PC9pPlxuICAgIDxhIHYtaWY9XCJtYWluX3RpdGxlLmhyZWZcIiA6aHJlZj1cIm1haW5fdGl0bGUuaHJlZlwiIDp0aXRsZT1cIm1haW5fdGl0bGUudGl0bGVcIj4ge3ttYWluX3RpdGxlLmxhYmVsfX08L2E+ICBcbiAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvc3Bhbj4gICAgXG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBzZWNvbmRhcnlfdGl0bGVfbGlzdFwiPiAvIFxuICAgICAgPGEgdi1pZj1cIml0ZW0uaHJlZlwiIDpocmVmPVwiaXRlbS5ocmVmXCIgOnRpdGxlPVwiaXRlbS50aXRsZVwiPnt7aXRlbS5sYWJlbH19PC9hPiAgXG4gICAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwiaXRlbS50aXRsZVwiPnt7aXRlbS5sYWJlbH19PC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvc3Bhbj5cbiAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkIG1zLTEgZC1ub25lIGQtbGctaW5saW5lIGQtbWQtbm9uZVwiPnw8L3NwYW4+XG4gIDxidXR0b24gY2xhc3M9XCJuYXZiYXItdG9nZ2xlclwiIHR5cGU9XCJidXR0b25cIj5cbiAgICA8c3BhbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyLWljb25cIj48L3NwYW4+XG4gIDwvYnV0dG9uPlxuICA8ZGl2IGNsYXNzPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIHNjcm9sbC14XCIgaWQ9XCJuYXZiYXJOYXZcIj5cbiAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2XCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGl0ZW1zX3RhYmxlXCI+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbS5hY3RpdmVcIj5cblx0ICA8bGkgIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IGl0ZW0uYWN0aXZlIH1cIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG5cdCAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxiPjxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICAgIDwvYj5cblx0ICA8L2xpPlxuXHQ8L3RlbXBsYXRlPlxuXHQ8dGVtcGxhdGUgdi1lbHNlPlxuXHQgIDxhIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuXHQgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgPC9hPlxuXHQ8L3RlbXBsYXRlPlxuXHRcblx0XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC91bD5cbiAgICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgbXMtYXV0b1wiPlxuICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWxlZnRcIj48L2k+XG5cdDwvYT5cbiAgICAgICAgPGEgdGFyZ2V0PVwiX25ld3RhYlwiIDpocmVmPVwiaGVscF9saW5rXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICA8L2E+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICA8L25hdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRtYWluX3RpdGxlOiBPYmplY3QsXG4gIHNlY29uZGFyeV90aXRsZV9saXN0OiBBcnJheSxcblx0aGVscF9saW5rOiBTdHJpbmcsXG5cdGl0ZW1zX3RhYmxlOiBBcnJheSxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIHJvd1wiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj57e2JvZHl9fTwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTdcIj5cbiAgICAgICAgPHRleHRhcmVhIG5hbWU9XCJpdGVtcy1saXN0XCIgaWQ9XCJpdGVtc2xpc3QtdGV4dGFyZWFcIiBjbGFzcz1cInctMTAwIGZvcm0tY29udHJvbFwiIHJvd3M9XCI2XCIgdi1tb2RlbD1cImlucHV0X21hY19saXN0XCI+PC90ZXh0YXJlYT5cbiAgICAgICAgICA8c21hbGw+e3tsaXN0X25vdGVzfX08L3NtYWxsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW52YWxpZC1mZWVkYmFja1wiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00IHB0LTJcIj57e19pMThuKCdlZGl0X2NoZWNrLnRyaWdnZXJfZGV2aWNlX2Rpc2Nvbm5lY3RlZF9hbGVydCcpfX08L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tc3dpdGNoIGNvbC1zbS03IHB0LTIgcHMtM1wiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IG1zLTBcIiB2LW1vZGVsPVwiaW5wdXRfdHJpZ2dlcl9hbGVydHNcIj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHNtYWxsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj57e19pMThuKCdlZGl0X2NoZWNrLnRyaWdnZXJfZGV2aWNlX2Rpc2Nvbm5lY3RlZF9hbGVydF9kZXNjcicpfX08L3NtYWxsPlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICB7e19pMThuKCdob3N0X2RldGFpbHMubm90ZXMnKX19OlxuICAgIHt7Zm9vdGVyfX1cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKCdhZGQnKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IGlucHV0X21hY19saXN0ID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkJ10pXG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBib2R5OiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBmb290ZXI6IFN0cmluZyxcbiAgICBsaXN0X25vdGVzOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICBpbnB1dF9tYWNfbGlzdC52YWx1ZSA9IFwiXCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgYWRkXyA9ICgpID0+IHtcbiAgICBlbWl0KCdhZGQnLCB7IG1hY19saXN0OiBpbnB1dF9tYWNfbGlzdC52YWx1ZSwgdHJpZ2dlcl9hbGVydHM6IGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlIH0pO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj57e19pMThuKCdlZGl0X2NoZWNrLmRldmljZV9hbGlhcycpfX08L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTdcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiY3VzdG9tX25hbWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHBsYWNlaG9sZGVyPVwie3tfaTE4bignY3VzdG9tX25hbWUnKX19XCIgdi1tb2RlbD1cImlucHV0X21hY19hZGRyZXNzX25hbWVcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3tfaTE4bignZWRpdF9jaGVjay5kZXZpY2Vfc3RhdHVzJyl9fTwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tN1wiPlxuICAgICAgICAgIDxzZWxlY3QgbmFtZT1cImRldmljZV9zdGF0dXNcIiBjbGFzcz1cImZvcm0tc2VsZWN0XCIgdi1tb2RlbD1cImlucHV0X2RldmljZV9zdGF0dXNcIj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhbGxvd2VkXCI+e3tfaTE4bignYWxsb3dlZCcpfX08L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkZW5pZWRcIj57e19pMThuKCdkZW5pZWQnKX19PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNCBwdC0yXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnQnKX19PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tc3dpdGNoIGNvbC1zbS03IHB0LTIgcHMtM1wiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgbXMtMFwiIHYtbW9kZWw9XCJpbnB1dF90cmlnZ2VyX2FsZXJ0c1wiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj57e19pMThuKCdlZGl0X2NoZWNrLnRyaWdnZXJfZGV2aWNlX2Rpc2Nvbm5lY3RlZF9hbGVydF9kZXNjcicpfX08L3NtYWxsPlxuICAgICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImVkaXRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKCdlZGl0Jyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBpbnB1dF9tYWNfYWRkcmVzc19uYW1lID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfZGV2aWNlX3N0YXR1cyA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3RyaWdnZXJfYWxlcnRzID0gcmVmKFwiXCIpO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2VkaXQnXSlcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHRpdGxlOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgICBpbnB1dF9kZXZpY2Vfc3RhdHVzLnZhbHVlID0gcm93LnN0YXR1cztcbiAgICBpbnB1dF9tYWNfYWRkcmVzc19uYW1lLnZhbHVlID0gcm93Lm1hY19hZGRyZXNzX2xhYmVsLmxhYmVsO1xuICAgIGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlID0gcm93LnRyaWdnZXJfYWxlcnQgfHwgZmFsc2U7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gICAgZW1pdCgnZWRpdCcsIHsgbWFjX2FsaWFzOiBpbnB1dF9tYWNfYWRkcmVzc19uYW1lLnZhbHVlLCBtYWNfc3RhdHVzOiBpbnB1dF9kZXZpY2Vfc3RhdHVzLnZhbHVlLCB0cmlnZ2VyX2FsZXJ0czogaW5wdXRfdHJpZ2dlcl9hbGVydHMudmFsdWUgfSk7XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxkaXYgaWQ9XCJuYXZiYXJcIj5cbjxwYWdlLW5hdmJhclxuXHRpZD1cInBhZ2VfbmF2YmFyXCJcblx0Om1haW5fdGl0bGU9XCJuYXZiYXJfY29udGV4dC5tYWluX3RpdGxlXCJcblx0OmJhc2VfdXJsPVwibmF2YmFyX2NvbnRleHQuYmFzZV91cmxcIlxuXHQ6aGVscF9saW5rPVwibmF2YmFyX2NvbnRleHQuaGVscF9saW5rXCJcblx0Oml0ZW1zX3RhYmxlPVwibmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGVcIlxuXHRAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbjwvcGFnZS1uYXZiYXI+XG48L2Rpdj5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGlkPVwiZGV2aWNlcy1sZWFybmluZy1zdGF0dXNcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIiBoaWRkZW4+XG4gICAgICAgICAge3sgbGVhcm5pbmdfbWVzc2FnZSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2RldmljZXNfdnVlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9jb25maXJtXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfcm93XCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgICAgICAgICA8bW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24gcmVmPVwibW9kYWxfYWRkX2RldmljZVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9hZGRcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2FkZFwiXG4gICAgICAgICAgICA6Zm9vdGVyPVwiZm9vdGVyX2FkZFwiXG4gICAgICAgICAgICA6bGlzdF9ub3Rlcz1cImxpc3Rfbm90ZXNfYWRkXCJcbiAgICAgICAgICAgIEBhZGQ9XCJhZGRfZGV2aWNlXCI+XG4gICAgICAgICAgPC9tb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbj5cbiAgICAgICAgICA8bW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uIHJlZj1cIm1vZGFsX2VkaXRfZGV2aWNlXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2VkaXRcIlxuICAgICAgICAgICAgQGVkaXQ9XCJlZGl0X3Jvd1wiPlxuICAgICAgICAgIDwvbW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uPlxuICAgICAgICAgICAgXG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9kZXZpY2VzX2V4Y2x1c2lvblwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXMuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXMuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlcy5lbmFibGVfc2VhcmNoXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsLWRldmljZXMnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj5cbiAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJlZGl0X2NoZWNrLmRlbGV0ZV9hbGxfZGV2aWNlX2V4Y2x1c2lvbnNcIikgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VOYXZiYXIgfSBmcm9tIFwiLi9wYWdlLW5hdmJhci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGREZXZpY2VFeGNsdXNpb24gfSBmcm9tIFwiLi9tb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uIH0gZnJvbSBcIi4vbW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgICAgICAgJ3BhZ2UtbmF2YmFyJzogUGFnZU5hdmJhcixcdCAgICAgIFxuICAgICAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgICAgICdtb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbic6IE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uLFxuICAgICAgICAnbW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uJzogTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0cGFnZV9jc3JmOiBTdHJpbmcsXG5cdGlzX2NsaWNraG91c2VfZW5hYmxlZDogQm9vbGVhbixcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcblx0c3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcbiAgICAgIHRoaXMubGVhcm5pbmdfc3RhdHVzKCk7XG4gICAgICAkKFwiI2J0bi1kZWxldGUtYWxsLWRldmljZXNcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgIH0sICAgIFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGNvbmZpZ19kZXZpY2VzOiBudWxsLFxuICAgICAgICAgICAgbmF2YmFyX2NvbnRleHQ6IHtcblx0XHRtYWluX3RpdGxlOiB7XG4gICAgICBsYWJlbDogaTE4bihcImVkaXRfY2hlY2suZGV2aWNlX2V4Y2x1c2lvbl9saXN0XCIpLFxuICAgICAgaWNvbjogXCJmYXMgZmEtYmVsbC1zbGFzaFwiLFxuICAgIH0sXG5cdFx0YmFzZV91cmw6IFwiI1wiLFxuXHRcdC8vIGhlbHBfbGluazogXCJodHRwczovL3d3dy5udG9wLm9yZy9ndWlkZXMvbnRvcG5nL3dlYl9ndWkvY2hlY2tzLmh0bWxcIixcblx0XHRpdGVtc190YWJsZTogW1xuXHRcdCAgICB7IGFjdGl2ZTogdHJ1ZSwgbGFiZWw6IGkxOG4oJ2RldmljZXMnKSwgaWQ6IFwiZGV2aWNlc1wiIH0sXG5cdFx0XSxcbiAgICAgICAgICAgIH0sXG5cdCAgICBcbiAgICAgICAgICAgIHRpdGxlX2RlbGV0ZTogJycsXG4gICAgICAgICAgICBib2R5X2RlbGV0ZTogJycsXG4gICAgICAgICAgICB0aXRsZV9kZWxldGVfYWxsOiBpMThuKCdlZGl0X2NoZWNrLmRlbGV0ZV9hbGxfZGV2aWNlX2V4Y2x1c2lvbnMnKSxcbiAgICAgICAgICAgIGJvZHlfZGVsZXRlX2FsbDogaTE4bignZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zX21lc3NhZ2UnKSxcbiAgICAgICAgICAgIHRpdGxlX2FkZDogaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbicpLFxuICAgICAgICAgICAgYm9keV9hZGQ6IGkxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb25fbWVzc2FnZScpLFxuICAgICAgICAgICAgZm9vdGVyX2FkZDogaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9ub3RlcycpLFxuICAgICAgICAgICAgbGlzdF9ub3Rlc19hZGQ6IGkxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb25fbGlzdF9ub3RlcycpLFxuICAgICAgICAgICAgdGl0bGVfZWRpdDogaTE4bignZWRpdF9jaGVjay5lZGl0X2RldmljZV9leGNsdXNpb24nKSxcbiAgICAgICAgICAgIGxlYXJuaW5nX21lc3NhZ2U6IGkxOG4oJ2VkaXRfY2hlY2subGVhcm5pbmcnKSxcbiAgICAgICAgICAgIHJvd190b19kZWxldGU6IG51bGwsXG4gICAgICAgICAgICByb3dfdG9fZWRpdDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkX2RldmljZTogYXN5bmMgZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICAgICAgcGFyYW1zLm1hY19saXN0ID0gcGFyYW1zLm1hY19saXN0LnJlcGxhY2UoLyg/OlxcdHwgKS9nLCcnKVxuICAgICAgICAgIHBhcmFtcy5tYWNfbGlzdCA9IHBhcmFtcy5tYWNfbGlzdC5yZXBsYWNlKC8oPzpcXHJcXG58XFxyfFxcbikvZywgJywnKTtcbiAgICAgICAgICBwYXJhbXMuY3NyZiA9IHRoaXMuJHByb3BzLnBhZ2VfY3NyZjtcbiAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9hZGQvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgO1xuICAgICAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBkZXZpY2U6ICdhbGwnLFxuICAgICAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICAgIH07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9ICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZV9yb3c6IGFzeW5jIGZ1bmN0aW9uKCkgeyAgICAgIFxuICAgICAgICAgIGxldCByb3cgPSB0aGlzLnJvd190b19kZWxldGU7XG4gICAgICAgICAgbGV0IHBhcmFtcyA9IHsgZGV2aWNlOiByb3cubWFjX2FkZHJlc3MsIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZiB9O1xuICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWxvYWRfdGFibGUoKSwgMzAwKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdF9yb3c6IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykgeyAgICBcbiAgICAgICAgICBsZXQgcm93ID0gdGhpcy5yb3dfdG9fZWRpdDtcbiAgICAgICAgICBwYXJhbXMubWFjX2FsaWFzID0gcGFyYW1zLm1hY19hbGlhcy5yZXBsYWNlKC8oPzpcXHR8ICkvZywnJykgICBcbiAgICAgICAgICBwYXJhbXMuY3NyZiA9IHRoaXMuJHByb3BzLnBhZ2VfY3NyZlxuICAgICAgICAgIHBhcmFtcy5tYWMgPSByb3cubWFjX2FkZHJlc3NcbiAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9lZGl0L2RldmljZS9leGNsdXNpb24ubHVhYDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlbG9hZF90YWJsZSgpLCAzMDApO1xuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWFybmluZ19zdGF0dXM6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kZXZpY2UvbGVhcm5pbmdfc3RhdHVzLmx1YWA7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcnNwID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdnZXQnLCBoZWFkZXJzIH0pO1xuICAgICAgICAgICAgaWYocnNwLmxlYXJuaW5nX2RvbmUpIHtcbiAgICAgICAgICAgICAgJChgI2RldmljZXMtbGVhcm5pbmctc3RhdHVzYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkKGAjZGV2aWNlcy1sZWFybmluZy1zdGF0dXNgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKSAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9ICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICAgICAgdGhpcy5sZWFybmluZ19zdGF0dXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2RldmljZXNfZXhjbHVzaW9uYF07XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dfYWRkX2RldmljZV9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hZGRfZGV2aWNlXCJdLnNob3coKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd19lZGl0X2RldmljZV9kaWFsb2c6IGZ1bmN0aW9uKHJvdykge1xuICAgICAgICAgIHRoaXMucm93X3RvX2VkaXQgPSByb3dcbiAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZWRpdF9kZXZpY2VcIl0uc2hvdyhyb3cpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dfZGVsZXRlX2RpYWxvZzogZnVuY3Rpb24odGl0bGUsIGJvZHksIHJvdykge1xuICAgICAgICAgIHRoaXMucm93X3RvX2RlbGV0ZSA9IHJvdztcbiAgICAgICAgICB0aGlzLnRpdGxlX2RlbGV0ZSA9IHRpdGxlO1xuICAgICAgICAgIHRoaXMuYm9keV9kZWxldGUgPSBib2R5O1xuICAgICAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfY29uZmlybVwiXS5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSAgXG5cbiAgICBmdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gICAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiPjwvaT4nLFxuICAgICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgICBEYXRhdGFibGVWdWUuc2hvd19hZGRfZGV2aWNlX2RpYWxvZygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICAgIGRhdGFfdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kZXZpY2UvZXhjbHVzaW9uLmx1YWAsXG4gICAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIH07XG5cbiAgICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICAgIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICAgIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBbXG4gICAgICB7XG4gICAgICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICAgICAgc2VhcmNoYWJsZTogZmFsc2UsXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBkYXRhOiAnbWFjX2FkZHJlc3MnLFxuICAgICAgICB0eXBlOiAnbWFjLWFkZHJlc3MnLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICB9LCB7XG4gICAgICAgIGNvbHVtbk5hbWU6IGkxOG4oJ2VkaXRfY2hlY2suZXhjbHVkZWRfZGV2aWNlJyksXG4gICAgICAgIGRhdGE6ICdtYWNfYWRkcmVzc19sYWJlbCcsXG4gICAgICAgIHR5cGU6ICdtYWMtYWRkcmVzcycsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJyxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgbGV0IGxhYmVsID0gcm93RGF0YS5sYWJlbFxuICAgICAgICAgIGlmKHJvd0RhdGEubGFiZWwgIT09IHJvd0RhdGEubWFjKVxuICAgICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgWycgKyByb3dEYXRhLm1hYyArICddJ1xuXG4gICAgICAgICAgaWYocm93RGF0YS51cmwpXG4gICAgICAgICAgICBsYWJlbCA9IGA8YSBocmVmPScke3Jvd0RhdGEudXJsfScgdGl0bGU9JyR7cm93RGF0YS5tYWN9Jz4ke2xhYmVsfTwvYT5gXG5cbiAgICAgICAgICByZXR1cm4gbGFiZWxcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdmaXJzdF9zZWVuJyksXG4gICAgICAgIGRhdGE6ICdmaXJzdF9zZWVuJyxcbiAgICAgICAgdHlwZTogJ3RpbWUnLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgc2VhcmNoYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgcmV0dXJuIHJvd0RhdGEuZGF0YVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGNvbHVtbk5hbWU6IGkxOG4oJ2xhc3Rfc2VlbicpLFxuICAgICAgICBkYXRhOiAnbGFzdF9zZWVuJyxcbiAgICAgICAgdHlwZTogJ3RpbWUnLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgc2VhcmNoYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgcmV0dXJuIHJvd0RhdGEuZGF0YVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGNvbHVtbk5hbWU6IGkxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX3N0YXR1cycpLFxuICAgICAgICBkYXRhOiAnc3RhdHVzJyxcbiAgICAgICAgdHlwZTogJ3N0YXR1cycsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgICBzZWFyY2hhYmxlOiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihyb3dEYXRhLCB0eXBlLCBzY3JpcHQpIHtcbiAgICAgICAgICByZXR1cm4gaTE4bihyb3dEYXRhKVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGNvbHVtbk5hbWU6IGkxOG4oJ2VkaXRfY2hlY2sudHJpZ2dlcl9hbGVydCcpLFxuICAgICAgICBkYXRhOiAndHJpZ2dlcl9hbGVydCcsXG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIHJldHVybiByb3dEYXRhID8gYDxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrIHRleHQtc3VjY2Vzc1wiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzIHRleHQtZGFuZ2VyXCI+PC9pPmBcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICB0YXJnZXRzOiAtMSxcbiAgICAgICAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvblwiKSxcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgbmFtZTogJ2FjdGlvbnMnLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsXG4gICAgICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChyb3dEYXRhLCB0eXBlLCBzY3JpcHQpIHtcbiAgICAgICAgICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG4gICAgICAgICAgICBoYW5kbGVySWQ6IFwiZGVsZXRlX2RldmljZVwiLFx0ICBcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgbGV0IGJvZHkgPSBgJHtpMThuKCdlZGl0X2NoZWNrLmRlbGV0ZV9kZXZpY2VfZXhjbHVzaW9uJyl9ICR7cm93RGF0YS5tYWNfYWRkcmVzc19sYWJlbC5sYWJlbH1gO1xuICAgICAgICAgICAgICBEYXRhdGFibGVWdWUuc2hvd19kZWxldGVfZGlhbG9nKGkxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX2V4Y2x1c2lvbicpLCBib2R5LCByb3dEYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgICBsZXQgZWRpdF9oYW5kbGVyID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBcImVkaXRfZGV2aWNlXCIsXHQgIFxuICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICBEYXRhdGFibGVWdWUuc2hvd19lZGl0X2RldmljZV9kaWFsb2cocm93RGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgICAgbGV0IGp1bXBfdG9faGlzdG9yaWNhbF9mbG93ID0ge1xuICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7cm93RGF0YS5maXJzdF9zZWVuLnRpbWVzdGFtcH0mZXBvY2hfZW5kPSR7cm93RGF0YS5sYXN0X3NlZW4udGltZXN0YW1wfSZtYWM9JHtyb3dEYXRhLm1hY19hZGRyZXNzfTtlcWBcbiAgICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgICAgICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWxfZmxvdywgaWNvbjogJ2ZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGlkZGVuOiAhaXNDbGlja2hvdXNlRW5hYmxlZCB9LFxuICAgICAgICAgICAgeyBjbGFzczogYGJ0bi1zZWNvbmRhcnlgLCBoYW5kbGVyOiBlZGl0X2hhbmRsZXIsIGljb246ICdmYS1lZGl0JywgdGl0bGU6IGkxOG4oJ2VkaXQnKSwgY2xhc3M6IFwicG9pbnRlclwiIH0sXG4gICAgICAgICAgICB7IGNsYXNzOiBgYnRuLWRhbmdlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJyksIGNsYXNzOiBcInBvaW50ZXJcIiB9LFxuICAgICAgICAgIF0pO1xuICAgICAgICB9LFxuICAgICAgfVxuICAgIF07XG4gICAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzID0gY29uZmlnRGV2aWNlcztcbn1cblxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IGlkPVwibmF2YmFyXCI+XG48cGFnZS1uYXZiYXJcblx0aWQ9XCJwYWdlX25hdmJhclwiXG5cdDptYWluX3RpdGxlPVwibmF2YmFyX2NvbnRleHQubWFpbl90aXRsZVwiXG5cdDpiYXNlX3VybD1cIm5hdmJhcl9jb250ZXh0LmJhc2VfdXJsXCJcblx0OmhlbHBfbGluaz1cIm5hdmJhcl9jb250ZXh0LmhlbHBfbGlua1wiXG5cdDppdGVtc190YWJsZT1cIm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlXCJcblx0QGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG48L3BhZ2UtbmF2YmFyPlxuPC9kaXY+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBpZD1cImRldmljZXMtbGVhcm5pbmctc3RhdHVzXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgaGlkZGVuPlxuICAgICAgICAgIHt7IGxlYXJuaW5nX21lc3NhZ2UgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9kZXZpY2VzX3Z1ZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gICAgICAgICAgPG1vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uIHJlZj1cIm1vZGFsX2FkZF9kZXZpY2VcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfYWRkXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9hZGRcIlxuICAgICAgICAgICAgOmZvb3Rlcj1cImZvb3Rlcl9hZGRcIlxuICAgICAgICAgICAgOmxpc3Rfbm90ZXM9XCJsaXN0X25vdGVzX2FkZFwiXG4gICAgICAgICAgICBAYWRkPVwiYWRkX2RldmljZVwiPlxuICAgICAgICAgIDwvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24+XG4gICAgICAgICAgPG1vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbiByZWY9XCJtb2RhbF9lZGl0X2RldmljZVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9lZGl0XCJcbiAgICAgICAgICAgIEBlZGl0PVwiZWRpdF9yb3dcIj5cbiAgICAgICAgICA8L21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfZGV2aWNlc19leGNsdXNpb25cIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlcy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXMuZW5hYmxlX3NlYXJjaFwiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbC1kZXZpY2VzJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+XG4gICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwiZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zXCIpIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlTmF2YmFyIH0gZnJvbSBcIi4vcGFnZS1uYXZiYXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgICAgICdwYWdlLW5hdmJhcic6IFBhZ2VOYXZiYXIsXHQgICAgICBcbiAgICAgICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAgICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICAgICAnbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24nOiBNb2RhbEFkZERldmljZUV4Y2x1c2lvbixcbiAgICAgICAgJ21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbic6IE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbixcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdHBhZ2VfY3NyZjogU3RyaW5nLFxuXHRpc19jbGlja2hvdXNlX2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG5cdHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICB0aGlzLmxlYXJuaW5nX3N0YXR1cygpO1xuICAgICAgJChcIiNidG4tZGVsZXRlLWFsbC1kZXZpY2VzXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICB9LCAgICBcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBjb25maWdfZGV2aWNlczogbnVsbCxcbiAgICAgICAgICAgIG5hdmJhcl9jb250ZXh0OiB7XG5cdFx0bWFpbl90aXRsZToge1xuICAgICAgbGFiZWw6IGkxOG4oXCJlZGl0X2NoZWNrLmRldmljZV9leGNsdXNpb25fbGlzdFwiKSxcbiAgICAgIGljb246IFwiZmFzIGZhLWJlbGwtc2xhc2hcIixcbiAgICB9LFxuXHRcdGJhc2VfdXJsOiBcIiNcIixcblx0XHQvLyBoZWxwX2xpbms6IFwiaHR0cHM6Ly93d3cubnRvcC5vcmcvZ3VpZGVzL250b3BuZy93ZWJfZ3VpL2NoZWNrcy5odG1sXCIsXG5cdFx0aXRlbXNfdGFibGU6IFtcblx0XHQgICAgeyBhY3RpdmU6IHRydWUsIGxhYmVsOiBpMThuKCdkZXZpY2VzJyksIGlkOiBcImRldmljZXNcIiB9LFxuXHRcdF0sXG4gICAgICAgICAgICB9LFxuXHQgICAgXG4gICAgICAgICAgICB0aXRsZV9kZWxldGU6ICcnLFxuICAgICAgICAgICAgYm9keV9kZWxldGU6ICcnLFxuICAgICAgICAgICAgdGl0bGVfZGVsZXRlX2FsbDogaTE4bignZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zJyksXG4gICAgICAgICAgICBib2R5X2RlbGV0ZV9hbGw6IGkxOG4oJ2VkaXRfY2hlY2suZGVsZXRlX2FsbF9kZXZpY2VfZXhjbHVzaW9uc19tZXNzYWdlJyksXG4gICAgICAgICAgICB0aXRsZV9hZGQ6IGkxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb24nKSxcbiAgICAgICAgICAgIGJvZHlfYWRkOiBpMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uX21lc3NhZ2UnKSxcbiAgICAgICAgICAgIGZvb3Rlcl9hZGQ6IGkxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb25fbm90ZXMnKSxcbiAgICAgICAgICAgIGxpc3Rfbm90ZXNfYWRkOiBpMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uX2xpc3Rfbm90ZXMnKSxcbiAgICAgICAgICAgIHRpdGxlX2VkaXQ6IGkxOG4oJ2VkaXRfY2hlY2suZWRpdF9kZXZpY2VfZXhjbHVzaW9uJyksXG4gICAgICAgICAgICBsZWFybmluZ19tZXNzYWdlOiBpMThuKCdlZGl0X2NoZWNrLmxlYXJuaW5nJyksXG4gICAgICAgICAgICByb3dfdG9fZGVsZXRlOiBudWxsLFxuICAgICAgICAgICAgcm93X3RvX2VkaXQ6IG51bGwsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZF9kZXZpY2U6IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgICAgIHBhcmFtcy5tYWNfbGlzdCA9IHBhcmFtcy5tYWNfbGlzdC5yZXBsYWNlKC8oPzpcXHR8ICkvZywnJylcbiAgICAgICAgICBwYXJhbXMubWFjX2xpc3QgPSBwYXJhbXMubWFjX2xpc3QucmVwbGFjZSgvKD86XFxyXFxufFxccnxcXG4pL2csICcsJyk7XG4gICAgICAgICAgcGFyYW1zLmNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmY7XG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2RldmljZS9leGNsdXNpb24ubHVhYDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL2RldmljZS9leGNsdXNpb24ubHVhYDtcbiAgICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgZGV2aWNlOiAnYWxsJyxcbiAgICAgICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfSAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBkZWxldGVfcm93OiBhc3luYyBmdW5jdGlvbigpIHsgICAgICBcbiAgICAgICAgICBsZXQgcm93ID0gdGhpcy5yb3dfdG9fZGVsZXRlO1xuICAgICAgICAgIGxldCBwYXJhbXMgPSB7IGRldmljZTogcm93Lm1hY19hZGRyZXNzLCBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYgfTtcbiAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVsb2FkX3RhYmxlKCksIDMwMCk7XG4gICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRfcm93OiBhc3luYyBmdW5jdGlvbihwYXJhbXMpIHsgICAgXG4gICAgICAgICAgbGV0IHJvdyA9IHRoaXMucm93X3RvX2VkaXQ7XG4gICAgICAgICAgcGFyYW1zLm1hY19hbGlhcyA9IHBhcmFtcy5tYWNfYWxpYXMucmVwbGFjZSgvKD86XFx0fCApL2csJycpICAgXG4gICAgICAgICAgcGFyYW1zLmNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmZcbiAgICAgICAgICBwYXJhbXMubWFjID0gcm93Lm1hY19hZGRyZXNzXG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZWRpdC9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWxvYWRfdGFibGUoKSwgMzAwKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGVhcm5pbmdfc3RhdHVzOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGV2aWNlL2xlYXJuaW5nX3N0YXR1cy5sdWFgO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAnZ2V0JywgaGVhZGVycyB9KTtcbiAgICAgICAgICAgIGlmKHJzcC5sZWFybmluZ19kb25lKSB7XG4gICAgICAgICAgICAgICQoYCNkZXZpY2VzLWxlYXJuaW5nLXN0YXR1c2ApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJChgI2RldmljZXMtbGVhcm5pbmctc3RhdHVzYCkucmVtb3ZlQXR0cignaGlkZGVuJykgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfSAgICAgIFxuICAgICAgICB9LFxuICAgICAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgICAgIHRoaXMubGVhcm5pbmdfc3RhdHVzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9kZXZpY2VzX2V4Y2x1c2lvbmBdO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X2FkZF9kZXZpY2VfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYWRkX2RldmljZVwiXS5zaG93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dfZWRpdF9kZXZpY2VfZGlhbG9nOiBmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgICB0aGlzLnJvd190b19lZGl0ID0gcm93XG4gICAgICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2VkaXRfZGV2aWNlXCJdLnNob3cocm93KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X2RlbGV0ZV9kaWFsb2c6IGZ1bmN0aW9uKHRpdGxlLCBib2R5LCByb3cpIHtcbiAgICAgICAgICB0aGlzLnJvd190b19kZWxldGUgPSByb3c7XG4gICAgICAgICAgdGhpcy50aXRsZV9kZWxldGUgPSB0aXRsZTtcbiAgICAgICAgICB0aGlzLmJvZHlfZGVsZXRlID0gYm9keTtcbiAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2NvbmZpcm1cIl0uc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0gIFxuXG4gICAgZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICAgIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuXG4gICAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgICAgRGF0YXRhYmxlVnVlLnNob3dfYWRkX2RldmljZV9kaWFsb2coKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgICBkYXRhX3VybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgLFxuICAgICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gICAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gW1xuICAgICAge1xuICAgICAgICBzb3J0YWJsZTogZmFsc2UsXG4gICAgICAgIHNlYXJjaGFibGU6IGZhbHNlLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgZGF0YTogJ21hY19hZGRyZXNzJyxcbiAgICAgICAgdHlwZTogJ21hYy1hZGRyZXNzJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdlZGl0X2NoZWNrLmV4Y2x1ZGVkX2RldmljZScpLFxuICAgICAgICBkYXRhOiAnbWFjX2FkZHJlc3NfbGFiZWwnLFxuICAgICAgICB0eXBlOiAnbWFjLWFkZHJlc3MnLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgICBzZWFyY2hhYmxlOiB0cnVlLFxuICAgICAgICBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIGxldCBsYWJlbCA9IHJvd0RhdGEubGFiZWxcbiAgICAgICAgICBpZihyb3dEYXRhLmxhYmVsICE9PSByb3dEYXRhLm1hYylcbiAgICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnIFsnICsgcm93RGF0YS5tYWMgKyAnXSdcblxuICAgICAgICAgIGlmKHJvd0RhdGEudXJsKVxuICAgICAgICAgICAgbGFiZWwgPSBgPGEgaHJlZj0nJHtyb3dEYXRhLnVybH0nIHRpdGxlPScke3Jvd0RhdGEubWFjfSc+JHtsYWJlbH08L2E+YFxuXG4gICAgICAgICAgcmV0dXJuIGxhYmVsXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgY29sdW1uTmFtZTogaTE4bignZmlyc3Rfc2VlbicpLFxuICAgICAgICBkYXRhOiAnZmlyc3Rfc2VlbicsXG4gICAgICAgIHR5cGU6ICd0aW1lJyxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIHJldHVybiByb3dEYXRhLmRhdGFcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdsYXN0X3NlZW4nKSxcbiAgICAgICAgZGF0YTogJ2xhc3Rfc2VlbicsXG4gICAgICAgIHR5cGU6ICd0aW1lJyxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIHJldHVybiByb3dEYXRhLmRhdGFcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdlZGl0X2NoZWNrLmRldmljZV9zdGF0dXMnKSxcbiAgICAgICAgZGF0YTogJ3N0YXR1cycsXG4gICAgICAgIHR5cGU6ICdzdGF0dXMnLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgc2VhcmNoYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgcmV0dXJuIGkxOG4ocm93RGF0YSlcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdlZGl0X2NoZWNrLnRyaWdnZXJfYWxlcnQnKSxcbiAgICAgICAgZGF0YTogJ3RyaWdnZXJfYWxlcnQnLFxuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgICBzZWFyY2hhYmxlOiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihyb3dEYXRhLCB0eXBlLCBzY3JpcHQpIHtcbiAgICAgICAgICByZXR1cm4gcm93RGF0YSA/IGA8aSBjbGFzcz1cImZhcyBmYS1jaGVjayB0ZXh0LXN1Y2Nlc3NcIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhcyBmYS10aW1lcyB0ZXh0LWRhbmdlclwiPjwvaT5gXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgdGFyZ2V0czogLTEsXG4gICAgICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25cIiksXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIG5hbWU6ICdhY3Rpb25zJyxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLFxuICAgICAgICBzb3J0YWJsZTogZmFsc2UsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgbGV0IGRlbGV0ZV9oYW5kbGVyID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBcImRlbGV0ZV9kZXZpY2VcIixcdCAgXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBib2R5ID0gYCR7aTE4bignZWRpdF9jaGVjay5kZWxldGVfZGV2aWNlX2V4Y2x1c2lvbicpfSAke3Jvd0RhdGEubWFjX2FkZHJlc3NfbGFiZWwubGFiZWx9YDtcbiAgICAgICAgICAgICAgRGF0YXRhYmxlVnVlLnNob3dfZGVsZXRlX2RpYWxvZyhpMThuKCdlZGl0X2NoZWNrLmRldmljZV9leGNsdXNpb24nKSwgYm9keSwgcm93RGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgICAgbGV0IGVkaXRfaGFuZGxlciA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogXCJlZGl0X2RldmljZVwiLFx0ICBcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgRGF0YXRhYmxlVnVlLnNob3dfZWRpdF9kZXZpY2VfZGlhbG9nKHJvd0RhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxldCBqdW1wX3RvX2hpc3RvcmljYWxfZmxvdyA9IHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke3Jvd0RhdGEuZmlyc3Rfc2Vlbi50aW1lc3RhbXB9JmVwb2NoX2VuZD0ke3Jvd0RhdGEubGFzdF9zZWVuLnRpbWVzdGFtcH0mbWFjPSR7cm93RGF0YS5tYWNfYWRkcmVzc307ZXFgXG4gICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcbiAgICAgICAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsX2Zsb3csIGljb246ICdmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhpZGRlbjogIWlzQ2xpY2tob3VzZUVuYWJsZWQgfSxcbiAgICAgICAgICAgIHsgY2xhc3M6IGBidG4tc2Vjb25kYXJ5YCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JyksIGNsYXNzOiBcInBvaW50ZXJcIiB9LFxuICAgICAgICAgICAgeyBjbGFzczogYGJ0bi1kYW5nZXJgLCBoYW5kbGVyOiBkZWxldGVfaGFuZGxlciwgaWNvbjogJ2ZhLXRyYXNoJywgdGl0bGU6IGkxOG4oJ2RlbGV0ZScpLCBjbGFzczogXCJwb2ludGVyXCIgfSxcbiAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICBdO1xuICAgIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlcyA9IGNvbmZpZ0RldmljZXM7XG59XG5cbjwvc2NyaXB0PlxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBUTFMgaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2hvc3RfdGxzXCI+XG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9maW5nZXJwcmludFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8Yj57eyBpMThuKCdmaW5nZXJwcmludF9ub3RlJykgfX08L2I+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge30sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9maW5nZXJwcmludGBdO1xuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMyAvKiBDb250YWN0cyBjb2x1bW4gKi87XG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9maW5nZXJwcmludC9kYXRhLmx1YWAsIHVybF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJqYTNfY2xpZW50X2ZpbmdlcnByaW50XCIpLCBuYW1lOiAnamEzJywgZGF0YTogJ2phMycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly9zc2xibC5hYnVzZS5jaC9qYTMtZmluZ2VycHJpbnRzLyR7ZGF0YX1cIj4ke2RhdGF9IDxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT5gO1xuICAgICAgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInN0YXR1c1wiKSwgbmFtZTogJ2lzX21hbGljaW91cycsIGRhdGE6ICdpc19tYWxpY2lvdXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEgPyBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLWZyb3duIHRleHQtZGFuZ2VyXCIgdGl0bGU9XCIke2kxOG4oJ21hbGljaW91cycpfVwiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1zbWlsZSB0ZXh0LXN1Y2Nlc3NcIiB0aXRsZT1cIiR7aTE4bignb2snKX1cIj48L2k+YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBfbmFtZVwiKSwgbmFtZTogJ2FwcF9uYW1lJywgZGF0YTogJ2FwcF9uYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7IHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUoZGF0YSk7IH0gfSxcbiAgXTtcblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFRMUyBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF90bHNcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2ZpbmdlcnByaW50XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxiPnt7IGkxOG4oJ2ZpbmdlcnByaW50X25vdGUnKSB9fTwvYj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2ZpbmdlcnByaW50YF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImphM19jbGllbnRfZmluZ2VycHJpbnRcIiksIG5hbWU6ICdqYTMnLCBkYXRhOiAnamEzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3NzbGJsLmFidXNlLmNoL2phMy1maW5nZXJwcmludHMvJHtkYXRhfVwiPiR7ZGF0YX0gPGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPmA7XG4gICAgICB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwic3RhdHVzXCIpLCBuYW1lOiAnaXNfbWFsaWNpb3VzJywgZGF0YTogJ2lzX21hbGljaW91cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YSA/IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2UtZnJvd24gdGV4dC1kYW5nZXJcIiB0aXRsZT1cIiR7aTE4bignbWFsaWNpb3VzJyl9XCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLXNtaWxlIHRleHQtc3VjY2Vzc1wiIHRpdGxlPVwiJHtpMThuKCdvaycpfVwiPjwvaT5gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcF9uYW1lXCIpLCBuYW1lOiAnYXBwX25hbWUnLCBkYXRhOiAnYXBwX25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHsgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZShkYXRhKTsgfSB9LFxuICBdO1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU1NIIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3NzaFwiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfaGFzc2hcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfaGFzc2hgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaGFzc2hfZmluZ2VycHJpbnRcIiksIG5hbWU6ICdqYTMnLCBkYXRhOiAnamEzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3NzbGJsLmFidXNlLmNoL2phMy1maW5nZXJwcmludHMvJHtkYXRhfVwiPiR7ZGF0YX0gPGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPmA7XG4gICAgICB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwic3RhdHVzXCIpLCBuYW1lOiAnaXNfbWFsaWNpb3VzJywgZGF0YTogJ2lzX21hbGljaW91cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YSA/IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2UtZnJvd24gdGV4dC1kYW5nZXJcIiB0aXRsZT1cIiR7aTE4bignbWFsaWNpb3VzJyl9XCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLXNtaWxlIHRleHQtc3VjY2Vzc1wiIHRpdGxlPVwiJHtpMThuKCdvaycpfVwiPjwvaT5gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcF9uYW1lXCIpLCBuYW1lOiAnYXBwX25hbWUnLCBkYXRhOiAnYXBwX25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHsgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZShkYXRhKTsgfSB9LFxuICBdO1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU1NIIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3NzaFwiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfaGFzc2hcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfaGFzc2hgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaGFzc2hfZmluZ2VycHJpbnRcIiksIG5hbWU6ICdqYTMnLCBkYXRhOiAnamEzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3NzbGJsLmFidXNlLmNoL2phMy1maW5nZXJwcmludHMvJHtkYXRhfVwiPiR7ZGF0YX0gPGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPmA7XG4gICAgICB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwic3RhdHVzXCIpLCBuYW1lOiAnaXNfbWFsaWNpb3VzJywgZGF0YTogJ2lzX21hbGljaW91cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YSA/IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2UtZnJvd24gdGV4dC1kYW5nZXJcIiB0aXRsZT1cIiR7aTE4bignbWFsaWNpb3VzJyl9XCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLXNtaWxlIHRleHQtc3VjY2Vzc1wiIHRpdGxlPVwiJHtpMThuKCdvaycpfVwiPjwvaT5gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcF9uYW1lXCIpLCBuYW1lOiAnYXBwX25hbWUnLCBkYXRhOiAnYXBwX25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHsgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZShkYXRhKTsgfSB9LFxuICBdO1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU1NIIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48cGFnZS1uYXZiYXJcbiAgaWQ9XCJwYWdlX25hdmJhclwiXG4gIDptYWluX3RpdGxlPVwibmF2YmFyX2NvbnRleHQubWFpbl90aXRsZVwiXG4gIDpzZWNvbmRhcnlfdGl0bGVfbGlzdD1cIm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0XCJcbiAgOmhlbHBfbGluaz1cIm5hdmJhcl9jb250ZXh0LmhlbHBfbGlua1wiXG4gIDppdGVtc190YWJsZT1cIm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlXCJcbiAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG48L3BhZ2UtbmF2YmFyPlxuXG48cGFnZS1zZXJ2aWNlLW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnc2VydmljZV9tYXAnICYmIHBhZ2UgPT0gJ2dyYXBoJ1wiIHJlZj1cInNlcnZpY2VfbWFwX2dyYXBoXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDppZmlkPVwiaWZpZFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gIDphbGxfZmlsdGVyX2xpc3Q9XCJzZXJ2aWNlX21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXNlcnZpY2UtbWFwPlxuXG48cGFnZS1zZXJ2aWNlLXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwic2VydmljZV9tYXBfdGFibGVcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOnZpZXc9XCJ1cGRhdGVkX3ZpZXdcIlxuICA6dGFibGVfZmlsdGVycz1cInNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3RcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gIDpzZXJ2aWNlX2FjY2VwdGFuY2U9XCJzZXJ2aWNlX2FjY2VwdGFuY2VcIj5cbjwvcGFnZS1zZXJ2aWNlLXRhYmxlPlxuXG48cGFnZS1wZXJpb2RpY2l0eS1tYXAgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX2dyYXBoXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDppZmlkPVwiaWZpZFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gIDphbGxfZmlsdGVyX2xpc3Q9XCJwZXJpb2RpY2l0eV9tYXBfZmlsdGVyX2xpc3RcIj5cbjwvcGFnZS1wZXJpb2RpY2l0eS1tYXA+XG5cbjxwYWdlLXBlcmlvZGljaXR5LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdwZXJpb2RpY2l0eV9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cInBlcmlvZGljaXR5X21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwicGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3RcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LXRhYmxlPlxuXG48dGVtcGxhdGUgdi1pZj1cImFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8cGFnZS1hc3NldC1tYXAgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ2Fzc2V0X21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwiYXNzZXRfbWFwX2dyYXBoXCJcbiAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgIDppZmlkPVwiaWZpZFwiXG4gICAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICAgIDptYXBfaWQ9XCJtYXBfaWRcIlxuICAgIDphbGxfZmlsdGVyX2xpc3Q9XCJhc3NldF9tYXBfZmlsdGVyX2xpc3RcIj5cbiAgPC9wYWdlLWFzc2V0LW1hcD5cblxuICA8cGFnZS1hc3NldC10YWJsZSB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJhc3NldF9tYXBfdGFibGVcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOnZpZXc9XCJ1cGRhdGVkX3ZpZXdcIlxuICAgIDp0YWJsZV9maWx0ZXJzPVwiYXNzZXRfdGFibGVfZmlsdGVyX2xpc3RcIj5cbiAgPC9wYWdlLWFzc2V0LXRhYmxlPlxuPC90ZW1wbGF0ZT5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlUYWJsZSB9IGZyb20gXCIuL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVBlcmlvZGljaXR5TWFwIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0VGFibGUgfSBmcm9tIFwiLi9wYWdlLWFzc2V0LXRhYmxlLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBc3NldE1hcCB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtbWFwLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlVGFibGUgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VNYXAgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtbWFwLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VOYXZiYXIgfSBmcm9tIFwiLi9wYWdlLW5hdmJhci52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuICBjb25zdCBjaGFuZ2VfbWFwX2V2ZW50ID0gXCJjaGFuZ2VfbWFwX2V2ZW50XCI7XG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgICAncGFnZS1wZXJpb2RpY2l0eS1tYXAnOiBQYWdlUGVyaW9kaWNpdHlNYXAsXG4gICAgICAncGFnZS1wZXJpb2RpY2l0eS10YWJsZSc6IFBhZ2VQZXJpb2RpY2l0eVRhYmxlLFxuICAgICAgJ3BhZ2UtYXNzZXQtbWFwJzogUGFnZUFzc2V0TWFwLFxuICAgICAgJ3BhZ2UtYXNzZXQtdGFibGUnOiBQYWdlQXNzZXRUYWJsZSxcbiAgICAgICdwYWdlLXNlcnZpY2UtbWFwJzogUGFnZVNlcnZpY2VNYXAsXG4gICAgICAncGFnZS1zZXJ2aWNlLXRhYmxlJzogUGFnZVNlcnZpY2VUYWJsZSxcbiAgICAgICdwYWdlLW5hdmJhcic6IFBhZ2VOYXZiYXIsXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgICBiYXNlX3VybF9wYXJhbXM6IE9iamVjdCxcbiAgICAgIGlmaWQ6IE51bWJlcixcbiAgICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgICB2aWV3OiBTdHJpbmcsXG4gICAgICBuYXZiYXJfaW5mbzogT2JqZWN0LFxuICAgICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgICAgIHNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICAgIHBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICAgICAgcGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgYXNzZXRfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBhc3NldF90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy5iYXNlX3VybF9wYXJhbXNcbiAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRoaXMuJHByb3BzLm1hcF9pZFxuICAgICAgdGhpcy5wYWdlID0gdGhpcy51cmxfcGFyYW1zLnBhZ2VcbiAgICAgIHRoaXMudXBkYXRlZF92aWV3ID0gdGhpcy4kcHJvcHMudmlld1xuXG4gICAgICBpZihhc3NldF9tYXBfZmlsdGVyX2xpc3QgJiYgYXNzZXRfdGFibGVfZmlsdGVyX2xpc3QpIHtcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ2Fzc2V0X21hcCcpLCBpZDogXCJhc3NldF9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCdhc3NldF90YWJsZScpLCBpZDogXCJhc3NldF9tYXBcIiwgcGFnZTogXCJ0YWJsZVwiIH0pXG4gICAgICB9XG5cbiAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICAoaS5pZCA9PSB0aGlzLmFjdGl2ZV90YWIgJiYgaS5wYWdlID09IHRoaXMucGFnZSkgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICBcbiAgICAgIGNvbnN0IGZvcm1hdF9uYXZiYXIgPSB0aGlzLmZvcm1hdF9uYXZiYXJfdGl0bGU7XG4gICAgICBmb3JtYXRfbmF2YmFyKHRoaXMuJHByb3BzLm5hdmJhcl9pbmZvKTtcblxuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfbmF2YmFyXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgICBmb3JtYXRfbmF2YmFyKHsgc2VsZWN0ZWRfaWZhY2U6IHRoaXMuJHByb3BzLm5hdmJhcl9pbmZvLnNlbGVjdGVkX2lmYWNlLCBzZWxlY3RlZF9ob3N0OiBub2RlIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJcIiwgY2hhbmdlX21hcF9ldmVudCwgKHRhYikgPT4ge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ21hcCcsIHRhYi5pZCk7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgncGFnZScsIHRhYi5wYWdlKTtcbiAgICAgICAgaWYodGFiLnBhZ2UgPT0gJ3RhYmxlJylcbiAgICAgICAgICB0aGlzLmRlc3Ryb3koKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hY3RpdmVfdGFiID0gdGFiLmlkXG4gICAgICAgIHRoaXMucGFnZSA9IHRhYi5wYWdlXG4gICAgICAgIHRoaXMudXJsX3BhcmFtcy5tYXAgPSB0YWIuaWRcbiAgICAgICAgdGhpcy51cmxfcGFyYW1zLnBhZ2UgPSB0YWIucGFnZVxuICAgICAgICB0aGlzLnVwZGF0ZWRfdmlldyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2aWV3JylcbiAgICAgICAgZm9ybWF0X25hdmJhcigpXG4gICAgIH0pO1xuICAgIH0sICAgIFxuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgICAgYWN0aXZlX3RhYjogbnVsbCxcbiAgICAgICAgcGFnZTogbnVsbCxcbiAgICAgICAgdXJsX3BhcmFtczoge30sXG4gICAgICAgIHVwZGF0ZWRfdmlldzogbnVsbCxcbiAgICAgICAgbmF2YmFyX25vZGU6IHt9LFxuICAgICAgICBuYXZiYXJfY29udGV4dDoge1xuICAgICAgICAgIG1haW5fdGl0bGU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnICcgKyBpMThuKFwibWFwc1wiKSxcbiAgICAgICAgICAgIGljb246IFwiZmFzIGZhLW1hcFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2Vjb25kYXJ5X3RpdGxlX2xpc3Q6IFtdLFxuICAgICAgICAgIGl0ZW1zX3RhYmxlOiBbXG4gICAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbGFiZWw6IGkxOG4oJ3NlcnZpY2VfbWFwJyksIGlkOiBcInNlcnZpY2VfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignc2VydmljZV90YWJsZScpLCBpZDogXCJzZXJ2aWNlX21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSxcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ3BlcmlvZGljaXR5X21hcCcpLCBpZDogXCJwZXJpb2RpY2l0eV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCdwZXJpb2RpY2l0eV90YWJsZScpLCBpZDogXCJwZXJpb2RpY2l0eV9tYXBcIiwgcGFnZTogXCJ0YWJsZVwiIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7IFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBjdXJyZW50X3RhYiA9IHRoaXMuZ2V0X2FjdGl2ZV90YWIoKTtcbiAgICAgICAgY3VycmVudF90YWIuZGVzdHJveSgpXG4gICAgICB9LFxuICAgICAgZm9ybWF0X25hdmJhcl90aXRsZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBpZihkYXRhKSB7XG4gICAgICAgICAgdGhpcy5uYXZiYXJfbm9kZSA9IGRhdGEgLyogVXBkYXRlIG5hdmJhciBub2RlICovXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IHRoaXMubmF2YmFyX25vZGUgLyogVXNlIHRoZSBvbGQgbmF2YmFyIG5vZGUgKi9cbiAgICAgICAgfSBcblxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0ID0gW1xuICAgICAgICAgIHsgbGFiZWw6IGRhdGEuc2VsZWN0ZWRfaWZhY2UubGFiZWwsIHRpdGxlOiBOdG9wVXRpbHMuc2hvcnRlbkxhYmVsKGAke2RhdGEuc2VsZWN0ZWRfaWZhY2UubGFiZWx9YCwgMTYpIH1cbiAgICAgICAgXVxuXG4gICAgICAgIGlmKGRhdGEuc2VsZWN0ZWRfaG9zdCAmJiBkYXRhLnNlbGVjdGVkX2hvc3QuaWQgIT0gJycpIHtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0WzBdWydocmVmJ10gPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWE/bWFwPSR7dGhpcy5hY3RpdmVfdGFifSZwYWdlPSR7dGhpcy5wYWdlfSZpZmlkPSR7dGhpcy4kcHJvcHMuaWZpZH1gXG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiBOdG9wVXRpbHMuc2hvcnRlbkxhYmVsKGAke2RhdGEuc2VsZWN0ZWRfaG9zdC5sYWJlbH1gLCAxNiwgJy4nKSxcbiAgICAgICAgICAgIHRpdGxlOiBgJHtkYXRhLnNlbGVjdGVkX2hvc3QubGFiZWx9YCxcbiAgICAgICAgICAgIGhyZWY6IGRhdGEuc2VsZWN0ZWRfaG9zdC5pc19hY3RpdmUgPyBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGEuc2VsZWN0ZWRfaG9zdC5pZH1gIDogbnVsbCxcbiAgICAgICAgICAgIHRhcmdldF9ibGFuazogXCJ0cnVlXCIsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSAgXG4gICAgICB9LFxuICAgICAgZ2V0X2FjdGl2ZV90YWI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kcmVmc1t0aGlzLmFjdGl2ZV90YWIgKyBcIl9cIiArIHRoaXMucGFnZV07XG4gICAgICB9LFxuICAgICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaWYoaXRlbS5pZCAhPSB0aGlzLmFjdGl2ZV90YWIgfHwgaXRlbS5wYWdlICE9IHRoaXMucGFnZSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfbWFwX2V2ZW50LCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9ICBcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTU0ggaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxwYWdlLW5hdmJhclxuICBpZD1cInBhZ2VfbmF2YmFyXCJcbiAgOm1haW5fdGl0bGU9XCJuYXZiYXJfY29udGV4dC5tYWluX3RpdGxlXCJcbiAgOnNlY29uZGFyeV90aXRsZV9saXN0PVwibmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIlxuICA6aGVscF9saW5rPVwibmF2YmFyX2NvbnRleHQuaGVscF9saW5rXCJcbiAgOml0ZW1zX3RhYmxlPVwibmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGVcIlxuICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbjwvcGFnZS1uYXZiYXI+XG5cbjxwYWdlLXNlcnZpY2UtbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwic2VydmljZV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0XCI+XG48L3BhZ2Utc2VydmljZS1tYXA+XG5cbjxwYWdlLXNlcnZpY2UtdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3NlcnZpY2VfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJzZXJ2aWNlX21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOnNlcnZpY2VfYWNjZXB0YW5jZT1cInNlcnZpY2VfYWNjZXB0YW5jZVwiPlxuPC9wYWdlLXNlcnZpY2UtdGFibGU+XG5cbjxwYWdlLXBlcmlvZGljaXR5LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAncGVyaW9kaWNpdHlfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJwZXJpb2RpY2l0eV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LW1hcD5cblxuPHBhZ2UtcGVyaW9kaWNpdHktdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX3RhYmxlXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgOnRhYmxlX2ZpbHRlcnM9XCJwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCI+XG48L3BhZ2UtcGVyaW9kaWNpdHktdGFibGU+XG5cbjx0ZW1wbGF0ZSB2LWlmPVwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0ICYmIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0XCI+XG4gIDxwYWdlLWFzc2V0LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJhc3NldF9tYXBfZ3JhcGhcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOmlmaWQ9XCJpZmlkXCJcbiAgICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gICAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gICAgOmFsbF9maWx0ZXJfbGlzdD1cImFzc2V0X21hcF9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtbWFwPlxuXG4gIDxwYWdlLWFzc2V0LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdhc3NldF9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cImFzc2V0X21hcF90YWJsZVwiXG4gICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gICAgOnRhYmxlX2ZpbHRlcnM9XCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtdGFibGU+XG48L3RlbXBsYXRlPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZU1hcCB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG4gIGNvbnN0IGNoYW5nZV9tYXBfZXZlbnQgPSBcImNoYW5nZV9tYXBfZXZlbnRcIjtcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LW1hcCc6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LXRhYmxlJzogUGFnZVBlcmlvZGljaXR5VGFibGUsXG4gICAgICAncGFnZS1hc3NldC1tYXAnOiBQYWdlQXNzZXRNYXAsXG4gICAgICAncGFnZS1hc3NldC10YWJsZSc6IFBhZ2VBc3NldFRhYmxlLFxuICAgICAgJ3BhZ2Utc2VydmljZS1tYXAnOiBQYWdlU2VydmljZU1hcCxcbiAgICAgICdwYWdlLXNlcnZpY2UtdGFibGUnOiBQYWdlU2VydmljZVRhYmxlLFxuICAgICAgJ3BhZ2UtbmF2YmFyJzogUGFnZU5hdmJhcixcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICAgIGJhc2VfdXJsX3BhcmFtczogT2JqZWN0LFxuICAgICAgaWZpZDogTnVtYmVyLFxuICAgICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICAgIHZpZXc6IFN0cmluZyxcbiAgICAgIG5hdmJhcl9pbmZvOiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICAgICAgc2VydmljZV9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIHNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgcGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgICBhc3NldF9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLmJhc2VfdXJsX3BhcmFtc1xuICAgICAgdGhpcy5hY3RpdmVfdGFiID0gdGhpcy4kcHJvcHMubWFwX2lkXG4gICAgICB0aGlzLnBhZ2UgPSB0aGlzLnVybF9wYXJhbXMucGFnZVxuICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSB0aGlzLiRwcm9wcy52aWV3XG5cbiAgICAgIGlmKGFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdCkge1xuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignYXNzZXRfbWFwJyksIGlkOiBcImFzc2V0X21hcFwiLCBwYWdlOiBcImdyYXBoXCIgfSlcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ2Fzc2V0X3RhYmxlJyksIGlkOiBcImFzc2V0X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgIChpLmlkID09IHRoaXMuYWN0aXZlX3RhYiAmJiBpLnBhZ2UgPT0gdGhpcy5wYWdlKSA/IGkuYWN0aXZlID0gdHJ1ZSA6IGkuYWN0aXZlID0gZmFsc2VcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcbiAgICAgIFxuICAgICAgY29uc3QgZm9ybWF0X25hdmJhciA9IHRoaXMuZm9ybWF0X25hdmJhcl90aXRsZTtcbiAgICAgIGZvcm1hdF9uYXZiYXIodGhpcy4kcHJvcHMubmF2YmFyX2luZm8pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9uYXZiYXJcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICAgIGZvcm1hdF9uYXZiYXIoeyBzZWxlY3RlZF9pZmFjZTogdGhpcy4kcHJvcHMubmF2YmFyX2luZm8uc2VsZWN0ZWRfaWZhY2UsIHNlbGVjdGVkX2hvc3Q6IG5vZGUgfSk7XG4gICAgICB9KTtcblxuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2VfbWFwX2V2ZW50LCAodGFiKSA9PiB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnbWFwJywgdGFiLmlkKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdwYWdlJywgdGFiLnBhZ2UpO1xuICAgICAgICBpZih0YWIucGFnZSA9PSAndGFibGUnKVxuICAgICAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFjdGl2ZV90YWIgPSB0YWIuaWRcbiAgICAgICAgdGhpcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cmxfcGFyYW1zLm1hcCA9IHRhYi5pZFxuICAgICAgICB0aGlzLnVybF9wYXJhbXMucGFnZSA9IHRhYi5wYWdlXG4gICAgICAgIHRoaXMudXBkYXRlZF92aWV3ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKVxuICAgICAgICBmb3JtYXRfbmF2YmFyKClcbiAgICAgfSk7XG4gICAgfSwgICAgXG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgICBhY3RpdmVfdGFiOiBudWxsLFxuICAgICAgICBwYWdlOiBudWxsLFxuICAgICAgICB1cmxfcGFyYW1zOiB7fSxcbiAgICAgICAgdXBkYXRlZF92aWV3OiBudWxsLFxuICAgICAgICBuYXZiYXJfbm9kZToge30sXG4gICAgICAgIG5hdmJhcl9jb250ZXh0OiB7XG4gICAgICAgICAgbWFpbl90aXRsZToge1xuICAgICAgICAgICAgbGFiZWw6ICcgJyArIGkxOG4oXCJtYXBzXCIpLFxuICAgICAgICAgICAgaWNvbjogXCJmYXMgZmEtbWFwXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZWNvbmRhcnlfdGl0bGVfbGlzdDogW10sXG4gICAgICAgICAgaXRlbXNfdGFibGU6IFtcbiAgICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBsYWJlbDogaTE4bignc2VydmljZV9tYXAnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCdzZXJ2aWNlX3RhYmxlJyksIGlkOiBcInNlcnZpY2VfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigncGVyaW9kaWNpdHlfbWFwJyksIGlkOiBcInBlcmlvZGljaXR5X21hcFwiLCBwYWdlOiBcImdyYXBoXCIgfSxcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ3BlcmlvZGljaXR5X3RhYmxlJyksIGlkOiBcInBlcmlvZGljaXR5X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHsgXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRfdGFiID0gdGhpcy5nZXRfYWN0aXZlX3RhYigpO1xuICAgICAgICBjdXJyZW50X3RhYi5kZXN0cm95KClcbiAgICAgIH0sXG4gICAgICBmb3JtYXRfbmF2YmFyX3RpdGxlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9ub2RlID0gZGF0YSAvKiBVcGRhdGUgbmF2YmFyIG5vZGUgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gdGhpcy5uYXZiYXJfbm9kZSAvKiBVc2UgdGhlIG9sZCBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IFxuXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3QgPSBbXG4gICAgICAgICAgeyBsYWJlbDogZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbCwgdGl0bGU6IE50b3BVdGlscy5zaG9ydGVuTGFiZWwoYCR7ZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbH1gLCAxNikgfVxuICAgICAgICBdXG5cbiAgICAgICAgaWYoZGF0YS5zZWxlY3RlZF9ob3N0ICYmIGRhdGEuc2VsZWN0ZWRfaG9zdC5pZCAhPSAnJykge1xuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RbMF1bJ2hyZWYnXSA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YT9tYXA9JHt0aGlzLmFjdGl2ZV90YWJ9JnBhZ2U9JHt0aGlzLnBhZ2V9JmlmaWQ9JHt0aGlzLiRwcm9wcy5pZmlkfWBcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0LnB1c2goe1xuICAgICAgICAgICAgbGFiZWw6IE50b3BVdGlscy5zaG9ydGVuTGFiZWwoYCR7ZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsfWAsIDE2LCAnLicpLFxuICAgICAgICAgICAgdGl0bGU6IGAke2RhdGEuc2VsZWN0ZWRfaG9zdC5sYWJlbH1gLFxuICAgICAgICAgICAgaHJlZjogZGF0YS5zZWxlY3RlZF9ob3N0LmlzX2FjdGl2ZSA/IGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5zZWxlY3RlZF9ob3N0LmlkfWAgOiBudWxsLFxuICAgICAgICAgICAgdGFyZ2V0X2JsYW5rOiBcInRydWVcIixcbiAgICAgICAgICB9KVxuICAgICAgICB9ICBcbiAgICAgIH0sXG4gICAgICBnZXRfYWN0aXZlX3RhYjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRyZWZzW3RoaXMuYWN0aXZlX3RhYiArIFwiX1wiICsgdGhpcy5wYWdlXTtcbiAgICAgIH0sXG4gICAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBpZihpdGVtLmlkICE9IHRoaXMuYWN0aXZlX3RhYiB8fCBpdGVtLnBhZ2UgIT0gdGhpcy5wYWdlKSB7XG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9tYXBfZXZlbnQsIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH0gIFxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdj5cbiAgPHN2Z1xuICAgIHJlZj1cInNhbmtleV9jaGFydF9yZWZcIlxuICAgIDp3aWR0aD1cInNhbmtleV9zaXplLndpZHRoXCJcbiAgICA6aGVpZ2h0PVwic2Fua2V5X3NpemUuaGVpZ2h0XCJcbiAgICBzdHlsZT1cIm1hcmdpbjoxMHB4O1wiPlxuICAgIDxkZWZzIC8+XG4gICAgPGcgY2xhc3M9XCJub2Rlc1wiIHN0eWxlPVwic3Ryb2tlOiAjMDAwO3N0cm9rZU9wYWNpdHk6IDAuNTtcIi8+XG4gICAgPGcgY2xhc3M9XCJsaW5rc1wiXG4gICAgICAgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC4zOyBmaWxsOiBub25lO1wiLz5cbiAgICA8ZyBjbGFzcz1cInRleHRzXCIgLz5cbiAgPC9zdmc+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N0YXR1c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcblxuY29uc3QgZDMgPSBkM3Y3O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB3aWR0aDogTnVtYmVyLFxuICAgIGhlaWdodDogTnVtYmVyLFxufSk7XG5cbmNvbnN0IHNhbmtleV9jaGFydF9yZWYgPSByZWYobnVsbCk7XG5jb25zdCBzYW5rZXlfc2l6ZSA9IHJlZih7fSk7XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMoKSA9PiB7fSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7ICAgIFxuICAgIGRyYXdfc2Fua2V5KCk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gZHJhd19zYW5rZXkoKSB7XG4gICAgY29uc3QgY29sb3JzID0gZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZUNhdGVnb3J5MTApO1xuICAgIGxldCBkYXRhID0gYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7XG4gICAgY29uc3Qgc2l6ZSA9IGdldF9zaXplKCk7XG4gICAgc2Fua2V5X3NpemUudmFsdWUgPSBzaXplO1xuICAgIGNvbnN0IHsgbGlua3MsIG5vZGVzIH0gPSBjYWxjdWxhdGVfc2Fua2V5KGRhdGEsIHNpemUud2lkdGggLSAxMCwgc2l6ZS5oZWlnaHQgLSA1KTtcbiAgICBcbiAgICBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcubm9kZXNcIilcblx0LnNlbGVjdEFsbChcInJlY3RcIilcblx0LmRhdGEobm9kZXMpXG5cdC5qb2luKFxuICAgICAgICAgICAgKGVudGVyKSA9PiB7XG5cdFx0Y29uc3QgZSA9IGVudGVyLmFwcGVuZChcInJlY3RcIik7XG5cdFx0XG5cdFx0ZS5hdHRyKFwieFwiLCAoZCkgPT4gZC54MCkuYXR0cihcInlcIiwgKGQpID0+IGQueTApO1xuXHRcdFxuXHRcdGUudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdCAgICAuZGVsYXkoMTAwMClcblx0XHQgICAgLmR1cmF0aW9uKDUwMClcblx0XHQgICAgLmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IGQueTEgLSBkLnkwKVxuXHRcdCAgICAuYXR0cihcIndpZHRoXCIsIChkKSA9PiBkLngxIC0gZC54MClcblx0XHQgICAgLmF0dHIoXCJkYXRhSW5kZXhcIiwgKGQpID0+IGQuaW5kZXgpXG5cdFx0ICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcblx0XHRlLmFwcGVuZChcInRpdGxlXCIpLnRleHQoKGQpID0+IGAke2QubmFtZX1cXG4ke2QuaG91cnN9YCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKHVwZGF0ZSkgPT5cblx0XHR1cGRhdGVcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdC5kZWxheSg1MDApXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuYXR0cihcInhcIiwgKGQpID0+IGQueDApXG5cdFx0LmF0dHIoXCJ5XCIsIChkKSA9PiBkLnkwKVxuXHRcdC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiBkLnkxIC0gZC55MClcblx0XHQuYXR0cihcIndpZHRoXCIsIChkKSA9PiBkLngxIC0gZC54MClcblx0XHQuYXR0cihcImRhdGFJbmRleFwiLCAoZCkgPT4gZC5pbmRleClcblx0XHQuYXR0cihcImZpbGxcIiwgKGQpID0+IGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSlcblx0XHQuc2VsZWN0KFwidGl0bGVcIilcblx0XHQudGV4dCgoZCkgPT4gYCR7ZC5uYW1lfVxcbiR7ZC5ob3Vyc31gKSxcbiAgICAgICAgICAgIChleGl0KSA9PlxuXHRcdGV4aXQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKS5kdXJhdGlvbig1MDApLnN0eWxlKFwib3BhY2l0eVwiLCAwKS5yZW1vdmUoKVxuXHQpLm9uKFwiZGJsY2xpY2tcIiwgZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgLy90b2RvIHBvcnRhcmUgZnVvcmlcblx0ICAgIC8vIGRhdGEgPSBkYXRhLmN1cnJlbnRUYXJnZXQuX19kYXRhX19cblx0ICAgIC8vIGNvbnN0IHNvdXJjZUxpbmsgPSBkYXRhLnNvdXJjZUxpbmtzO1xuXHQgICAgLy8gY29uc3QgdGFyZ2V0TGluayA9IGRhdGEudGFyZ2V0TGlua3M7XG5cdCAgICAvLyBjb25zdCBsaW5rID0gKHNvdXJjZUxpbmsgJiYgc291cmNlTGlua1swXSkgPyBzb3VyY2VMaW5rWzBdIDogdGFyZ2V0TGlua1swXTtcblx0ICAgIFxuXHQgICAgLy8gaWYobGluaykge1xuXHQgICAgLy8gICAvKiBHZXQgdGhlIG5vZGUgbGluayBmcm9tIHRoZSByZXN0ICovXG5cdCAgICAvLyAgIGlmKGxpbmsuc291cmNlLmlkID09PSBkYXRhLmlkKSB7XG5cdCAgICAvLyAgICAgaWYobGluay5zb3VyY2VfbGluayAmJiBsaW5rLnNvdXJjZV9saW5rICE9PSAnJylcblx0ICAgIC8vICAgICAgIHdpbmRvdy5vcGVuKGxpbmsuc291cmNlX2xpbmssICdfYmxhbmsnKTtcblx0ICAgIC8vICAgfSBlbHNlIGlmKGxpbmsudGFyZ2V0LmlkID09PSBkYXRhLmlkKSB7XG5cdCAgICAvLyAgICAgaWYobGluay50YXJnZXRfbGluayAmJiBsaW5rLnRhcmdldF9saW5rICE9PSAnJylcblx0ICAgIC8vICAgICAgIHdpbmRvdy5vcGVuKGxpbmsudGFyZ2V0X2xpbmssICdfYmxhbmsnKTtcblx0ICAgIC8vICAgfSBcblx0ICAgIC8vIH0gXG5cdH0pO1xuICAgIFxuICAgIGQzLnNlbGVjdChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKVxuXHQuc2VsZWN0KFwiZy50ZXh0c1wiKVxuXHQuc2VsZWN0QWxsKFwidGV4dFwiKVxuXHQuZGF0YShub2Rlcylcblx0LmpvaW4oXG4gICAgICAgICAgICAoZW50ZXIpID0+IHtcblx0XHRjb25zdCBlID0gZW50ZXIuYXBwZW5kKFwidGV4dFwiKTtcblx0XHRcblx0XHRlLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQgICAgLmRlbGF5KDEwMDApXG5cdFx0ICAgIC5kdXJhdGlvbig1MDApXG5cdFx0ICAgIC5hdHRyKFwieFwiLCAoZCkgPT4gKGQueDAgPCBzaXplLndpZHRoIC8gMiA/IGQueDEgKyA2IDogZC54MCAtIDYpKVxuXHRcdCAgICAuYXR0cihcInlcIiwgKGQpID0+IChkLnkxICsgZC55MCkgLyAyKVxuXHRcdCAgICAuYXR0cihcImZpbGxcIiwgKGQpID0+IGQzLnJnYihjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpLmRhcmtlcigpKVxuXHRcdCAgICAuYXR0cihcImFsaWdubWVudC1iYXNlbGluZVwiLCBcIm1pZGRsZVwiKVxuXHRcdCAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIChkKSA9PlxuXHRcdFx0ICBkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBcInN0YXJ0XCIgOiBcImVuZFwiXG5cdFx0XHQgKVxuXHRcdCAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCA5KVxuXHRcdCAgICAudGV4dCgoZCkgPT4gZC5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodXBkYXRlKSA9PlxuXHRcdHVwZGF0ZVxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0LmRlbGF5KDUwMClcblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5hdHRyKFwieFwiLCAoZCkgPT4gKGQueDAgPCBzaXplLndpZHRoIC8gMiA/IGQueDEgKyA2IDogZC54MCAtIDYpKVxuXHRcdC5hdHRyKFwieVwiLCAoZCkgPT4gKGQueTEgKyBkLnkwKSAvIDIpXG5cdFx0LmF0dHIoXCJmaWxsXCIsIChkKSA9PiBkMy5yZ2IoY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKS5kYXJrZXIoKSlcblx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIChkKSA9PlxuXHRcdCAgICAgIGQueDAgPCBzaXplLndpZHRoIC8gMiA/IFwic3RhcnRcIiA6IFwiZW5kXCJcblx0XHQgICAgIClcblx0XHQuYXR0cihcImZvbnQtc2l6ZVwiLCA5KVxuXHRcdC50ZXh0KChkKSA9PiBkLm5hbWUpLFxuICAgICAgICAgICAgKGV4aXQpID0+XG5cdFx0ZXhpdFxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgICAgICAgICAvKiAuZGVsYXkoNTAwKSAqL1xuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LnN0eWxlKFwib3BhY2l0eVwiLCAwKVxuXHRcdC5yZW1vdmUoKVxuXHQpO1xuICAgIFxuICAgIGQzLnNlbGVjdChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKVxuXHQuc2VsZWN0KFwiZGVmc1wiKVxuXHQuc2VsZWN0QWxsKFwibGluZWFyR3JhZGllbnRcIilcblx0LmRhdGEobGlua3MpXG5cdC5qb2luKFxuICAgICAgICAgICAgKGVudGVyKSA9PiB7XG5cdFx0Y29uc3QgbGcgPSBlbnRlci5hcHBlbmQoXCJsaW5lYXJHcmFkaWVudFwiKTtcblx0XHRcblx0XHRsZy5hdHRyKFwiaWRcIiwgKGQpID0+IGBncmFkaWVudC0ke2QuaW5kZXh9YClcblx0XHQgICAgLmF0dHIoXCJncmFkaWVudFVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIilcblx0XHQgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC5zb3VyY2UueDEpXG5cdFx0ICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQudGFyZ2V0LngwKTtcblx0XHRcblx0XHRsZy5hcHBlbmQoXCJzdG9wXCIpXG5cdFx0ICAgIC5hdHRyKFwib2Zmc2V0XCIsIFwiMFwiKVxuXHRcdCAgICAuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnNvdXJjZS5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuXHRcdFxuXHRcdGxnLmFwcGVuZChcInN0b3BcIilcblx0XHQgICAgLmF0dHIoXCJvZmZzZXRcIiwgXCIxMDAlXCIpXG5cdFx0ICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQudGFyZ2V0LmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKHVwZGF0ZSkgPT4ge1xuXHRcdHVwZGF0ZVxuXHRcdCAgICAuYXR0cihcImlkXCIsIChkKSA9PiBgZ3JhZGllbnQtJHtkLmluZGV4fWApXG5cdFx0ICAgIC5hdHRyKFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpXG5cdFx0ICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQuc291cmNlLngxKVxuXHRcdCAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLnRhcmdldC54MCk7XG5cdFx0dXBkYXRlLnNlbGVjdEFsbChcInN0b3BcIikucmVtb3ZlKCk7XG5cdFx0dXBkYXRlXG5cdFx0ICAgIC5hcHBlbmQoXCJzdG9wXCIpXG5cdFx0ICAgIC5hdHRyKFwib2Zmc2V0XCIsIFwiMFwiKVxuXHRcdCAgICAuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnNvdXJjZS5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuXHRcdFxuXHRcdHVwZGF0ZVxuXHRcdCAgICAuYXBwZW5kKFwic3RvcFwiKVxuXHRcdCAgICAuYXR0cihcIm9mZnNldFwiLCBcIjEwMCVcIilcblx0XHQgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC50YXJnZXQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXhpdCkgPT4gZXhpdC5yZW1vdmUoKVxuXHQpO1xuICAgIFxuICAgIGQzLnNlbGVjdChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKVxuXHQuc2VsZWN0KFwiZy5saW5rc1wiKVxuXHQuc2VsZWN0QWxsKFwicGF0aFwiKVxuXHQuZGF0YShsaW5rcylcblx0LmpvaW4oXG4gICAgICAgICAgICAoZW50ZXIpID0+IHtcblx0XHRjb25zdCBlID0gZW50ZXIuYXBwZW5kKFwicGF0aFwiKTtcblx0XHRlLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQgICAgLmRlbGF5KDEwMDApXG5cdFx0ICAgIC5kdXJhdGlvbig1MDApXG5cdFx0ICAgIC5hdHRyKFwiZFwiLCBkMy5zYW5rZXlMaW5rSG9yaXpvbnRhbCgpKVxuXHRcdCAgICAuYXR0cihcInN0cm9rZVwiLCAoZCkgPT4gYHVybCgjZ3JhZGllbnQtJHtkLmluZGV4fWApXG5cdFx0ICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIChkKSA9PiBkLndpZHRoKTtcblx0XHRlLmFwcGVuZChcInRpdGxlXCIpLnRleHQoKGQpID0+IGAke2QuaG91cnN9YCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKHVwZGF0ZSkgPT5cblx0XHR1cGRhdGVcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdC5kZWxheSg1MDApXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuYXR0cihcImRcIiwgZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSlcblx0XHQuYXR0cihcInN0cm9rZVwiLCAoZCkgPT4gYHVybCgjZ3JhZGllbnQtJHtkLmluZGV4fWApXG5cdFx0LmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKGQpID0+IGQud2lkdGgpXG5cdFx0LnNlbGVjdChcInRpdGxlXCIpXG5cdFx0LnRleHQoKGQpID0+IGAke2QuaG91cnN9YCksXG4gICAgICAgICAgICAoZXhpdCkgPT5cblx0XHRleGl0XG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcbiAgICAgICAgICAgIC8qIC5kZWxheSgxMDAwKSAqL1xuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LnN0eWxlKFwib3BhY2l0eVwiLCAwKVxuXHRcdC5yZW1vdmUoKVxuXHQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfc2Fua2V5X2RhdGEoKSB7XG4gICAgY29uc3QgcnNwID0gW1xuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1JR01QXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIklHTVBcIixcblx0ICAgIFwibGlua1wiOiBcIklHTVBcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0yMjQuMC4wLjI1MSZ2bGFuPTBcIixcblx0ICAgIFwidGFyZ2V0X25vZGVcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJzb3VyY2Vfbm9kZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcInZhbHVlXCI6IDYwXG5cdH0sXG5cdHtcblx0ICAgIFwibGlua19jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTBcIixcblx0ICAgIFwidGFyZ2V0XCI6IFwiSUdNUFwiLFxuXHQgICAgXCJzb3VyY2VcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJsaW5rXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9wYWdlPWZsb3dzJmhvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wJmFwcGxpY2F0aW9uPUlHTVBcIixcblx0ICAgIFwidGFyZ2V0X25vZGVcIjogXCIyMjQuMC4wLjJcIixcblx0ICAgIFwidGFyZ2V0X2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2Vfbm9kZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcInZhbHVlXCI6IDEyMFxuXHR9LFxuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1JR01QXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIjIyNC4wLjAuMlwiLFxuXHQgICAgXCJzb3VyY2VcIjogXCJJR01QXCIsXG5cdCAgICBcImxpbmtcIjogXCJJR01QXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MjI0LjAuMC4yJnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMlwiLFxuXHQgICAgXCJzb3VyY2Vfbm9kZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcInZhbHVlXCI6IDYwXG5cdH0sXG5cdHtcblx0ICAgIFwibGlua19jb2xvclwiOiBcIiNiY2JkMjJcIixcblx0ICAgIFwic291cmNlX2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTBcIixcblx0ICAgIFwidGFyZ2V0XCI6IFwiTUROU1wiLFxuXHQgICAgXCJzb3VyY2VcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJsaW5rXCI6IFwiTUROU1wiLFxuXHQgICAgXCJ0YXJnZXRfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9wYWdlPWZsb3dzJmhvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wJmFwcGxpY2F0aW9uPU1ETlNcIixcblx0ICAgIFwidGFyZ2V0X25vZGVcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJ0YXJnZXRfY29sb3JcIjogXCIjYmNiZDIyXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogMzk2XG5cdH0sXG5cdHtcblx0ICAgIFwibGlua19jb2xvclwiOiBcIiNiY2JkMjJcIixcblx0ICAgIFwic291cmNlX2NvbG9yXCI6IFwiI2JjYmQyMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9wYWdlPWZsb3dzJmhvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wJmFwcGxpY2F0aW9uPU1ETlNcIixcblx0ICAgIFwidGFyZ2V0XCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwic291cmNlXCI6IFwiTUROU1wiLFxuXHQgICAgXCJsaW5rXCI6IFwiTUROU1wiLFxuXHQgICAgXCJ0YXJnZXRfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTIyNC4wLjAuMjUxJnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogMzk2XG5cdH1cbiAgICBdO1xuICAgIFxuICAgICAgICBcbiAgICBsZXQgZGF0YSA9IHtcblx0Ly8gbm9kZXM6IFtcblx0Ly8gICAgIHsgaW5kZXg6IDAsIG5hbWU6IFwiTGlpa2V2YWlodG9cIiwgdmFsdWU6IDEwMCwgaG91cnM6IFwiMTAwJVwiIH0sXG5cdC8vICAgICB7IGluZGV4OiAxLCBuYW1lOiBcIktpaW50ZcOkdCBrdWx1dFwiLCB2YWx1ZTogNzUsIGhvdXJzOiBcIjg1JVwiIH0sXG5cdC8vICAgICB7IGluZGV4OiAyLCBuYW1lOiBcIk11dXR0dXZhdCBrdWx1dFwiLCB2YWx1ZTogMTAsIGhvdXJzOiBcIjM6MDBcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogMywgbmFtZTogXCJQYWxra2FrdWx1dFwiLCB2YWx1ZTogNjksIGhvdXJzOiBcIjE6MjBcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogNCwgbmFtZTogXCJNdXV0IGtpaW50ZVwiLCB2YWx1ZTogNiwgaG91cnM6IFwiMTo0MFwiIH0sXG5cdC8vICAgICB7IGluZGV4OiA1LCBuYW1lOiBcIkthdGVcIiwgdmFsdWU6IDE1LCBob3VyczogXCIxOjQwXCIgfVxuXHQvLyBdLFxuXHRub2RlczogW1xuXHQgICAgeyBpbmRleDogMCwgbmFtZTogXCJMaWlrZXZhaWh0b1wiLCBob3VyczogXCIxMDAlXCIgfSxcblx0ICAgIHsgaW5kZXg6IDEsIG5hbWU6IFwiS2lpbnRlw6R0IGt1bHV0XCIsIGhvdXJzOiBcIjg1JVwiIH0sXG5cdCAgICB7IGluZGV4OiAyLCBuYW1lOiBcIk11dXR0dXZhdCBrdWx1dFwiLCBob3VyczogXCIzOjAwXCIgfSxcblx0ICAgIHsgaW5kZXg6IDMsIG5hbWU6IFwiUGFsa2tha3VsdXRcIiwgaG91cnM6IFwiMToyMFwiIH0sXG5cdCAgICB7IGluZGV4OiA0LCBuYW1lOiBcIk11dXQga2lpbnRlXCIsIGhvdXJzOiBcIjE6NDBcIiB9LFxuXHQgICAgeyBpbmRleDogNSwgbmFtZTogXCJLYXRlXCIsIGhvdXJzOiBcIjE6NDBcIiB9XG5cdF0sXG5cdGxpbmtzOiBbXG5cdCAgICB7IHNvdXJjZTogMCwgdGFyZ2V0OiAxLCB2YWx1ZTogNzUsIGhvdXJzOiBcIisxOjAwXCIgfSxcblx0ICAgIHsgc291cmNlOiAwLCB0YXJnZXQ6IDIsIHZhbHVlOiAxMCwgaG91cnM6IFwiKzI6MDBcIiB9LFxuXHQgICAgeyBzb3VyY2U6IDEsIHRhcmdldDogMywgdmFsdWU6IDY5LCBob3VyczogXCIrMToyMFwiIH0sXG5cdCAgICB7IHNvdXJjZTogMSwgdGFyZ2V0OiA0LCB2YWx1ZTogNiwgaG91cnM6IFwiKzE6NDBcIiB9LFxuXHQgICAgeyBzb3VyY2U6IDAsIHRhcmdldDogNSwgdmFsdWU6IDE1LCBob3VyczogXCIrMTo0MFwiIH1cblx0XVxuICAgIH07XG5cbiAgICBkYXRhID0gd3JhcF9ncmFwaF9yc3AocnNwKTtcblxuICAgIGRlYnVnZ2VyO1xuICAgIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiB3cmFwX2dyYXBoX3JzcChyc3ApIHtcbiAgICBsZXQgbm9kZXMgPSBbXTtcbiAgICBsZXQgbGlua3MgPSBbXTtcblxuICAgIGxldCBub2Rlc19hZGRlZF9kaWN0ID0ge307XG4gICAgbGV0IGxpbmtzX2FkZGVkX2RpY3QgPSB7fTtcbiAgICBjb25zdCBmX2FkZF9ub2RlID0gKG5vZGVfaWQsIGhyZWYsIGNvbG9yKSA9PiB7XG5cdGlmIChub2Rlc19hZGRlZF9kaWN0W25vZGVfaWRdICE9IG51bGwpIHsgcmV0dXJuOyB9XG5cdGxldCBpbmRleCA9IG5vZGVzLmxlbmd0aDtcblx0bm9kZXNfYWRkZWRfZGljdFtub2RlX2lkXSA9IGluZGV4O1xuXHRsZXQgbmV3X25vZGUgPSB7IGluZGV4LCBuYW1lOiBub2RlX2lkLCBocmVmLCBjb2xvciB9O1xuXHRub2Rlcy5wdXNoKG5ld19ub2RlKTtcbiAgICB9O1xuICAgIGNvbnN0IGZfYWRkX2xpbmsgPSAoc291cmNlLCB0YXJnZXQsIHZhbHVlLCBsYWJlbCkgPT4ge1xuXHRjb25zdCBzb3VyY2VfaW5kZXggPSBub2Rlc19hZGRlZF9kaWN0W3NvdXJjZV07XG5cdGNvbnN0IHRhcmdldF9pbmRleCA9IG5vZGVzX2FkZGVkX2RpY3RbdGFyZ2V0XTtcblx0bGV0IG5ld19saW5rID0geyBzb3VyY2U6IHNvdXJjZV9pbmRleCwgdGFyZ2V0OiB0YXJnZXRfaW5kZXgsIHZhbHVlLCBsYWJlbCB9O1xuXHRsaW5rcy5wdXNoKG5ld19saW5rKTtcbiAgICB9O1xuICAgIHJzcC5mb3JFYWNoKChlbCkgPT4ge1xuXHRmX2FkZF9ub2RlKGVsLnNvdXJjZSwgZWwuc291cmNlX2xpbmssIGVsLnNvdXJjZV9jb2xvcik7XG5cdGZfYWRkX25vZGUoZWwudGFyZ2V0LCBlbC50YXJnZXRfbGluaywgZWwudGFyZ2V0X2NvbG9yKTtcblx0Zl9hZGRfbGluayhlbC5zb3VyY2UsIGVsLnRhcmdldCwgZWwudmFsdWUsIGVsLmxpbmspO1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9O1xufVxuXG5mdW5jdGlvbiBnZXRfc2l6ZSgpIHtcbiAgICBsZXQgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICBpZiAod2lkdGggPT0gbnVsbCkgeyB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gMjAwOyB9XG4gICAgbGV0IGhlaWdodCA9IHByb3BzLmhlaWdodDtcbiAgICBpZiAoaGVpZ2h0ID09IG51bGwpIHsgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gNTA7IH1cblxuICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlX3NhbmtleShkYXRhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3Qgc2Fua2V5aW1wbCA9IGQzLnNhbmtleSgpXG5cdCAgLm5vZGVBbGlnbihkMy5zYW5rZXlDZW50ZXIpXG5cdCAgLm5vZGVXaWR0aCgxMClcblx0ICAubm9kZVBhZGRpbmcoMTApXG5cdCAgLmV4dGVudChbXG5cdCAgICAgIFswLCA1XSxcblx0ICAgICAgW3dpZHRoLCBoZWlnaHRdXG5cdCAgXSk7XG4gICAgXG4gICAgcmV0dXJuIHNhbmtleWltcGwoZGF0YSk7XG59XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4ubm9kZSByZWN0IHtcbiAgZmlsbC1vcGFjaXR5OiAwLjk7XG4gIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BFZGdlcztcbn1cblxuLm5vZGUgdGV4dCB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmO1xufVxuXG4ubGluayB7XG4gIGZpbGw6IG5vbmU7XG4gIHN0cm9rZTogIzAwMDtcbiAgc3Ryb2tlLW9wYWNpdHk6IDAuMjtcbn1cblxuLmxpbms6aG92ZXIge1xuICBzdHJva2Utb3BhY2l0eTogMC41O1xufVxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc190YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNfdGFiX2xpc3RcIlxuICAgICAgICAgICAgOnRhYl9saXN0PVwidGFiX2xpc3RcIlxuICAgICAgICAgICAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgPC90YWItbGlzdD5cblxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJjaGFydF9vcHRpb24gaW4gY2hhcnRfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTZcIj5cbiAgICAgICAgICAgICAgICA8aDMgdi1pZj1cImNoYXJ0X29wdGlvbi50YWIgPT0gYXBwbGljYXRpb25zX3RhYlwiIGNsYXNzPVwid2lkZ2V0LW5hbWVcIj57eyBjaGFydF9vcHRpb24udGl0bGUgfX08L2gzPlxuICAgICAgICAgICAgICAgIDxjaGFydCB2LWlmPVwiY2hhcnRfb3B0aW9uLnRhYiA9PSBhcHBsaWNhdGlvbnNfdGFiXCJcbiAgICAgICAgICAgICAgICAgIDppZD1cImNoYXJ0X29wdGlvbi5pZFwiXG4gICAgICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X29wdGlvbi50eXBlXCJcbiAgICAgICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwiY2hhcnRfb3B0aW9uLnVybFwiXG4gICAgICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgPC9jaGFydD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFwcGxpY2F0aW9uc190YWIgPT0gJ2FwcGxpY2F0aW9ucydcIiByZWY9XCJ0YWJsZV9ob3N0X2FwcGxpY2F0aW9uc1wiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFwcGxpY2F0aW9uc190YWIgPT0gJ2NhdGVnb3JpZXMnXCIgcmVmPVwidGFibGVfaG9zdF9jYXRlZ29yaWVzXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCA9IFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdjaGFydCc6IENoYXJ0LFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICBpc19jaF9lbmFibGVkOiBCb29sZWFuLFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2aWV3XCIpIHx8IHRoaXMuJHByb3BzLnZpZXdcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9PSBpLmlkID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgIH0pO1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIiwgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiLmlkKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9IHRhYi5pZDtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYXBwbGljYXRpb25zX3RhYjogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9uczogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXM6IG51bGwsXG4gICAgICBjaGFydF9vcHRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF8xMF9uZHBpX3Byb3RvY29scycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L3Byb3RvX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2FwcGxpY2F0aW9uc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfY2F0ZWdvcmllcycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2NhdF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgY2F0ZWdvcmllc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfY2F0ZWdvcmllc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdhcHBsaWNhdGlvbnMnKSxcbiAgICAgICAgICBpZDogJ2FwcGxpY2F0aW9ucydcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmNhdGVnb3JpZXNfdGFiJyksXG4gICAgICAgICAgYWN0aXZlOiAodGhpcy4kcHJvcHMudmlldyA9PSAnY2F0ZWdvcmllcycpLFxuICAgICAgICAgIGlkOiAnY2F0ZWdvcmllcydcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkX2FjdGlvbl9jb2x1bW46IGZ1bmN0aW9uKGNvbHVtbnMsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBjb25zdCBob3N0ID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fWBcbiAgICAgIGNvbnN0IHZsYW4gPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59YFxuICAgICAgY29uc3QgaWZpZCA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMuaWZpZH1gXG4gICAgICBsZXQgaGFuZGxlcklkID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcbiAgICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcbiAgICAgICAgICBoYW5kbGVySWQsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/aWZpZD0ke2lmaWR9JiR7bmFtZX09JHtzZXJ2aWNlW3ZhbHVlXS5pZH07ZXEmaXA9JHtob3N0fTtlcWBcbiAgICAgICAgICAgIGlmKHZsYW4gIT0gMClcbiAgICAgICAgICAgICAgdXJsID0gYCR7dXJsfSZ2bGFuX2lkPSR7dmxhbn07ZXFgXG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dKVxuICAgICAgfX0pXG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCBpdGVtKTtcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hvc3RfJHt0aGlzLmFwcGxpY2F0aW9uc190YWJ9YF07XG4gICAgfSxcbiAgICBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImdldF9mX1wiKTtcbiAgICAgIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKFBhZ2VWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBQYWdlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdhcHBsaWNhdGlvbnMnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyA2IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA1IH0sXG4gICAgICBdXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvblwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdhcHBsaWNhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9QCR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy52bGFufSZ0c19zY2hlbWE9aG9zdDpuZHBpJnBhZ2U9aGlzdG9yaWNhbCZwcm90b2NvbD0ke2RhdGEubGFiZWx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmR1cmF0aW9uXCIpLCB0YXJnZXRzOiAxLCB3aWR0aDogJzEwJywgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuc2VudFwiKSwgdGFyZ2V0czogMiwgd2lkdGg6ICcxMCcsIG5hbWU6ICdzZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMucmN2ZFwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcxMCcsIG5hbWU6ICdyY3ZkJywgZGF0YTogJ2J5dGVzX3JjdmQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmJyZWFrZG93blwiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICdicmVha2Rvd24nLCBkYXRhOiAnYnJlYWtkb3duJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3NlbnQgPSAocm93LmJ5dGVzX3NlbnQgKiAxMDApIC8gcm93LnRvdF9ieXRlcztcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9yY3ZkID0gKHJvdy5ieXRlc19yY3ZkICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2Vfc2VudCwgcGVyY2VudGFnZV9yY3ZkLCBpMThuKCdob3N0X2RldGFpbHMuc2VudCcpLCBpMThuKCdob3N0X2RldGFpbHMucmN2ZCcpKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogNSwgd2lkdGg6ICcyMCcsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90X2J5dGVzJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcyMCcsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gIF07XG5cbiAgaWYoaXNfY2hfZW5hYmxlZClcbiAgICBQYWdlVnVlLmFkZF9hY3Rpb25fY29sdW1uKGNvbHVtbnMsICdsN3Byb3RvJywgJ2FwcGxpY2F0aW9uJyk7XG4gIFxuICBsZXQgYXBwbGljYXRpb25zQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGFwcGxpY2F0aW9uc0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIFBhZ2VWdWUuY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zID0gYXBwbGljYXRpb25zQ29uZmlnO1xuXG5cbiAgLyogQ2F0ZWdvcmllcyB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NhdGVnb3JpZXMnICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKVxuXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuY2F0ZWdvcnlcIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjAnLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fUAke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMudmxhbn0mdHNfc2NoZW1hPWhvc3Q6bmRwaV9jYXRlZ29yaWVzJnBhZ2U9aGlzdG9yaWNhbCZjYXRlZ29yeT0ke2RhdGEubGFiZWx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc1wiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdhcHBsaWNhdGlvbnMnLCBkYXRhOiAnYXBwbGljYXRpb25zJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWwgfHwgJyd9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS8ke2RhdGEuaHJlZn0ke2RhdGEuY2F0ZWdvcnlfaWR9XCI+JHtkYXRhLm1vcmVfcHJvdG9zIHx8ICcnfTwvYT5gXG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmR1cmF0aW9uXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzE1JywgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X2J5dGVzXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzIwJywgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjUnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICdwZXJjZW50YWdlJywgd2lkdGg6ICcyMCUnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBpZihpc19jaF9lbmFibGVkKVxuICAgIFBhZ2VWdWUuYWRkX2FjdGlvbl9jb2x1bW4oY29sdW1ucywgJ2w3Y2F0JywgJ2NhdGVnb3J5Jyk7XG4gIFxuICBsZXQgY2F0ZWdvcmllc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjYXRlZ29yaWVzQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcub3JkZXIgPSBbWyA0IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV1cbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcuY29sdW1uRGVmcyA9IFtcbiAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMiB9LFxuICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICBdXG4gIFxuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzQ29uZmlnO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zXCI+XG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG1iLTQgbXQtNFwiIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICAgICAgPGgzIHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIiBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICA8Y2hhcnQgdi1pZj1cImNoYXJ0X29wdGlvbi50YWIgPT0gYXBwbGljYXRpb25zX3RhYlwiXG4gICAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgIDwvY2hhcnQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdhcHBsaWNhdGlvbnMnXCIgcmVmPVwidGFibGVfaG9zdF9hcHBsaWNhdGlvbnNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdjYXRlZ29yaWVzJ1wiIHJlZj1cInRhYmxlX2hvc3RfY2F0ZWdvcmllc1wiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQgPSBcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnY2hhcnQnOiBDaGFydCxcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgaXNfY2hfZW5hYmxlZDogQm9vbGVhbixcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmlld1wiKSB8fCB0aGlzLiRwcm9wcy52aWV3XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPT0gaS5pZCA/IGkuYWN0aXZlID0gdHJ1ZSA6IGkuYWN0aXZlID0gZmFsc2VcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCIsIGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG5cdCAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRhYi5pZCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPSB0YWIuaWQ7XG4gICAgfSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGFwcGxpY2F0aW9uc190YWI6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnM6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzOiBudWxsLFxuICAgICAgY2hhcnRfb3B0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfMTBfbmRwaV9wcm90b2NvbHMnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9wcm90b19kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgYXBwbGljYXRpb25zYCxcbiAgICAgICAgICBpZDogYHRvcF9hcHBsaWNhdGlvbnNgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfYnJlZWQnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9icmVlZF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgYXBwbGljYXRpb25zYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF8xMF9uZHBpX2NhdGVnb3JpZXMnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9jYXRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGNhdGVnb3JpZXNgLFxuICAgICAgICAgIGlkOiBgdG9wX2NhdGVnb3JpZXNgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfYnJlZWQnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9icmVlZF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgY2F0ZWdvcmllc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfYnJlZWRgLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHRhYl9saXN0OiBbXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2hvc3RfZGV0YWlscy5hcHBsaWNhdGlvbnNfdGFiJyksXG4gICAgICAgICAgYWN0aXZlOiAodGhpcy4kcHJvcHMudmlldyA9PSAnYXBwbGljYXRpb25zJyksXG4gICAgICAgICAgaWQ6ICdhcHBsaWNhdGlvbnMnXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2hvc3RfZGV0YWlscy5jYXRlZ29yaWVzX3RhYicpLFxuICAgICAgICAgIGFjdGl2ZTogKHRoaXMuJHByb3BzLnZpZXcgPT0gJ2NhdGVnb3JpZXMnKSxcbiAgICAgICAgICBpZDogJ2NhdGVnb3JpZXMnXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFkZF9hY3Rpb25fY29sdW1uOiBmdW5jdGlvbihjb2x1bW5zLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgY29uc3QgaG9zdCA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1gXG4gICAgICBjb25zdCB2bGFuID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy52bGFufWBcbiAgICAgIGNvbnN0IGlmaWQgPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmlmaWR9YFxuICAgICAgbGV0IGhhbmRsZXJJZCA9IFwicGFnZS1zdGF0cy1hY3Rpb24tanVtcC1oaXN0b3JpY2FsXCI7XG4gICAgICBjb2x1bW5zLnB1c2goeyBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZCwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgc2VydmljZSkgPT4ge1xuICAgICAgICBjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG4gICAgICAgICAgaGFuZGxlcklkLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2lmaWQ9JHtpZmlkfSYke25hbWV9PSR7c2VydmljZVt2YWx1ZV0uaWR9O2VxJmlwPSR7aG9zdH07ZXFgXG4gICAgICAgICAgICBpZih2bGFuICE9IDApXG4gICAgICAgICAgICAgIHVybCA9IGAke3VybH0mdmxhbl9pZD0ke3ZsYW59O2VxYFxuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW3sgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9XSlcbiAgICAgIH19KVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCwgaXRlbSk7XG4gICAgfSwgXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9ob3N0XyR7dGhpcy5hcHBsaWNhdGlvbnNfdGFifWBdO1xuICAgIH0sXG4gICAgZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKCkge1xuICAgICAgY29uc29sZS5sb2coXCJnZXRfZl9cIik7XG4gICAgICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hhcnRzX29wdGlvbnNfaXRlbXMudmFsdWVbY2hhcnRfaW5kZXhdLmNoYXJ0X29wdGlvbnM7XG4gICAgICB9XG4gICAgfVxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShQYWdlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgUGFnZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnYXBwbGljYXRpb25zJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2RhdGEubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzZXJ2ZXJTaWRlOiBmYWxzZSwgXG4gICAgICBvcmRlcjogW1sgNiAvKiBwZXJjZW50YWdlIGNvbHVtbiAqLywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMSB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDIgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogNSB9LFxuICAgICAgXVxuICAgIH1cbiAgfTtcbiAgXG4gIC8qIEFwcGxpY2F0aW9ucyB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBsZXQgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuYXBwbGljYXRpb25cIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjAnLCBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhOiAnYXBwbGljYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fUAke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMudmxhbn0mdHNfc2NoZW1hPWhvc3Q6bmRwaSZwYWdlPWhpc3RvcmljYWwmcHJvdG9jb2w9JHtkYXRhLmxhYmVsfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5kdXJhdGlvblwiKSwgdGFyZ2V0czogMSwgd2lkdGg6ICcxMCcsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnNlbnRcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMTAnLCBuYW1lOiAnc2VudCcsIGRhdGE6ICdieXRlc19zZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnJjdmRcIiksIHRhcmdldHM6IDMsIHdpZHRoOiAnMTAnLCBuYW1lOiAncmN2ZCcsIGRhdGE6ICdieXRlc19yY3ZkJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5icmVha2Rvd25cIiksIHRhcmdldHM6IDQsIHdpZHRoOiAnMTAnLCBuYW1lOiAnYnJlYWtkb3duJywgZGF0YTogJ2JyZWFrZG93bicsIG9yZGVyYWJsZTogZmFsc2UsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhLCB0eXBlLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9zZW50ID0gKHJvdy5ieXRlc19zZW50ICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VfcmN2ZCA9IChyb3cuYnl0ZXNfcmN2ZCAqIDEwMCkgLyByb3cudG90X2J5dGVzO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlX3NlbnQsIHBlcmNlbnRhZ2VfcmN2ZCwgaTE4bignaG9zdF9kZXRhaWxzLnNlbnQnKSwgaTE4bignaG9zdF9kZXRhaWxzLnJjdmQnKSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfYnl0ZXNcIiksIHRhcmdldHM6IDUsIHdpZHRoOiAnMjAnLCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDYsIHdpZHRoOiAnMjAnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICdwZXJjZW50YWdlJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGlmKGlzX2NoX2VuYWJsZWQpXG4gICAgUGFnZVZ1ZS5hZGRfYWN0aW9uX2NvbHVtbihjb2x1bW5zLCAnbDdwcm90bycsICdhcHBsaWNhdGlvbicpO1xuICBcbiAgbGV0IGFwcGxpY2F0aW9uc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBhcHBsaWNhdGlvbnNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucyA9IGFwcGxpY2F0aW9uc0NvbmZpZztcblxuXG4gIC8qIENhdGVnb3JpZXMgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjYXRlZ29yaWVzJyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2RhdGEubHVhYCwgdG1wX3BhcmFtcylcblxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmNhdGVnb3J5XCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzIwJywgbmFtZTogJ2NhdGVnb3J5JywgZGF0YTogJ2NhdGVnb3J5JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnRzX3NjaGVtYT1ob3N0Om5kcGlfY2F0ZWdvcmllcyZwYWdlPWhpc3RvcmljYWwmY2F0ZWdvcnk9JHtkYXRhLmxhYmVsfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvbnNcIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjAnLCBuYW1lOiAnYXBwbGljYXRpb25zJywgZGF0YTogJ2FwcGxpY2F0aW9ucycsIG9yZGVyYWJsZTogZmFsc2UsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsIHx8ICcnfSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vJHtkYXRhLmhyZWZ9JHtkYXRhLmNhdGVnb3J5X2lkfVwiPiR7ZGF0YS5tb3JlX3Byb3RvcyB8fCAnJ308L2E+YFxuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5kdXJhdGlvblwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcxNScsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90X2J5dGVzJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9wZXJjZW50YWdlXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzI1JywgbmFtZTogJ3BlcmNlbnRhZ2UnLCBkYXRhOiAncGVyY2VudGFnZScsIHdpZHRoOiAnMjAlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gIF07XG5cbiAgaWYoaXNfY2hfZW5hYmxlZClcbiAgICBQYWdlVnVlLmFkZF9hY3Rpb25fY29sdW1uKGNvbHVtbnMsICdsN2NhdCcsICdjYXRlZ29yeScpO1xuICBcbiAgbGV0IGNhdGVnb3JpZXNDb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY2F0ZWdvcmllc0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNhdGVnb3JpZXNDb25maWcudGFibGVfY29uZmlnLm9yZGVyID0gW1sgNCAvKiBwZXJjZW50YWdlIGNvbHVtbiAqLywgJ2Rlc2MnIF1dXG4gIGNhdGVnb3JpZXNDb25maWcudGFibGVfY29uZmlnLmNvbHVtbkRlZnMgPSBbXG4gICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDIgfSxcbiAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgXVxuICBcbiAgUGFnZVZ1ZS5jb25maWdfZGV2aWNlc19jYXRlZ29yaWVzID0gY2F0ZWdvcmllc0NvbmZpZztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwiaG9zdF9kZXRhaWxzX3RyYWZmaWNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG1iLTQgbXQtNFwiIGlkPVwiaG9zdF9kZXRhaWxzX3RyYWZmaWNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNFwiPlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICA8Q2hhcnRcbiAgICAgICAgICAgICAgICAgIDppZD1cImNoYXJ0X29wdGlvbi5pZFwiXG4gICAgICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X29wdGlvbi50eXBlXCJcbiAgICAgICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwiY2hhcnRfb3B0aW9uLnVybFwiXG4gICAgICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIDxEYXRhdGFibGUgcmVmPVwidHJhZmZpY190YWJsZVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ190cmFmZmljX3RhYmxlLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX3RyYWZmaWNfdGFibGUuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX3RyYWZmaWNfdGFibGUuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfdHJhZmZpY190YWJsZS5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfdHJhZmZpY190YWJsZS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L0RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uVW5tb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbmNvbnN0IHRyYWZmaWNfdGFibGUgPSByZWYobnVsbCk7XG5jb25zdCBjaGFydHMgPSByZWYoW10pO1xuY29uc3QgY29uZmlnX3RyYWZmaWNfdGFibGUgPSByZWYoe30pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxufSlcblxuY29uc3QgZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID0gKCkgPT4ge1xuICBjb25zb2xlLmxvZyhcImdldF9mX1wiKTtcbiAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICByZXR1cm4gY2hhcnRzX29wdGlvbnNfaXRlbXMudmFsdWVbY2hhcnRfaW5kZXhdLmNoYXJ0X29wdGlvbnM7XG4gIH1cbn1cblxuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgdHJhZmZpY190YWJsZS52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9ICgpID0+IHtcbiAgdHJhZmZpY190YWJsZS52YWx1ZS5yZWxvYWQoKTtcbn1cbiAgICBcbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBzdGFydF9kYXRhdGFibGUoKTtcbn0pO1xuXG5vblVubW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGRlc3Ryb3koKVxufSk7XG5cbmNvbnN0IGNoYXJ0X29wdGlvbnMgPSBbXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLmw0X3Byb3RvJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDQvcHJvdG9fZGF0YS5sdWFgLFxuICAgIGlkOiBgdHJhZmZpY19wcm90b3NgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5jb250YWN0ZWRfaG9zdHMnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC9jb250YWN0ZWRfaG9zdHNfZGF0YS5sdWFgLFxuICAgIGlkOiBgY29udGFjdGVkX2hvc3RzYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMudHJhZmZpYycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w0L3RyYWZmaWNfZGF0YS5sdWFgLFxuICAgIGlkOiBgdHJhZmZpY2AsXG4gIH0sXG5dXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShQYWdlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgdXJsX3BhcmFtcyA9IHt9XG4gIFxuICB1cmxfcGFyYW1zW1wiaG9zdFwiXSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKVxuICB1cmxfcGFyYW1zW1widmxhblwiXSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhblwiKVxuICB1cmxfcGFyYW1zW1wiaWZpZFwiXSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKVxuXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w0L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzZXJ2ZXJTaWRlOiBmYWxzZSwgXG4gICAgICBvcmRlcjogW1sgNiAvKiBwZXJjZW50YWdlIGNvbHVtbiAqLywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMSB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDIgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogNSB9LFxuICAgICAgXVxuICAgIH1cbiAgfTtcbiAgXG4gIC8qIEFwcGxpY2F0aW9ucyB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBsZXQgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJwcm90b2NvbFwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3Byb3RvY29sJywgZGF0YTogJ3Byb3RvY29sJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJjaGFydFwiKSwgdGFyZ2V0czogMSwgbmFtZTogJ2hpc3RvcmljYWwnLCBkYXRhOiAnaGlzdG9yaWNhbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMuYnl0ZXNfc2VudFwiKSwgdGFyZ2V0czogMiwgbmFtZTogJ3NlbnQnLCBkYXRhOiAnYnl0ZXNfc2VudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLmJ5dGVzX3JjdmRcIiksIHRhcmdldHM6IDMsIG5hbWU6ICdyY3ZkJywgZGF0YTogJ2J5dGVzX3JjdmQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMuYnJlYWtkb3duXCIpLCB0YXJnZXRzOiA0LCBuYW1lOiAnYnJlYWtkb3duJywgZGF0YTogJ2JyZWFrZG93bicsIG9yZGVyYWJsZTogZmFsc2UsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhLCB0eXBlLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9zZW50ID0gKHJvdy5ieXRlc19zZW50ICogMTAwKSAvIHJvdy50b3RhbF9ieXRlcztcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9yY3ZkID0gKHJvdy5ieXRlc19yY3ZkICogMTAwKSAvIHJvdy50b3RhbF9ieXRlcztcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVCcmVha2Rvd24ocGVyY2VudGFnZV9zZW50LCBwZXJjZW50YWdlX3JjdmQsIGkxOG4oJ2hvc3RfZGV0YWlscy5zZW50JyksIGkxOG4oJ2hvc3RfZGV0YWlscy5yY3ZkJykpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX2xhYmVscy50b3RhbF9ieXRlc1wiKSwgdGFyZ2V0czogNSwgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RhbF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX2xhYmVscy50b3RhbF9wZXJjZW50YWdlXCIpLCB0YXJnZXRzOiA2LCB3aWR0aDogJzIwJScsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3RvdGFsX3BlcmNlbnRhZ2UnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gIF07XG5cbiAgbGV0IHRyYWZmaWNDb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgdHJhZmZpY0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ190cmFmZmljX3RhYmxlLnZhbHVlID0gdHJhZmZpY0NvbmZpZztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNiBtYi00IG10LTRcIj5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzPVwid2lkZ2V0LW5hbWVcIj57eyBjaGFydF9vcHRpb24udGl0bGUgfX08L2gzPlxuICAgICAgICAgICAgICA8Q2hhcnRcbiAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwiY2hhcnRfb3B0aW9uLnVybFwiXG4gICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgQGNoYXJ0X3JlbG9hZGVkPVwiY2hhcnRfZG9uZVwiPlxuICAgICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIHVybF9wYXJhbXM6IE9iamVjdCxcbn0pXG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5wYWNrZXRzX3NlbnQnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wYWNrZXRzL3NlbnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgcGFja2V0c19zZW50YCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMucGFja2V0c19yY3ZkJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcGFja2V0cy9yY3ZkX2RhdGEubHVhYCxcbiAgICBpZDogYHBhY2tldHNfcmN2ZGAsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRjcF9mbGFncycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BhY2tldHMvdGNwX2ZsYWdzX2RhdGEubHVhYCxcbiAgICBpZDogYHRjcF9mbGFnc2AsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLmFycF9kaXN0cmlidXRpb24nKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wYWNrZXRzL2FycF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBhcnBfcmVxdWVzdHNgLFxuICB9LFxuXVxuXG5mdW5jdGlvbiBjaGFydF9kb25lKGRhdGEsIHRtcCwgdG1wMikge1xuICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKClcbn1cblxub25Nb3VudGVkKCgpID0+IHt9KVxuXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIi8qKlxuICAgIChDKSAyMDIzIC0gbnRvcC5vcmcgICAgXG4qL1xuXG48dGVtcGxhdGU+XG4gIDxkaXYgcmVmPVwib3ZlcmxheVwiIGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3Qgb3ZlcmxheSA9IHJlZihudWxsKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe30pO1xuXG4vKiBTaG93IHRoZSBsb2FkaW5nICovXG5mdW5jdGlvbiBzaG93X2xvYWRpbmcodGltZSA9IDUwMCkge1xuICAkKG92ZXJsYXkudmFsdWUpLmZhZGVJbih0aW1lKTtcbn1cblxuLyogSGlkZSB0aGUgbG9hZGluZyAqL1xuZnVuY3Rpb24gaGlkZV9sb2FkaW5nKHRpbWUgPSA1MDApIHtcbiAgJChvdmVybGF5LnZhbHVlKS5mYWRlT3V0KHRpbWUpO1xufVxuXG5kZWZpbmVFeHBvc2UoeyBoaWRlX2xvYWRpbmcsIHNob3dfbG9hZGluZyB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiB2LWlmPVwibm9fZGF0YVwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiIGlkPVwiZW1wdHktbWVzc2FnZVwiPnt7IG5vX2RhdGFfbWVzc2FnZSB8fCBfaTE4bignZmxvd3NfcGFnZS5ub19kYXRhJykgfX08L2Rpdj5cbjxkaXY+XG4gIDxzdmdcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRfcmVmXCJcbiAgICA6d2lkdGg9XCJzYW5rZXlfc2l6ZS53aWR0aFwiXG4gICAgOmhlaWdodD1cInNhbmtleV9zaXplLmhlaWdodFwiXG4gICAgc3R5bGU9XCJtYXJnaW46MTBweDtcIj5cbiAgICA8ZyBjbGFzcz1cIm5vZGVzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC41O1wiLz5cbiAgICA8ZyBjbGFzcz1cImxpbmtzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC4zO2ZpbGw6bm9uZTtcIi8+XG4gIDwvc3ZnPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwID5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5jb25zdCBkMyA9IGQzdjc7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ25vZGVfY2xpY2snLCAndXBkYXRlX3dpZHRoJywgJ3VwZGF0ZV9oZWlnaHQnXSlcblxuY29uc3QgbWFyZ2luID0ge1xuICAgIHRvcDogMi41LFxuICAgIHJpZ2h0OiA1LFxuICAgIGJvdHRvbTogMi41LFxuICAgIGxlZnQ6IDVcbn07XG5cbmNvbnN0IG5vZGVfd2lkdGggPSAxMDtcbmNvbnN0IG5vX2RhdGEgPSByZWYoZmFsc2UpXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBub19kYXRhX21lc3NhZ2U6IFN0cmluZyxcbiAgd2lkdGg6IE51bWJlcixcbiAgaGVpZ2h0OiBOdW1iZXIsXG4gIHNhbmtleV9kYXRhOiBPYmplY3QsXG59KTtcblxuY29uc3Qgc2Fua2V5X2NoYXJ0X3JlZiA9IHJlZihudWxsKTtcbmNvbnN0IHNhbmtleV9zaXplID0gcmVmKHt9KTtcblxub25CZWZvcmVNb3VudChhc3luYygpID0+IHt9KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBzZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBhdHRhY2hfZXZlbnRzKCk7XG59KTtcblxud2F0Y2goKCkgPT4gcHJvcHMuc2Fua2V5X2RhdGEsIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHNldF9zYW5rZXlfZGF0YSh0cnVlKTtcbn0pO1xuXG5mdW5jdGlvbiBzZXRfc2Fua2V5X2RhdGEocmVzZXQpIHtcbiAgICBpZiAocmVzZXQpIHtcblx0JChcIi5ub2Rlc1wiLCBzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKS5lbXB0eSgpO1xuXHQkKFwiLmxpbmtzXCIsIHNhbmtleV9jaGFydF9yZWYudmFsdWUpLmVtcHR5KCk7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zYW5rZXlfZGF0YS5ub2RlcyA9PSBudWxsIHx8IHByb3BzLnNhbmtleV9kYXRhLmxpbmtzID09IG51bGxcblx0fHwgcHJvcHMuc2Fua2V5X2RhdGEubGVuZ3RoID09IDAgfHwgcHJvcHMuc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID09IDApIHtcblx0cmV0dXJuO1xuICAgIH1cbiAgICBkcmF3X3NhbmtleSgpO1xufVxuXG5mdW5jdGlvbiBhdHRhY2hfZXZlbnRzKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiBzZXRfc2Fua2V5X2RhdGEodHJ1ZSkpO1xufVxuXG5sZXQgc2Fua2V5ID0gbnVsbDtcbmxldCBzYW5rZXlEYXRhID0gbnVsbDtcbmFzeW5jIGZ1bmN0aW9uIGRyYXdfc2Fua2V5KCkge1xuICAgIGNvbnN0IGNvbG9ycyA9IGQzLnNjYWxlT3JkaW5hbChkMy5zY2hlbWVDYXRlZ29yeTEwKTtcbiAgICBsZXQgZGF0YSA9IHByb3BzLnNhbmtleV9kYXRhOy8vYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7XG4gICAgY29uc3Qgc2l6ZSA9IGdldF9zaXplKCk7XG4gICAgc2Fua2V5X3NpemUudmFsdWUgPSBzaXplO1xuICAgIHNhbmtleSA9IGNyZWF0ZV9zYW5rZXkoc2l6ZS53aWR0aCAtIDEwLCBzaXplLmhlaWdodCAtIDUpO1xuICAgIHNhbmtleURhdGEgPSBzYW5rZXkoZGF0YSk7XG4gICAgY29uc3QgeyBsaW5rcywgbm9kZXMgfSA9IHNhbmtleURhdGE7XG4gICAgXG4gICAgbGV0IGQzX25vZGVzID0gZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLm5vZGVzXCIpXG5cdC5zZWxlY3RBbGwoXCJnXCIpXG5cdC5kYXRhKG5vZGVzKVxuXHQuam9pbigoZW50ZXIpID0+IGVudGVyLmFwcGVuZChcImdcIikpXG5cdC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiBgdHJhbnNsYXRlKCR7ZC54MH0sICR7ZC55MH0pYClcbiAgICBcbiAgICBjb25zdCB6b29tID0gZDMuem9vbSgpXG5cdCAgLnNjYWxlRXh0ZW50KFsxLCA0MF0pXG5cdCAgLm9uKFwiem9vbVwiLCB6b29tZWQpO1xuICAgIFxuICAgIGQzX25vZGVzLmFwcGVuZChcInJlY3RcIilcbiAgICAvLyAudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgIC8vIC5kZWxheSgxMDAwKVxuICAgIC8vIC5kdXJhdGlvbig1MDApXG5cdC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiBkLnkxIC0gZC55MClcblx0LmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC54MSAtIGQueDApXG5cdC5hdHRyKFwiZGF0YUluZGV4XCIsIChkKSA9PiBkLmluZGV4KVxuXHQuYXR0cihcImZpbGxcIiwgKGQpID0+IGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSlcblx0LmF0dHIoXCJjbGFzc1wiLCBcInNhbmtleS1ub2RlXCIpXG5cdC5hdHRyKFwic3R5bGVcIiwgXCJjdXJzb3I6bW92ZTtcIik7XG4gICAgZDMuc2VsZWN0QWxsKFwicmVjdFwiKS5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KChkKSA9PiBgJHtkLmxhYmVsfWApO1xuICAgIFxuICAgIC8vIFJlbGF0aXZlIHRvIGNvbnRhaW5lci8gbm9kZSByZWN0ICAgIFxuICAgIGQzX25vZGVzLmRhdGEobm9kZXMpXG5cdC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgLy8gLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcbiAgICAvLyAuZGVsYXkoMTAwMClcbiAgICAvLyAuZHVyYXRpb24oNTAwKVxuICAgIFx0LmF0dHIoJ2NsYXNzJywgJ2xhYmVsJylcbiAgICBcdC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnYXV0bycpXG5cdC5hdHRyKFwic3R5bGVcIiwgXCJjdXJzb3I6cG9pbnRlcjtcIilcbiAgICBcdC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgZnVuY3Rpb24oZCkgeyByZXR1cm4gMTsgfSApXG4gICAgXHQuYXR0cihcImZpbGxcIiwgKGQpID0+IFwiIzAwMFwiKVxuICAgIC8vIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gZDMucmdiKGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSkuZGFya2VyKCkpXG5cdC5hdHRyKFwieFwiLCAoZCkgPT4gKGQueDAgPCBzaXplLndpZHRoIC8gMiA/IDYgKyAoZC54MSAtIGQueDApIDogLTYpKVxuXHQuYXR0cihcInlcIiwgKGQpID0+IChkLnkxIC0gZC55MCkgLyAyKVxuICAgIFx0LmF0dHIoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcblx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZCkgPT5cbiAgICAgICAgICAgICAgZC54MCA8IHNpemUud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIlxuICAgICAgICAgICAgIClcbiAgICBcdC5hdHRyKFwiZm9udC1zaXplXCIsIDEyKVxuICAgIFx0LnRleHQoKGQpID0+IGQubGFiZWwpXG5cdC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhX29iail7IGVtaXQoJ25vZGVfY2xpY2snLCBkYXRhX29iai5kYXRhKTsgfSk7ICAgIFxuICAgIGQzX25vZGVzXG5cdC5jYWxsKGQzLmRyYWcoKS5zdWJqZWN0KGQgPT4gZCkub24oXCJzdGFydFwiLCBkcmFnU3RhcnQpLm9uKFwiZHJhZ1wiLCBkcmFnTW92ZSkpO1xuICAgIFxuICAgIGNvbnN0IGxpbmtzX2QzID0gZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdCAgLnNlbGVjdChcImcubGlua3NcIilcblx0ICAuc2VsZWN0QWxsKFwiZ1wiKVxuXHQgIC5kYXRhKGxpbmtzKVxuXHQgIC5qb2luKChlbnRlcikgPT4gZW50ZXIuYXBwZW5kKFwiZ1wiKSlcbiAgICBcbiAgICBsZXQgbGdfZDMgPSBsaW5rc19kMy5hcHBlbmQoXCJsaW5lYXJHcmFkaWVudFwiKTtcbiAgICBsZ19kMy5hdHRyKFwiaWRcIiwgKGQpID0+IGBncmFkaWVudC0ke2QuaW5kZXh9YClcbiAgICBcdC5hdHRyKFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpXG4gICAgXHQuYXR0cihcIngxXCIsIChkKSA9PiBkLnNvdXJjZS54MSlcbiAgICBcdC5hdHRyKFwieDJcIiwgKGQpID0+IGQudGFyZ2V0LngwKTtcbiAgICBcbiAgICBsZ19kMy5hcHBlbmQoXCJzdG9wXCIpXG4gICAgXHQuYXR0cihcIm9mZnNldFwiLCBcIjBcIilcbiAgICBcdC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQuc291cmNlLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG4gICAgXG4gICAgbGdfZDMuYXBwZW5kKFwic3RvcFwiKVxuICAgIFx0LmF0dHIoXCJvZmZzZXRcIiwgXCIxMDAlXCIpXG4gICAgXHQuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnRhcmdldC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgIFxuICAgIGxpbmtzX2QzXG5cdC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgXHQuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuXHQuYXR0cihcImNsYXNzXCIsIFwic2Fua2V5LWxpbmtcIilcblx0LmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG4gICAgLy8gLmF0dHIoXCJzdHlsZVwiLCBgc3Ryb2tlLXdpZHRoOiAke2Qud2lkdGh9cHg7YClcblx0LmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKGQpID0+IHtcblx0ICAgIHJldHVybiBNYXRoLm1heCgxLCBkLndpZHRoKTtcblx0fSlcbiAgICAvLyAudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgIC8vIC5kZWxheSgxMDAwKVxuICAgIC8vIC5kdXJhdGlvbig1MDApIFxuICAgIFx0LmF0dHIoXCJzdHJva2VcIiwgKGQpID0+IGB1cmwoI2dyYWRpZW50LSR7ZC5pbmRleH1gKVxuICAgIC8vIFx0LmF0dHIoXCJzdHJva2VcIiwgYGJsYWNrYClcbiAgICBcbiAgICAvLyBcdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIChkKSA9PiBNYXRoLm1heCgxMDAsIGQud2lkdGgpKTtcbiAgICAgICAgXG4gICAgbGlua3NfZDNcbiAgICBcdC5hcHBlbmQoXCJ0aXRsZVwiKVxuICAgIFx0LnRleHQoKGQpID0+IGAke2QubGFiZWx9YCk7XG59XG5cbmZ1bmN0aW9uIGRyYWdTdGFydChldmVudCwgZCkge1xuICAgIGQuX194ID0gZXZlbnQueDtcbiAgICBkLl9feSA9IGV2ZW50Lnk7XG4gICAgZC5fX3gwID0gZC54MDtcbiAgICBkLl9feTAgPSBkLnkwO1xuICAgIGQuX194MSA9IGQueDE7XG4gICAgZC5fX3kxID0gZC55MTtcbn0gLy9kcmFnU3RhcnRcblxuZnVuY3Rpb24gZHJhZ01vdmUoZXZlbnQsIGQpIHtcbiAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRjb25zdCBkeCA9IGV2ZW50LnggLSBkLl9feDtcblx0Y29uc3QgZHkgPSBldmVudC55IC0gZC5fX3k7XG5cdGNvbnN0IHdpZHRoID0gc2Fua2V5X3NpemUudmFsdWUud2lkdGg7XG5cdGNvbnN0IGhlaWdodCA9IHNhbmtleV9zaXplLnZhbHVlLndpZHRoO1xuXHRkLngwID0gZC5fX3gwICsgZHg7XG5cdGQueDEgPSBkLl9feDEgKyBkeDtcblx0ZC55MCA9IGQuX195MCArIGR5O1xuXHRkLnkxID0gZC5fX3kxICsgZHk7XG5cdFxuXHRpZiAoZC54MCA8IDApIHtcbiAgICAgICAgICAgIGQueDAgPSAwO1xuICAgICAgICAgICAgZC54MSA9IG5vZGVfd2lkdGg7XG5cdH0gLy8gaWZcblx0XG5cdGlmIChkLngxID4gd2lkdGgpIHtcbiAgICAgICAgICAgIGQueDAgPSB3aWR0aCAtIG5vZGVfd2lkdGg7XG4gICAgICAgICAgICBkLngxID0gd2lkdGg7XG5cdH0gLy8gaWZcblx0XG5cdGlmIChkLnkwIDwgMCkge1xuICAgICAgICAgICAgZC55MCA9IDA7XG4gICAgICAgICAgICBkLnkxID0gZC5fX3kxIC0gZC5fX3kwO1xuXHR9IC8vIGlmXG5cdFxuXHRpZiAoZC55MSA+IGhlaWdodCkge1xuICAgICAgICAgICAgZC55MCA9IGhlaWdodCAtIChkLl9feTEgLSBkLl9feTApO1xuICAgICAgICAgICAgZC55MSA9IGhlaWdodDtcblx0fSAvLyBpZlxuXHRzYW5rZXkudXBkYXRlKHNhbmtleURhdGEpO1xuXHRkMy5zZWxlY3RBbGwoXCIuc2Fua2V5LWxpbmtcIikuYXR0cihcImRcIiwgZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSk7XG5cdHJldHVybiBgdHJhbnNsYXRlKCR7ZC54MH0sICR7ZC55MH0pYDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gem9vbWVkKHt0cmFuc2Zvcm19KSB7XG4gICAgZy5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG59XG5mdW5jdGlvbiBnZXRfc2l6ZSgpIHtcbiAgICBlbWl0KCd1cGRhdGVfd2lkdGgnKTtcbiAgICBsZXQgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICBpZiAod2lkdGggPT0gdW5kZWZpbmVkKSB7IHdpZHRoID0gJChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKS5wYXJlbnQoKS5wYXJlbnQoKS53aWR0aCgpIC0gMTAgfVxuXG4gICAgZW1pdCgndXBkYXRlX2hlaWdodCcpO1xuICAgIGxldCBoZWlnaHQgPSBwcm9wcy5oZWlnaHRcbiAgICBpZiAoaGVpZ2h0ID09IHVuZGVmaW5lZCkgeyBoZWlnaHQgPSAkKHNhbmtleV9jaGFydF9yZWYudmFsdWUpLnBhcmVudCgpLnBhcmVudCgpLmhlaWdodCgpIC0gODA7IH1cblxuICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX3NhbmtleSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3QgX3NhbmtleSA9IGQzLnNhbmtleSgpXG5cdCAgLm5vZGVBbGlnbihkMy5zYW5rZXlDZW50ZXIpXG5cdCAgLm5vZGVXaWR0aCgxMClcblx0ICAubm9kZVBhZGRpbmcobm9kZV93aWR0aClcblx0ICAuZXh0ZW50KFtcblx0ICAgICAgWzAsIDVdLFxuXHQgICAgICBbd2lkdGgsIGhlaWdodF1cblx0ICBdKTtcbiAgICByZXR1cm4gX3NhbmtleTtcbn1cblxuLyogU2V0IHRvIHRydWUsIHRvIHNob3cgdGhlICdObyBEYXRhJyBtZXNzYWdlICovXG5mdW5jdGlvbiBzZXRfbm9fZGF0YV9mbGFnKHNldF9ub19kYXRhKSB7XG4gIG5vX2RhdGEudmFsdWUgPSBzZXRfbm9fZGF0YVxufVxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuICAgIFxuZGVmaW5lRXhwb3NlKHsgZHJhd19zYW5rZXksIHNldF9ub19kYXRhX2ZsYWcgfSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4vKiAubm9kZSByZWN0IHsgKi9cbi8qICAgZmlsbC1vcGFjaXR5OiAwLjk7ICovXG4vKiAgIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BFZGdlczsgKi9cbi8qIH0gKi9cblxuLyogLm5vZGUgdGV4dCB7ICovXG4vKiAgIHBvaW50ZXItZXZlbnRzOiBub25lOyAqL1xuLyogICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmOyAqL1xuLyogfSAqL1xuXG4vKiBwYXRoLmxpbmsubGluazIgeyAqL1xuLyogICAgIGFsbDogaW5pdGlhbDsgKi9cbi8qICAgICBmaWxsOiB1bnNldDsgKi9cbi8qICAgICBzdHJva2U6IHVuc2V0OyAqL1xuLyogICAgIHN0cm9rZS1vcGFjaXR5OiB1bnNldDsgKi9cbi8qICAgICBzdHJva2Utd2lkdGg6IHVuc2V0OyAqL1xuLyogfSAqL1xuXG4vKiAubGluazpob3ZlciB7ICovXG4vKiAgIHN0cm9rZS1vcGFjaXR5OiAwLjU7ICovXG4vKiB9ICovXG48L3N0eWxlPlxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi9udG9wLXV0aWxzLmpzXCI7XG5cbmxldCBkMyA9IGQzdjc7XG5cblxuZnVuY3Rpb24gZ2V0X2QzX2NvbG9yKGluZGV4KSB7XG59XG5cblxuXG5jb25zdCBkZWZhdWx0U2Fua2V5U2V0dGluZ3MgPSB7XG4gIGFsaWduOiBcImp1c3RpZnlcIiwgLy8gY29udmVuaWVuY2Ugc2hvcnRoYW5kIGZvciBub2RlQWxpZ25cbiAgbm9kZUlkOiBkID0+IGQuaWQsIC8vIGdpdmVuIGQgaW4gbm9kZXMsIHJldHVybnMgYSB1bmlxdWUgaWRlbnRpZmllciAoc3RyaW5nKVxuICBub2RlVGl0bGU6IGQgPT4gYCR7ZC5pZH1gLCAvLyBnaXZlbiBkIGluIChjb21wdXRlZCkgbm9kZXMsIGhvdmVyIHRleHRcbiAgbm9kZUdyb3VwOiBkID0+IGQuaWQuc3BsaXQoL1xcVy8pWzBdLFxuICBub2RlQWxpZ246IGQzLnNhbmtleUp1c3RpZnksIC8vIFNhbmtleSBub2RlIGFsaWdubWVudCBzdHJhdGVneTogbGVmdCwgcmlnaHQsIGp1c3RpZnksIGNlbnRlclxuICBub2RlV2lkdGg6IDE1LCAvLyB3aWR0aCBvZiBub2RlIHJlY3RzXG4gIG5vZGVQYWRkaW5nOiAxMCwgLy8gdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFkamFjZW50IG5vZGVzXG4gIG5vZGVMYWJlbDogZCA9PiBkLmlkLFxuICBub2RlTGFiZWxQYWRkaW5nOiA2LCAvLyBob3Jpem9udGFsIHNlcGFyYXRpb24gYmV0d2VlbiBub2RlIGFuZCBsYWJlbFxuICBub2RlU3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLCAvLyBzdHJva2UgYXJvdW5kIG5vZGUgcmVjdHNcbiAgbGlua1NvdXJjZTogKHtzb3VyY2V9KSA9PiBzb3VyY2UsIC8vIGdpdmVuIGQgaW4gbGlua3MsIHJldHVybnMgYSBub2RlIGlkZW50aWZpZXIgc3RyaW5nXG4gIGxpbmtUYXJnZXQ6ICh7dGFyZ2V0fSkgPT4gdGFyZ2V0LCAvLyBnaXZlbiBkIGluIGxpbmtzLCByZXR1cm5zIGEgbm9kZSBpZGVudGlmaWVyIHN0cmluZ1xuICBsaW5rU291cmNlTm9kZTogKHtzb3VyY2Vfbm9kZX0pID0+IHNvdXJjZV9ub2RlLCAvLyBnaXZlbiBkIGluIGxpbmtzLCByZXR1cm5zIGEgbm9kZSBpZGVudGlmaWVyIHN0cmluZ1xuICBsaW5rVGFyZ2V0Tm9kZTogKHt0YXJnZXRfbm9kZX0pID0+IHRhcmdldF9ub2RlLCAvLyBnaXZlbiBkIGluIGxpbmtzLCByZXR1cm5zIGEgbm9kZSBpZGVudGlmaWVyIHN0cmluZ1xuICBsaW5rUGF0aDogZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSwgLy8gZ2l2ZW4gZCBpbiAoY29tcHV0ZWQpIGxpbmtzLCByZXR1cm5zIHRoZSBTVkcgcGF0aFxuICBsaW5rVmFsdWU6ICh7dmFsdWV9KSA9PiB2YWx1ZSwgLy8gZ2l2ZW4gZCBpbiBsaW5rcywgcmV0dXJucyB0aGUgcXVhbnRpdGF0aXZlIHZhbHVlXG4gIGxpbmtMaW5rOiAoe2xpbmt9KSA9PiBsaW5rLCAvLyBnaXZlbiBkIGluIGxpbmtzLCByZXR1cm5zIHRoZSBxdWFudGl0YXRpdmUgdmFsdWVcbiAgbGlua1RpdGxlOiBkID0+IGAke2Quc291cmNlX25vZGV9IOKGkiAke2QudGFyZ2V0X25vZGV9IDogJHtkLmxpbmt9XFxuJHtkLnZhbHVlfWAsIC8vIGdpdmVuIGQgaW4gKGNvbXB1dGVkKSBsaW5rc1xuICBsaW5rQ29sb3I6ICh7bGlua19jb2xvcn0pID0+IGxpbmtfY29sb3IsIC8vIHNvdXJjZSwgdGFyZ2V0LCBzb3VyY2UtdGFyZ2V0LCBvciBzdGF0aWMgY29sb3JcbiAgc291cmNlQ29sb3I6ICh7c291cmNlX2NvbG9yfSkgPT4gc291cmNlX2NvbG9yID8gc291cmNlX2NvbG9yIDogJycsXG4gIHRhcmdldENvbG9yOiAoe3RhcmdldF9jb2xvcn0pID0+IHRhcmdldF9jb2xvciA/IHRhcmdldF9jb2xvciA6ICcnLFxuICBzb3VyY2VMaW5rOiAoe3NvdXJjZV9saW5rfSkgPT4gc291cmNlX2xpbmsgPyBzb3VyY2VfbGluayA6ICcnLFxuICB0YXJnZXRMaW5rOiAoe3RhcmdldF9saW5rfSkgPT4gdGFyZ2V0X2xpbmsgPyB0YXJnZXRfbGluayA6ICcnLFxuICBsaW5rU3Ryb2tlT3BhY2l0eTogMC41LCAvLyBsaW5rIHN0cm9rZSBvcGFjaXR5XG4gIGxpbmtNaXhCbGVuZE1vZGU6IFwibXVsdGlwbHlcIiwgLy8gbGluayBibGVuZGluZyBtb2RlXG4gIGNvbG9yczogZDMuc2NoZW1lVGFibGVhdTEwLCAvLyBhcnJheSBvZiBjb2xvcnNcbiAgd2lkdGg6IDEyMDAsIC8vIG91dGVyIHdpZHRoLCBpbiBwaXhlbHNcbiAgaGVpZ2h0OiA2MDAsIC8vIG91dGVyIGhlaWdodCwgaW4gcGl4ZWxzXG4gIG1hcmdpblRvcDogNSwgLy8gdG9wIG1hcmdpbiwgaW4gcGl4ZWxzXG4gIG1hcmdpblJpZ2h0OiAxLCAvLyByaWdodCBtYXJnaW4sIGluIHBpeGVsc1xuICBtYXJnaW5Cb3R0b206IDUsIC8vIGJvdHRvbSBtYXJnaW4sIGluIHBpeGVsc1xuICBtYXJnaW5MZWZ0OiAxLCAvLyBsZWZ0IG1hcmdpbiwgaW4gcGl4ZWxzXG59XG5cbmNvbnN0IGZvcm1hdEZsb3dUaXRsZSA9IChkKSA9PiBgJHtpMThuKCdmbG93Jyl9OiAke2Quc291cmNlX25vZGV9IOKGkiAke2QudGFyZ2V0X25vZGV9XFxuJHtpMThuKCdwcm90b2NvbCcpfTogJHtkLmxpbmt9XFxuJHtpMThuKCd0cmFmZmljJyl9OiAke050b3BVdGlscy5ieXRlc1RvU2l6ZShkLnZhbHVlKX1gXG5cbmNvbnN0IGdldERlZmF1bHRTYW5rZXlTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZGVmYXVsdFNhbmtleVNldHRpbmdzO1xufVxuXG5jb25zdCBnZXRfZGF0YSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7IH07XG59XG5cblxuY29uc3Qgc2Fua2V5VXRpbHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdEZsb3dUaXRsZSxcbiAgICAgIGdldF9kYXRhLFxuICAgIGdldERlZmF1bHRTYW5rZXlTZXR0aW5nc1xuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBzYW5rZXlVdGlscztcbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgPExvYWRpbmcgcmVmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTNcIiBzdHlsZT1cImhlaWdodDogNzB2aDtcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG5vLXdyYXAgbXMtYXV0b1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMTZyZW07XCI+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignaG9zdHMnKSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfaG9zdHNfdHlwZVwiXG4gICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwic2Fua2V5X2Zvcm1hdF9saXN0XCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfc2Fua2V5XCI+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBtLTFcIiB0YWJpbmRleD1cIjBcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVsb2FkXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cdCAgPC9kaXY+XG4gICAgICAgICAgPFNhbmtleTJcbiAgICAgICAgICByZWY9XCJzYW5rZXlfY2hhcnRcIlxuICAgICAgICAgIEBub2RlX2NsaWNrPVwib25fbm9kZV9jbGlja1wiXG4gICAgICAgICAgOnNhbmtleV9kYXRhPVwic2Fua2V5X2RhdGFcIj5cbiAgICAgICAgICA8L1NhbmtleTI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkyIH0gZnJvbSBcIi4vc2Fua2V5XzMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNhbmtleVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9tYXAvc2Fua2V5X3V0aWxzLmpzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpc19sb2NhbDogQm9vbGVhblxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9ob3N0L2Zsb3dzL2RhdGEubHVhYDtcbmNvbnN0IHNhbmtleV9jaGFydCA9IHJlZihudWxsKVxuY29uc3QgbG9hZGluZyA9IHJlZihudWxsKVxuXG5jb25zdCBzYW5rZXlfZm9ybWF0X2xpc3QgPSBbXG4gICAgeyBmaWx0ZXJfbmFtZTogJ2hvc3RzX3R5cGUnLCBrZXk6IDMsIGlkOiAnbG9jYWxfb3JpZ2luX3JlbW90ZV90YXJnZXQnLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfY2xpX3JlbW90ZV9zcnYnKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX2NsaV9yZW1vdGVfc3J2JyksIGZpbHRlcl9pY29uOiBmYWxzZSwgY291bnRhYmxlOiBmYWxzZSB9LFxuICAgIHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiA0LCBpZDogJ3JlbW90ZV9vcmlnaW5fbG9jYWxfdGFyZ2V0JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX3Nydl9yZW1vdGVfY2xpJyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9zcnZfcmVtb3RlX2NsaScpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSxcbiAgICB7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogNSwgaWQ6ICdhbGxfaG9zdHMnLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UuYWxsX2Zsb3dzJyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5hbGxfZmxvd3MnKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0sXG5dO1xuXG5pZihwcm9wcy5pc19sb2NhbCkge1xuICBzYW5rZXlfZm9ybWF0X2xpc3QudW5zaGlmdCh7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogMSwgaWQ6ICdsb2NhbF9vbmx5JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX29ubHknKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX29ubHknKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0pXG59IGVsc2Uge1xuICBzYW5rZXlfZm9ybWF0X2xpc3QudW5zaGlmdCh7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogMiwgaWQ6ICdyZW1vdGVfb25seScsIHRpdGxlOiBfaTE4bignZmxvd3NfcGFnZS5yZW1vdGVfb25seScpLCBsYWJlbDogX2kxOG4oJ2Zsb3dzX3BhZ2UucmVtb3RlX29ubHknKSwgIGZpbHRlcl9pY29uOiBmYWxzZSwgY291bnRhYmxlOiBmYWxzZSB9KVxufVxuXG5jb25zdCBhY3RpdmVfaG9zdHNfdHlwZSA9IHJlZihzYW5rZXlfZm9ybWF0X2xpc3RbMF0pO1xuXG5jb25zdCBzYW5rZXlfZGF0YSA9IHJlZih7fSk7XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge30pO1xuXG5vbk1vdW50ZWQoKCkgPT4geyBcbiAgICB1cGRhdGVfc2Fua2V5KGFjdGl2ZV9ob3N0c190eXBlKTtcbn0pO1xuXG5mdW5jdGlvbiBvbl9ub2RlX2NsaWNrKG5vZGUpIHtcbiAgICBpZiAobm9kZS5pc19saW5rX25vZGUgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICBsZXQgdXJsX29iaiA9IHtcblx0aG9zdDogbm9kZS5pbmZvLmlwLFxuXHR2bGFuOiBub2RlLmluZm8udmxhbixcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9vYmopO1xuICAgIGNvbnN0IGhvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhPyR7dXJsX3BhcmFtc31gO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwoaG9zdF91cmwpO1xuICAgIC8vaG9zdD0nIC4uIGZsb3dbXCJjbGkuaXBcIl0gLi4gJyZ2bGFuPScgLi4gZmxvd1tcInZsYW5cIl1cbn1cblxuY29uc3QgdXBkYXRlX3NhbmtleSA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBlbnRyeSA9IGFjdGl2ZV9ob3N0c190eXBlLnZhbHVlO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChlbnRyeS5maWx0ZXJfbmFtZSwgZW50cnkuaWQpO1xuICAgIHNldF9zYW5rZXlfZGF0YSgpO1xufVxuXG5jb25zdCByZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdXBkYXRlX3NhbmtleSgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YSgpIHtcbiAgbG9hZGluZy52YWx1ZS5zaG93X2xvYWRpbmcoKTtcbiAgbGV0IGRhdGEgPSBhd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTtcbiAgc2Fua2V5X2RhdGEudmFsdWUgPSBkYXRhO1xuICBsb2FkaW5nLnZhbHVlLmhpZGVfbG9hZGluZygpO1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YSgpIHtcbiAgICBjb25zdCB1cmxfcmVxdWVzdCA9IGdldF9zYW5rZXlfdXJsKCk7XG4gICAgLy8gbGV0IGdyYXBoID0gYXdhaXQgc2Fua2V5VXRpbHMuZ2V0X2RhdGEoKTtcbiAgICBsZXQgZ3JhcGggPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIC8vIGFkZF9mYWtlX2NpcmN1bGFyX2xpbmsoZ3JhcGgpO1xuICAgIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG4gICAgbGV0IG1haW5fbm9kZV9pZCA9IGdldF9tYWluX25vZGVfaWQoKTtcbiAgICBsZXQgc2Fua2V5X2RhdGEgPSBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEoZ3JhcGgsIG1haW5fbm9kZV9pZCk7XG4gICAgKHNhbmtleV9kYXRhLmxpbmtzLmxlbmd0aCA+IDAgJiYgc2Fua2V5X2RhdGEubm9kZXMubGVuZ3RoID4gMCkgPyBcbiAgICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKGZhbHNlKSA6IFxuICAgICAgc2Fua2V5X2NoYXJ0LnZhbHVlLnNldF9ub19kYXRhX2ZsYWcodHJ1ZSk7XG4gICAgLy8gc2Fua2V5X2RhdGEgPSBtYWtlX2RhZ19ncmFwaChzYW5rZXlfZGF0YSk7XG4gICAgcmV0dXJuIHNhbmtleV9kYXRhO1xufVxuXG5mdW5jdGlvbiBnZXRfc2Fua2V5X3VybCgpIHtcbiAgICBsZXQgcGFyYW1zID0ge1xuXHRob3N0OiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIiksXG5cdHZsYW46IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhblwiKSxcblx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpLFxuXHRob3N0c190eXBlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RzX3R5cGVcIiksXG4gICAgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIGxldCB1cmxfcmVxdWVzdCA9IGAke3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gICAgcmV0dXJuIHVybF9yZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBnZXRfbWFpbl9ub2RlX2lkKCkge1xuICAgIHJldHVybiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIik7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShncmFwaCwgbWFpbl9ub2RlX2lkKSB7XG4gICAgaWYgKGdyYXBoLm5vZGVzLmxlbmd0aCA9PSAwICYmIGdyYXBoLmxpbmtzLmxlbmd0aCA9PSAwKSB7IHJldHVybiBncmFwaDsgfVxuICAgIGxldCBub2RlX2RpY3QgPSB7fTtcbiAgICAvLyBjcmVhdGUgYSBub2RlIGRpY3RcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuXG4gICAgLy9nZXQgbGluayBkaXJlY3Rpb24gXG4gICAgY29uc3QgZl9nZXRfbGlua19kaXJlY3Rpb24gPSAobGluaykgPT4ge1xuXHRpZiAobGluay5zb3VyY2Vfbm9kZV9pZCA9PSBtYWluX25vZGVfaWQpIHtcblx0ICAgIHJldHVybiAtMTtcblx0fSBlbHNlIGlmIChsaW5rLnRhcmdldF9ub2RlX2lkID09IG1haW5fbm9kZV9pZCkge1xuXHQgICAgcmV0dXJuIDE7XG5cdH1cblx0dGhyb3cgYFdyb25nIGRpcmVjdGlvbiBsaW5rICR7bGluay5zb3VyY2Vfbm9kZV9pZH0gLT4gJHtsaW5rLnRhcmdldF9ub2RlX2lkfWA7XG4gICAgfTtcblxuICAgIC8vIGdldCBub2RlIGlkIHdpdGggZGlyZWN0aW9uXG4gICAgY29uc3QgZl9nZXRfbm9kZV9kaXJlY3Rpb25faWQgPSAobm9kZV9pZCwgZGlyZWN0aW9uKSA9PiB7XG5cdGlmIChub2RlX2lkID09IG1haW5fbm9kZV9pZCkge1xuXHQgICAgcmV0dXJuIG5vZGVfaWQ7XG5cdH1cblx0cmV0dXJuIGAke2RpcmVjdGlvbn1fJHtub2RlX2lkfWA7IFxuICAgIH07XG5cbiAgICAvLyBjcmVhdGUgYSBuZXcgZ3JhcGggZHVwbGljYXRpbmcgYWxsIG5vZGVzIHdpdGggZGlmZmVyZW50IGRpcmVjdGlvblxuICAgIGxldCBncmFwaDJfbm9kZV9kaWN0ID0ge307XG4gICAgbGV0IGdyYXBoMiA9IHsgbm9kZXM6IFtdLCBsaW5rczogW10gfTsgICAgXG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobGluaykgPT4ge1x0XG5cdGxldCBkaXJlY3Rpb24gPSBmX2dldF9saW5rX2RpcmVjdGlvbihsaW5rKTtcblx0bGV0IG5ld19saW5rID0ge1xuXHQgICAgc291cmNlX25vZGVfaWQ6IGZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkKGxpbmsuc291cmNlX25vZGVfaWQsIGRpcmVjdGlvbiksXG5cdCAgICB0YXJnZXRfbm9kZV9pZDogZl9nZXRfbm9kZV9kaXJlY3Rpb25faWQobGluay50YXJnZXRfbm9kZV9pZCwgZGlyZWN0aW9uKSxcblx0ICAgIGxhYmVsOiBsaW5rLmxhYmVsLFxuXHQgICAgdmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICBkYXRhOiBsaW5rLFxuXHR9O1xuXHRsZXQgbmV3X25vZGU7XG5cdGlmIChkaXJlY3Rpb24gPT0gLTEpIHtcblx0ICAgIGxldCBuID0gbm9kZV9kaWN0W2xpbmsudGFyZ2V0X25vZGVfaWRdO1xuXHQgICAgbmV3X25vZGUgPSB7IG5vZGVfaWQ6IG5ld19saW5rLnRhcmdldF9ub2RlX2lkLCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuXHR9IGVsc2Uge1xuXHQgICAgbGV0IG4gPSBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF07XG5cdCAgICBuZXdfbm9kZSA9IHsgbm9kZV9pZDogbmV3X2xpbmsuc291cmNlX25vZGVfaWQsIGxhYmVsOiBuLmxhYmVsLCBkYXRhOiBuIH07XG5cdH1cblx0Z3JhcGgyLmxpbmtzLnB1c2gobmV3X2xpbmspO1xuXHRpZiAoZ3JhcGgyX25vZGVfZGljdFtuZXdfbm9kZS5ub2RlX2lkXSA9PSBudWxsKSB7XG5cdCAgICBncmFwaDJfbm9kZV9kaWN0W25ld19ub2RlLm5vZGVfaWRdID0gdHJ1ZTtcblx0ICAgIGdyYXBoMi5ub2Rlcy5wdXNoKG5ld19ub2RlKTtcblx0fVxuICAgIH0pO1xuICAgIGxldCBtYWluX25vZGUgPSBub2RlX2RpY3RbbWFpbl9ub2RlX2lkXTtcbiAgICBncmFwaDIubm9kZXMucHVzaCh7bm9kZV9pZDogbWFpbl9ub2RlLm5vZGVfaWQsIGxhYmVsOiBtYWluX25vZGUubGFiZWwsIGRhdGE6IG1haW5fbm9kZSB9KTtcblxuICAgIC8vIHVwZGF0ZSBub2RlIGRpY3RcbiAgICBncmFwaDIubm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gbm9kZV9kaWN0W25vZGUubm9kZV9pZF0gPSBub2RlKTtcbiAgICBcbiAgICAvLyByZXR1cm4gdGhlIGxpbmsgbm9kZV9pZCBcbiAgICBjb25zdCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuXHRsZXQgZGlyZWN0aW9uID0gZl9nZXRfbGlua19kaXJlY3Rpb24obGluayk7XG5cdHJldHVybiBgJHtkaXJlY3Rpb259XyR7bGluay5sYWJlbH1gOyBcblx0Ly8gcmV0dXJuIGAke2xpbmsuc291cmNlX25vZGVfaWR9XyR7bGluay5sYWJlbH1gOyBcbiAgICB9O1xuXG4gICAgbGV0IGxpbmtfdG9fbm9kZXNfZGljdCA9IHt9OyAvLyBrZXk6IGxpbmsgbm9kZSBpZCwgdmFsdWU6IGxpbmtzXG4gICAgLy8gbWVyZ2UgYWxsIGxpbmtzIGJ5IGxpbmsgbm9kZV9pZFxuICAgIGdyYXBoMi5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG5cdGxldCBsaW5rX25vZGVfaWQgPSBmX2dldF9saW5rX25vZGVfaWQobGluayk7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGlmIChsaW5rX3RvX25vZGVzID09IG51bGwpIHtcblx0ICAgIGxpbmtfdG9fbm9kZXMgPSB7XG5cdFx0aWQ6IGxpbmtfbm9kZV9pZCxcblx0XHRsYWJlbDogbGluay5sYWJlbCxcblx0XHRkYXRhOiB7IC4uLmxpbmssIGlzX2xpbmtfbm9kZTogdHJ1ZSB9LFxuXHRcdG5vZGVfbGlua3M6IFtdLFxuXHQgICAgfTtcblx0ICAgIGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdID0gbGlua190b19ub2Rlcztcblx0fVxuXHRsaW5rX3RvX25vZGVzLm5vZGVfbGlua3MucHVzaCh7XG5cdCAgICBzb3VyY2U6IG5vZGVfZGljdFtsaW5rLnNvdXJjZV9ub2RlX2lkXSxcblx0ICAgIHRhcmdldDogbm9kZV9kaWN0W2xpbmsudGFyZ2V0X25vZGVfaWRdLFxuXHQgICAgdmFsdWU6IGdldF9saW5rX3ZhbHVlKGxpbmspLFxuXHR9KTtcbiAgICB9KTtcblxuICAgIC8vIGNyZWF0ZSBub2RlcyBhbmQgbGlua3MgZ3JhcGgsIGNyZWF0aW5nIGEgbmV3IG5vZGUgZm9yIGVhY2ggbGlua1xuICAgIGxldCBub2RlcyA9IGdyYXBoMi5ub2Rlcy5tYXAoKG4pID0+IG4pLCBsaW5rcyA9IFtdO1xuICAgIGZvciAobGV0IGxpbmtfbm9kZV9pZCBpbiBsaW5rX3RvX25vZGVzX2RpY3QpIHtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0bGV0IGxpbmtfbm9kZSA9IHtcblx0ICAgIG5vZGVfaWQ6IGxpbmtfdG9fbm9kZXMuaWQsXHQgICAgXG5cdCAgICBsYWJlbDogbGlua190b19ub2Rlcy5sYWJlbCxcblx0ICAgIGRhdGE6IGxpbmtfdG9fbm9kZXMuZGF0YSxcblx0fTtcblx0bm9kZXMucHVzaChsaW5rX25vZGUpO1xuXHRsaW5rX3RvX25vZGVzLm5vZGVfbGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuXHQgICAgbGlua3MucHVzaCh7XG5cdFx0c291cmNlX25vZGVfaWQ6IGxpbmsuc291cmNlLm5vZGVfaWQsXG5cdFx0dGFyZ2V0X25vZGVfaWQ6IGxpbmtfbm9kZS5ub2RlX2lkLFxuXHRcdGxhYmVsOiBgJHtsaW5rLnNvdXJjZS5sYWJlbH0gLSAke2xpbmsudGFyZ2V0LmxhYmVsfTogJHtsaW5rX25vZGUubGFiZWx9YCxcblx0XHR2YWx1ZTogbGluay52YWx1ZSxcblx0XHRkYXRhOiBsaW5rLFxuXHQgICAgfSk7XG5cdCAgICBsaW5rcy5wdXNoKHtcblx0XHRzb3VyY2Vfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG5cdFx0dGFyZ2V0X25vZGVfaWQ6IGxpbmsudGFyZ2V0Lm5vZGVfaWQsXG5cdFx0bGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuXHRcdHZhbHVlOiBsaW5rLnZhbHVlLFxuXHRcdGRhdGE6IGxpbmssXG5cdCAgICB9KTtcblx0fSk7XG4gICAgfVxuXG4gICAgbGV0IHNhbmtleV9ub2RlX2RpY3QgPSB7fTsgLy8ga2V5OiBub2RlX2lkLCB2YWx1ZTogc2Fua2V5X25vZGVcbiAgICBsZXQgc2Fua2V5X25vZGVzID0gW107XG4gICAgbm9kZXMubWFwKChuLCBpbmRleCkgPT4ge1xuXHRsZXQgc2Fua2V5X25vZGUgPSB7IGluZGV4LCBub2RlX2lkOiBuLm5vZGVfaWQsIGxhYmVsOiBuLmxhYmVsLCBkYXRhOiBuLmRhdGEgfTtcblx0c2Fua2V5X25vZGVfZGljdFtuLm5vZGVfaWRdID0gc2Fua2V5X25vZGU7XG5cdHNhbmtleV9ub2Rlcy5wdXNoKHNhbmtleV9ub2RlKTtcbiAgICB9KTtcbiAgICBsZXQgc2Fua2V5X2xpbmtzID0gbGlua3MubWFwKChsKSA9PiB7XG5cdGxldCBzb3VyY2UgPSBzYW5rZXlfbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdO1xuXHRsZXQgdGFyZ2V0ID0gc2Fua2V5X25vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXTtcblx0cmV0dXJuIHtcblx0ICAgIHNvdXJjZTogc291cmNlLmluZGV4LFxuXHQgICAgdGFyZ2V0OiB0YXJnZXQuaW5kZXgsXG5cdCAgICBzb3VyY2Vfbm9kZV9pZDogc291cmNlLmluZGV4LFxuXHQgICAgdGFyZ2V0X25vZGVfaWQ6IHRhcmdldC5pbmRleCxcblx0ICAgIHZhbHVlOiBsLnZhbHVlLFxuXHQgICAgbGFiZWw6IGwubGFiZWwsXG5cdH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbm9kZXM6IHNhbmtleV9ub2RlcywgbGlua3M6IHNhbmtleV9saW5rcyB9O1xufVxuXG4vLyByZW1vdmUgYWxsIGxpbmtzIHdpdGggYSBub3QgZXhpc3Rpbmcgbm9kZVxuZnVuY3Rpb24gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCkge1xuICAgIGxldCBmX2xvZ19saW5rID0gKGwpID0+IGNvbnNvbGUuZXJyb3IoYGxpbmsgKHNvdXJjZTogJHtsLnNvdXJjZV9ub2RlX2lkfSwgdGFyZ2V0OiAke2wudGFyZ2V0X25vZGVfaWR9KSByZW1vdmVkIGZvciBub3QgZXhpc3Rpbmcgc291cmNlL3RhcmdldCBub2RlYCk7ICAgIFxuICAgIGxldCBsaW5rcyA9IGdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUoZ3JhcGgsIGZfbG9nX2xpbmspO1xuICAgIHJldHVybiB7IG5vZGVzOiBncmFwaC5ub2RlcywgbGlua3MgfTtcbn1cblxuLy8gcmVtZW92ZSBhbGwgY2lyY3VsYXIgbGlua3MgYW5kIHJldHVybiBhIGRhZyBncmFwaFxuZnVuY3Rpb24gbWFrZV9kYWdfZ3JhcGgoZ3JhcGgpIHsgICAgXG4gICAgbGV0IG5vZGVzX2Rlc3RfZGljdCA9IHt9OyAvLyBkaWN0aW9uYXJ5IHsgW25vZGVfc291cmNlX2lkXTogbm9kZXNfdGFyZ2V0W10gfVxuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcblx0bGV0IG5vZGVzX2Rlc3QgPSBub2Rlc19kZXN0X2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF07XG5cdGlmIChub2Rlc19kZXN0ID09IG51bGwpIHtcblx0ICAgIG5vZGVzX2Rlc3QgPSBbXTtcblx0ICAgIG5vZGVzX2Rlc3RfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IG5vZGVzX2Rlc3Q7XG5cdH1cblx0bm9kZXNfZGVzdC5wdXNoKGwudGFyZ2V0X25vZGVfaWQpO1xuICAgIH0pO1xuICAgIGxldCBub2Rlc190b19jaGVjayA9IHt9OyAvLyB0ZW1wIGRpY3Rpb25hcnkgdXNlZCBmcm9tIGZfYWRkX2NpcmN1bGFyX2xpbmsgXG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4ge1xuXHRub2Rlc190b19jaGVja1tuLm5vZGVfaWRdID0geyBjaGVja2VkOiBmYWxzZSwgdmlzaXRlZDogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIC8vIGNpcmN1bGFyIGxpbmtzIGRpY3QgKGtleTogYCR7c291cmNlX25vZGVfaWR9XyR7dGFyZ2V0X25vZGVfaWR9YClcbiAgICBsZXQgY2lyY3VsYXJfbGlua3MgPSB7fTtcbiAgICBsZXQgZl9nZXRfbGlua19rZXkgPSAoc291cmNlX2lkLCB0YXJnZXRfaWQpID0+IGAke3NvdXJjZV9pZH1fJHt0YXJnZXRfaWR9YDtcbiAgICBcbiAgICAvLyBkZWVwIG5hdmlnYXRlIHN0YXJ0aW5nIGZyb20gbm9kZV9pZCBhbmQgYWRkIGNpcmN1bGFyX2xpbmtzIHZpc2l0ZWQgaW4gY2lyY3VsYXJfbGlua3MgZGljdCBcbiAgICBsZXQgZl9zZXRfY2lyY3VsYXJfbGlua3MgPSAobm9kZV9pZCwgZnJvbV9ub2RlX2lkKSA9PiB7XG5cdGxldCBub2RlX3RvX2NoZWNrID0gbm9kZXNfdG9fY2hlY2tbbm9kZV9pZF07XG5cdGlmIChub2RlX3RvX2NoZWNrLmNoZWNrZWQgPT0gdHJ1ZSkgeyByZXR1cm47IH1cblx0ZWxzZSBpZiAobm9kZV90b19jaGVjay52aXNpdGVkID09IHRydWUpIHtcblx0ICAgIGxldCBsaW5rX2tleSA9IGZfZ2V0X2xpbmtfa2V5KGZyb21fbm9kZV9pZCwgbm9kZV9pZCk7XG5cdCAgICBjaXJjdWxhcl9saW5rc1tsaW5rX2tleV0gPSB0cnVlO1xuXHQgICAgY29uc29sZS5lcnJvcihgTGluayAoc291cmNlOiAke2Zyb21fbm9kZV9pZH0sIHRhcmdldDogJHtub2RlX2lkfSApIGlzIGEgY2lyY3VsYXIgbGlua2ApO1xuXHQgICAgbm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG5cdCAgICByZXR1cm47XG5cdH1cblx0bm9kZV90b19jaGVjay52aXNpdGVkID0gdHJ1ZTtcblx0bGV0IG5vZGVzX2Rlc3QgPSBub2Rlc19kZXN0X2RpY3Rbbm9kZV9pZF07XG5cdGlmIChub2Rlc19kZXN0ICE9IG51bGwpIHtcblx0ICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXNfZGVzdC5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGxldCB0YXJnZXRfbm9kZV9pZCA9IG5vZGVzX2Rlc3RbaV07XG5cdFx0Zl9zZXRfY2lyY3VsYXJfbGlua3ModGFyZ2V0X25vZGVfaWQsIG5vZGVfaWQpO1x0ICAgIFxuXHQgICAgfVxuXHR9XG5cdG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9IGZhbHNlO1xuXHRub2RlX3RvX2NoZWNrLmNoZWNrZWQgPSB0cnVlO1xuICAgIH07XG4gICAgLy8gc2V0IGNpcmN1bGFyX2xpbmtzIGRpY3Rpb25hcnlcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBmX3NldF9jaXJjdWxhcl9saW5rcyhuLm5vZGVfaWQpKTtcbiAgICBcbiAgICAvLyByZW1vdmUgbm8gZGFnIG5vZGVzL2xpbmtzXG4gICAgbGV0IGZfZmlsdGVyX2xpbmsgPSAobCkgPT4ge1xuXHRsZXQgbGlua19rZXkgPSBmX2dldF9saW5rX2tleShsLnNvdXJjZV9ub2RlX2lkLCBsLnRhcmdldF9ub2RlX2lkKTtcblx0bGV0IHRha2VfbGluayA9IGNpcmN1bGFyX2xpbmtzW2xpbmtfa2V5XSA9PSBudWxsO1xuXHRyZXR1cm4gdGFrZV9saW5rO1xuICAgIH07XG4gICAgbGV0IGZfbG9nX2xpbmsgPSAobCkgPT4gY29uc29sZS5lcnJvcihgbGluayAoc291cmNlOiAke2wuc291cmNlX25vZGVfaWR9LCB0YXJnZXQ6ICR7bC50YXJnZXRfbm9kZV9pZH0pIHJlbW92ZWQgZm9yIGNpcmN1bGFyIGxpbmtzYCk7XG4gICAgbGV0IGxpbmtzID0gZmlsdGVyX2xvZyhncmFwaC5saW5rcywgZl9maWx0ZXJfbGluaywgZl9sb2dfbGluayk7XG4gICAgXG4gICAgbGV0IGZfbG9nX25vZGUgPSAobikgPT4gY29uc29sZS5lcnJvcihgbm9kZSAke24ubm9kZV9pZH0gcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbm9kZXMgPSBnZXRfbm9kZXNfd2l0aF9leGlzdGluZ19saW5rKHtub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzfSwgZl9sb2dfbm9kZSk7XG5cbiAgICAvLyByZXR1cm4gYSBkYWcgZ3JhcGhcbiAgICByZXR1cm4geyBub2RlcywgbGlua3MgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZShncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge307XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4gbm9kZV9kaWN0W24ubm9kZV9pZF0gPSB0cnVlKTtcbiAgICBsZXQgZl9maWx0ZXIgPSAobCkgPT4gbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdICE9IG51bGwgJiYgbm9kZV9kaWN0W2wudGFyZ2V0X25vZGVfaWRdICE9IG51bGw7ICAgIFxuICAgIGxldCBsaW5rcyA9IGZpbHRlcl9sb2coZ3JhcGgubGlua3MsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIGxpbmtzO1xufVxuXG5mdW5jdGlvbiBnZXRfbm9kZXNfd2l0aF9leGlzdGluZ19saW5rKGdyYXBoLCBmX2xvZykge1xuICAgIGxldCBsaW5rX3NvdXJjZV9kaWN0ID0ge307XG4gICAgbGV0IGxpbmtfdGFyZ2V0X2RpY3QgPSB7fTtcbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsKSA9PiB7XG5cdGxpbmtfc291cmNlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gPSB0cnVlO1xuXHRsaW5rX3RhcmdldF9kaWN0W2wudGFyZ2V0X25vZGVfaWRdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBsZXQgZl9maWx0ZXIgPSAobikgPT4gbGlua19zb3VyY2VfZGljdFtuLm5vZGVfaWRdID09IHRydWUgfHwgbGlua190YXJnZXRfZGljdFtuLm5vZGVfaWRdID09IHRydWU7XG4gICAgbGV0IG5vZGVzID0gZmlsdGVyX2xvZyhncmFwaC5ub2RlcywgZl9maWx0ZXIsIGZfbG9nKTtcbiAgICByZXR1cm4gbm9kZXM7XG59XG5cbi8vIGxvZyBlbGVtZW50cyBkZWxldGVkIGlmIGZfbG9nICE9IG51bGxcbmZ1bmN0aW9uIGZpbHRlcl9sb2coZWxlbWVudHMsIGZfZmlsdGVyLCBmX2xvZykge1xuICAgIHJldHVybiBlbGVtZW50cy5maWx0ZXIoKGUpID0+IHtcblx0Y29uc3QgdGFrZV9lbGVtZW50ID0gZl9maWx0ZXIoZSk7XG5cdGlmICh0YWtlX2VsZW1lbnQgPT0gZmFsc2UgJiYgZl9sb2cgIT0gbnVsbCkge1xuXHQgICAgZl9sb2coZSk7XG5cdH1cblx0cmV0dXJuIHRha2VfZWxlbWVudDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkX2Zha2VfY2lyY3VsYXJfbGluayhncmFwaCkge1xuICAgIGNvbnN0IG5vZGVfaWRfMCA9IFwibm9kZV9pZF8wXCIsIG5vZGVfaWRfMSA9IFwibm9kZV9pZF8xXCI7XG4gICAgZ3JhcGgubm9kZXMucHVzaCh7IG5vZGVfaWQ6IG5vZGVfaWRfMCwgbGFiZWw6IG5vZGVfaWRfMCB9KTtcbiAgICBncmFwaC5ub2Rlcy5wdXNoKHsgbm9kZV9pZDogbm9kZV9pZF8xLCBsYWJlbDogbm9kZV9pZF8xIH0pO1xuICAgIGdyYXBoLmxpbmtzLnB1c2goeyBzb3VyY2Vfbm9kZV9pZDogbm9kZV9pZF8wLCB0YXJnZXRfbm9kZV9pZDogbm9kZV9pZF8xLCB2YWx1ZTogMTAsIGxhYmVsOiBcIiR7bm9kZV9pZF8wfV8ke25vZGVfaWRfMX1cIiB9KTtcbiAgICBncmFwaC5saW5rcy5wdXNoKHsgc291cmNlX25vZGVfaWQ6IG5vZGVfaWRfMSwgdGFyZ2V0X25vZGVfaWQ6IG5vZGVfaWRfMCwgdmFsdWU6IDEwLCBsYWJlbDogXCIke25vZGVfaWRfMX1fJHtub2RlX2lkXzB9XCIgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rX3ZhbHVlKGxpbmspIHtcbiAgICByZXR1cm4gbGluay5kYXRhPy5pbmZvPy50cmFmZmljO1xufVxuXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cInNjcmlwdC1kZXNjcmlwdGlvblwiIGNsYXNzPVwibm90ZXMgYmctbGlnaHQgYm9yZGVyXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgPGI+e3sgX2kxOG4oJ25vdGVzJykgfX08L2I+XG4gICAgPHVsPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwibm90ZSBpbiBwcm9wcy5ub3RlX2xpc3RcIj5cbiAgICAgICAgPGxpPnt7IG5vdGUgfX08L2xpPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBub3RlX2xpc3Q6IEFycmF5LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPCEtLSBUYXJnZXQgaW5mb3JtYXRpb24sIGhlcmUgYW4gSVAgaXMgcHV0IC0tPlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCIgPlxuXHQgICAgICA8aW5wdXQgcmVmPVwiaG9zdFwiIEBpbnB1dD1cImNoZWNrX2VtcHR5X2hvc3RcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJBIGxvY2FsIGhvc3QgSVAgb3IgJyonIGZvciBjaGVja2luZyBhbGwgbG9jYWwgaG9zdHNcIiByZXF1aXJlZD5cblx0ICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPCEtLSBNZXRyaWMgaW5mb3JtYXRpb24sIGhlcmUgYSBtZXRyaWMgaXMgc2VsZWN0ZWQgKGUuZy4gRE5TIHRyYWZmaWMpIC0tPlxuICAgIDxkaXYgdi1pZj1cIm1ldHJpY3NfcmVhZHlcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5tZXRyaWNcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLThcIj5cbiAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX21ldHJpY1wiXG4gICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfdGhyZXNob2xkKClcIlxuICAgICAgICAgIDpvcHRpb25zPVwibWV0cmljX2xpc3RcIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDwhLS0gRnJlcXVlbmN5IGluZm9ybWF0aW9uLCBhIGZyZXF1ZW5jeSBvZiAxIGRheSwgNSBtaW51dGUgb3IgMSBob3VyIGZvciBleGFtcGxlIC0tPlxuICAgIDxkaXYgdi1pZj1cIm1ldHJpY3NfcmVhZHlcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5mcmVxdWVuY3lcIil9fTwvYj5cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLThcIj5cbiAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2ZyZXF1ZW5jeVwiXG4gICAgICAgICAgOm9wdGlvbnM9XCJmcmVxdWVuY3lfbGlzdFwiPlxuXHRcdFx0ICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPCEtLSBUaHJlc2hvbGQgaW5mb3JtYXRpb24sIG1heGltdW0gYW1vdW50IG9mIGJ5dGVzIC0tPlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcudGhyZXNob2xkXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJ2aXNpYmxlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtM1wiPlxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJtZXRyaWNfdHlwZVwiXG4gICAgICAgICAgICA6b3B0aW9ucz1cIm1ldHJpY190eXBlX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD4gIFxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0zXCIgOmNsYXNzPVwiWyBtZXRyaWNfdHlwZS5pZCA9PSAndGhyb3VnaHB1dCcgPyAncC0wJyA6ICcnXVwiID5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGZsb2F0LWVuZCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICd0aHJvdWdocHV0J1wiIHYtZm9yPVwibWVhc3VyZSBpbiB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0XCIgPlxuICAgICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+IFxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZSB2LWZvcj1cIm1lYXN1cmUgaW4gdm9sdW1lX3RocmVzaG9sZF9saXN0XCIgPlxuICAgICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDxkaXYgOmNsYXNzPVwiWyB2aXNpYmxlID8gJ2NvbC0yJyA6ICdjb2wtOCddXCI+XG4gICAgICAgIDxpbnB1dCB2YWx1ZT1cIjFcIiByZWY9XCJ0aHJlc2hvbGRcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRocmVzaG9sZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbWF4PVwiMTAyM1wiIG1pbj1cIjFcIiByZXF1aXJlZD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8Tm90ZUxpc3RcbiAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgPC9Ob3RlTGlzdD5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6Y2xhc3M9XCJbIGRpc2FibGVfYWRkID8gJ2Rpc2FibGVkJyA6ICcnIF1cIj57e19pMThuKCdhZGQnKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5jb25zdCBpbnB1dF9tYWNfbGlzdCA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3RyaWdnZXJfYWxlcnRzID0gcmVmKFwiXCIpO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCddKVxuY29uc3QgdGl0bGUgPSBpMThuKCdpZl9zdGF0c19jb25maWcuYWRkX2hvc3RfcnVsZXNfdGl0bGUnKVxuY29uc3QgbWV0cmljc19yZWFkeSA9IHJlZihmYWxzZSlcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtZXRyaWNfbGlzdCA9IHJlZihbXSlcbmNvbnN0IGZyZXF1ZW5jeV9saXN0ID0gcmVmKFtdKVxuY29uc3QgdGhyZXNob2xkX21lYXN1cmUgPSByZWYobnVsbClcbmNvbnN0IHNlbGVjdGVkX21ldHJpYyA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2ZyZXF1ZW5jeSA9IHJlZih7fSlcbmNvbnN0IGRpc2FibGVfYWRkID0gcmVmKHRydWUpXG5jb25zdCBtZXRyaWNfdHlwZSA9IHJlZih7fSlcbmNvbnN0IHZpc2libGUgPSByZWYodHJ1ZSlcbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzEnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzInKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzMnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzQnKSxcbl1cblxuY29uc3QgbWV0cmljX3R5cGVfbGlzdCA9IFtcbiAgeyB0aXRsZTogX2kxOG4oJ3ZvbHVtZScpLCBsYWJlbDogX2kxOG4oJ3ZvbHVtZScpLCBpZDogJ3ZvbHVtZScsIGFjdGl2ZTogdHJ1ZSB9LFxuICB7IHRpdGxlOiBfaTE4bigndGhyb3VnaHB1dCcpLCBsYWJlbDogX2kxOG4oJ3Rocm91Z2hwdXQnKSwgaWQ6ICd0aHJvdWdocHV0JywgYWN0aXZlOiBmYWxzZSB9LFxuXVxuXG5jb25zdCB2b2x1bWVfdGhyZXNob2xkX2xpc3QgPSBbXG4gIHsgdGl0bGU6IF9pMThuKCdrYicpLCBsYWJlbDogX2kxOG4oJ2tiJyksIGlkOiAna2InLCB2YWx1ZTogMTAyNCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignbWInKSwgbGFiZWw6IF9pMThuKCdtYicpLCBpZDogJ21iJywgdmFsdWU6IDEwNDg1NzYsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ2diJyksIGxhYmVsOiBfaTE4bignZ2InKSwgaWQ6ICdnYicsIHZhbHVlOiAxMDczNzQxODI0LCBhY3RpdmU6IHRydWUgfSxcbl1cblxuY29uc3QgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCA9IFtcbiAgeyB0aXRsZTogX2kxOG4oJ2ticHMnKSwgbGFiZWw6IF9pMThuKCdrYnBzJyksIGlkOiAna2JwcycsIHZhbHVlOiAxMDAwLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdtYnBzJyksIGxhYmVsOiBfaTE4bignbWJwcycpLCBpZDogJ21icHMnLCB2YWx1ZTogMTAwMDAwMCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignZ2JwcycpLCBsYWJlbDogX2kxOG4oJ2dicHMnKSwgaWQ6ICdnYnBzJywgdmFsdWU6IDEwMDAwMDAwMDAsIGFjdGl2ZTogdHJ1ZSB9LFxuXVxuXG5cbmNvbnN0IGhvc3QgPSByZWYobnVsbClcbmNvbnN0IHRocmVzaG9sZCA9IHJlZihudWxsKVxuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIG1ldHJpY19saXN0OiBBcnJheSxcbiAgZnJlcXVlbmN5X2xpc3Q6IEFycmF5LFxufSk7XG5cbmZ1bmN0aW9uIHJlc2V0X21vZGFsX2Zvcm0oKSB7XG4gICAgaG9zdC52YWx1ZS52YWx1ZSA9IFwiXCI7XG4gICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gbWV0cmljX2xpc3QudmFsdWVbMF07XG4gICAgc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlID0gZnJlcXVlbmN5X2xpc3QudmFsdWVbMF07XG4gICAgbWV0cmljX3R5cGUudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0WzBdO1xuXG4gICAgLy8gcmVzZXQgbWV0cmljX3R5cGVfbGlzdFxuICAgIG1ldHJpY190eXBlX2xpc3QuZm9yRWFjaCgodCkgPT4gdC5hY3RpdmUgPSBmYWxzZSk7XG4gICAgbWV0cmljX3R5cGVfbGlzdFswXS5hY3RpdmUgPSB0cnVlO1xuICAgIFxuICAgIC8vIHJlc2V0IHZvbHVtZV90aHJlc2hvbGRfbGlzdFxuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC5mb3JFYWNoKCh0KSA9PiB0LmFjdGl2ZSA9IGZhbHNlKTtcbiAgICB2b2x1bWVfdGhyZXNob2xkX2xpc3Rbdm9sdW1lX3RocmVzaG9sZF9saXN0Lmxlbmd0aCAtIDFdLmFjdGl2ZSA9IHRydWU7XG4gICAgXG4gICAgLy8gcmVzZXQgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCBcbiAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LmZvckVhY2goKHQpID0+IHQuYWN0aXZlID0gZmFsc2UpO1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3RbdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC5sZW5ndGggLSAxXS5hY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gMTtcbn1cblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICByZXNldF9tb2RhbF9mb3JtKCk7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNoYW5nZV90aHJlc2hvbGQgPSAoKSA9PiB7XG4gIChzZWxlY3RlZF9tZXRyaWMudmFsdWUuc2hvd192b2x1bWUgPT0gdHJ1ZSkgPyB2aXNpYmxlLnZhbHVlID0gdHJ1ZSA6IHZpc2libGUudmFsdWUgPSBmYWxzZVxufVxuXG5jb25zdCBjaGVja19lbXB0eV9ob3N0ID0gKCkgPT4ge1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKCdpcCcpKTtcbiAgZGlzYWJsZV9hZGQudmFsdWUgPSAhKHJlZ2V4LnRlc3QoaG9zdC52YWx1ZS52YWx1ZSkgfHwgaG9zdC52YWx1ZS52YWx1ZSA9PT0gJyonKTtcbn1cblxuY29uc3Qgc2V0X2FjdGl2ZV9yYWRpbyA9IChzZWxlY3RlZF9yYWRpbykgPT4ge1xuICBjb25zdCBpZCA9IHNlbGVjdGVkX3JhZGlvLnRhcmdldC5pZDtcblxuICBpZihtZXRyaWNfdHlwZS52YWx1ZS5pZCA9PSAndGhyb3VnaHB1dCcpIHtcbiAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG4gIH1cblxuICBBcnJheS5mcm9tKHNlbGVjdGVkX3JhZGlvLnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgLyogQ2hlY2sgaWYgaXQncyBsYWJlbCAqL1xuICAgIGlmKGVsZW1lbnQudGFnTmFtZSA9PSAnTEFCRUwnKSB7XG4gICAgICBpZihlbGVtZW50LmlkID09IGlkKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYnRuLXNlY29uZGFyeScpXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYnRuLXByaW1hcnknKVxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2J0bi1zZWNvbmRhcnknKVxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2J0bi1wcmltYXJ5JylcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cblxuY29uc3QgYWRkXyA9ICgpID0+IHtcbiAgZGVidWdnZXI7XG4gIGNvbnN0IHRtcF9ob3N0ID0gaG9zdC52YWx1ZS52YWx1ZTtcbiAgY29uc3QgdG1wX2ZyZXF1ZW5jeSA9IHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZS5pZDtcbiAgY29uc3QgdG1wX21ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS5pZDtcbiAgbGV0IHRtcF9tZXRyaWNfdHlwZSA9IG1ldHJpY190eXBlLnZhbHVlLmlkO1xuICBsZXQgdG1wX2V4dHJhX21ldHJpYyA9IChzZWxlY3RlZF9tZXRyaWMudmFsdWUuZXh0cmFfbWV0cmljKSA/IHNlbGVjdGVkX21ldHJpYy52YWx1ZS5leHRyYV9tZXRyaWMgOiBudWxsXG4gIGxldCBiYXNpY192YWx1ZTtcbiAgbGV0IHRtcF90aHJlc2hvbGQ7XG5cbiAgaWYodmlzaWJsZS52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICB0bXBfbWV0cmljX3R5cGUgPSAnJ1xuICAgIHRtcF9leHRyYV9tZXRyaWMgPSAnJ1xuICAgIHRtcF90aHJlc2hvbGQgPSB0aHJlc2hvbGQudmFsdWUudmFsdWU7XG4gIH1cbiAgaWYodG1wX21ldHJpY190eXBlID09ICd0aHJvdWdocHV0Jykge1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyB9KVxuICAgIHRtcF90aHJlc2hvbGQgPSBiYXNpY192YWx1ZSAqIHBhcnNlSW50KHRocmVzaG9sZC52YWx1ZS52YWx1ZSkgLyA4O1xuICAgIC8qIFRoZSB0aHJvdWdocHV0IGlzIGluIGJpdCwgdGhlIHZvbHVtZSBpbiBCeXRlcyEhICovXG4gIH0gZWxzZSBpZih0bXBfbWV0cmljX3R5cGUgPT0gJ3ZvbHVtZScpIHtcbiAgICB2b2x1bWVfdGhyZXNob2xkX2xpc3QuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyB9KVxuICAgIHRtcF90aHJlc2hvbGQgPSBiYXNpY192YWx1ZSAqIHBhcnNlSW50KHRocmVzaG9sZC52YWx1ZS52YWx1ZSk7XG4gIH1cblxuICBlbWl0KCdhZGQnLCB7IFxuICAgIGhvc3Q6IHRtcF9ob3N0LCBcbiAgICBmcmVxdWVuY3k6IHRtcF9mcmVxdWVuY3ksIFxuICAgIG1ldHJpYzogdG1wX21ldHJpYyxcbiAgICB0aHJlc2hvbGQ6IHRtcF90aHJlc2hvbGQsXG4gICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICBleHRyYV9tZXRyaWM6IHRtcF9leHRyYV9tZXRyaWMsXG4gIH0pO1xuICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5jb25zdCBtZXRyaWNzTG9hZGVkID0gKF9tZXRyaWNfbGlzdCkgPT4ge1xuICBtZXRyaWNzX3JlYWR5LnZhbHVlID0gdHJ1ZTtcbiAgbWV0cmljX2xpc3QudmFsdWUgPSBfbWV0cmljX2xpc3Q7XG4gIGZyZXF1ZW5jeV9saXN0LnZhbHVlID0gcHJvcHMuZnJlcXVlbmN5X2xpc3Q7XG4gIHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZSA9IGZyZXF1ZW5jeV9saXN0LnZhbHVlWzBdO1xuICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBtZXRyaWNfbGlzdC52YWx1ZVswXTtcbn1cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIG1ldHJpY190eXBlLnZhbHVlID0gbWV0cmljX3R5cGVfbGlzdFswXVxufSlcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UsIG1ldHJpY3NMb2FkZWQgfSk7XG5cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWItNFwiPlxuICAgICAgICAgIDxoND57eyBfaTE4bignaWZfc3RhdHNfY29uZmlnLmhvc3RfcnVsZXMnKSB9fTwvaDQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgXHQ8ZGl2IGlkPVwiaG9zdF9ydWxlc1wiPlxuICAgICAgICAgIDxNb2RhbERlbGV0ZUNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2NvbmZpcm1cIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9yb3dcIj5cbiAgICAgICAgICA8L01vZGFsRGVsZXRlQ29uZmlybT5cbiAgICAgICAgICA8TW9kYWxBZGRIb3N0UnVsZXMgcmVmPVwibW9kYWxfYWRkX2hvc3RfcnVsZVwiXG4gICAgICAgICAgICA6bWV0cmljX2xpc3Q9XCJtZXRyaWNfbGlzdFwiXG4gICAgICAgICAgICA6ZnJlcXVlbmN5X2xpc3Q9XCJmcmVxdWVuY3lfbGlzdFwiXG4gICAgICAgICAgICBAYWRkPVwiYWRkX2hvc3RfcnVsZVwiPlxuICAgICAgICAgIDwvTW9kYWxBZGRIb3N0UnVsZXM+XG4gICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9ob3N0X3J1bGVzXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxOb3RlTGlzdFxuICAgICAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICAgIDwvTm90ZUxpc3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uVW5tb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRIb3N0UnVsZXMgfSBmcm9tIFwiLi9tb2RhbC1hZGQtaG9zdC1ydWxlcy52dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgaWZpZDogU3RyaW5nLFxufSlcblxuY29uc3QgdGFibGVfaG9zdF9ydWxlcyA9IHJlZihudWxsKVxuY29uc3QgbW9kYWxfZGVsZXRlX2NvbmZpcm0gPSByZWYobnVsbClcbmNvbnN0IG1vZGFsX2FkZF9ob3N0X3J1bGUgPSByZWYobnVsbClcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCByb3dfdG9fZGVsZXRlID0gcmVmKHt9KVxuY29uc3QgbWV0cmljX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfbWV0cmljLmx1YWBcbmNvbnN0IGRhdGFfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvaG9zdF9ydWxlc19kYXRhLmx1YWBcbmNvbnN0IGFkZF9ydWxlX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2ludGVyZmFjZS9ob3N0X3J1bGVzL2FkZF9ob3N0X3J1bGUubHVhYFxuY29uc3QgcmVtb3ZlX3J1bGVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvaW50ZXJmYWNlL2hvc3RfcnVsZXMvZGVsZXRlX2hvc3RfcnVsZS5sdWFgXG4gIFxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLmdlbmVyaWNfbm90ZXNfMScpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLmdlbmVyaWNfbm90ZXNfMicpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLmdlbmVyaWNfbm90ZXNfMycpLFxuXVxuXG5jb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgaWZpZDogcHJvcHMuaWZpZCxcbiAgY3NyZjogcHJvcHMucGFnZV9jc3JmXG59XG5cbmxldCBob3N0X3J1bGVzX3RhYmxlX2NvbmZpZyA9IHt9XG5sZXQgdGl0bGVfZGVsZXRlID0gX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5kZWxldGVfaG9zdF9ydWxlc190aXRsZScpXG5sZXQgYm9keV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX2Rlc2NyaXB0aW9uJylcbmxldCBtZXRyaWNfbGlzdCA9IFtdXG5jb25zdCBmcmVxdWVuY3lfbGlzdCA9IFtcbiAgeyB0aXRsZTogaTE4bignc2hvd19hbGVydHMuNV9taW4nKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLjVfbWluJyksIGlkOiAnNW1pbicgfSxcbiAgeyB0aXRsZTogaTE4bignc2hvd19hbGVydHMuaG91cmx5JyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5ob3VybHknKSwgaWQ6ICdob3VyJyB9LFxuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy5kYWlseScpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuZGFpbHknKSwgaWQ6ICdkYXknIH1cbl1cblxuY29uc3Qgc2hvd19kZWxldGVfZGlhbG9nID0gZnVuY3Rpb24ocm93KSB7XG4gIHJvd190b19kZWxldGUudmFsdWUgPSByb3c7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coKTtcbn1cblxuY29uc3QgZGVzdHJveV90YWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0YWJsZV9ob3N0X3J1bGVzLnZhbHVlLmRlc3Ryb3lfdGFibGUoKTtcbn1cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHRhYmxlX2hvc3RfcnVsZXMudmFsdWUucmVsb2FkKCk7XG59XG5cbmNvbnN0IGRlbGV0ZV9yb3cgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9ydWxlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICAgIC4uLntcbiAgICAgIHJ1bGVfaWQ6IHJvdy5pZFxuICAgIH1cbiAgfSlcbiAgXG4gIGF3YWl0ICQucG9zdCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSk7XG59XG5cbmNvbnN0IGFkZF9ob3N0X3J1bGUgPSBhc3luYyBmdW5jdGlvbihwYXJhbXMpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGFkZF9ydWxlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICAgIC4uLnBhcmFtc1xuICB9KVxuICBcbiAgYXdhaXQgJC5wb3N0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHJlbG9hZF90YWJsZSgpO1xuICB9KTtcbn1cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG5cdCAgaGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXHQgIFxuXHQgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIHNob3dfZGVsZXRlX2RpYWxvZyhyb3dEYXRhKTtcblx0ICB9LFxuXHR9O1xuICBcbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuXHQgIHsgY2xhc3M6IGBidG4tZGFuZ2VyYCwgaGFuZGxlcjogZGVsZXRlX2hhbmRsZXIsIGljb246ICdmYS10cmFzaCcsIHRpdGxlOiBpMThuKCdkZWxldGUnKSwgY2xhc3M6IFwicG9pbnRlclwiIH0sXG5cdF0pO1xufVxuXG5jb25zdCBmb3JtYXRfbWV0cmljID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkge1xuICBsZXQgbWV0cmljX2xhYmVsID0gZGF0YSAgXG4gIG1ldHJpY19saXN0LmZvckVhY2goKG1ldHJpYykgPT4ge1xuICAgIGlmKG1ldHJpYy5pZCA9PSBkYXRhKSB7XG4gICAgICBpZihyb3dEYXRhLmV4dHJhX21ldHJpYykge1xuICAgICAgICBpZihyb3dEYXRhLmV4dHJhX21ldHJpYyA9PSBtZXRyaWMuZXh0cmFfbWV0cmljKVxuICAgICAgICAgIG1ldHJpY19sYWJlbCA9IG1ldHJpYy5sYWJlbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWV0cmljX2xhYmVsXG59XG5cbmNvbnN0IGZvcm1hdF9mcmVxdWVuY3kgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGxldCBmcmVxdWVuY3lfdGl0bGUgPSAnJ1xuICBmcmVxdWVuY3lfbGlzdC5mb3JFYWNoKChmcmVxdWVuY3kpID0+IHtcbiAgICBpZihkYXRhID09IGZyZXF1ZW5jeS5pZClcbiAgICAgIGZyZXF1ZW5jeV90aXRsZSA9IGZyZXF1ZW5jeS50aXRsZTtcbiAgfSlcblxuICByZXR1cm4gZnJlcXVlbmN5X3RpdGxlXG59XG5cbmNvbnN0IGZvcm1hdF90aHJlc2hvbGQgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBmb3JtYXR0ZWRfZGF0YSA9IHBhcnNlSW50KGRhdGEpO1xuICBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gTnRvcFV0aWxzLmJpdHNUb1NpemUoZGF0YSAqIDgpXG4gIH0gZWxzZSBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3ZvbHVtZScpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBkYXRhXG4gIH1cbiAgXG4gIHJldHVybiBmb3JtYXR0ZWRfZGF0YVxufVxuXG5jb25zdCBnZXRfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKG1ldHJpY191cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIG1ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG59XG5cbmNvbnN0IHN0YXJ0X2RhdGF0YWJsZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9LCB7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLnNob3coKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgY29uc3QgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWRcIiksIHZpc2libGU6IGZhbHNlLCB0YXJnZXRzOiAwLCBuYW1lOiAnaWQnLCBkYXRhOiAnaWQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpLCB0YXJnZXRzOiAxLCB3aWR0aDogJzIwJywgbmFtZTogJ3RhcmdldCcsIGRhdGE6ICd0YXJnZXQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcubWV0cmljXCIpLCB0YXJnZXRzOiAyLCB3aWR0aDogJzEwJywgbmFtZTogJ21ldHJpYycsIGRhdGE6ICdtZXRyaWMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7IHJldHVybiBmb3JtYXRfbWV0cmljKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmZyZXF1ZW5jeVwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcxMCcsIG5hbWU6ICdmcmVxdWVuY3knLCBkYXRhOiAnZnJlcXVlbmN5JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSkgeyByZXR1cm4gZm9ybWF0X2ZyZXF1ZW5jeShkYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50aHJlc2hvbGRcIiksIHRhcmdldHM6IDQsIHdpZHRoOiAnMTAnLCBuYW1lOiAndGhyZXNob2xkJywgZGF0YTogJ3RocmVzaG9sZCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF90aHJlc2hvbGQoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJtZXRyaWNfdHlwZVwiKSwgdmlzaWJsZTogZmFsc2UsIHRhcmdldHM6IDUsIG5hbWU6ICdtZXRyaWNfdHlwZScsIGRhdGE6ICdtZXRyaWNfdHlwZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBhZGRfYWN0aW9uX2NvbHVtbihyb3dEYXRhKSB9IH1cbiAgXTtcblxuICBjb25zdCBob3N0UnVsZXNUYWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChkYXRhX3VybCwgcmVzdF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgY29sdW1uc19jb25maWc6IGNvbHVtbnMsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2Nyb2xsWDogZmFsc2UsXG4gICAgICBzZXJ2ZXJTaWRlOiBmYWxzZSwgXG4gICAgICBvcmRlcjogW1sgMSAvKiB0YXJnZXQgKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IGNvbHVtbnNcbiAgICB9XG4gIH07XG4gIFxuICBob3N0X3J1bGVzX3RhYmxlX2NvbmZpZyA9IGhvc3RSdWxlc1RhYmxlQ29uZmlnO1xufVxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgc3RhcnRfZGF0YXRhYmxlKCk7XG4gIGF3YWl0IGdldF9tZXRyaWNfbGlzdCgpO1xuICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLm1ldHJpY3NMb2FkZWQobWV0cmljX2xpc3QpO1xufSlcblxub25Vbm1vdW50ZWQoKCkgPT4ge1xuICBkZXN0cm95X3RhYmxlKCk7XG59KVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfcG9ydHNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfcG9ydHNcIj5cbiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwidGFibGVfb3B0aW9uIGluIHRhYmxlX29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTZcIj5cbiAgICAgICAgICAgICAgICAgIDxCb290c3RyYXBUYWJsZVxuICAgICAgICAgICAgICAgICAgICA6aWQ9XCJ0YWJsZV9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgICA6Y29sdW1ucz1cInRhYmxlX29wdGlvbi5jb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICAgOnJvd3M9XCJ0YWJsZV9vcHRpb24uc3RhdHNfcm93c1wiXG4gICAgICAgICAgICAgICAgICAgIDpwcmludF9odG1sX2NvbHVtbj1cIihjb2wpID0+IHByaW50X3N0YXRzX2NvbHVtbihjb2wpXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfcm93PVwiKGNvbCwgcm93KSA9PiBwcmludF9zdGF0c19yb3coY29sLCByb3cpXCI+XG4gICAgICAgICAgICAgICAgICA8L0Jvb3RzdHJhcFRhYmxlPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJvb3RzdHJhcFRhYmxlIH0gZnJvbSBcIi4vYm9vdHN0cmFwLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5IH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwb3J0c190YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IGNoYXJ0cyA9IHJlZihbXSk7XG5jb25zdCBjb25maWdfdHJhZmZpY190YWJsZSA9IHJlZih7fSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG59KVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiZ2V0X2ZfXCIpO1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19jb2x1bW4oY29sKSB7XG4gIHJldHVybiBjb2wubGFiZWw7XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0YXRzX3Jvdyhjb2wsIHJvdykge1xuICBkZWJ1Z2dlcjtcbiAgbGV0IGxhYmVsID0gcm93LmxhYmVsO1xuICByZXR1cm4gbGFiZWw7XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUucmVsb2FkKCk7XG59XG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgYXdhaXQgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xufSlcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5jbGlfcG9ydHMnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L2NsaV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYGNsaV9wb3J0X2Zsb3dzYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMuc3J2X3BvcnRzJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9ydC9zcnZfcG9ydF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBzcnZfcG9ydF9mbG93c2AsXG4gIH0sXG5dXG5cbmNvbnN0IHRhYmxlX29wdGlvbnMgPSBbXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgY2xpX3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ2xvY2FsJyxcbiAgICAgIHByb3RvY29sOiAndGNwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJhY3RpdmVfc2VydmVyX3RjcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmFjdGl2ZV9zZXJ2ZXJfdGNwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgY2xpX3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ2xvY2FsJyxcbiAgICAgIHByb3RvY29sOiAndWRwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJhY3RpdmVfc2VydmVyX3VkcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmFjdGl2ZV9zZXJ2ZXJfdWRwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgc3J2X3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ3JlbW90ZScsXG4gICAgICBwcm90b2NvbDogJ3RjcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdGNwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdGNwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgc3J2X3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ3JlbW90ZScsXG4gICAgICBwcm90b2NvbDogJ3VkcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdWRwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdWRwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG5dXG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZSgpIHtcbiAgbGV0IHVybF9wYXJhbXMgPSB7fVxuICBcbiAgdXJsX3BhcmFtc1tcImhvc3RcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIilcbiAgdXJsX3BhcmFtc1tcInZsYW5cIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIilcbiAgdXJsX3BhcmFtc1tcImlmaWRcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIilcbiAgICBcbiAgdGFibGVfb3B0aW9ucy5mb3JFYWNoKCh0YWJsZSkgPT4ge1xuICAgIGxldCB0bXBfcGFyYW1zID0ge1xuICAgICAgLi4udGFibGUuZXh0cmFfcGFyYW1zLFxuICAgICAgLi4udXJsX3BhcmFtcyxcbiAgICB9XG5cbiAgICAkLmdldChOdG9wVXRpbHMuYnVpbGRVUkwodGFibGUudXJsLCB0bXBfcGFyYW1zKSwgYXN5bmMgZnVuY3Rpb24oZGF0YSwgc3RhdHVzKXtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgbGV0IHJvd3MgPSBbXVxuICAgICAgZGF0YS5yc3AuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwb3J0ID0gZGF0YS5wb3J0X2luZm8ucG9ydFxuICAgICAgICBjb25zdCBwcm90byA9IGRhdGEucG9ydF9pbmZvLmw3X3Byb3RvXG4gICAgICAgIHJvd3MucHVzaCh7IGxhYmVsOiBgJHtwb3J0fSAoJHtwcm90b30pYCB9KVxuICAgICAgfSlcbiAgICAgIHRhYmxlLnN0YXRzX3Jvd3MgPSByb3dzO1xuICAgIH0pO1xuICB9KVxufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPExvYWRpbmcgcmVmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz0nYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMycgc3R5bGU9J2hlaWdodDogNzB2aDsnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0byBmbGV4LXJvdy1yZXZlcnNlXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj48L2xhYmVsPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgbS0xXCIgdGFiaW5kZXg9XCIwXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInJlbG9hZFwiPlxuICAgICAgICAgICAgICAgICAgPHNwYW4+PGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIodmFsdWUsIGtleSwgaW5kZXgpIGluIGF2YWlsYWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWlmPVwidmFsdWUubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJtaW4td2lkdGg6IDE0cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2J1YmJsZV9tYXAuJyArIGtleSkgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoXG4gICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2tleV1cIlxuICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgOmlkPVwid2lkZ2V0X25hbWVcIiBzdHlsZT1cImhlaWdodDogOTAlO1wiPlxuICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgIHJlZj1cImJ1YmJsZV9jaGFydFwiXG4gICAgICAgICAgICAgIDppZD1cIndpZGdldF9uYW1lXCJcbiAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJyZXN0X3VybFwiXG4gICAgICAgICAgICAgIDpnZXRfcGFyYW1zX3VybF9yZXF1ZXN0PVwiZm9ybWF0X3JlcXVlc3RcIlxuICAgICAgICAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKClcIlxuICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogU3RyaW5nLFxuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgY2hhcnRzX29wdGlvbnM6IEFycmF5LFxuICBhdmFpbGFibGVfZmlsdGVyczogT2JqZWN0LFxufSlcblxuLyogQnkgZGVmYXVsdCB1c2UgdGhlIGZpcnN0IGVudHJ5ICovXG5jb25zdCBjdXJyZW50bHlfc2VsZWN0ZWRfY2hhcnQgPSAwXG5cbmNvbnN0IGxvYWRpbmcgPSByZWYobnVsbClcbmNvbnN0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5CVUJCTEVcbmNvbnN0IHJlc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGFydHMvYWxlcnQvYW5hbHlzaXMubHVhYFxuY29uc3Qgd2lkZ2V0X25hbWUgPSAnYWxlcnRzLW1hcCc7XG5jb25zdCBhY3RpdmVfZmlsdGVyX2xpc3QgPSB7fVxuY29uc3QgYnViYmxlX2NoYXJ0ID0gcmVmKG51bGwpXG5cbmNvbnN0IGZvcm1hdF9yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBwYXJhbXNfc3RyaW5nID0gJydcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGJ1YmJsZV9tb2RlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnYnViYmxlX21vZGUnKSxcbiAgICB0aW1lZnJhbWU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKSxcbiAgICB2bGFuOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmxhbicpLFxuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyksXG4gIH1cblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcGFyYW1zX3N0cmluZyA9IGAke3BhcmFtc19zdHJpbmd9JiR7a2V5fT0ke3ZhbHVlfWBcbiAgfVxuXG4gIC8qIFJldHVybiBhIGN1c3RvbSBzdHJpbmcsIGNvbnRhaW5pbmcgY3VzdG9tIG9wdGlvbnMgKi9cbiAgcmV0dXJuIHBhcmFtc19zdHJpbmdcbn1cblxuY29uc3QgcmVsb2FkID0gZnVuY3Rpb24oKSB7XG4gIGxvYWRpbmcudmFsdWUuc2hvd19sb2FkaW5nKCk7XG4gIGJ1YmJsZV9jaGFydC52YWx1ZS51cGRhdGVfY2hhcnQoYCR7cmVzdF91cmx9PyR7Zm9ybWF0X3JlcXVlc3QoKX1gKVxuICBsb2FkaW5nLnZhbHVlLmhpZGVfbG9hZGluZygpO1xufVxuXG5jb25zdCBmb3JtYXRfb3B0aW9ucyA9IGZ1bmN0aW9uKG1vZGVfaWQpIHtcbiAgbGV0IG9wdGlvbnMgPSB7fVxuXG4gIHByb3BzLmNoYXJ0c19vcHRpb25zLmZvckVhY2goKG9wdGlvbl9saXN0KSA9PiB7XG4gICAgaWYob3B0aW9uX2xpc3QubW9kZV9pZCA9PSBtb2RlX2lkKVxuICAgICAgb3B0aW9ucyA9IG9wdGlvbl9saXN0O1xuICB9KVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBldmVudCBmdW5jdGlvbnMgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLmNoYXJ0ICYmIG9wdGlvbnMuY2hhcnQubnRvcF9ldmVudHMpIHtcbiAgICBvcHRpb25zLmNoYXJ0LmV2ZW50cyA9IG9wdGlvbnMuY2hhcnQuZXZlbnRzIHx8IHt9XG4gICAgZm9yKGNvbnN0IFtldmVudCwgZnVuXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSkge1xuICAgICAgaWYoZnVuID09IHVuZGVmaW5lZCkgXG4gICAgICAgIGNvbnRpbnVlXG5cbiAgICAgIG9wdGlvbnMuY2hhcnQuZXZlbnRzW2V2ZW50XSA9IE50b3BVdGlsc1tmdW5dIHx8IE50b3BVdGlscy5mbm9uZVxuICAgIH1cbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy54YXhpcyAmJiBvcHRpb25zLnhheGlzLmxhYmVscyAmJiBvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcikge1xuICAgIG9wdGlvbnMueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzLmZub25lXG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueWF4aXMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnRvb2x0aXAgJiYgb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyKVxuICAgIG9wdGlvbnMudG9vbHRpcC5jdXN0b20gPSBOdG9wVXRpbHNbb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyXVxuXG4gIHJldHVybiBvcHRpb25zXG59XG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICBcbiAgLyogUmV0dXJuIHRoZSBsaXN0IG9mIGZvcm1hdHRlZCBvcHRpb25zIG9mIHRoZSBjaGFydCAqL1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIGxldCBvcHRpb25zID0gZm9ybWF0X29wdGlvbnMoTnVtYmVyKGFjdGl2ZV9maWx0ZXJfbGlzdFsnYnViYmxlX21vZGUnXS5pZCkpXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIG9wdGlvbnMuc2VyaWVzID0gZGF0YS5zZXJpZXMgfHwge31cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG59XG5cbmNvbnN0IGNsaWNrX2l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIGxvYWRpbmcudmFsdWUuc2hvd19sb2FkaW5nKCk7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChpdGVtLmZpbHRlcl9uYW1lLCBpdGVtLmlkKVxuICBidWJibGVfY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0KGAke3Jlc3RfdXJsfT8ke2Zvcm1hdF9yZXF1ZXN0KCl9YClcbiAgbG9hZGluZy52YWx1ZS5oaWRlX2xvYWRpbmcoKTtcbn1cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIC8qIEJlZm9yZSBtb3VudGluZyB0aGUgdmFyaW91cyB3aWRnZXRzLCB1cGRhdGUgdGhlIHVybCB0byB0aGUgY29ycmVjdCBvbmUsIGJ5IGFkZGluZyBpZmlkLCBlY2MuICovXG4gIGNvbnN0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKTtcbiAgY29uc3QgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2bGFuJyk7XG4gIGNvbnN0IGJ1YmJsZV9tb2RlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2J1YmJsZV9tb2RlJyk7XG4gIFxuICBpZighYnViYmxlX21vZGUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnYnViYmxlX21vZGUnLCAwKSAvKiBGaXJzdCBFbnRyeSAqL1xuICBpZighdGltZWZyYW1lKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3RpbWVmcmFtZScsIDMwMCkgLyogRGVmYXVsdCA1IG1pbiAqL1xuICBpZighdmxhbikgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2bGFuJywgMCkgLyogRGVmYXVsdCBubyB2bGFuICovXG4gIFxuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2lmaWQnLCBwcm9wcy5pZmlkKSAvKiBDdXJyZW50IGludGVyZmFjZSAqL1xuXG4gIGZvcihjb25zdCBbbmFtZSwgZmlsdGVyc10gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMuYXZhaWxhYmxlX2ZpbHRlcnMpKSB7XG4gICAgZmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgIGZpbHRlci5maWx0ZXJfbmFtZSA9IG5hbWVcbiAgICAgIGlmKGZpbHRlci5jdXJyZW50bHlfYWN0aXZlKVxuICAgICAgICBhY3RpdmVfZmlsdGVyX2xpc3RbbmFtZV0gPSBmaWx0ZXI7XG4gICAgfSlcbiAgfVxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIGxvYWRpbmcudmFsdWUuaGlkZV9sb2FkaW5nKCk7XG59KVxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPSdhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0zJyBzdHlsZT0naGVpZ2h0OiA3MHZoOyc+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvIGZsZXgtcm93LXJldmVyc2VcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIodmFsdWUsIGtleSwgaW5kZXgpIGluIGF2YWlsYWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidmFsdWUubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJtaW4td2lkdGg6IDE1cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2J1YmJsZV9tYXAuJyArIGtleSkgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoXG4gICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2tleV1cIlxuICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgOmlkPVwid2lkZ2V0X25hbWVcIiBzdHlsZT1cImhlaWdodDogOTAlO1wiPlxuICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgIHJlZj1cImJ1YmJsZV9jaGFydFwiXG4gICAgICAgICAgICAgIDppZD1cIndpZGdldF9uYW1lXCJcbiAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJyZXN0X3VybFwiXG4gICAgICAgICAgICAgIDpnZXRfcGFyYW1zX3VybF9yZXF1ZXN0PVwiZm9ybWF0X3JlcXVlc3RcIlxuICAgICAgICAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKClcIlxuICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogU3RyaW5nLFxuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgY2hhcnRzX29wdGlvbnM6IEFycmF5LFxuICBhdmFpbGFibGVfZmlsdGVyczogT2JqZWN0LFxufSlcblxuLyogQnkgZGVmYXVsdCB1c2UgdGhlIGZpcnN0IGVudHJ5ICovXG5jb25zdCBjdXJyZW50bHlfc2VsZWN0ZWRfY2hhcnQgPSAwXG5cbmNvbnN0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5CVUJCTEVcbmNvbnN0IHJlc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2NoYXJ0cy9ob3N0L21hcC5sdWFgXG5jb25zdCB3aWRnZXRfbmFtZSA9ICdhbGVydHMtbWFwJztcbmNvbnN0IGFjdGl2ZV9maWx0ZXJfbGlzdCA9IHt9XG5jb25zdCBidWJibGVfY2hhcnQgPSByZWYobnVsbClcblxuY29uc3QgZm9ybWF0X3JlcXVlc3QgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHBhcmFtc19zdHJpbmcgPSAnJ1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgYnViYmxlX21vZGU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpLFxuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyksXG4gIH1cblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcGFyYW1zX3N0cmluZyA9IGAke3BhcmFtc19zdHJpbmd9JiR7a2V5fT0ke3ZhbHVlfWBcbiAgfVxuXG4gIC8qIFJldHVybiBhIGN1c3RvbSBzdHJpbmcsIGNvbnRhaW5pbmcgY3VzdG9tIG9wdGlvbnMgKi9cbiAgcmV0dXJuIHBhcmFtc19zdHJpbmdcbn1cblxuY29uc3QgZm9ybWF0X29wdGlvbnMgPSBmdW5jdGlvbihtb2RlX2lkKSB7XG4gIGxldCBvcHRpb25zID0ge31cblxuICBwcm9wcy5jaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25fbGlzdCkgPT4ge1xuICAgIGlmKG9wdGlvbl9saXN0Lm1vZGVfaWQgPT0gbW9kZV9pZClcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25fbGlzdDtcbiAgfSlcblxuICAvKiBBZGQgdGhlIGNvcnJhY3QgZXZlbnQgZnVuY3Rpb25zICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5jaGFydCAmJiBvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSB7XG4gICAgb3B0aW9ucy5jaGFydC5ldmVudHMgPSBvcHRpb25zLmNoYXJ0LmV2ZW50cyB8fCB7fVxuICAgIGZvcihjb25zdCBbZXZlbnQsIGZ1bl0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5jaGFydC5udG9wX2V2ZW50cykpIHtcbiAgICAgIGlmKGZ1biA9PSB1bmRlZmluZWQpIFxuICAgICAgICBjb250aW51ZVxuXG4gICAgICBvcHRpb25zLmNoYXJ0LmV2ZW50c1tldmVudF0gPSBOdG9wVXRpbHNbZnVuXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgICB9XG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueGF4aXMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnlheGlzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyKSB7XG4gICAgb3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW29wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy50b29sdGlwICYmIG9wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcilcbiAgICBvcHRpb25zLnRvb2x0aXAuY3VzdG9tID0gTnRvcFV0aWxzW29wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcl1cblxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgXG4gIC8qIFJldHVybiB0aGUgbGlzdCBvZiBmb3JtYXR0ZWQgb3B0aW9ucyBvZiB0aGUgY2hhcnQgKi9cbiAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICBsZXQgb3B0aW9ucyA9IGZvcm1hdF9vcHRpb25zKE51bWJlcihhY3RpdmVfZmlsdGVyX2xpc3RbJ2J1YmJsZV9tb2RlJ10uaWQpKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBvcHRpb25zLnNlcmllcyA9IGRhdGEuc2VyaWVzIHx8IHt9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxufVxuXG5jb25zdCBjbGlja19pdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoaXRlbS5maWx0ZXJfbmFtZSwgaXRlbS5pZClcbiAgYnViYmxlX2NoYXJ0LnZhbHVlLnVwZGF0ZV9jaGFydChgJHtyZXN0X3VybH0/JHtmb3JtYXRfcmVxdWVzdCgpfWApXG59XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAvKiBCZWZvcmUgbW91bnRpbmcgdGhlIHZhcmlvdXMgd2lkZ2V0cywgdXBkYXRlIHRoZSB1cmwgdG8gdGhlIGNvcnJlY3Qgb25lLCBieSBhZGRpbmcgaWZpZCwgZWNjLiAqL1xuICBjb25zdCBidWJibGVfbW9kZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpO1xuICBcbiAgaWYoIWJ1YmJsZV9tb2RlKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2J1YmJsZV9tb2RlJywgMCkgLyogRmlyc3QgRW50cnkgKi9cbiAgXG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnaWZpZCcsIHByb3BzLmlmaWQpIC8qIEN1cnJlbnQgaW50ZXJmYWNlICovXG5cbiAgZm9yKGNvbnN0IFtuYW1lLCBmaWx0ZXJzXSBvZiBPYmplY3QuZW50cmllcyhwcm9wcy5hdmFpbGFibGVfZmlsdGVycykpIHtcbiAgICBmaWx0ZXJzLmZvckVhY2goKGZpbHRlcikgPT4ge1xuICAgICAgZmlsdGVyLmZpbHRlcl9uYW1lID0gbmFtZVxuICAgICAgaWYoZmlsdGVyLmN1cnJlbnRseV9hY3RpdmUpXG4gICAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdFtuYW1lXSA9IGZpbHRlcjtcbiAgICB9KVxuICB9XG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8TG9hZGluZyByZWY9XCJsb2FkaW5nXCI+PC9Mb2FkaW5nPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiIHN0eWxlPVwiaGVpZ2h0OiA3MHZoO1wiIHJlZj1cImJvZHlfZGl2XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgZmxleC1yb3ctcmV2ZXJzZSBtYi0yXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj48L2xhYmVsPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgbS0xXCIgdGFiaW5kZXg9XCIwXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInJlbG9hZFwiPlxuICAgICAgICAgICAgICAgICAgPHNwYW4+PGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIodmFsdWUsIGtleSwgaW5kZXgpIGluIGF2YWlsYWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWlmPVwidmFsdWUubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJtaW4td2lkdGg6IDE0cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLicgKyBrZXkpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtrZXldXCJcbiAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWF4X2VudHJpZXNfcmVhY2hlZCA9PSB0cnVlXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdC1hdXRvIG0tMVwiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgc3R5bGU9XCJjdXJzb3I6IGhlbHA7XCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBkaXNhYmxlZD5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxTYW5rZXkyXG4gICAgICAgICAgcmVmPVwic2Fua2V5X2NoYXJ0XCJcbiAgICAgICAgICA6d2lkdGg9XCJ3aWR0aFwiXG4gICAgICAgICAgOmhlaWdodD1cImhlaWdodFwiXG4gICAgICAgICAgOm5vX2RhdGFfbWVzc2FnZT1cIm5vX2RhdGFfbWVzc2FnZVwiXG4gICAgICAgICAgOnNhbmtleV9kYXRhPVwic2Fua2V5X2RhdGFcIlxuICAgICAgICAgIEB1cGRhdGVfd2lkdGg9XCJ1cGRhdGVfd2lkdGhcIlxuICAgICAgICAgIEB1cGRhdGVfaGVpZ2h0PVwidXBkYXRlX2hlaWdodFwiXG4gICAgICAgICAgQG5vZGVfY2xpY2s9XCJvbl9ub2RlX2NsaWNrXCI+XG4gICAgICAgICAgPC9TYW5rZXkyPiAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkyIH0gZnJvbSBcIi4vc2Fua2V5XzMudnVlXCI7XG5cbmNvbnN0IGFjdGl2ZV9maWx0ZXJfbGlzdCA9IHt9XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBhdmFpbGFibGVfZmlsdGVyczogT2JqZWN0LFxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gcmVmKGZhbHNlKVxuY29uc3QgbWF4X2VudHJ5X3RpdGxlID0gX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLm1heF9lbnRyaWVzJylcbmNvbnN0IG5vX2RhdGFfbWVzc2FnZSA9IF9pMThuKCdwb3J0c19hbmFseXNpcy5ub19kYXRhJylcbmNvbnN0IHNhbmtleV9jaGFydCA9IHJlZihudWxsKVxuY29uc3QgYm9keV9kaXYgPSByZWYobnVsbCk7XG5jb25zdCB3aWR0aCA9IHJlZihudWxsKTtcbmNvbnN0IGhlaWdodCA9IHJlZihudWxsKTtcbmNvbnN0IHNhbmtleV9kYXRhID0gcmVmKHt9KTtcbmNvbnN0IGxpdmVfcmVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3ZsYW4vbGl2ZV9wb3J0cy5sdWFgXG5jb25zdCBoaXN0b3JpY2FsX3Jlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC92bGFuL2hpc3RvcmljYWxfcG9ydHMubHVhYFxuY29uc3QgbG9hZGluZyA9IHJlZihudWxsKVxuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgLyogQmVmb3JlIG1vdW50aW5nIHRoZSB2YXJpb3VzIHdpZGdldHMsIHVwZGF0ZSB0aGUgdXJsIHRvIHRoZSBjb3JyZWN0IG9uZSwgYnkgYWRkaW5nIGlmaWQsIGVjYy4gKi9cbiAgY29uc3QgdGltZWZyYW1lID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3RpbWVmcmFtZScpO1xuICBjb25zdCB2bGFuID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZsYW4nKTtcbiAgY29uc3QgbDRfcHJvdG8gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnbDRwcm90bycpO1xuICBcbiAgaWYoIXRpbWVmcmFtZSkgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd0aW1lZnJhbWUnLCAnbm9uZScpIC8qIERlZmF1bHQgbGl2ZSAqL1xuICBpZighdmxhbikgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2bGFuJywgJ25vbmUnKSAvKiBEZWZhdWx0IGFsbCBWTEFOcyAqL1xuICBpZighdmxhbikgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdsNHByb3RvJywgJ25vbmUnKSAvKiBEZWZhdWx0IG5vIHByb3RvY29sICovXG4gIFxuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2lmaWQnLCBwcm9wcy5pZmlkKSAvKiBDdXJyZW50IGludGVyZmFjZSAqL1xuXG4gIGZvcihjb25zdCBbbmFtZSwgZmlsdGVyc10gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMuYXZhaWxhYmxlX2ZpbHRlcnMpKSB7XG4gICAgZmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgIGZpbHRlci5maWx0ZXJfbmFtZSA9IG5hbWVcbiAgICAgIGlmKGZpbHRlci5jdXJyZW50bHlfYWN0aXZlKVxuICAgICAgICBhY3RpdmVfZmlsdGVyX2xpc3RbbmFtZV0gPSBmaWx0ZXI7XG4gICAgfSlcbiAgfVxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIHVwZGF0ZV9oZWlnaHQoKTtcbiAgdXBkYXRlX3dpZHRoKCk7XG4gIHVwZGF0ZV9zYW5rZXkoKTtcbn0pO1xuXG5mdW5jdGlvbiBvbl9ub2RlX2NsaWNrKG5vZGUpIHtcbiAgaWYgKG5vZGUuaXNfbGlua19ub2RlID09IHRydWUpIHsgcmV0dXJuOyB9XG4gIGlmIChub2RlLmxpbmspIHsgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChub2RlLmxpbmspOyB9XG59XG5cbmNvbnN0IHJlbG9hZCA9IGZ1bmN0aW9uKCkge1xuICB1cGRhdGVfc2Fua2V5KClcbn1cblxuY29uc3QgY2xpY2tfaXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGl0ZW0uZmlsdGVyX25hbWUsIGl0ZW0uaWQpXG4gIHVwZGF0ZV9zYW5rZXkoKTtcbn1cblxuY29uc3QgdXBkYXRlX3NhbmtleSA9IGZ1bmN0aW9uKCkge1xuICBzZXRfc2Fua2V5X2RhdGEoKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tfbWF4X2VudHJpZXMoZGF0YSkge1xuICBtYXhfZW50cmllc19yZWFjaGVkLnZhbHVlID0gZGF0YS5tYXhfZW50cmllc19yZWFjaGVkXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YSgpIHtcbiAgbG9hZGluZy52YWx1ZS5zaG93X2xvYWRpbmcoKTtcbiAgbGV0IGRhdGEgPSBhd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTsgICAgXG4gIHNhbmtleV9kYXRhLnZhbHVlID0gZGF0YTtcbiAgbG9hZGluZy52YWx1ZS5oaWRlX2xvYWRpbmcoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICBjb25zdCB1cmxfcmVxdWVzdCA9IGdldF9zYW5rZXlfdXJsKCk7XG4gIGxldCBncmFwaCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gIGNoZWNrX21heF9lbnRyaWVzKGdyYXBoKTtcbiAgZ3JhcGggPSBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKTtcbiAgY29uc3Qgc2Fua2V5X2RhdGEgPSBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEoZ3JhcGgpO1xuICAvKiBJbiBjYXNlIG5vIGRhdGEgaXMgcmV0dXJuZWQsIHNob3cgdGhlIE5vIERhdGEgbWVzc2FnZSAqL1xuICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/IFxuICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKGZhbHNlKSA6IFxuICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKHRydWUpO1xuICBcbiAgXG4gIHJldHVybiBzYW5rZXlfZGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NhbmtleV91cmwoKSB7XG4gIGxldCB2bGFuID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2bGFuXCIpO1xuICBsZXQgdGltZWZyYW1lID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lZnJhbWVcIik7XG4gIGxldCBsNHByb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJsNHByb3RvXCIpO1xuICBpZih2bGFuID09ICdub25lJykgeyB2bGFuID0gJyc7IH1cbiAgaWYodGltZWZyYW1lID09ICdub25lJykgeyB0aW1lZnJhbWUgPSAnJzsgfVxuICBpZihsNHByb3RvID09ICdub25lJykgeyBsNHByb3RvID0gJyc7IH1cbiAgXG4gIGxldCB1cmxfcmVxdWVzdCA9ICcnXG4gIGxldCBwYXJhbXMgPSB7XG4gICAgaWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpLFxuICAgIHZsYW46IHZsYW4sXG4gICAgdGltZWZyYW1lOiB0aW1lZnJhbWUsXG4gICAgbDRwcm90bzogbDRwcm90b1xuICB9O1xuICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIGlmKHRpbWVmcmFtZSA9PSAnJykgeyB1cmxfcmVxdWVzdCA9IGAke2xpdmVfcmVzdH0/JHt1cmxfcGFyYW1zfWA7IH1cbiAgZWxzZSB7IHVybF9yZXF1ZXN0ID0gYCR7aGlzdG9yaWNhbF9yZXN0fT8ke3VybF9wYXJhbXN9YDsgfVxuXG4gIHJldHVybiB1cmxfcmVxdWVzdDtcbn1cblxuZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhKHJlcykge1xuICAgIGxldCBub2RlX2RpY3QgPSB7fSwgbGlua190b19ub2Rlc19kaWN0ID0ge307XG4gICAgLy8gY3JlYXRlIGEgbm9kZSBkaWN0XG4gICAgcmVzLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IG5vZGVfZGljdFtub2RlLm5vZGVfaWRdID0gbm9kZSk7XG4gICAgXG4gICAgbGV0IGZfZ2V0X2xpbmtfbm9kZV9pZCA9IChsaW5rKSA9PiB7XG5cdHJldHVybiBgJHtsaW5rLnNvdXJjZV9ub2RlX2lkfV8ke2xpbmsubGFiZWx9YDsgXG4gICAgfTtcbiAgICAvLyBtZXJnZSBhbGwgbGlua3MgYnkgbGFiZWxcbiAgICByZXMubGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuXHRsZXQgbGlua19ub2RlX2lkID0gZl9nZXRfbGlua19ub2RlX2lkKGxpbmspO1xuXHRsZXQgbGlua190b19ub2RlcyA9IGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdO1xuXHRpZiAobGlua190b19ub2RlcyA9PSBudWxsKSB7XG5cdCAgICBsaW5rX3RvX25vZGVzID0ge1xuXHRcdGlkOiBsaW5rX25vZGVfaWQsXG5cdFx0bGFiZWw6IGxpbmsubGFiZWwsXG4gICAgbGluazogbGluay5vcHRpb25hbF9pbmZvLmxpbmssXG5cdFx0bm9kZV9saW5rczogW10sXHRcdFxuXHQgICAgfTtcblx0ICAgIGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdID0gbGlua190b19ub2Rlcztcblx0fVxuXHRsaW5rX3RvX25vZGVzLm5vZGVfbGlua3MucHVzaCh7XG5cdCAgICBzb3VyY2U6IG5vZGVfZGljdFtsaW5rLnNvdXJjZV9ub2RlX2lkXSxcblx0ICAgIHRhcmdldDogbm9kZV9kaWN0W2xpbmsudGFyZ2V0X25vZGVfaWRdLFxuXHQgICAgdmFsdWU6IGxpbmsudmFsdWUsXG5cdH0pO1x0XG4gICAgfSk7XG4gICAgXG4gICAgLy8gY3JlYXRlIG5vZGVzIGFuZCBsaW5rc1xuICAgIGxldCBub2RlcyA9IHJlcy5ub2Rlcy5tYXAoKG4pID0+IG4pLCBsaW5rcyA9IFtdO1xuICAgIGZvciAobGV0IGxpbmtfbm9kZV9pZCBpbiBsaW5rX3RvX25vZGVzX2RpY3QpIHtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0bGV0IGxpbmtfbm9kZSA9IHtcblx0ICAgIG5vZGVfaWQ6IGxpbmtfdG9fbm9kZXMuaWQsXG5cdCAgICBsYWJlbDogbGlua190b19ub2Rlcy5sYWJlbCxcbiAgICAgIGxpbms6IGxpbmtfdG9fbm9kZXMubGluayxcblx0fTtcblx0bm9kZXMucHVzaChsaW5rX25vZGUpO1xuXHRsaW5rX3RvX25vZGVzLm5vZGVfbGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuXHQgICAgbGlua3MucHVzaCh7XG5cdFx0c291cmNlX25vZGVfaWQ6IGxpbmsuc291cmNlLm5vZGVfaWQsXG5cdFx0dGFyZ2V0X25vZGVfaWQ6IGxpbmtfbm9kZS5ub2RlX2lkLFxuXHRcdGxhYmVsOiBgJHtsaW5rLnNvdXJjZS5sYWJlbH0gLSAke2xpbmsudGFyZ2V0LmxhYmVsfTogJHtsaW5rX25vZGUubGFiZWx9YCxcblx0XHR2YWx1ZTogbGluay52YWx1ZSxcblx0ICAgIH0pO1xuXHQgICAgbGlua3MucHVzaCh7XG5cdFx0c291cmNlX25vZGVfaWQ6IGxpbmtfbm9kZS5ub2RlX2lkLFxuXHRcdHRhcmdldF9ub2RlX2lkOiBsaW5rLnRhcmdldC5ub2RlX2lkLFxuXHRcdGxhYmVsOiBgJHtsaW5rLnNvdXJjZS5sYWJlbH0gLSAke2xpbmsudGFyZ2V0LmxhYmVsfTogJHtsaW5rX25vZGUubGFiZWx9YCxcblx0XHR2YWx1ZTogbGluay52YWx1ZSxcblx0ICAgIH0pO1xuXHR9KTtcbiAgICB9XG4gICAgbGV0IHNhbmtleV9ub2RlcyA9IG5vZGVzLm1hcCgobiwgaW5kZXgpID0+IHtcblx0cmV0dXJuIHsgaW5kZXgsIGxhYmVsOiBuLmxhYmVsLCBkYXRhOiBuIH07XG4gICAgfSk7XG4gICAgbGV0IHNhbmtleV9ub2RlX2RpY3QgPSB7fTsgICAgXG4gICAgc2Fua2V5X25vZGVzLmZvckVhY2goKHNuLCBpbmRleCkgPT4gc2Fua2V5X25vZGVfZGljdFtzbi5kYXRhLm5vZGVfaWRdID0gc24pO1xuICAgIGxldCBzYW5rZXlfbGlua3MgPSBsaW5rcy5tYXAoKGwpID0+IHtcblx0bGV0IHNvdXJjZV9pbmRleCA9IHNhbmtleV9ub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0uaW5kZXg7XG5cdGxldCB0YXJnZXRfaW5kZXggPSBzYW5rZXlfbm9kZV9kaWN0W2wudGFyZ2V0X25vZGVfaWRdLmluZGV4O1xuXHRyZXR1cm4ge1xuXHQgICAgc291cmNlOiBzb3VyY2VfaW5kZXgsXG5cdCAgICB0YXJnZXQ6IHRhcmdldF9pbmRleCxcblx0ICAgIHZhbHVlOiBsLnZhbHVlLFxuXHQgICAgbGFiZWw6IGwubGFiZWwsXG5cdH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbm9kZXM6IHNhbmtleV9ub2RlcywgbGlua3M6IHNhbmtleV9saW5rcyB9O1xufVxuXG4vLyByZW1vdmUgYWxsIGxpbmtzIHdpdGggYSBub3QgZXhpc3Rpbmcgbm9kZVxuZnVuY3Rpb24gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCkge1xuICAgIGxldCBmX2xvZ19saW5rID0gKGwpID0+IGNvbnNvbGUuZXJyb3IoYGxpbmsgKHNvdXJjZTogJHtsLnNvdXJjZV9ub2RlX2lkfSwgdGFyZ2V0OiAke2wudGFyZ2V0X25vZGVfaWR9KSByZW1vdmVkIGZvciBub3QgZXhpc3Rpbmcgc291cmNlL3RhcmdldCBub2RlYCk7ICAgIFxuICAgIGxldCBsaW5rcyA9IGdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUoZ3JhcGgsIGZfbG9nX2xpbmspO1xuICAgIHJldHVybiB7IG5vZGVzOiBncmFwaC5ub2RlcywgbGlua3MgfTtcbn1cblxuLy8gcmVtZW92ZSBhbGwgY2lyY3VsYXIgbGlua3MgYW5kIHJldHVybiBhIGRhZyBncmFwaFxuZnVuY3Rpb24gbWFrZV9kYWdfZ3JhcGgoZ3JhcGgpIHsgICAgXG4gICAgbGV0IG5vZGVzX2Rlc3RfZGljdCA9IHt9OyAvLyBkaWN0aW9uYXJ5IHsgW25vZGVfc291cmNlX2lkXTogbm9kZXNfdGFyZ2V0W10gfVxuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcblx0bGV0IG5vZGVzX2Rlc3QgPSBub2Rlc19kZXN0X2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF07XG5cdGlmIChub2Rlc19kZXN0ID09IG51bGwpIHtcblx0ICAgIG5vZGVzX2Rlc3QgPSBbXTtcblx0ICAgIG5vZGVzX2Rlc3RfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IG5vZGVzX2Rlc3Q7XG5cdH1cblx0bm9kZXNfZGVzdC5wdXNoKGwudGFyZ2V0X25vZGVfaWQpO1xuICAgIH0pO1xuICAgIGxldCBub2Rlc190b19jaGVjayA9IHt9OyAvLyB0ZW1wIGRpY3Rpb25hcnkgdXNlZCBmcm9tIGZfYWRkX2NpcmN1bGFyX2xpbmsgXG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4ge1xuXHRub2Rlc190b19jaGVja1tuLm5vZGVfaWRdID0geyBjaGVja2VkOiBmYWxzZSwgdmlzaXRlZDogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIC8vIGNpcmN1bGFyIGxpbmtzIGRpY3QgKGtleTogYCR7c291cmNlX25vZGVfaWR9XyR7dGFyZ2V0X25vZGVfaWR9YClcbiAgICBsZXQgY2lyY3VsYXJfbGlua3MgPSB7fTtcbiAgICBsZXQgZl9nZXRfbGlua19rZXkgPSAoc291cmNlX2lkLCB0YXJnZXRfaWQpID0+IGAke3NvdXJjZV9pZH1fJHt0YXJnZXRfaWR9YDtcbiAgICBcbiAgICAvLyBkZWVwIG5hdmlnYXRlIHN0YXJ0aW5nIGZyb20gbm9kZV9pZCBhbmQgYWRkIGNpcmN1bGFyX2xpbmtzIHZpc2l0ZWQgaW4gY2lyY3VsYXJfbGlua3MgZGljdCBcbiAgICBsZXQgZl9zZXRfY2lyY3VsYXJfbGlua3MgPSAobm9kZV9pZCwgZnJvbV9ub2RlX2lkKSA9PiB7XG5cdGxldCBub2RlX3RvX2NoZWNrID0gbm9kZXNfdG9fY2hlY2tbbm9kZV9pZF07XG5cdGlmIChub2RlX3RvX2NoZWNrLmNoZWNrZWQgPT0gdHJ1ZSkgeyByZXR1cm47IH1cblx0ZWxzZSBpZiAobm9kZV90b19jaGVjay52aXNpdGVkID09IHRydWUpIHtcblx0ICAgIGxldCBsaW5rX2tleSA9IGZfZ2V0X2xpbmtfa2V5KGZyb21fbm9kZV9pZCwgbm9kZV9pZCk7XG5cdCAgICBjaXJjdWxhcl9saW5rc1tsaW5rX2tleV0gPSB0cnVlO1xuXHQgICAgY29uc29sZS5lcnJvcihgTGluayAoc291cmNlOiAke2Zyb21fbm9kZV9pZH0sIHRhcmdldDogJHtub2RlX2lkfSApIGlzIGEgY2lyY3VsYXIgbGlua2ApO1xuXHQgICAgbm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG5cdCAgICByZXR1cm47XG5cdH1cblx0bm9kZV90b19jaGVjay52aXNpdGVkID0gdHJ1ZTtcblx0bGV0IG5vZGVzX2Rlc3QgPSBub2Rlc19kZXN0X2RpY3Rbbm9kZV9pZF07XG5cdGlmIChub2Rlc19kZXN0ICE9IG51bGwpIHtcblx0ICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXNfZGVzdC5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGxldCB0YXJnZXRfbm9kZV9pZCA9IG5vZGVzX2Rlc3RbaV07XG5cdFx0Zl9zZXRfY2lyY3VsYXJfbGlua3ModGFyZ2V0X25vZGVfaWQsIG5vZGVfaWQpO1x0ICAgIFxuXHQgICAgfVxuXHR9XG5cdG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9IGZhbHNlO1xuXHRub2RlX3RvX2NoZWNrLmNoZWNrZWQgPSB0cnVlO1xuICAgIH07XG4gICAgLy8gc2V0IGNpcmN1bGFyX2xpbmtzIGRpY3Rpb25hcnlcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBmX3NldF9jaXJjdWxhcl9saW5rcyhuLm5vZGVfaWQpKTtcbiAgICBcbiAgICAvLyByZW1vdmUgbm8gZGFnIG5vZGVzL2xpbmtzXG4gICAgbGV0IGZfZmlsdGVyX2xpbmsgPSAobCkgPT4ge1xuXHRsZXQgbGlua19rZXkgPSBmX2dldF9saW5rX2tleShsLnNvdXJjZV9ub2RlX2lkLCBsLnRhcmdldF9ub2RlX2lkKTtcblx0bGV0IHRha2VfbGluayA9IGNpcmN1bGFyX2xpbmtzW2xpbmtfa2V5XSA9PSBudWxsO1xuXHRyZXR1cm4gdGFrZV9saW5rO1xuICAgIH07XG4gICAgbGV0IGZfbG9nX2xpbmsgPSAobCkgPT4gY29uc29sZS5lcnJvcihgbGluayAoc291cmNlOiAke2wuc291cmNlX25vZGVfaWR9LCB0YXJnZXQ6ICR7bC50YXJnZXRfbm9kZV9pZH0pIHJlbW92ZWQgZm9yIGNpcmN1bGFyIGxpbmtzYCk7XG4gICAgbGV0IGxpbmtzID0gZmlsdGVyX2xvZyhncmFwaC5saW5rcywgZl9maWx0ZXJfbGluaywgZl9sb2dfbGluayk7XG4gICAgXG4gICAgbGV0IGZfbG9nX25vZGUgPSAobikgPT4gY29uc29sZS5lcnJvcihgbm9kZSAke24ubm9kZV9pZH0gcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbm9kZXMgPSBnZXRfbm9kZXNfd2l0aF9leGlzdGluZ19saW5rKHtub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzfSwgZl9sb2dfbm9kZSk7XG5cbiAgICAvLyByZXR1cm4gYSBkYWcgZ3JhcGhcbiAgICByZXR1cm4geyBub2RlcywgbGlua3MgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZShncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge307XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4gbm9kZV9kaWN0W24ubm9kZV9pZF0gPSB0cnVlKTtcbiAgICBsZXQgZl9maWx0ZXIgPSAobCkgPT4gbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdICE9IG51bGwgJiYgbm9kZV9kaWN0W2wudGFyZ2V0X25vZGVfaWRdICE9IG51bGw7ICAgIFxuICAgIGxldCBsaW5rcyA9IGZpbHRlcl9sb2coZ3JhcGgubGlua3MsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIGxpbmtzO1xufVxuXG5mdW5jdGlvbiBnZXRfbm9kZXNfd2l0aF9leGlzdGluZ19saW5rKGdyYXBoLCBmX2xvZykge1xuICAgIGxldCBsaW5rX3NvdXJjZV9kaWN0ID0ge307XG4gICAgbGV0IGxpbmtfdGFyZ2V0X2RpY3QgPSB7fTtcbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsKSA9PiB7XG5cdGxpbmtfc291cmNlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gPSB0cnVlO1xuXHRsaW5rX3RhcmdldF9kaWN0W2wudGFyZ2V0X25vZGVfaWRdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBsZXQgZl9maWx0ZXIgPSAobikgPT4gbGlua19zb3VyY2VfZGljdFtuLm5vZGVfaWRdID09IHRydWUgfHwgbGlua190YXJnZXRfZGljdFtuLm5vZGVfaWRdID09IHRydWU7XG4gICAgbGV0IG5vZGVzID0gZmlsdGVyX2xvZyhncmFwaC5ub2RlcywgZl9maWx0ZXIsIGZfbG9nKTtcbiAgICByZXR1cm4gbm9kZXM7XG59XG5cbi8vIGxvZyBlbGVtZW50cyBkZWxldGVkIGlmIGZfbG9nICE9IG51bGxcbmZ1bmN0aW9uIGZpbHRlcl9sb2coZWxlbWVudHMsIGZfZmlsdGVyLCBmX2xvZykge1xuICAgIHJldHVybiBlbGVtZW50cy5maWx0ZXIoKGUpID0+IHtcblx0Y29uc3QgdGFrZV9lbGVtZW50ID0gZl9maWx0ZXIoZSk7XG5cdGlmICh0YWtlX2VsZW1lbnQgPT0gZmFsc2UgJiYgZl9sb2cgIT0gbnVsbCkge1xuXHQgICAgZl9sb2coZSk7XG5cdH1cblx0cmV0dXJuIHRha2VfZWxlbWVudDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2hlaWdodCgpIHtcbiAgaGVpZ2h0LnZhbHVlID0gJChib2R5X2Rpdi52YWx1ZSkuaGVpZ2h0KCkgLSAxMDA7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV93aWR0aCgpIHtcbiAgd2lkdGgudmFsdWUgPSAkKGJvZHlfZGl2LnZhbHVlKS53aWR0aCgpIC0gMTA7XG59XG5cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkICBjYXJkLXNoYWRvd1wiPlxuICAgICAgPExvYWRpbmcgcmVmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBpZD1cImFnZ3JlZ2F0ZWRfbGl2ZV9mbG93c1wiPiAgICAgICAgICBcbiAgICAgICAgICA8RGF0YXRhYmxlIHJlZj1cInRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93c1wiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cInRhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJ0YWJsZV9jb25maWcuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJ0YWJsZV9jb25maWcuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwidGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcblxuY29uc3QgbG9hZGluZyA9IHJlZihudWxsKVxuY29uc3QgdGFibGVfY29uZmlnID0gcmVmKHt9KVxuY29uc3QgdGFibGVfYWdncmVnYXRlZF9saXZlX2Zsb3dzID0gcmVmKG51bGwpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHZsYW5zOiBBcnJheSxcbiAgaWZpZDogTnVtYmVyLFxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2Zsb3cvYWdncmVnYXRlZF9saXZlX2Zsb3dzLmx1YWBcblxuY29uc3QgcmVsb2FkX3RhYmxlID0gKCkgPT4ge1xuICB0YWJsZV9hZ2dyZWdhdGVkX2xpdmVfZmxvd3MudmFsdWUucmVsb2FkKCk7XG59XG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgYXdhaXQgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKCkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IHBhcmFtcyA9IHsgXG4gICAgaWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmlmaWQsXG4gICAgdmxhbl9pZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2bGFuX2lkXCIpXG4gIH07XG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICByZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHZsYW5fZmlsdGVycyA9IFtdXG4gIFxuICBpZihwcm9wcy52bGFucy5sZW5ndGggPiAwKSB7XG4gICAgdmxhbl9maWx0ZXJzLnB1c2goe1xuICAgICAgZmlsdGVyVGl0bGU6IF9pMThuKCdtYXBfcGFnZS52bGFucycpLFxuICAgICAgZmlsdGVyczogcHJvcHMudmxhbnMsXG4gICAgICBmaWx0ZXJNZW51S2V5OiAndmxhbl9pZCcsXG4gICAgICBjb2x1bW5JbmRleDogMCxcbiAgICAgIHJlbW92ZUFsbEVudHJ5OiB0cnVlLFxuICAgICAgY2FsbGJhY2tGdW5jdGlvbjogKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgICBsZXQgcGFyYW1zID0geyBcbiAgICAgICAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuaWZpZCAsXG4gICAgICAgICAgdmxhbl9pZDogdmFsdWUuaWQsXG4gICAgICAgIH07XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbl9pZCcsIHZhbHVlLmlkKTtcbiAgICAgICAgdGFibGUuYWpheC51cmwoYCR7dXJsfT8ke250b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpfWApO1xuICAgICAgICBsb2FkaW5nLnZhbHVlLnNob3dfbG9hZGluZygpO1xuICAgICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgICBsb2FkaW5nLnZhbHVlLmhpZGVfbG9hZGluZygpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IGAke3VybH0/JHt1cmxfcGFyYW1zfWAsXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB0YWJsZV9maWx0ZXJzOiB2bGFuX2ZpbHRlcnMsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDcgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA2IH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogNyB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDggfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBcbiAgICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBsaWNhdGlvbl9wcm90b1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YTogJ2FwcGxpY2F0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9hcHBsaWNhdGlvbj0ke2RhdGEuaWR9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICB9IFxuICAgIH0sXG4gIF07XG5cbiAgaWYocHJvcHMudmxhbnMubGVuZ3RoID4gMCkge1xuICAgIGNvbHVtbnMucHVzaCh7IFxuICAgICAgY29sdW1uTmFtZTogaTE4bihcInZsYW5cIiksIHRhcmdldHM6IDAsIG5hbWU6ICd2bGFuX2lkJywgZGF0YTogJ3ZsYW5faWQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBpZihkYXRhLmlkID09PSAwKVxuICAgICAgICAgIHJldHVybiBgYFxuICAgICAgICBlbHNlIFxuICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/dmxhbj0ke2RhdGEuaWR9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICB9IFxuICAgIH0pXG5cbiAgICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2NvbmZpZy5vcmRlciA9IFtbIDggLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXTtcbiAgICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2NvbmZpZy5jb2x1bW5EZWZzID0gW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA3IH0sXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDggfSxcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogOSB9LFxuICAgIF07XG4gIH1cblxuICBjb2x1bW5zLnB1c2goeyBcbiAgICBjb2x1bW5OYW1lOiBpMThuKFwiZmxvd3NcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdmbG93cycsIGRhdGE6ICdmbG93cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG4gIH0sIHsgXG4gICAgY29sdW1uTmFtZTogaTE4bihcInNjb3JlXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnc2NvcmUnLCBkYXRhOiAndG90X3Njb3JlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcbiAgfSwgeyBcbiAgICBjb2x1bW5OYW1lOiBpMThuKFwiY2xpZW50c1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ251bV9jbGllbnRzJywgZGF0YTogJ251bV9jbGllbnRzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcbiAgfSwgeyBcbiAgICBjb2x1bW5OYW1lOiBpMThuKFwic2VydmVyc1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ251bV9zZXJ2ZXJzJywgZGF0YTogJ251bV9zZXJ2ZXJzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcbiAgfSwgeyBcbiAgICBjb2x1bW5OYW1lOiBpMThuKFwiYnJlYWtkb3duXCIpLCB0YXJnZXRzOiAwLCBzb3J0aW5nOiBmYWxzZSwgbmFtZTogJ2JyZWFrZG93bicsIGRhdGE6ICdicmVha2Rvd24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVCcmVha2Rvd24oZGF0YS5wZXJjZW50YWdlX2J5dGVzX3NlbnQsIGRhdGEucGVyY2VudGFnZV9ieXRlc19yY3ZkLCBpMThuKCdzZW50JyksIGkxOG4oJ3JjdmQnKSk7XG4gICAgfVxuICB9LCB7IFxuICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX3NlbnRcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdieXRlc19zZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWVuZCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICB9XG4gIH0sIHsgXG4gICAgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfcmN2ZFwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2J5dGVzX3JjdmQnLCBkYXRhOiAnYnl0ZXNfcmN2ZCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtZW5kJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgIH1cbiAgfSwgeyBcbiAgICBjb2x1bW5OYW1lOiBpMThuKFwidG90YWxfdHJhZmZpY1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3RvdF90cmFmZmljJywgZGF0YTogJ3RvdF90cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1lbmQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgfVxuICB9KVxuICBcbiAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICB0YWJsZV9jb25maWcudmFsdWUgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnO1xufVxuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgOmlkPVwiaWRfbW9kYWxcIiByZWY9XCJtb2RhbFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7aTE4bignYWxlcnRzX2Rhc2hib2FyZC5hZGRfZmlsdGVyJyl9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8Zm9ybSBhdXRvY29tcGxldGU9XCJvZmZcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tM1wiIGZvcj1cImR0LWZpbHRlci10eXBlLXNlbGVjdFwiPlxuXHQgIDxiPkZpbHRlcjwvYj5cblx0PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJmaWx0ZXJfdHlwZV9zZWxlY3RlZFwiXG4gICAgICA6aWQ9XCInZmlsdGVyX3R5cGUnXCJcbiAgICAgIDpvcHRpb25zPVwiZmlsdGVyc19vcHRpb25zXCJcbiAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2ZpbHRlcigpXCI+XG4gICAgPC9zZWxlY3Qtc2VhcmNoPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGhyPlxuICAgICAgPGRpdiBjbGFzcz1cImR0LWZpbHRlci10ZW1wbGF0ZS1jb250YWluZXIgZm9ybS1ncm91cCByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIj5cbiAgICAgICAgICA8Yj57e2ZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkfX08L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBtYi0zXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZCBjb2wtc20tM1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wZXJhdG9yX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICA6aWQ9XCInb3BlcmF0b3JfZmlsdGVyJ1wiXG4gICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcGVyYXRvcnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfb3BlcmF0b3JfdHlwZVwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiIHYtaWY9XCJvcHRpb25zX3RvX3Nob3dcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcHRpb25fc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgIDppZD1cIidkYXRhX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3B0aW9uc190b19zaG93XCJcbiAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9kYXRhX2ZpbHRlclwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwiaW5wdXRfdmFsdWVcIiA6cGF0dGVybj1cImRhdGFfcGF0dGVybl9zZWxlY3RlZFwiIG5hbWU9XCJ2YWx1ZVwiIDpyZXF1aXJlZD1cImlucHV0X3JlcXVpcmVkXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxuICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cIm1hcmdpbjogMHB4O3BhZGRpbmc6MDtcIiBjbGFzcz1cImFsZXJ0IGludmFsaWQtZmVlZGJhY2tcIj57e2kxOG4oJ2ludmFsaWRfdmFsdWUnKX19PC9zcGFuPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8IS0tIGVuZCBkaXYgaW5wdXQtZ3JvdXAgbWItMyAtLT5cblx0PC9kaXY+XG5cdDwhLS0gZW5kIGRpdiBmb3JtLWdyb3VwLXJvdyAtLT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmRpc2FibGVkPVwiY2hlY2tfZGlzYWJsZV9hcHBseSgpXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gJy4vc2VsZWN0LXNlYXJjaC52dWUnXG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuXHQnbW9kYWwnOiBNb2RhbCxcbiAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSwgXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0ZmlsdGVyc19vcHRpb25zOiBBcnJheSxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBqUXVlcnk6ICQsXG5cdCAgICBpZF9tb2RhbDogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsYCxcblx0ICAgIGZpbHRlcl90eXBlX3NlbGVjdGVkOiBbXSxcblx0ICAgIGZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkOiBudWxsLFxuXHQgICAgb3BlcmF0b3Jfc2VsZWN0ZWQ6IFtdLFxuXHQgICAgb3B0aW9uX3NlbGVjdGVkOiBbXSxcblx0ICAgIGlucHV0X3ZhbHVlOiBudWxsLFxuXHQgICAgZGF0YV9wYXR0ZXJuX3NlbGVjdGVkOiBudWxsLFxuXHQgICAgaW5wdXRfcmVxdWlyZWQ6IGZhbHNlLFxuXHQgICAgb3B0aW9uc190b19zaG93OiBudWxsLFxuXHQgICAgb3BlcmF0b3JzX3RvX3Nob3c6IFtdLFxuXHR9O1xuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCJdLFxuICAgIGNyZWF0ZWQoKSB7fSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBhc3luYyBtb3VudGVkKCkge1xuICAgICAgYXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9tb2RhbCk7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywgKGZpbHRlcikgPT4gdGhpcy5zaG93KGZpbHRlcikpO1x0XG4gICAgICAvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuICAgICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHNob3c6IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgIGlmICh0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMgPT0gbnVsbCB8fCB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMubGVuZ3RoID09IDApIHsgXG4gICAgICByZXR1cm47IFxuICAgIH1cbiAgICBpZiAoZmlsdGVyICE9IG51bGwpIHtcblx0ICBcdHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSBmaWx0ZXI7XG5cdFx0ICB0aGlzLmNoYW5nZV9maWx0ZXIoZmlsdGVyKTtcdFx0XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnNbMF07XG4gICAgICB0aGlzLmNoYW5nZV9maWx0ZXIoKTtcbiAgICB9XG4gICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLnNob3coKTtcblx0fSxcbiAgcG9zdF9jaGFuZ2U6IGZ1bmN0aW9uKGZpbHRlciwgdmFsdWVfdHlwZSkge1xuICAgIGlmIChmaWx0ZXIuaWQgJiYgdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zKSB7XG4gICAgICAvKiBGaWx0ZXIgdHlwZSBzZWxlY3RlZCwgZS5nLiBBbGVydCBUeXBlLCBBcHBsaWNhdGlvbiwgZWNjLiAqL1xuXHRcdFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gZmlsdGVyLmlkKTtcbiAgICB9XG4gICAgaWYgKGZpbHRlci52YWx1ZSkge1xuICAgICAgLyogRmlsdGVyIHNlbGVjdGVkIGZvciB0aGUgdHlwZSwgZS5nLiBETlMsIElDTVAsIGVjYy4gKi9cbiAgICAgIGlmICh0aGlzLm9wdGlvbnNfdG9fc2hvdykge1xuXHRcdFx0ICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93LmZpbmQoKGZvKSA9PiBmby52YWx1ZSA9PSBmaWx0ZXIudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcblx0XHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBbXTtcbiAgICAgICAgdGhpcy5pbnB1dF92YWx1ZSA9IGZpbHRlci52YWx1ZTtcbiAgICAgICAgdGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmaWx0ZXIub3BlcmF0b3IgJiYgdGhpcy5vcGVyYXRvcnNfdG9fc2hvdykge1xuICAgICAgLyogT3BlcmF0b3IgZmlsdGVyIHNlbGVjdGVkLCBlLmcuID0sICE9LCBlY2MuICovXG5cdFx0XHR0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gdGhpcy5vcGVyYXRvcnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8uaWQgPT0gZmlsdGVyLm9wZXJhdG9yKTtcbiAgICB9XG4gIH0sXG4gIGNoYW5nZV9vcGVyYXRvcl90eXBlOiBmdW5jdGlvbihzZWxlY3RlZF9vcGVyYXRvcl90eXBlKSB7XG4gICAgaWYoc2VsZWN0ZWRfb3BlcmF0b3JfdHlwZSAhPSBbXSkge1xuICAgICAgdGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IHNlbGVjdGVkX29wZXJhdG9yX3R5cGVcbiAgICB9XG4gIH0sICBcbiAgY2hhbmdlX2RhdGFfZmlsdGVyOiBmdW5jdGlvbihzZWxlY3RlZF9maWx0ZXIpIHtcbiAgICBpZihzZWxlY3RlZF9maWx0ZXIgIT0gW10pIHtcbiAgICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gc2VsZWN0ZWRfZmlsdGVyXG4gICAgfVxuICB9LCAgXG4gIGNoYW5nZV9maWx0ZXI6IGZ1bmN0aW9uKHNlbGVjdGVkX2ZpbHRlcikge1xuICAgIHRoaXMub3B0aW9uc190b19zaG93ID0gbnVsbDtcbiAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IG51bGw7XG4gICAgdGhpcy5pbnB1dF92YWx1ZSA9IG51bGxcbiAgICBsZXQgZmlsdGVyc19vcHRpb25zID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zO1xuICAgICAgLyogU2VhcmNoIHRoZSBmaWx0ZXIgc2VsZWN0ZWQgKi9cbiAgICBsZXQgZmlsdGVyID0gZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcbiAgICBpZiAoZmlsdGVyID09IG51bGwpIHsgXG4gICAgICByZXR1cm47IFxuICAgIH1cbiAgICAvKiBTZXQgdGhlIGNvcnJlY3QgZmlsdGVycyB0byBkaXNwbGF5ICovXG4gICAgdGhpcy5vcGVyYXRvcnNfdG9fc2hvdyA9IGZpbHRlci5vcGVyYXRvcnM7XG4gICAgdGhpcy5maWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZCA9IGZpbHRlci5sYWJlbDtcbiAgICBpZiAoZmlsdGVyLm9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgdGhpcy5vcHRpb25zX3RvX3Nob3cgPSBmaWx0ZXIub3B0aW9ucy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuICAgICAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuICAgICAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcbiAgICAgIH0pO1xuICAgICAgaWYoIXRoaXMub3B0aW9uX3NlbGVjdGVkKVxuICAgICAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93WzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG4gICAgICB0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCA9IHRoaXMuZ2V0X2RhdGFfcGF0dGVybihmaWx0ZXIudmFsdWVfdHlwZSk7XG4gICAgfVxuXG4gICAgaWYoZmlsdGVyLm9wZXJhdG9ycyAmJiB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkLmxlbmd0aCA9PSAwKSB7XG4gICAgICB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gZmlsdGVyLm9wZXJhdG9yc1swXVxuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZF9maWx0ZXIgIT0gbnVsbCkgeyBcbiAgICAgIHRoaXMucG9zdF9jaGFuZ2Uoc2VsZWN0ZWRfZmlsdGVyLCBmaWx0ZXIudmFsdWVfdHlwZSk7IFxuICAgIH1cblx0fSxcblx0Z2V0X2RhdGFfcGF0dGVybjogZnVuY3Rpb24odmFsdWVfdHlwZSkge1xuXHQgICAgdGhpcy5pbnB1dF9yZXF1aXJlZCA9IHRydWU7XG5cdCAgICBpZiAodmFsdWVfdHlwZSA9PSBcInRleHRcIikge1xuXHRcdHRoaXMuaW5wdXRfcmVxdWlyZWQgPSBmYWxzZTtcblx0XHRyZXR1cm4gYC4qYDtcblx0ICAgIH1cblx0ICAgIHJldHVybiByZWdleFZhbGlkYXRpb24uZ2V0X2RhdGFfcGF0dGVybih2YWx1ZV90eXBlKTtcblxuXHQgICAgLy8gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImlwXCIpIHtcblx0ICAgIC8vIFx0bGV0IHJfaXB2NCA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjQ7XG5cdCAgICAvLyBcdGxldCByX2lwdjRfdmxhbiA9IHJfaXB2NC5yZXBsYWNlKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0ICAgIC8vIFx0bGV0IHJfaXB2NiA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjY7XG5cdCAgICAvLyBcdGxldCByX2lwdjZfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0ICAgIC8vIFx0cmV0dXJuIGAoJHtyX2lwdjR9KXwoJHtyX2lwdjRfdmxhbn0pfCgke3JfaXB2Nn0pfCgke3JfaXB2Nl92bGFufSlgO1xuXHQgICAgLy8gfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiY2lkclwiKSB7XG5cdCAgICAvLyBcdGNvbnNvbGUubG9nKFwidGVzdFwiKTtcblx0ICAgIC8vIH1cblx0ICAgIFxuXHQgICAgLy8gcmV0dXJuIE50b3BVdGlscy5SRUdFWEVTW3ZhbHVlX3R5cGVdO1xuXHR9LFxuXHRjaGVja19kaXNhYmxlX2FwcGx5OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAodGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQpO1xuXHQgICAgbGV0IGRpc2FibGVfYXBwbHkgPSAhdGhpcy5vcHRpb25zX3RvX3Nob3cgJiYgKFxuXHRcdCh0aGlzLmlucHV0X3JlcXVpcmVkICYmICh0aGlzLmlucHV0X3ZhbHVlID09IG51bGwgfHwgdGhpcy5pbnB1dF92YWx1ZSA9PSBcIlwiKSlcblx0XHQgICAgfHwgKHJlZ2V4LnRlc3QodGhpcy5pbnB1dF92YWx1ZSkgPT0gZmFsc2UpXG5cdFx0KTtcblx0ICAgIHJldHVybiBkaXNhYmxlX2FwcGx5O1xuXHR9LFxuXHRhcHBseTogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5pbnB1dF92YWx1ZTtcbiAgICBsZXQgdmFsdWVfbGFiZWwgPSB0aGlzLmlucHV0X3ZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8ICh0aGlzLm9wdGlvbl9zZWxlY3RlZCAhPSB1bmRlZmluZWQgJiYgdGhpcy5vcHRpb25fc2VsZWN0ZWQubGVuZ3RoICE9IDApKSB7XG4gICAgICBsZXQgZmlsdGVyID0gdGhpcy5maWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQpO1xuICAgICAgbGV0IG9wdGlvbiA9IGZpbHRlci5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdGhpcy5vcHRpb25fc2VsZWN0ZWQudmFsdWUpO1xuICAgICAgdmFsdWUgPSBvcHRpb24udmFsdWU7XG4gICAgICB2YWx1ZV9sYWJlbCA9IG9wdGlvbi52YWx1ZV9sYWJlbCB8fCBvcHRpb24ubGFiZWw7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICBpZDogdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCxcbiAgICAgIGxhYmVsOiB0aGlzLmZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkLFxuICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQuaWQsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICB2YWx1ZV9sYWJlbDogdmFsdWVfbGFiZWwsXG4gICAgfTtcbiAgICB0aGlzLiRlbWl0KFwiYXBwbHlcIiwgcGFyYW1zKTtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuTU9EQUxfRklMVEVSU19BUFBMWSwgcGFyYW1zKTtcbiAgICB0aGlzLmNsb3NlKCk7XG5cdH0sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5jbG9zZSgpO1xuXHR9LFxuICAgIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0IH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmlucHV0OmludmFsaWQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ2FsZXJ0c19kYXNoYm9hcmQuYWRkX2ZpbHRlcicpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGZvcm0gYXV0b2NvbXBsZXRlPVwib2ZmXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIiBmb3I9XCJkdC1maWx0ZXItdHlwZS1zZWxlY3RcIj5cblx0ICA8Yj5GaWx0ZXI8L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiZmlsdGVyX3R5cGVfc2VsZWN0ZWRcIlxuICAgICAgOmlkPVwiJ2ZpbHRlcl90eXBlJ1wiXG4gICAgICA6b3B0aW9ucz1cImZpbHRlcnNfb3B0aW9uc1wiXG4gICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9maWx0ZXIoKVwiPlxuICAgIDwvc2VsZWN0LXNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxocj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkdC1maWx0ZXItdGVtcGxhdGUtY29udGFpbmVyIGZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCI+XG4gICAgICAgICAgPGI+e3tmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZH19PC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmQgY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcGVyYXRvcl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgOmlkPVwiJ29wZXJhdG9yX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3BlcmF0b3JzX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX29wZXJhdG9yX3R5cGVcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTlcIiB2LWlmPVwib3B0aW9uc190b19zaG93XCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3B0aW9uX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICA6aWQ9XCInZGF0YV9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wdGlvbnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZGF0YV9maWx0ZXJcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cImlucHV0X3ZhbHVlXCIgOnBhdHRlcm49XCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWRcIiBuYW1lPVwidmFsdWVcIiA6cmVxdWlyZWQ9XCJpbnB1dF9yZXF1aXJlZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJtYXJnaW46IDBweDtwYWRkaW5nOjA7XCIgY2xhc3M9XCJhbGVydCBpbnZhbGlkLWZlZWRiYWNrXCI+e3tpMThuKCdpbnZhbGlkX3ZhbHVlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPCEtLSBlbmQgZGl2IGlucHV0LWdyb3VwIG1iLTMgLS0+XG5cdDwvZGl2PlxuXHQ8IS0tIGVuZCBkaXYgZm9ybS1ncm91cC1yb3cgLS0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDpkaXNhYmxlZD1cImNoZWNrX2Rpc2FibGVfYXBwbHkoKVwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tICcuL3NlbGVjdC1zZWFyY2gudnVlJ1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcblx0J21vZGFsJzogTW9kYWwsXG4gICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIH0sIFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGZpbHRlcnNfb3B0aW9uczogQXJyYXksXG4gICAgfSxcbiAgICB1cGRhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgalF1ZXJ5OiAkLFxuXHQgICAgaWRfbW9kYWw6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbGAsXG5cdCAgICBmaWx0ZXJfdHlwZV9zZWxlY3RlZDogW10sXG5cdCAgICBmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZDogbnVsbCxcblx0ICAgIG9wZXJhdG9yX3NlbGVjdGVkOiBbXSxcblx0ICAgIG9wdGlvbl9zZWxlY3RlZDogW10sXG5cdCAgICBpbnB1dF92YWx1ZTogbnVsbCxcblx0ICAgIGRhdGFfcGF0dGVybl9zZWxlY3RlZDogbnVsbCxcblx0ICAgIGlucHV0X3JlcXVpcmVkOiBmYWxzZSxcblx0ICAgIG9wdGlvbnNfdG9fc2hvdzogbnVsbCxcblx0ICAgIG9wZXJhdG9yc190b19zaG93OiBbXSxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge30sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcbiAgICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfbW9kYWwpO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIChmaWx0ZXIpID0+IHRoaXMuc2hvdyhmaWx0ZXIpKTtcdFxuICAgICAgLy8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcbiAgICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRzaG93OiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICBpZiAodGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zID09IG51bGwgfHwgdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zLmxlbmd0aCA9PSAwKSB7IFxuICAgICAgcmV0dXJuOyBcbiAgICB9XG4gICAgaWYgKGZpbHRlciAhPSBudWxsKSB7XG5cdCAgXHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gZmlsdGVyO1xuXHRcdCAgdGhpcy5jaGFuZ2VfZmlsdGVyKGZpbHRlcik7XHRcdFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zWzBdO1xuICAgICAgdGhpcy5jaGFuZ2VfZmlsdGVyKCk7XG4gICAgfVxuICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG4gIHBvc3RfY2hhbmdlOiBmdW5jdGlvbihmaWx0ZXIsIHZhbHVlX3R5cGUpIHtcbiAgICBpZiAoZmlsdGVyLmlkICYmIHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucykge1xuICAgICAgLyogRmlsdGVyIHR5cGUgc2VsZWN0ZWQsIGUuZy4gQWxlcnQgVHlwZSwgQXBwbGljYXRpb24sIGVjYy4gKi9cblx0XHRcdHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IGZpbHRlci5pZCk7XG4gICAgfVxuICAgIGlmIChmaWx0ZXIudmFsdWUpIHtcbiAgICAgIC8qIEZpbHRlciBzZWxlY3RlZCBmb3IgdGhlIHR5cGUsIGUuZy4gRE5TLCBJQ01QLCBlY2MuICovXG4gICAgICBpZiAodGhpcy5vcHRpb25zX3RvX3Nob3cpIHtcblx0XHRcdCAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG5cdFx0ICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gW107XG4gICAgICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBmaWx0ZXIudmFsdWU7XG4gICAgICAgIHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmlsdGVyLm9wZXJhdG9yICYmIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cpIHtcbiAgICAgIC8qIE9wZXJhdG9yIGZpbHRlciBzZWxlY3RlZCwgZS5nLiA9LCAhPSwgZWNjLiAqL1xuXHRcdFx0dGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IHRoaXMub3BlcmF0b3JzX3RvX3Nob3cuZmluZCgoZm8pID0+IGZvLmlkID09IGZpbHRlci5vcGVyYXRvcik7XG4gICAgfVxuICB9LFxuICBjaGFuZ2Vfb3BlcmF0b3JfdHlwZTogZnVuY3Rpb24oc2VsZWN0ZWRfb3BlcmF0b3JfdHlwZSkge1xuICAgIGlmKHNlbGVjdGVkX29wZXJhdG9yX3R5cGUgIT0gW10pIHtcbiAgICAgIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSBzZWxlY3RlZF9vcGVyYXRvcl90eXBlXG4gICAgfVxuICB9LCAgXG4gIGNoYW5nZV9kYXRhX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG4gICAgaWYoc2VsZWN0ZWRfZmlsdGVyICE9IFtdKSB7XG4gICAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHNlbGVjdGVkX2ZpbHRlclxuICAgIH1cbiAgfSwgIFxuICBjaGFuZ2VfZmlsdGVyOiBmdW5jdGlvbihzZWxlY3RlZF9maWx0ZXIpIHtcbiAgICB0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG4gICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBudWxsO1xuICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBudWxsXG4gICAgbGV0IGZpbHRlcnNfb3B0aW9ucyA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucztcbiAgICAgIC8qIFNlYXJjaCB0aGUgZmlsdGVyIHNlbGVjdGVkICovXG4gICAgbGV0IGZpbHRlciA9IGZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCk7XG4gICAgaWYgKGZpbHRlciA9PSBudWxsKSB7IFxuICAgICAgcmV0dXJuOyBcbiAgICB9XG4gICAgLyogU2V0IHRoZSBjb3JyZWN0IGZpbHRlcnMgdG8gZGlzcGxheSAqL1xuICAgIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cgPSBmaWx0ZXIub3BlcmF0b3JzO1xuICAgIHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQgPSBmaWx0ZXIubGFiZWw7XG4gICAgaWYgKGZpbHRlci5vcHRpb25zICE9IG51bGwpIHtcbiAgICAgIHRoaXMub3B0aW9uc190b19zaG93ID0gZmlsdGVyLm9wdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYSA9PSBudWxsIHx8IGEubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gLTE7IH1cbiAgICAgICAgaWYgKGIgPT0gbnVsbCB8fCBiLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIDE7IH1cbiAgICAgICAgcmV0dXJuIGEubGFiZWwudG9TdHJpbmcoKS5sb2NhbGVDb21wYXJlKGIubGFiZWwudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcbiAgICAgIGlmKCF0aGlzLm9wdGlvbl9zZWxlY3RlZClcbiAgICAgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvd1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcHRpb25zX3RvX3Nob3cgPSBudWxsO1xuICAgICAgdGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuICAgIH1cblxuICAgIGlmKGZpbHRlci5vcGVyYXRvcnMgJiYgdGhpcy5vcGVyYXRvcl9zZWxlY3RlZC5sZW5ndGggPT0gMCkge1xuICAgICAgdGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IGZpbHRlci5vcGVyYXRvcnNbMF1cbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWRfZmlsdGVyICE9IG51bGwpIHsgXG4gICAgICB0aGlzLnBvc3RfY2hhbmdlKHNlbGVjdGVkX2ZpbHRlciwgZmlsdGVyLnZhbHVlX3R5cGUpOyBcbiAgICB9XG5cdH0sXG5cdGdldF9kYXRhX3BhdHRlcm46IGZ1bmN0aW9uKHZhbHVlX3R5cGUpIHtcblx0ICAgIHRoaXMuaW5wdXRfcmVxdWlyZWQgPSB0cnVlO1xuXHQgICAgaWYgKHZhbHVlX3R5cGUgPT0gXCJ0ZXh0XCIpIHtcblx0XHR0aGlzLmlucHV0X3JlcXVpcmVkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGAuKmA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG5cblx0ICAgIC8vIGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJpcFwiKSB7XG5cdCAgICAvLyBcdGxldCByX2lwdjQgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY0O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0X3ZsYW4gPSByX2lwdjQucmVwbGFjZShcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdGxldCByX2lwdjYgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY2O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdHJldHVybiBgKCR7cl9pcHY0fSl8KCR7cl9pcHY0X3ZsYW59KXwoJHtyX2lwdjZ9KXwoJHtyX2lwdjZfdmxhbn0pYDtcblx0ICAgIC8vIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImNpZHJcIikge1xuXHQgICAgLy8gXHRjb25zb2xlLmxvZyhcInRlc3RcIik7XG5cdCAgICAvLyB9XG5cdCAgICBcblx0ICAgIC8vIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcblx0fSxcblx0Y2hlY2tfZGlzYWJsZV9hcHBseTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkKTtcblx0ICAgIGxldCBkaXNhYmxlX2FwcGx5ID0gIXRoaXMub3B0aW9uc190b19zaG93ICYmIChcblx0XHQodGhpcy5pbnB1dF9yZXF1aXJlZCAmJiAodGhpcy5pbnB1dF92YWx1ZSA9PSBudWxsIHx8IHRoaXMuaW5wdXRfdmFsdWUgPT0gXCJcIikpXG5cdFx0ICAgIHx8IChyZWdleC50ZXN0KHRoaXMuaW5wdXRfdmFsdWUpID09IGZhbHNlKVxuXHRcdCk7XG5cdCAgICByZXR1cm4gZGlzYWJsZV9hcHBseTtcblx0fSxcblx0YXBwbHk6IGZ1bmN0aW9uKCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuaW5wdXRfdmFsdWU7XG4gICAgbGV0IHZhbHVlX2xhYmVsID0gdGhpcy5pbnB1dF92YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAodGhpcy5vcHRpb25fc2VsZWN0ZWQgIT0gdW5kZWZpbmVkICYmIHRoaXMub3B0aW9uX3NlbGVjdGVkLmxlbmd0aCAhPSAwKSkge1xuICAgICAgbGV0IGZpbHRlciA9IHRoaXMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcbiAgICAgIGxldCBvcHRpb24gPSBmaWx0ZXIub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IHRoaXMub3B0aW9uX3NlbGVjdGVkLnZhbHVlKTtcbiAgICAgIHZhbHVlID0gb3B0aW9uLnZhbHVlO1xuICAgICAgdmFsdWVfbGFiZWwgPSBvcHRpb24udmFsdWVfbGFiZWwgfHwgb3B0aW9uLmxhYmVsO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSBcIlwiO1xuICAgIH1cbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgaWQ6IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQsXG4gICAgICBsYWJlbDogdGhpcy5maWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZCxcbiAgICAgIG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkLmlkLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdmFsdWVfbGFiZWw6IHZhbHVlX2xhYmVsLFxuICAgIH07XG4gICAgdGhpcy4kZW1pdChcImFwcGx5XCIsIHBhcmFtcyk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLk1PREFMX0ZJTFRFUlNfQVBQTFksIHBhcmFtcyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuXHR9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0fSxcbiAgICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgPGRpdiBjbGFzcz1cIm1iLTFcIiA+ICAgIFxuICAgIDxtb2RhbC1maWx0ZXJzIDpmaWx0ZXJzX29wdGlvbnM9XCJtb2RhbF9kYXRhXCIgQGFwcGx5PVwiYXBwbHlfbW9kYWxcIiByZWY9XCJtb2RhbF9maWx0ZXJzXCIgOmlkPVwiaWRfbW9kYWxfZmlsdGVyc1wiPlxuICAgIDwvbW9kYWwtZmlsdGVycz5cbiAgICA8ZGF0YS10aW1lLXJhbmdlLXBpY2tlciA6aWQ9XCJpZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyXCI+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmJlZ2luPlxuXHQ8ZGl2IHYtaWY9XCJpc19hbGVydF9zdGF0c191cmxcIiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWUtMlwiPlxuXHQgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiBpZD1cInN0YXR1c1N3aXRjaFwiIHJvbGU9XCJncm91cFwiPlxuICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2hpc3RvcmljYWwnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2hpc3RvcmljYWwnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnaGlzdG9yaWNhbCd9XCI+UGFzdDwvYT5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdhY2tub3dsZWRnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2Fja25vd2xlZGdlZCcsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnYWNrbm93bGVkZ2VkJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2Fja25vd2xlZGdlZCd9XCI+QWNrPC9hPlxuICAgICAgICAgICAgPGEgdi1pZj1cInBhZ2UgIT0gJ2Zsb3cnXCIgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2VuZ2FnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2VuZ2FnZWQnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCd9XCI+RW5nYWdlZDwvYT5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG5cdDxzZWxlY3Qgdi1pZj1cImVuYWJsZV9xdWVyeV9wcmVzZXRzXCIgY2xhc3M9XCJtZS0yIGZvcm0tc2VsZWN0XCIgdi1tb2RlbD1cInF1ZXJ5X3ByZXNldFwiICBAY2hhbmdlPVwidXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzKClcIj5cblx0ICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHF1ZXJ5X3ByZXNldHNcIj5cblx0ICAgIDxvcHRpb24gdi1pZj1cIml0ZW0uYnVpbHRpbiA9PSB0cnVlXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuXHQgIDwvdGVtcGxhdGU+XG5cdCAgPG9wdGdyb3VwIHYtaWY9XCJwYWdlICE9ICdhbmFseXNpcydcIiA6bGFiZWw9XCJpMThuKCdxdWVyaWVzLnF1ZXJpZXMnKVwiPlxuXHQgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG5cdCAgICAgIFxuICAgIFx0ICAgICAgPG9wdGlvbiB2LWlmPVwiIWl0ZW0uYnVpbHRpblwiIDp2YWx1ZT1cIml0ZW1cIj57eyBpdGVtLm5hbWUgfX08L29wdGlvbj5cblx0ICAgIDwvdGVtcGxhdGU+XG5cdCAgPC9vcHRncm91cD5cblx0PC9zZWxlY3Q+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9idXR0b25zPlxuXHQ8c2xvdCBuYW1lPVwiZXh0cmFfcmFuZ2VfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9kYXRhLXRpbWUtcmFuZ2UtcGlja2VyPlxuICA8L2Rpdj5cblxuICA8IS0tIHRhZ2lmeSAtLT5cbiAgPGRpdiB2LWlmPVwicGFnZSAhPSAnYWxsJ1wiIGNsYXNzPVwiZC1mbGV4IG10LTFcIiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgICA8aW5wdXQgY2xhc3M9XCJ3LTEwMCBmb3JtLWNvbnRyb2wgaC1hdXRvXCIgbmFtZT1cInRhZ3NcIiByZWY9XCJ0YWdpZnlcIiA6cGxhY2Vob2xkZXI9XCJpMThuKCdzaG93X2FsZXJ0cy5maWx0ZXJzJylcIj5cbiAgICBcbiAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBhcmlhLWNvbnRyb2xzPVwiZmxvdy1hbGVydHMtdGFibGVcIiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tYWRkLWFsZXJ0LWZpbHRlclwiIEBjbGljaz1cInNob3dfbW9kYWxfZmlsdGVyc1wiPjxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIiBkYXRhLW9yaWdpbmFsLXRpdGxlPVwiXCIgdGl0bGU9XCJBZGQgRmlsdGVyXCI+PC9pPjwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgICBcbiAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIiB0aXRsZT1cInt7IGkxOG4oJ3Nob3dfYWxlcnRzLnJlbW92ZV9maWx0ZXJzJykgfX1cIiBAY2xpY2s9XCJyZW1vdmVfZmlsdGVyc1wiIGNsYXNzPVwiYnRuIG1zLTEgbXktYXV0byBidG4tc20gYnRuLXJlbW92ZS10YWdzXCI+XG4gICAgICA8aSBjbGFzcz1cImZhcyBmYS10aW1lc1wiPjwvaT5cbiAgICA8L2J1dHRvbj5cbiAgPC9kaXY+XG4gIDwhLS0gZW5kIHRhZ2lmeSAtLT5cblxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YVRpbWVSYW5nZVBpY2tlciB9IGZyb20gXCIuL2RhdGEtdGltZS1yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRmlsdGVycyB9IGZyb20gXCIuL21vZGFsLWZpbHRlcnMudnVlXCI7XG5cbmZ1bmN0aW9uIGdldF9wYWdlKGFsZXJ0X3N0YXRzX3BhZ2UpIHtcbiAgICBsZXQgcGFnZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBpZiAocGFnZSA9PSBudWxsKSB7XG5cdGlmIChhbGVydF9zdGF0c19wYWdlKSB7XG5cdCAgICBwYWdlID0gXCJhbGxcIjtcblx0fSBlbHNlIHtcblx0ICAgIHBhZ2UgPSBcIm92ZXJ2aWV3XCI7XG5cdH1cbiAgICB9XG4gICAgcmV0dXJuIHBhZ2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9maWx0ZXJfY29uc3QoaXNfYWxlcnRfc3RhdHNfdXJsLCBwYWdlKSB7XG4gICAgbGV0IHVybF9yZXF1ZXN0O1xuICAgIGlmIChpc19hbGVydF9zdGF0c191cmwpIHtcblx0dXJsX3JlcXVlc3QgPSBgJHtiYXNlX3BhdGh9L2x1YS9yZXN0L3YyL2dldC9hbGVydC9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX1gO1xuICAgIH0gZWxzZSB7XG5cdGxldCBxdWVyeV9wcmVzZXQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKTtcblx0aWYgKHF1ZXJ5X3ByZXNldCA9PSBudWxsKSB7IHF1ZXJ5X3ByZXNldCA9IFwiXCI7IH1cblx0dXJsX3JlcXVlc3QgPSBgJHtiYXNlX3BhdGh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9JnF1ZXJ5X3ByZXNldD0ke3F1ZXJ5X3ByZXNldH1gO1xuICAgIH1cbiAgICBsZXQgZmlsdGVyX2NvbnN0cyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgcmV0dXJuIGZpbHRlcl9jb25zdHM7XG59XG5cbmxldCBGSUxURVJTX0NPTlNUID0gW107XG5sZXQgVEFHX09QRVJBVE9SUztcbmxldCBERUZJTkVEX1RBR1M7XG5jb25zdCBWSUVXX09OTFlfVEFHUyA9IHRydWU7XG4vKiBJbml0aWFsIFRhZ3MgKi9cbmxldCBpbml0aWFsVGFnczsgXG4vL2xldCBwYWdlSGFuZGxlID0ge307XG5sZXQgVEFHSUZZO1xubGV0IElTX0FMRVJUX1NUQVRTX1VSTCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLm1hdGNoKC9hbGVydF9zdGF0cy5sdWEvKSAhPSBudWxsO1xubGV0IFFVRVJZX1BSRVNFVCA9IHsgXG4gIHZhbHVlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKSxcbiAgY291bnQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiY291bnRcIiksXG59O1xuaWYgKFFVRVJZX1BSRVNFVC52YWx1ZSA9PSBudWxsKSB7XG4gICAgUVVFUllfUFJFU0VULnZhbHVlID0gXCJcIjtcbn1cbmxldCBTVEFUVVNfVklFVyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpO1xuaWYgKFNUQVRVU19WSUVXID09IG51bGwgfHwgU1RBVFVTX1ZJRVcgPT0gXCJcIikge1xuICAgIFNUQVRVU19WSUVXID0gXCJoaXN0b3JpY2FsXCI7XG59XG5jb25zdCBFTkFCTEVfUVVFUllfUFJFU0VUUyA9ICFJU19BTEVSVF9TVEFUU19VUkw7XG5cbmxldCBQQUdFID0gZ2V0X3BhZ2UoSVNfQUxFUlRfU1RBVFNfVVJMKTtcblxuY29uc3QgdXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHZhbHVlID0gJChgI3NlbGVjdC1xdWVyeS1wcmVzZXRzYCkudmFsKCk7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgc3RhdHVzWydxdWVyeV9wcmVzZXQnXSA9IHZhbHVlO1xuICAgIG50b3BuZ191dGlsaXR5LnJlcGxhY2VfdXJsX2FuZF9yZWxvYWQoc3RhdHVzKTtcbn1cblxuY29uc3QgY3JlYXRlX3RhZ19mcm9tX2ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgIGxldCBmX2NvbnN0ID0gRklMVEVSU19DT05TVC5maW5kKChmKSA9PiBmLmlkID09IGZpbHRlci5pZCk7XG4gICAgaWYgKGZfY29uc3QgPT0gbnVsbCkgeyBjb25zb2xlLmVycm9yKFwiY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcjogZmlsdGVyIGNvbnN0IG5vdCBmb3VuZDtcIik7IH1cbiAgICBcbiAgICBsZXQgdmFsdWVfbGFiZWwgPSBmaWx0ZXIudmFsdWU7XG4gICAgaWYgKGZfY29uc3Qub3B0aW9ucyAhPSBudWxsKSB7XG5cdGxldCBvcHQgPSBmX2NvbnN0Lm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PSBmaWx0ZXIudmFsdWUpO1xuXHRpZiAob3B0ICE9IG51bGwpIHtcblx0ICAgIHZhbHVlX2xhYmVsID0gb3B0LmxhYmVsO1xuXHR9XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IHtcblx0bGFiZWw6IGZfY29uc3QubGFiZWwsXG5cdGtleTogZl9jb25zdC5pZCxcblx0dmFsdWU6IHZhbHVlX2xhYmVsLFxuXHRyZWFsVmFsdWU6IGZpbHRlci52YWx1ZSxcblx0dGl0bGU6IGAke2ZfY29uc3QubGFiZWx9JHtmaWx0ZXIub3BlcmF0b3J9JHt2YWx1ZV9sYWJlbH1gLFxuXHRzZWxlY3RlZE9wZXJhdG9yOiBmaWx0ZXIub3BlcmF0b3IsXG4gICAgfTtcbiAgICBpZiAodGFnLnZhbHVlID09IFwiXCIpIHsgdGFnLnZhbHVlID0gXCInJ1wiIH1cbiAgICBpZiAodGFnLnJlYWxWYWx1ZSA9PSBudWxsIHx8IHRhZy5zZWxlY3RlZE9wZXJhdG9yID09IG51bGwgfHwgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPT0gXCJcIikge1xuXHRyZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhZztcbn0gIFxuXG5jb25zdCBsb2FkX2ZpbHRlcnNfZGF0YSA9IGFzeW5jIGZ1bmN0aW9uKCkgeyAgICBcbiAgICBGSUxURVJTX0NPTlNUID0gYXdhaXQgZ2V0X2ZpbHRlcl9jb25zdChJU19BTEVSVF9TVEFUU19VUkwsIFBBR0UpO1xuICAgIEZJTFRFUlNfQ09OU1QuZmlsdGVyKCh4KSA9PiB4LmxhYmVsID09IG51bGwpLmZvckVhY2goKHgpID0+IHsgY29uc29sZS5lcnJvcihgbGFiZWwgbm90IGRlZmluZWQgZm9yIGZpbHRlciAke0pTT04uc3RyaW5naWZ5KHgpfWApOyB4LmxhYmVsID0gXCJcIjsgfSk7XG4gICAgRklMVEVSU19DT05TVC5zb3J0KChhLCBiKSA9PiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCkpO1xuICAgIGkxOG5fZXh0LnRhZ3MgPSB7fTtcbiAgICBUQUdfT1BFUkFUT1JTID0ge307XG4gICAgREVGSU5FRF9UQUdTID0ge307XG4gICAgRklMVEVSU19DT05TVC5mb3JFYWNoKChmX2RlZikgPT4ge1xuXHRpMThuX2V4dC50YWdzW2ZfZGVmLmlkXSA9IGZfZGVmLmxhYmVsO1xuXHRmX2RlZi5vcGVyYXRvcnMuZm9yRWFjaCgob3ApID0+IFRBR19PUEVSQVRPUlNbb3AuaWRdID0gb3AubGFiZWwpO1xuXHRERUZJTkVEX1RBR1NbZl9kZWYuaWRdID0gZl9kZWYub3BlcmF0b3JzLm1hcCgob3ApID0+IG9wLmlkKTtcbiAgICB9KTtcbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICBcdGxldCBmaWx0ZXJfZGVmID0gRklMVEVSU19DT05TVC5maW5kKChmYykgPT4gZmMuaWQgPT0ga2V5KTtcbiAgICBcdGlmIChmaWx0ZXJfZGVmICE9IG51bGwpIHtcbiAgICBcdCAgICBsZXQgb3B0aW9uc19zdHJpbmcgPSB2YWx1ZS5zcGxpdChcIixcIik7XG5cdCAgICBvcHRpb25zX3N0cmluZy5mb3JFYWNoKChvcHRfc3Rpcm5nKSA9PiB7XG4gICAgXHRcdGxldCBbdmFsdWUsIG9wZXJhdG9yXSA9IG9wdF9zdGlybmcuc3BsaXQoXCI7XCIpO1xuXHRcdGlmIChcblx0XHQgICAgb3BlcmF0b3IgPT0gbnVsbCB8fCB2YWx1ZSA9PSBudWxsIHx8IG9wZXJhdG9yID09IFwiXCJcblx0XHQgICAgfHwgKGZpbHRlcl9kZWYub3B0aW9ucyAhPSBudWxsICYmIGZpbHRlcl9kZWYub3B0aW9ucy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSkgPT0gbnVsbClcblx0XHQgICApIHtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRmaWx0ZXJzLnB1c2goe2lkOiBmaWx0ZXJfZGVmLmlkLCBvcGVyYXRvcjogb3BlcmF0b3IsIHZhbHVlOiB2YWx1ZX0pO1xuXHQgICAgfSk7XG4gICAgXHR9XHRcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgLy8gXCJsN3Byb3RvPVhYWDtlcVwiXG59XG5cbmZ1bmN0aW9uIGdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKSB7XG4gICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm4ge307IH1cbiAgICBsZXQgZmlsdGVyc19ncm91cHMgPSB7fTtcbiAgICBmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcblx0bGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZi5pZF07XG5cdGlmIChncm91cCA9PSBudWxsKSB7XG5cdCAgICBncm91cCA9IFtdO1xuXHQgICAgZmlsdGVyc19ncm91cHNbZi5pZF0gPSBncm91cDtcblx0fVxuXHRncm91cC5wdXNoKGYpO1xuICAgIH0pO1xuICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IHt9O1xuICAgIGZvciAobGV0IGZfaWQgaW4gZmlsdGVyc19ncm91cHMpIHtcblx0bGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZl9pZF07XG5cdGxldCBmaWx0ZXJfdmFsdWVzID0gZ3JvdXAuZmlsdGVyKChmKSA9PiBmLnZhbHVlICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gXCJcIikubWFwKChmKSA9PiBgJHtmLnZhbHVlfTske2Yub3BlcmF0b3J9YCkuam9pbihcIixcIik7XG5cdGZpbHRlcnNfb2JqZWN0W2ZfaWRdID0gZmlsdGVyX3ZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnNfb2JqZWN0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfcXVlcnlfcHJlc2V0KHJhbmdlX3BpY2tlcl92dWUpIHtcbiAgICBsZXQgcGFnZSA9IHJhbmdlX3BpY2tlcl92dWUucGFnZTtcbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtiYXNlX3BhdGh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvcHJlc2V0L2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBsZXQgcXVlcnlfcHJlc2V0cyA9IHJlc1swXS5saXN0Lm1hcCgoZWwpID0+IHtcblx0cmV0dXJuIHtcblx0ICAgIHZhbHVlOiBlbC5pZCwgLy89PSBudWxsID8gXCJmbG93XCIgOiBlbC5pZCxcblx0ICAgIG5hbWU6IGVsLm5hbWUsXG5cdCAgICBjb3VudDogZWwuY291bnQsXG5cdCAgICBidWlsdGluOiB0cnVlLFxuXHR9O1xuICAgIH0pO1xuICAgIGlmIChyZXMubGVuZ3RoID4gMSkge1xuXHRyZXNbMV0ubGlzdC5mb3JFYWNoKChlbCkgPT4ge1xuICAgIFx0ICAgIGxldCBxdWVyeSA9IHtcbiAgICBcdFx0dmFsdWU6IGVsLmlkLFxuICAgIFx0XHRuYW1lOiBlbC5uYW1lLFxuXHQgICAgICAgIGNvdW50OiBlbC5jb3VudCxcbiAgICBcdCAgICB9O1xuICAgIFx0ICAgIHF1ZXJ5X3ByZXNldHMucHVzaChxdWVyeSk7XG5cdH0pO1xuICAgIH1cbiAgICBpZiAocmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQgPT0gbnVsbCB8fCByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldC52YWx1ZSA9PSBcIlwiKSB7XG5cdHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0ID0gcXVlcnlfcHJlc2V0c1swXTtcbiAgICB9IGVsc2Uge1xuXHRsZXQgcSA9IHF1ZXJ5X3ByZXNldHMuZmluZCgoaSkgPT4gaS52YWx1ZSA9PSByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldC52YWx1ZSk7XG4gICAgICAgcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQgPSBxO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0LmNvdW50KTtcbiAgICByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldHMgPSBxdWVyeV9wcmVzZXRzO1xuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuICAgIH0sXG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgIFx0J2RhdGEtdGltZS1yYW5nZS1waWNrZXInOiBEYXRhVGltZVJhbmdlUGlja2VyLFxuXHQnbW9kYWwtZmlsdGVycyc6IE1vZGFsRmlsdGVycyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG5cdGxldCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZCA9IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcik7XG5cdGxldCBtb2RhbF9maWx0ZXJzX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX21vZGFsX2ZpbHRlcnMpO1xuXHRhd2FpdCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZDtcblxuXHRpZiAodGhpcy5lbmFibGVfcXVlcnlfcHJlc2V0cykge1xuXHQgICAgYXdhaXQgc2V0X3F1ZXJ5X3ByZXNldCh0aGlzKTtcblx0fVxuXHRpZiAodGhpcy5wYWdlICE9ICdhbGwnKSB7XG5cdCAgICBsZXQgZmlsdGVycyA9IGF3YWl0IGxvYWRfZmlsdGVyc19kYXRhKCk7XG5cdCAgICBcblx0ICAgIFRBR0lGWSA9IGNyZWF0ZV90YWdpZnkodGhpcyk7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2V2ZW50X2NoYW5nZSh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCAoc3RhdHVzKSA9PiB0aGlzLnJlbG9hZF9zdGF0dXMoc3RhdHVzKSwgdHJ1ZSk7XG5cdH1cblx0dGhpcy5tb2RhbF9kYXRhID0gRklMVEVSU19DT05TVDtcblx0XG5cdC8vYXdhaXQgbW9kYWxfZmlsdGVyc19tb3VudGVkO1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBpMThuOiBpMThuLFxuXHQgICAgaWRfbW9kYWxfZmlsdGVyczogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsX2ZpbHRlcnNgLFxuXHQgICAgaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcjogYCR7dGhpcy4kcHJvcHMuaWR9X2RhdGEtdGltZS1yYW5nZS1waWNrZXJgLFxuXHQgICAgc2hvd19maWx0ZXJzOiBmYWxzZSxcblx0ICAgIGVkaXRfdGFnOiBudWxsLFxuXHQgICAgaXNfYWxlcnRfc3RhdHNfdXJsOiBJU19BTEVSVF9TVEFUU19VUkwsXG5cdCAgICBxdWVyeV9wcmVzZXRzOiBbXSxcblx0ICAgIHF1ZXJ5X3ByZXNldDogUVVFUllfUFJFU0VULFxuXHQgICAgc3RhdHVzX3ZpZXc6IFNUQVRVU19WSUVXLFxuXHQgICAgZW5hYmxlX3F1ZXJ5X3ByZXNldHM6IEVOQUJMRV9RVUVSWV9QUkVTRVRTLFxuXHQgICAgcGFnZTogUEFHRSxcblx0ICAgIG1vZGFsX2RhdGE6IFtdLFxuXHQgICAgbGFzdF9maWx0ZXJzOiBbXSxcblx0fTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0aXNfZmlsdGVyX2RlZmluZWQ6IGZ1bmN0aW9uKGZpbHRlcikge1xuXHQgICAgcmV0dXJuIERFRklORURfVEFHU1tmaWx0ZXIuaWRdICE9IG51bGw7XG5cdH0sXG5cdHVwZGF0ZV9zdGF0dXNfdmlldzogZnVuY3Rpb24oc3RhdHVzKSB7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJzdGF0dXNcIiwgc3RhdHVzKTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XHQgICAgXG5cdH0sXG5cdHVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0czogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgdGhpcy5xdWVyeV9wcmVzZXQudmFsdWUpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgdGhpcy5xdWVyeV9wcmVzZXQuY291bnQpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcblx0fSxcblx0c2hvd19tb2RhbF9maWx0ZXJzOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9maWx0ZXJzXCJdLnNob3coKTtcblx0fSxcblx0cmVtb3ZlX2ZpbHRlcnM6IGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IGZpbHRlcnMgPSBbXTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHtmaWx0ZXJzfSk7XG5cdH0sXG5cdHJlbG9hZF9zdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcblx0ICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICAvLyBkZWxldGUgYWxsIHByZXZpb3VzIGZpbHRlclxuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9wYXJhbXMoRklMVEVSU19DT05TVC5tYXAoKGYpID0+IGYuaWQpKTtcblx0ICAgIFRBR0lGWS50YWdpZnkucmVtb3ZlQWxsVGFncygpO1xuXHQgICAgbGV0IGZpbHRlcnNfb2JqZWN0ID0gZ2V0X2ZpbHRlcnNfb2JqZWN0KGZpbHRlcnMpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKGZpbHRlcnNfb2JqZWN0KTtcblx0ICAgIGZpbHRlcnMuZm9yRWFjaCgoZikgPT4ge1xuXHRcdGxldCB0YWcgPSBjcmVhdGVfdGFnX2Zyb21fZmlsdGVyKGYpO1xuXHRcdGlmICh0YWcgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0XHRUQUdJRlkuYWRkRmlsdGVyVGFnKHRhZyk7XG5cdCAgICB9KTtcblx0ICAgIHRoaXMubGFzdF9maWx0ZXJzID0gZmlsdGVycztcblx0fSxcblx0YXBwbHlfbW9kYWw6IGZ1bmN0aW9uKHBhcmFtcykge1xuXHQgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdCAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuXHQgICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyBmaWx0ZXJzID0gW107IH1cblx0ICAgIGlmICh0aGlzLmVkaXRfdGFnICE9IG51bGwpIHtcblx0XHRmaWx0ZXJzID0gZmlsdGVycy5maWx0ZXIoKGYpID0+IGYuaWQgIT0gdGhpcy5lZGl0X3RhZy5rZXkgfHwgZi52YWx1ZSAhPSB0aGlzLmVkaXRfdGFnLnJlYWxWYWx1ZSk7XG5cdFx0dGhpcy5lZGl0X3RhZyA9IG51bGw7XG5cdCAgICB9XG5cdCAgICBmaWx0ZXJzLnB1c2gocGFyYW1zKTtcblx0ICAgIC8vIHRyaWdnZXIgZXZlbnQgYW5kIHRoZW4gY2FsbCByZWxvYWRfc3RhdHVzXG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1xuXHR9LFxuICAgIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVfdGFnaWZ5KHJhbmdlX3BpY2tlcl92dWUpIHtcbiAgICAvLyBjcmVhdGUgdGFnaWZ5XG4gICAgY29uc3QgdGFnaWZ5ID0gbmV3IFRhZ2lmeShyYW5nZV9waWNrZXJfdnVlLiRyZWZzW1widGFnaWZ5XCJdLCB7XG5cdGR1cGxpY2F0ZXM6IHRydWUsXG5cdGRlbGltaXRlcnMgOiBudWxsLFxuXHRkcm9wZG93biA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IDEsIC8vIHN1Z2dlc3QgdGFncyBhZnRlciBhIHNpbmdsZSBjaGFyYWN0ZXIgaW5wdXRcbiAgICAgICAgICAgIGNsYXNzbmFtZSA6ICdleHRyYS1wcm9wZXJ0aWVzJyAvLyBjdXN0b20gY2xhc3MgZm9yIHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93blxuXHR9LFxuXHRhdXRvQ29tcGxldGU6IHsgZW5hYmxlZDogZmFsc2UgfSxcblx0dGVtcGxhdGVzIDoge1xuICAgICAgICAgICAgdGFnIDogZnVuY3Rpb24odGFnRGF0YSl7XG5cdFx0dHJ5e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDx0YWcgdGl0bGU9JyR7dGFnRGF0YS52YWx1ZX0nIGNvbnRlbnRlZGl0YWJsZT0nZmFsc2UnIHNwZWxsY2hlY2s9XCJmYWxzZVwiIGNsYXNzPSd0YWdpZnlfX3RhZyAke3RhZ0RhdGEuY2xhc3MgPyB0YWdEYXRhLmNsYXNzIDogXCJcIn0nICR7dGhpcy5nZXRBdHRyaWJ1dGVzKHRhZ0RhdGEpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx4IHRpdGxlPSdyZW1vdmUgdGFnJyBjbGFzcz0ndGFnaWZ5X190YWdfX3JlbW92ZUJ0bic+PC94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3RhZ0RhdGEubGFiZWwgPyBgPGI+JHt0YWdEYXRhLmxhYmVsfTwvYj4mbmJzcDtgIDogYGB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHshVklFV19PTkxZX1RBR1MgJiYgdGFnRGF0YS5vcGVyYXRvcnMgPyBgPHNlbGVjdCBjbGFzcz0nb3BlcmF0b3InPiR7dGFnRGF0YS5vcGVyYXRvcnMubWFwKG9wID0+IGA8b3B0aW9uICR7dGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yID09PSBvcCA/ICdzZWxlY3RlZCcgOiAnJ30gdmFsdWU9JyR7b3B9Jz4ke1RBR19PUEVSQVRPUlNbb3BdfTwvb3B0aW9uPmApLmpvaW4oKX08L3NlbGVjdD5gIDogYDxiIGNsYXNzPSdvcGVyYXRvcic+JHt0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3IgPyBUQUdfT1BFUkFUT1JTW3RhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvcl0gOiAnPSd9PC9iPmB9Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3RhZ2lmeV9fdGFnLXRleHQnPiR7dGFnRGF0YS52YWx1ZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90YWc+YFxuXHRcdH1cblx0XHRjYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBbiBlcnJvciBvY2N1cmVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgdGFnOiAke2Vycn1gKTtcblx0XHR9XG4gICAgICAgICAgICB9LFxuXHR9LFxuXHR2YWxpZGF0ZTogZnVuY3Rpb24odGFnRGF0YSkge1xuXHQgICAgcmV0dXJuICh0eXBlb2YgdGFnRGF0YS5rZXkgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0ICAgIHR5cGVvZiB0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3IgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0ICAgIHR5cGVvZiB0YWdEYXRhLnZhbHVlICE9PSAndW5kZWZpbmVkJyk7XG5cdH1cbiAgICB9KTtcbiAgICBcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0Ly8gYWRkIGV4aXN0aW5nIHRhZ3Ncblx0dGFnaWZ5LmFkZFRhZ3MoaW5pdGlhbFRhZ3MpO1xuICAgIH0pOyAvKiAkKGRvY3VtZW50KS5yZWFkeSgpICovXG4gICAgXG4gICAgY29uc3QgY3JlYXRlVmFsdWVGcm9tVGFnID0gZnVuY3Rpb24odGFnKSB7XG5cdGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcblx0bGV0IHZhbCA9IHRhZy5yZWFsVmFsdWUgIT0gbnVsbCA/IHRhZy5yZWFsVmFsdWUgOiB0YWcudmFsdWU7XG5cdGxldCB2YWx1ZSA9IGAke3ZhbH07JHt0YWcuc2VsZWN0ZWRPcGVyYXRvcn1gO1xuXHRyZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGFkZEZpbHRlclRhZyA9IGFzeW5jIGZ1bmN0aW9uKHRhZykge1xuICAgICAgICAvKiBDb252ZXJ0IHZhbHVlcyB0byBzdHJpbmcgKHRoaXMgYXZvaWRzIGlzc3VlcyBlLmcuIHdpdGggMCkgKi9cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcucmVhbFZhbHVlID09ICdudW1iZXInKSB7IHRhZy5yZWFsVmFsdWUgPSAnJyt0YWcucmVhbFZhbHVlOyB9XG4gICAgICAgIGlmICh0eXBlb2YgdGFnLnZhbHVlID09ICdudW1iZXInKSB7IHRhZy52YWx1ZSA9ICcnK3RhZy52YWx1ZTsgfVxuXHRcbiAgICAgICAgY29uc3QgZXhpc3RpbmdUYWdFbG1zID0gdGFnaWZ5LmdldFRhZ0VsbXMoKTtcblx0XG4gICAgICAgIC8qIExvb2t1cCBieSBrZXksIHZhbHVlIGFuZCBvcGVyYXRvciAoZG8gbm90IGFkZCB0aGUgc2FtZSBrZXkgYW5kIHZhbHVlIG11bHRpcGxlIHRpbWVzKSAqL1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWdFbGVtZW50ID0gZXhpc3RpbmdUYWdFbG1zLmZpbmQoaHRtbFRhZyA9PiBcblx0XHRcdFx0XHRcdCAgICAgIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdrZXknKSA9PT0gdGFnLmtleVxuXHRcdFx0XHRcdFx0ICAgICAgJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3JlYWxWYWx1ZScpID09PSB0YWcucmVhbFZhbHVlIFxuXHRcdFx0XHRcdFx0ICAgICAgLy8mJiBodG1sVGFnLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWRPcGVyYXRvcicpID09PSB0YWcuc2VsZWN0ZWRPcGVyYXRvclxuXHRcdFx0XHRcdFx0ICAgICApO1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWcgPSB0YWdpZnkudGFnRGF0YShleGlzdGluZ1RhZ0VsZW1lbnQpO1xuICAgICAgICBpZiAoZXhpc3RpbmdUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cdFxuICAgICAgICAvLyBoYXMgdGhlIHRhZyBhbiBvcGVyYXRvciBvYmplY3Q/XG4gICAgICAgIGlmIChERUZJTkVEX1RBR1NbdGFnLmtleV0gJiYgIUFycmF5LmlzQXJyYXkoREVGSU5FRF9UQUdTW3RhZy5rZXldKSkge1xuICAgICAgICAgICAgdGFnLm9wZXJhdG9ycyA9IERFRklORURfVEFHU1t0YWcua2V5XS5vcGVyYXRvcnM7XG4gICAgICAgIH1cblx0XG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgZmlsdGVyIVxuICAgICAgICB0YWdpZnkuYWRkVGFncyhbdGFnXSk7XG4gICAgfVxuICAgIFxuICAgIC8vIHdoZW4gYW4gdXNlciByZW1vdmUgdGhlIHRhZ1xuICAgIHRhZ2lmeS5vbigncmVtb3ZlJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuICAgICAgY29uc3Qga2V5ID0gZS5kZXRhaWwuZGF0YS5rZXk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGUuZGV0YWlsLmRhdGEucmVhbFZhbHVlO1xuICAgICAgY29uc3Qgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICAgIFxuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgaWYgKHN0YXR1cy5maWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGNvbnN0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycy5maWx0ZXIoKGYpID0+IChmLmlkICE9IGtleSB8fCAoZi5pZCA9PSBrZXkgJiYgZi52YWx1ZSAhPSB2YWx1ZSkpKTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHtmaWx0ZXJzfSk7XHRcbiAgICB9KTtcbiAgICBcbiAgICB0YWdpZnkub24oJ2FkZCcsIGFzeW5jIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZS5kZXRhaWw7XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVx0XG4gICAgICAgIGNvbnN0IHRhZyA9IGRldGFpbC5kYXRhO1x0XG4gICAgICAgIC8vIGxldCdzIGNoZWNrIGlmIHRoZSB0YWcgaGFzIGEga2V5IGZpZWxkXG4gICAgICAgIGlmICghdGFnLmtleSkge1xuICAgICAgICAgICAgdGFnaWZ5LnJlbW92ZVRhZ3MoW2UuZGV0YWlsLnRhZ10pO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVx0XG4gICAgfSk7XG4gICAgXG4gICAgLy8gVGFnICdjbGljaycgZXZlbnQgaGFuZGxlciB0byBvcGVuIHRoZSAnRWRpdCcgbW9kYWwuIE5vdGU6IHRoaXMgcHJldmVudHNcbiAgICAvLyBpbmxpbmUgZWRpdGluZyBvZiB0aGUgdGFnICgnZWRpdDp1cGRhdGVkJyBpcyBuZXZlciBjYWxsZWQgYXMgYSBjb25zZXF1ZW5jZSlcbiAgICB0YWdpZnkub24oJ2NsaWNrJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcdFxuICAgICAgICBpZiAoZGV0YWlsLmRhdGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKGRldGFpbC5kYXRhLmtleSA9PT0gdW5kZWZpbmVkKSB7cmV0dXJuO31cbiAgICAgICAgY29uc3QgdGFnID0gZGV0YWlsLmRhdGE7XG5cdC8vIHJlbWVtYmVyIHRoYXQgdGhpcyB0YWcgYWxyZWFkeSBleGl4dHNcblx0cmFuZ2VfcGlja2VyX3Z1ZS5lZGl0X3RhZyA9IHRhZztcblx0Ly8gc2hvdyBtb2RhbC1maWx0ZXJzXG5cdG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIHtpZDogdGFnLmtleSwgb3BlcmF0b3I6IHRhZy5zZWxlY3RlZE9wZXJhdG9yLCB2YWx1ZTogdGFnLnJlYWxWYWx1ZX0pO1xuICAgIH0pO1xuICAgIFxuICAgIHRhZ2lmeS5vbignZWRpdDp1cGRhdGVkJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuXHRjb25zb2xlLndhcm4oXCJVUERBVEVEXCIpO1xuXHRyZXR1cm47XG4gICAgfSk7XG4gICAgXG4gICAgJChgdGFnc2ApLm9uKCdjaGFuZ2UnLCAnc2VsZWN0Lm9wZXJhdG9yJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuXHRjb25zb2xlLndhcm4oXCJUQUdTIGNoYW5nZVwiKTtcblx0cmV0dXJuO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG5cdHRhZ2lmeSxcblx0YWRkRmlsdGVyVGFnLFxuICAgIH07XG59XG48L3NjcmlwdD5cblxuXG48c3R5bGUgc2NvcGVkPlxuLnRhZ2lmeV9faW5wdXQge1xuICBtaW4td2lkdGg6IDE3NXB4O1xufVxuLnRhZ2lmeV9fdGFnIHtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgbWFyZ2luOiAzcHggMHB4IDVweCA1cHg7XG59XG4udGFnaWZ5X190YWcgc2VsZWN0Lm9wZXJhdG9yIHtcbiAgbWFyZ2luOiAwcHggNHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG4udGFnaWZ5X190YWcgYi5vcGVyYXRvciB7XG4gIG1hcmdpbjogMHB4IDRweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjNGM0YzQ7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMC4wNWVtIDAuMmVtO1xufVxuLnRhZ2lmeV9fdGFnID4gZGl2IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiPlxuICA8ZGl2IGNsYXNzPVwibWItMVwiID4gICAgXG4gICAgPG1vZGFsLWZpbHRlcnMgOmZpbHRlcnNfb3B0aW9ucz1cIm1vZGFsX2RhdGFcIiBAYXBwbHk9XCJhcHBseV9tb2RhbFwiIHJlZj1cIm1vZGFsX2ZpbHRlcnNcIiA6aWQ9XCJpZF9tb2RhbF9maWx0ZXJzXCI+XG4gICAgPC9tb2RhbC1maWx0ZXJzPlxuICAgIDxkYXRhLXRpbWUtcmFuZ2UtcGlja2VyIDppZD1cImlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXJcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG5cdDxkaXYgdi1pZj1cImlzX2FsZXJ0X3N0YXRzX3VybFwiIGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtZS0yXCI+XG5cdCAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIGlkPVwic3RhdHVzU3dpdGNoXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnaGlzdG9yaWNhbCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnaGlzdG9yaWNhbCcsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnaGlzdG9yaWNhbCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdoaXN0b3JpY2FsJ31cIj5QYXN0PC9hPlxuICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2Fja25vd2xlZGdlZCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnYWNrbm93bGVkZ2VkJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdhY2tub3dsZWRnZWQnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnYWNrbm93bGVkZ2VkJ31cIj5BY2s8L2E+XG4gICAgICAgICAgICA8YSB2LWlmPVwicGFnZSAhPSAnZmxvdydcIiBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnZW5nYWdlZCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnZW5nYWdlZCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJ31cIj5FbmdhZ2VkPC9hPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cblx0PHNlbGVjdCB2LWlmPVwiZW5hYmxlX3F1ZXJ5X3ByZXNldHNcIiBjbGFzcz1cIm1lLTIgZm9ybS1zZWxlY3RcIiB2LW1vZGVsPVwicXVlcnlfcHJlc2V0XCIgIEBjaGFuZ2U9XCJ1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMoKVwiPlxuXHQgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gcXVlcnlfcHJlc2V0c1wiPlxuXHQgICAgPG9wdGlvbiB2LWlmPVwiaXRlbS5idWlsdGluID09IHRydWVcIiA6dmFsdWU9XCJpdGVtXCI+e3sgaXRlbS5uYW1lIH19PC9vcHRpb24+XG5cdCAgPC90ZW1wbGF0ZT5cblx0ICA8b3B0Z3JvdXAgdi1pZj1cInBhZ2UgIT0gJ2FuYWx5c2lzJ1wiIDpsYWJlbD1cImkxOG4oJ3F1ZXJpZXMucXVlcmllcycpXCI+XG5cdCAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHF1ZXJ5X3ByZXNldHNcIj5cblx0ICAgICAgXG4gICAgXHQgICAgICA8b3B0aW9uIHYtaWY9XCIhaXRlbS5idWlsdGluXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuXHQgICAgPC90ZW1wbGF0ZT5cblx0ICA8L29wdGdyb3VwPlxuXHQ8L3NlbGVjdD5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX2J1dHRvbnM+XG5cdDxzbG90IG5hbWU9XCJleHRyYV9yYW5nZV9idXR0b25zXCI+PC9zbG90PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2RhdGEtdGltZS1yYW5nZS1waWNrZXI+XG4gIDwvZGl2PlxuXG4gIDwhLS0gdGFnaWZ5IC0tPlxuICA8ZGl2IHYtaWY9XCJwYWdlICE9ICdhbGwnXCIgY2xhc3M9XCJkLWZsZXggbXQtMVwiIHN0eWxlPVwid2lkdGg6MTAwJVwiPlxuICAgIDxpbnB1dCBjbGFzcz1cInctMTAwIGZvcm0tY29udHJvbCBoLWF1dG9cIiBuYW1lPVwidGFnc1wiIHJlZj1cInRhZ2lmeVwiIDpwbGFjZWhvbGRlcj1cImkxOG4oJ3Nob3dfYWxlcnRzLmZpbHRlcnMnKVwiPlxuICAgIFxuICAgIDxidXR0b24gdi1zaG93PVwibW9kYWxfZGF0YSAmJiBtb2RhbF9kYXRhLmxlbmd0aCA+IDBcIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIGFyaWEtY29udHJvbHM9XCJmbG93LWFsZXJ0cy10YWJsZVwiIHR5cGU9XCJidXR0b25cIiBpZD1cImJ0bi1hZGQtYWxlcnQtZmlsdGVyXCIgQGNsaWNrPVwic2hvd19tb2RhbF9maWx0ZXJzXCI+PHNwYW4+PGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiIGRhdGEtb3JpZ2luYWwtdGl0bGU9XCJcIiB0aXRsZT1cIkFkZCBGaWx0ZXJcIj48L2k+PC9zcGFuPlxuICAgIDwvYnV0dG9uPlxuICAgIFxuICAgIDxidXR0b24gdi1zaG93PVwibW9kYWxfZGF0YSAmJiBtb2RhbF9kYXRhLmxlbmd0aCA+IDBcIiBkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiIHRpdGxlPVwie3sgaTE4bignc2hvd19hbGVydHMucmVtb3ZlX2ZpbHRlcnMnKSB9fVwiIEBjbGljaz1cInJlbW92ZV9maWx0ZXJzXCIgY2xhc3M9XCJidG4gbXMtMSBteS1hdXRvIGJ0bi1zbSBidG4tcmVtb3ZlLXRhZ3NcIj5cbiAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbiAgPCEtLSBlbmQgdGFnaWZ5IC0tPlxuXG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0YS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxGaWx0ZXJzIH0gZnJvbSBcIi4vbW9kYWwtZmlsdGVycy52dWVcIjtcblxuZnVuY3Rpb24gZ2V0X3BhZ2UoYWxlcnRfc3RhdHNfcGFnZSkge1xuICAgIGxldCBwYWdlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJwYWdlXCIpO1xuICAgIGlmIChwYWdlID09IG51bGwpIHtcblx0aWYgKGFsZXJ0X3N0YXRzX3BhZ2UpIHtcblx0ICAgIHBhZ2UgPSBcImFsbFwiO1xuXHR9IGVsc2Uge1xuXHQgICAgcGFnZSA9IFwib3ZlcnZpZXdcIjtcblx0fVxuICAgIH1cbiAgICByZXR1cm4gcGFnZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X2ZpbHRlcl9jb25zdChpc19hbGVydF9zdGF0c191cmwsIHBhZ2UpIHtcbiAgICBsZXQgdXJsX3JlcXVlc3Q7XG4gICAgaWYgKGlzX2FsZXJ0X3N0YXRzX3VybCkge1xuXHR1cmxfcmVxdWVzdCA9IGAke2Jhc2VfcGF0aH0vbHVhL3Jlc3QvdjIvZ2V0L2FsZXJ0L2ZpbHRlci9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfWA7XG4gICAgfSBlbHNlIHtcblx0bGV0IHF1ZXJ5X3ByZXNldCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicXVlcnlfcHJlc2V0XCIpO1xuXHRpZiAocXVlcnlfcHJlc2V0ID09IG51bGwpIHsgcXVlcnlfcHJlc2V0ID0gXCJcIjsgfVxuXHR1cmxfcmVxdWVzdCA9IGAke2Jhc2VfcGF0aH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX0mcXVlcnlfcHJlc2V0PSR7cXVlcnlfcHJlc2V0fWA7XG4gICAgfVxuICAgIGxldCBmaWx0ZXJfY29uc3RzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICByZXR1cm4gZmlsdGVyX2NvbnN0cztcbn1cblxubGV0IEZJTFRFUlNfQ09OU1QgPSBbXTtcbmxldCBUQUdfT1BFUkFUT1JTO1xubGV0IERFRklORURfVEFHUztcbmNvbnN0IFZJRVdfT05MWV9UQUdTID0gdHJ1ZTtcbi8qIEluaXRpYWwgVGFncyAqL1xubGV0IGluaXRpYWxUYWdzOyBcbi8vbGV0IHBhZ2VIYW5kbGUgPSB7fTtcbmxldCBUQUdJRlk7XG5sZXQgSVNfQUxFUlRfU1RBVFNfVVJMID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG5sZXQgUVVFUllfUFJFU0VUID0geyBcbiAgdmFsdWU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicXVlcnlfcHJlc2V0XCIpLFxuICBjb3VudDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJjb3VudFwiKSxcbn07XG5pZiAoUVVFUllfUFJFU0VULnZhbHVlID09IG51bGwpIHtcbiAgICBRVUVSWV9QUkVTRVQudmFsdWUgPSBcIlwiO1xufVxubGV0IFNUQVRVU19WSUVXID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIik7XG5pZiAoU1RBVFVTX1ZJRVcgPT0gbnVsbCB8fCBTVEFUVVNfVklFVyA9PSBcIlwiKSB7XG4gICAgU1RBVFVTX1ZJRVcgPSBcImhpc3RvcmljYWxcIjtcbn1cbmNvbnN0IEVOQUJMRV9RVUVSWV9QUkVTRVRTID0gIUlTX0FMRVJUX1NUQVRTX1VSTDtcblxubGV0IFBBR0UgPSBnZXRfcGFnZShJU19BTEVSVF9TVEFUU19VUkwpO1xuXG5jb25zdCB1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgdmFsdWUgPSAkKGAjc2VsZWN0LXF1ZXJ5LXByZXNldHNgKS52YWwoKTtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBzdGF0dXNbJ3F1ZXJ5X3ByZXNldCddID0gdmFsdWU7XG4gICAgbnRvcG5nX3V0aWxpdHkucmVwbGFjZV91cmxfYW5kX3JlbG9hZChzdGF0dXMpO1xufVxuXG5jb25zdCBjcmVhdGVfdGFnX2Zyb21fZmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgbGV0IGZfY29uc3QgPSBGSUxURVJTX0NPTlNULmZpbmQoKGYpID0+IGYuaWQgPT0gZmlsdGVyLmlkKTtcbiAgICBpZiAoZl9jb25zdCA9PSBudWxsKSB7IGNvbnNvbGUuZXJyb3IoXCJjcmVhdGVfdGFnX2Zyb21fZmlsdGVyOiBmaWx0ZXIgY29uc3Qgbm90IGZvdW5kO1wiKTsgfVxuICAgIFxuICAgIGxldCB2YWx1ZV9sYWJlbCA9IGZpbHRlci52YWx1ZTtcbiAgICBpZiAoZl9jb25zdC5vcHRpb25zICE9IG51bGwpIHtcblx0bGV0IG9wdCA9IGZfY29uc3Qub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IGZpbHRlci52YWx1ZSk7XG5cdGlmIChvcHQgIT0gbnVsbCkge1xuXHQgICAgdmFsdWVfbGFiZWwgPSBvcHQubGFiZWw7XG5cdH1cbiAgICB9XG4gICAgY29uc3QgdGFnID0ge1xuXHRsYWJlbDogZl9jb25zdC5sYWJlbCxcblx0a2V5OiBmX2NvbnN0LmlkLFxuXHR2YWx1ZTogdmFsdWVfbGFiZWwsXG5cdHJlYWxWYWx1ZTogZmlsdGVyLnZhbHVlLFxuXHR0aXRsZTogYCR7Zl9jb25zdC5sYWJlbH0ke2ZpbHRlci5vcGVyYXRvcn0ke3ZhbHVlX2xhYmVsfWAsXG5cdHNlbGVjdGVkT3BlcmF0b3I6IGZpbHRlci5vcGVyYXRvcixcbiAgICB9O1xuICAgIGlmICh0YWcudmFsdWUgPT0gXCJcIikgeyB0YWcudmFsdWUgPSBcIicnXCIgfVxuICAgIGlmICh0YWcucmVhbFZhbHVlID09IG51bGwgfHwgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPT0gbnVsbCB8fCB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9PSBcIlwiKSB7XG5cdHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGFnO1xufSAgXG5cbmNvbnN0IGxvYWRfZmlsdGVyc19kYXRhID0gYXN5bmMgZnVuY3Rpb24oKSB7ICAgIFxuICAgIEZJTFRFUlNfQ09OU1QgPSBhd2FpdCBnZXRfZmlsdGVyX2NvbnN0KElTX0FMRVJUX1NUQVRTX1VSTCwgUEFHRSk7XG4gICAgRklMVEVSU19DT05TVC5maWx0ZXIoKHgpID0+IHgubGFiZWwgPT0gbnVsbCkuZm9yRWFjaCgoeCkgPT4geyBjb25zb2xlLmVycm9yKGBsYWJlbCBub3QgZGVmaW5lZCBmb3IgZmlsdGVyICR7SlNPTi5zdHJpbmdpZnkoeCl9YCk7IHgubGFiZWwgPSBcIlwiOyB9KTtcbiAgICBGSUxURVJTX0NPTlNULnNvcnQoKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKSk7XG4gICAgaTE4bl9leHQudGFncyA9IHt9O1xuICAgIFRBR19PUEVSQVRPUlMgPSB7fTtcbiAgICBERUZJTkVEX1RBR1MgPSB7fTtcbiAgICBGSUxURVJTX0NPTlNULmZvckVhY2goKGZfZGVmKSA9PiB7XG5cdGkxOG5fZXh0LnRhZ3NbZl9kZWYuaWRdID0gZl9kZWYubGFiZWw7XG5cdGZfZGVmLm9wZXJhdG9ycy5mb3JFYWNoKChvcCkgPT4gVEFHX09QRVJBVE9SU1tvcC5pZF0gPSBvcC5sYWJlbCk7XG5cdERFRklORURfVEFHU1tmX2RlZi5pZF0gPSBmX2RlZi5vcGVyYXRvcnMubWFwKChvcCkgPT4gb3AuaWQpO1xuICAgIH0pO1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgIFx0bGV0IGZpbHRlcl9kZWYgPSBGSUxURVJTX0NPTlNULmZpbmQoKGZjKSA9PiBmYy5pZCA9PSBrZXkpO1xuICAgIFx0aWYgKGZpbHRlcl9kZWYgIT0gbnVsbCkge1xuICAgIFx0ICAgIGxldCBvcHRpb25zX3N0cmluZyA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcblx0ICAgIG9wdGlvbnNfc3RyaW5nLmZvckVhY2goKG9wdF9zdGlybmcpID0+IHtcbiAgICBcdFx0bGV0IFt2YWx1ZSwgb3BlcmF0b3JdID0gb3B0X3N0aXJuZy5zcGxpdChcIjtcIik7XG5cdFx0aWYgKFxuXHRcdCAgICBvcGVyYXRvciA9PSBudWxsIHx8IHZhbHVlID09IG51bGwgfHwgb3BlcmF0b3IgPT0gXCJcIlxuXHRcdCAgICB8fCAoZmlsdGVyX2RlZi5vcHRpb25zICE9IG51bGwgJiYgZmlsdGVyX2RlZi5vcHRpb25zLmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09IHZhbHVlKSA9PSBudWxsKVxuXHRcdCAgICkge1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdGZpbHRlcnMucHVzaCh7aWQ6IGZpbHRlcl9kZWYuaWQsIG9wZXJhdG9yOiBvcGVyYXRvciwgdmFsdWU6IHZhbHVlfSk7XG5cdCAgICB9KTtcbiAgICBcdH1cdFxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVycztcbiAgICAvLyBcImw3cHJvdG89WFhYO2VxXCJcbn1cblxuZnVuY3Rpb24gZ2V0X2ZpbHRlcnNfb2JqZWN0KGZpbHRlcnMpIHtcbiAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybiB7fTsgfVxuICAgIGxldCBmaWx0ZXJzX2dyb3VwcyA9IHt9O1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZikgPT4ge1xuXHRsZXQgZ3JvdXAgPSBmaWx0ZXJzX2dyb3Vwc1tmLmlkXTtcblx0aWYgKGdyb3VwID09IG51bGwpIHtcblx0ICAgIGdyb3VwID0gW107XG5cdCAgICBmaWx0ZXJzX2dyb3Vwc1tmLmlkXSA9IGdyb3VwO1xuXHR9XG5cdGdyb3VwLnB1c2goZik7XG4gICAgfSk7XG4gICAgbGV0IGZpbHRlcnNfb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQgZl9pZCBpbiBmaWx0ZXJzX2dyb3Vwcykge1xuXHRsZXQgZ3JvdXAgPSBmaWx0ZXJzX2dyb3Vwc1tmX2lkXTtcblx0bGV0IGZpbHRlcl92YWx1ZXMgPSBncm91cC5maWx0ZXIoKGYpID0+IGYudmFsdWUgIT0gbnVsbCAmJiBmLm9wZXJhdG9yICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBcIlwiKS5tYXAoKGYpID0+IGAke2YudmFsdWV9OyR7Zi5vcGVyYXRvcn1gKS5qb2luKFwiLFwiKTtcblx0ZmlsdGVyc19vYmplY3RbZl9pZF0gPSBmaWx0ZXJfdmFsdWVzO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyc19vYmplY3Q7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9xdWVyeV9wcmVzZXQocmFuZ2VfcGlja2VyX3Z1ZSkge1xuICAgIGxldCBwYWdlID0gcmFuZ2VfcGlja2VyX3Z1ZS5wYWdlO1xuICAgIGxldCB1cmxfcmVxdWVzdCA9IGAke2Jhc2VfcGF0aH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9wcmVzZXQvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIGxldCBxdWVyeV9wcmVzZXRzID0gcmVzWzBdLmxpc3QubWFwKChlbCkgPT4ge1xuXHRyZXR1cm4ge1xuXHQgICAgdmFsdWU6IGVsLmlkLCAvLz09IG51bGwgPyBcImZsb3dcIiA6IGVsLmlkLFxuXHQgICAgbmFtZTogZWwubmFtZSxcblx0ICAgIGNvdW50OiBlbC5jb3VudCxcblx0ICAgIGJ1aWx0aW46IHRydWUsXG5cdH07XG4gICAgfSk7XG4gICAgaWYgKHJlcy5sZW5ndGggPiAxKSB7XG5cdHJlc1sxXS5saXN0LmZvckVhY2goKGVsKSA9PiB7XG4gICAgXHQgICAgbGV0IHF1ZXJ5ID0ge1xuICAgIFx0XHR2YWx1ZTogZWwuaWQsXG4gICAgXHRcdG5hbWU6IGVsLm5hbWUsXG5cdCAgICAgICAgY291bnQ6IGVsLmNvdW50LFxuICAgIFx0ICAgIH07XG4gICAgXHQgICAgcXVlcnlfcHJlc2V0cy5wdXNoKHF1ZXJ5KTtcblx0fSk7XG4gICAgfVxuICAgIGlmIChyYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldCA9PSBudWxsIHx8IHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0LnZhbHVlID09IFwiXCIpIHtcblx0cmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQgPSBxdWVyeV9wcmVzZXRzWzBdO1xuICAgIH0gZWxzZSB7XG5cdGxldCBxID0gcXVlcnlfcHJlc2V0cy5maW5kKChpKSA9PiBpLnZhbHVlID09IHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0LnZhbHVlKTtcbiAgICAgICByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldCA9IHE7XG4gICAgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldC52YWx1ZSk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQuY291bnQpO1xuICAgIHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0cyA9IHF1ZXJ5X3ByZXNldHM7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICBjb21wb25lbnRzOiB7XHQgIFxuICAgXHQnZGF0YS10aW1lLXJhbmdlLXBpY2tlcic6IERhdGFUaW1lUmFuZ2VQaWNrZXIsXG5cdCdtb2RhbC1maWx0ZXJzJzogTW9kYWxGaWx0ZXJzLFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcblx0bGV0IGR0X3JhbmdlX3BpY2tlcl9tb3VudGVkID0gbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyKTtcblx0bGV0IG1vZGFsX2ZpbHRlcnNfbW91bnRlZCA9IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfbW9kYWxfZmlsdGVycyk7XG5cdGF3YWl0IGR0X3JhbmdlX3BpY2tlcl9tb3VudGVkO1xuXG5cdGlmICh0aGlzLmVuYWJsZV9xdWVyeV9wcmVzZXRzKSB7XG5cdCAgICBhd2FpdCBzZXRfcXVlcnlfcHJlc2V0KHRoaXMpO1xuXHR9XG5cdGlmICh0aGlzLnBhZ2UgIT0gJ2FsbCcpIHtcblx0ICAgIGxldCBmaWx0ZXJzID0gYXdhaXQgbG9hZF9maWx0ZXJzX2RhdGEoKTtcblx0ICAgIFxuXHQgICAgVEFHSUZZID0gY3JlYXRlX3RhZ2lmeSh0aGlzKTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHtmaWx0ZXJzfSk7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fZXZlbnRfY2hhbmdlKHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIChzdGF0dXMpID0+IHRoaXMucmVsb2FkX3N0YXR1cyhzdGF0dXMpLCB0cnVlKTtcblx0fVxuXHR0aGlzLm1vZGFsX2RhdGEgPSBGSUxURVJTX0NPTlNUO1xuXHRcblx0Ly9hd2FpdCBtb2RhbF9maWx0ZXJzX21vdW50ZWQ7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGkxOG46IGkxOG4sXG5cdCAgICBpZF9tb2RhbF9maWx0ZXJzOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxfZmlsdGVyc2AsXG5cdCAgICBpZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyOiBgJHt0aGlzLiRwcm9wcy5pZH1fZGF0YS10aW1lLXJhbmdlLXBpY2tlcmAsXG5cdCAgICBzaG93X2ZpbHRlcnM6IGZhbHNlLFxuXHQgICAgZWRpdF90YWc6IG51bGwsXG5cdCAgICBpc19hbGVydF9zdGF0c191cmw6IElTX0FMRVJUX1NUQVRTX1VSTCxcblx0ICAgIHF1ZXJ5X3ByZXNldHM6IFtdLFxuXHQgICAgcXVlcnlfcHJlc2V0OiBRVUVSWV9QUkVTRVQsXG5cdCAgICBzdGF0dXNfdmlldzogU1RBVFVTX1ZJRVcsXG5cdCAgICBlbmFibGVfcXVlcnlfcHJlc2V0czogRU5BQkxFX1FVRVJZX1BSRVNFVFMsXG5cdCAgICBwYWdlOiBQQUdFLFxuXHQgICAgbW9kYWxfZGF0YTogW10sXG5cdCAgICBsYXN0X2ZpbHRlcnM6IFtdLFxuXHR9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRpc19maWx0ZXJfZGVmaW5lZDogZnVuY3Rpb24oZmlsdGVyKSB7XG5cdCAgICByZXR1cm4gREVGSU5FRF9UQUdTW2ZpbHRlci5pZF0gIT0gbnVsbDtcblx0fSxcblx0dXBkYXRlX3N0YXR1c192aWV3OiBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInN0YXR1c1wiLCBzdGF0dXMpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcdCAgICBcblx0fSxcblx0dXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzOiBmdW5jdGlvbigpIHtcblx0ICAgIGxldCB1cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCB0aGlzLnF1ZXJ5X3ByZXNldC52YWx1ZSk7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCB0aGlzLnF1ZXJ5X3ByZXNldC5jb3VudCk7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuXHR9LFxuXHRzaG93X21vZGFsX2ZpbHRlcnM6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2ZpbHRlcnNcIl0uc2hvdygpO1xuXHR9LFxuXHRyZW1vdmVfZmlsdGVyczogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgZmlsdGVycyA9IFtdO1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwge2ZpbHRlcnN9KTtcblx0fSxcblx0cmVsb2FkX3N0YXR1czogZnVuY3Rpb24oc3RhdHVzKSB7XG5cdCAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuXHQgICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIC8vIGRlbGV0ZSBhbGwgcHJldmlvdXMgZmlsdGVyXG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX3BhcmFtcyhGSUxURVJTX0NPTlNULm1hcCgoZikgPT4gZi5pZCkpO1xuXHQgICAgVEFHSUZZLnRhZ2lmeS5yZW1vdmVBbGxUYWdzKCk7XG5cdCAgICBsZXQgZmlsdGVyc19vYmplY3QgPSBnZXRfZmlsdGVyc19vYmplY3QoZmlsdGVycyk7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwoZmlsdGVyc19vYmplY3QpO1xuXHQgICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG5cdFx0bGV0IHRhZyA9IGNyZWF0ZV90YWdfZnJvbV9maWx0ZXIoZik7XG5cdFx0aWYgKHRhZyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdFRBR0lGWS5hZGRGaWx0ZXJUYWcodGFnKTtcblx0ICAgIH0pO1xuXHQgICAgdGhpcy5sYXN0X2ZpbHRlcnMgPSBmaWx0ZXJzO1xuXHR9LFxuXHRhcHBseV9tb2RhbDogZnVuY3Rpb24ocGFyYW1zKSB7XG5cdCAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0ICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG5cdCAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IGZpbHRlcnMgPSBbXTsgfVxuXHQgICAgaWYgKHRoaXMuZWRpdF90YWcgIT0gbnVsbCkge1xuXHRcdGZpbHRlcnMgPSBmaWx0ZXJzLmZpbHRlcigoZikgPT4gZi5pZCAhPSB0aGlzLmVkaXRfdGFnLmtleSB8fCBmLnZhbHVlICE9IHRoaXMuZWRpdF90YWcucmVhbFZhbHVlKTtcblx0XHR0aGlzLmVkaXRfdGFnID0gbnVsbDtcblx0ICAgIH1cblx0ICAgIGZpbHRlcnMucHVzaChwYXJhbXMpO1xuXHQgICAgLy8gdHJpZ2dlciBldmVudCBhbmQgdGhlbiBjYWxsIHJlbG9hZF9zdGF0dXNcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHtmaWx0ZXJzfSk7XG5cdH0sXG4gICAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZV90YWdpZnkocmFuZ2VfcGlja2VyX3Z1ZSkge1xuICAgIC8vIGNyZWF0ZSB0YWdpZnlcbiAgICBjb25zdCB0YWdpZnkgPSBuZXcgVGFnaWZ5KHJhbmdlX3BpY2tlcl92dWUuJHJlZnNbXCJ0YWdpZnlcIl0sIHtcblx0ZHVwbGljYXRlczogdHJ1ZSxcblx0ZGVsaW1pdGVycyA6IG51bGwsXG5cdGRyb3Bkb3duIDoge1xuICAgICAgICAgICAgZW5hYmxlZDogMSwgLy8gc3VnZ2VzdCB0YWdzIGFmdGVyIGEgc2luZ2xlIGNoYXJhY3RlciBpbnB1dFxuICAgICAgICAgICAgY2xhc3NuYW1lIDogJ2V4dHJhLXByb3BlcnRpZXMnIC8vIGN1c3RvbSBjbGFzcyBmb3IgdGhlIHN1Z2dlc3Rpb25zIGRyb3Bkb3duXG5cdH0sXG5cdGF1dG9Db21wbGV0ZTogeyBlbmFibGVkOiBmYWxzZSB9LFxuXHR0ZW1wbGF0ZXMgOiB7XG4gICAgICAgICAgICB0YWcgOiBmdW5jdGlvbih0YWdEYXRhKXtcblx0XHR0cnl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPHRhZyB0aXRsZT0nJHt0YWdEYXRhLnZhbHVlfScgY29udGVudGVkaXRhYmxlPSdmYWxzZScgc3BlbGxjaGVjaz1cImZhbHNlXCIgY2xhc3M9J3RhZ2lmeV9fdGFnICR7dGFnRGF0YS5jbGFzcyA/IHRhZ0RhdGEuY2xhc3MgOiBcIlwifScgJHt0aGlzLmdldEF0dHJpYnV0ZXModGFnRGF0YSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHggdGl0bGU9J3JlbW92ZSB0YWcnIGNsYXNzPSd0YWdpZnlfX3RhZ19fcmVtb3ZlQnRuJz48L3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7dGFnRGF0YS5sYWJlbCA/IGA8Yj4ke3RhZ0RhdGEubGFiZWx9PC9iPiZuYnNwO2AgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkeyFWSUVXX09OTFlfVEFHUyAmJiB0YWdEYXRhLm9wZXJhdG9ycyA/IGA8c2VsZWN0IGNsYXNzPSdvcGVyYXRvcic+JHt0YWdEYXRhLm9wZXJhdG9ycy5tYXAob3AgPT4gYDxvcHRpb24gJHt0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3IgPT09IG9wID8gJ3NlbGVjdGVkJyA6ICcnfSB2YWx1ZT0nJHtvcH0nPiR7VEFHX09QRVJBVE9SU1tvcF19PC9vcHRpb24+YCkuam9pbigpfTwvc2VsZWN0PmAgOiBgPGIgY2xhc3M9J29wZXJhdG9yJz4ke3RhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvciA/IFRBR19PUEVSQVRPUlNbdGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yXSA6ICc9J308L2I+YH0mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGFnaWZ5X190YWctdGV4dCc+JHt0YWdEYXRhLnZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RhZz5gXG5cdFx0fVxuXHRcdGNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuIGVycm9yIG9jY3VyZWQgd2hlbiBjcmVhdGluZyBhIG5ldyB0YWc6ICR7ZXJyfWApO1xuXHRcdH1cbiAgICAgICAgICAgIH0sXG5cdH0sXG5cdHZhbGlkYXRlOiBmdW5jdGlvbih0YWdEYXRhKSB7XG5cdCAgICByZXR1cm4gKHR5cGVvZiB0YWdEYXRhLmtleSAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHQgICAgdHlwZW9mIHRhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHQgICAgdHlwZW9mIHRhZ0RhdGEudmFsdWUgIT09ICd1bmRlZmluZWQnKTtcblx0fVxuICAgIH0pO1xuICAgIFxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHQvLyBhZGQgZXhpc3RpbmcgdGFnc1xuXHR0YWdpZnkuYWRkVGFncyhpbml0aWFsVGFncyk7XG4gICAgfSk7IC8qICQoZG9jdW1lbnQpLnJlYWR5KCkgKi9cbiAgICBcbiAgICBjb25zdCBjcmVhdGVWYWx1ZUZyb21UYWcgPSBmdW5jdGlvbih0YWcpIHtcblx0aWYgKCF0YWcuc2VsZWN0ZWRPcGVyYXRvcikgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPSAnZXEnO1xuXHRsZXQgdmFsID0gdGFnLnJlYWxWYWx1ZSAhPSBudWxsID8gdGFnLnJlYWxWYWx1ZSA6IHRhZy52YWx1ZTtcblx0bGV0IHZhbHVlID0gYCR7dmFsfTske3RhZy5zZWxlY3RlZE9wZXJhdG9yfWA7XG5cdHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgYWRkRmlsdGVyVGFnID0gYXN5bmMgZnVuY3Rpb24odGFnKSB7XG4gICAgICAgIC8qIENvbnZlcnQgdmFsdWVzIHRvIHN0cmluZyAodGhpcyBhdm9pZHMgaXNzdWVzIGUuZy4gd2l0aCAwKSAqL1xuICAgICAgICBpZiAodHlwZW9mIHRhZy5yZWFsVmFsdWUgPT0gJ251bWJlcicpIHsgdGFnLnJlYWxWYWx1ZSA9ICcnK3RhZy5yZWFsVmFsdWU7IH1cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcudmFsdWUgPT0gJ251bWJlcicpIHsgdGFnLnZhbHVlID0gJycrdGFnLnZhbHVlOyB9XG5cdFxuICAgICAgICBjb25zdCBleGlzdGluZ1RhZ0VsbXMgPSB0YWdpZnkuZ2V0VGFnRWxtcygpO1xuXHRcbiAgICAgICAgLyogTG9va3VwIGJ5IGtleSwgdmFsdWUgYW5kIG9wZXJhdG9yIChkbyBub3QgYWRkIHRoZSBzYW1lIGtleSBhbmQgdmFsdWUgbXVsdGlwbGUgdGltZXMpICovXG4gICAgICAgIGxldCBleGlzdGluZ1RhZ0VsZW1lbnQgPSBleGlzdGluZ1RhZ0VsbXMuZmluZChodG1sVGFnID0+IFxuXHRcdFx0XHRcdFx0ICAgICAgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ2tleScpID09PSB0YWcua2V5XG5cdFx0XHRcdFx0XHQgICAgICAmJiBodG1sVGFnLmdldEF0dHJpYnV0ZSgncmVhbFZhbHVlJykgPT09IHRhZy5yZWFsVmFsdWUgXG5cdFx0XHRcdFx0XHQgICAgICAvLyYmIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZE9wZXJhdG9yJykgPT09IHRhZy5zZWxlY3RlZE9wZXJhdG9yXG5cdFx0XHRcdFx0XHQgICAgICk7XG4gICAgICAgIGxldCBleGlzdGluZ1RhZyA9IHRhZ2lmeS50YWdEYXRhKGV4aXN0aW5nVGFnRWxlbWVudCk7XG4gICAgICAgIGlmIChleGlzdGluZ1RhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblx0XG4gICAgICAgIC8vIGhhcyB0aGUgdGFnIGFuIG9wZXJhdG9yIG9iamVjdD9cbiAgICAgICAgaWYgKERFRklORURfVEFHU1t0YWcua2V5XSAmJiAhQXJyYXkuaXNBcnJheShERUZJTkVEX1RBR1NbdGFnLmtleV0pKSB7XG4gICAgICAgICAgICB0YWcub3BlcmF0b3JzID0gREVGSU5FRF9UQUdTW3RhZy5rZXldLm9wZXJhdG9ycztcbiAgICAgICAgfVxuXHRcbiAgICAgICAgaWYgKCF0YWcuc2VsZWN0ZWRPcGVyYXRvcikge1xuICAgICAgICAgICAgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPSAnZXEnO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCBmaWx0ZXIhXG4gICAgICAgIHRhZ2lmeS5hZGRUYWdzKFt0YWddKTtcbiAgICB9XG4gICAgXG4gICAgLy8gd2hlbiBhbiB1c2VyIHJlbW92ZSB0aGUgdGFnXG4gICAgdGFnaWZ5Lm9uKCdyZW1vdmUnLCBhc3luYyBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zdCBrZXkgPSBlLmRldGFpbC5kYXRhLmtleTtcbiAgICAgIGNvbnN0IHZhbHVlID0gZS5kZXRhaWwuZGF0YS5yZWFsVmFsdWU7XG4gICAgICBjb25zdCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgICAgXG4gICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoc3RhdHVzLmZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm47IH1cblxuICAgICAgY29uc3QgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzLmZpbHRlcigoZikgPT4gKGYuaWQgIT0ga2V5IHx8IChmLmlkID09IGtleSAmJiBmLnZhbHVlICE9IHZhbHVlKSkpO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwge2ZpbHRlcnN9KTtcdFxuICAgIH0pO1xuICAgIFxuICAgIHRhZ2lmeS5vbignYWRkJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcbiAgICAgICAgaWYgKGRldGFpbC5kYXRhID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XHRcbiAgICAgICAgY29uc3QgdGFnID0gZGV0YWlsLmRhdGE7XHRcbiAgICAgICAgLy8gbGV0J3MgY2hlY2sgaWYgdGhlIHRhZyBoYXMgYSBrZXkgZmllbGRcbiAgICAgICAgaWYgKCF0YWcua2V5KSB7XG4gICAgICAgICAgICB0YWdpZnkucmVtb3ZlVGFncyhbZS5kZXRhaWwudGFnXSk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XHRcbiAgICB9KTtcbiAgICBcbiAgICAvLyBUYWcgJ2NsaWNrJyBldmVudCBoYW5kbGVyIHRvIG9wZW4gdGhlICdFZGl0JyBtb2RhbC4gTm90ZTogdGhpcyBwcmV2ZW50c1xuICAgIC8vIGlubGluZSBlZGl0aW5nIG9mIHRoZSB0YWcgKCdlZGl0OnVwZGF0ZWQnIGlzIG5ldmVyIGNhbGxlZCBhcyBhIGNvbnNlcXVlbmNlKVxuICAgIHRhZ2lmeS5vbignY2xpY2snLCBhc3luYyBmdW5jdGlvbihlKSB7XG4gICAgICAgIGNvbnN0IGRldGFpbCA9IGUuZGV0YWlsO1x0XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoZGV0YWlsLmRhdGEua2V5ID09PSB1bmRlZmluZWQpIHtyZXR1cm47fVxuICAgICAgICBjb25zdCB0YWcgPSBkZXRhaWwuZGF0YTtcblx0Ly8gcmVtZW1iZXIgdGhhdCB0aGlzIHRhZyBhbHJlYWR5IGV4aXh0c1xuXHRyYW5nZV9waWNrZXJfdnVlLmVkaXRfdGFnID0gdGFnO1xuXHQvLyBzaG93IG1vZGFsLWZpbHRlcnNcblx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywge2lkOiB0YWcua2V5LCBvcGVyYXRvcjogdGFnLnNlbGVjdGVkT3BlcmF0b3IsIHZhbHVlOiB0YWcucmVhbFZhbHVlfSk7XG4gICAgfSk7XG4gICAgXG4gICAgdGFnaWZ5Lm9uKCdlZGl0OnVwZGF0ZWQnLCBhc3luYyBmdW5jdGlvbihlKSB7XG5cdGNvbnNvbGUud2FybihcIlVQREFURURcIik7XG5cdHJldHVybjtcbiAgICB9KTtcbiAgICBcbiAgICAkKGB0YWdzYCkub24oJ2NoYW5nZScsICdzZWxlY3Qub3BlcmF0b3InLCBhc3luYyBmdW5jdGlvbihlKSB7XG5cdGNvbnNvbGUud2FybihcIlRBR1MgY2hhbmdlXCIpO1xuXHRyZXR1cm47XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcblx0dGFnaWZ5LFxuXHRhZGRGaWx0ZXJUYWcsXG4gICAgfTtcbn1cbjwvc2NyaXB0PlxuXG5cbjxzdHlsZSBzY29wZWQ+XG4udGFnaWZ5X19pbnB1dCB7XG4gIG1pbi13aWR0aDogMTc1cHg7XG59XG4udGFnaWZ5X190YWcge1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBtYXJnaW46IDNweCAwcHggNXB4IDVweDtcbn1cbi50YWdpZnlfX3RhZyBzZWxlY3Qub3BlcmF0b3Ige1xuICBtYXJnaW46IDBweCA0cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjNGM0YzQ7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cbi50YWdpZnlfX3RhZyBiLm9wZXJhdG9yIHtcbiAgbWFyZ2luOiAwcHggNHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgI2M0YzRjNDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBwYWRkaW5nOiAwLjA1ZW0gMC4yZW07XG59XG4udGFnaWZ5X190YWcgPiBkaXYge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2PlxuPHRhYmxlICBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmxlc3MgZ3JhcGgtc3RhdGlzdGljcyBtYi0yXCIgc3R5bGU9XCJcIj5cbiAgICA8dGhlYWQgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJncmFwaC12YWwtdG90YWwtdGl0bGUgZnMtNlwiIHN0eWxlPVwiYm9yZGVyLWxlZnQtd2lkdGg6IDFweDsgYm9yZGVyLXRvcC13aWR0aDogMXB4O1wiPiBUb3RhbDo8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiZ3JhcGgtdmFsLTk1cGVyY2VudGlsZS10aXRsZSBmcy02XCIgc3R5bGU9XCJib3JkZXItbGVmdC13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7XCI+OTV0aCA8YSBocmVmPVwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVyY2VudGlsZVwiPlBlcmNlbnRpbGU8L2E+OjwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJncmFwaC12YWwtYXZlcmFnZS10aXRsZSBmcy02XCIgc3R5bGU9XCJib3JkZXItbGVmdC13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7XCI+QXZlcmFnZTo8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiZ3JhcGgtdmFsLW1heC10aXRsZSBmcy02XCIgc3R5bGU9XCJib3JkZXItbGVmdC13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7IGJvcmRlci1yaWdodC13aWR0aDogMXB4O1wiPk1heDo8L3RoPlxuICAgICAgICA8L3RyPlxuICAgIDwvdGhlYWQ+XG4gICAgPHRib2R5Pjx0cj5cbiAgIDx0ZCBjbGFzcz1cImdyYXBoLXZhbC10b3RhbCB0ZXh0LWNlbnRlclwiIHN0eWxlPVwiYm9yZGVyLXdpZHRoOiAxcHg7XCI+IDxzcGFuPnt7dG90YWx9fTwvc3Bhbj48L3RkPlxuICAgPHRkIGNsYXNzPVwiZ3JhcGgtdmFsLTk1cGVyY2VudGlsZSB0ZXh0LWNlbnRlclwiIHN0eWxlPVwiYm9yZGVyLXRvcC13aWR0aDogMXB4OyBib3JkZXItcmlnaHQtd2lkdGg6IDFweDsgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1wiPiA8c3Bhbj57e3BlcmNlbnRpbGVfc2VudH19IFtTZW50XTxicj57e3BlcmNlbnRpbGVfcmN2ZH19IFtSY3ZkXTwvc3Bhbj48L3RkPlxuICAgPHRkIGNsYXNzPVwiZ3JhcGgtdmFsLWF2ZXJhZ2UgdGV4dC1jZW50ZXJcIiBzdHlsZT1cImJvcmRlci10b3Atd2lkdGg6IDFweDsgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7IGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcIj4gPHNwYW4+e3thdmdfc2VudH19IEtiaXQvcyBbU2VudF08YnI+e3thdmdfcmN2ZH19IFtSY3ZkXTwvc3Bhbj48L3RkPlxuICAgPCEtLSA8dGQgY2xhc3M9XCJncmFwaC12YWwtbWluXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7Ym9yZGVyLWJvdHRvbS13aWR0aDogMXB4O2JvcmRlci10b3Atd2lkdGg6IDFweDtib3JkZXItcmlnaHQtd2lkdGg6IDFweDtcIj5uaWw6IDxzcGFuPjwvc3Bhbj48L3RkPiAtLT5cbiAgIDx0ZCBjbGFzcz1cImdyYXBoLXZhbC1tYXggdGV4dC1jZW50ZXJcIiBzdHlsZT1cImJvcmRlci1ib3R0b20td2lkdGg6IDFweDsgYm9yZGVyLXRvcC13aWR0aDogMXB4OyBib3JkZXItcmlnaHQtd2lkdGg6IDFweDtcIj4gPHNwYW4+e3ttYXhfc2VudH19IFtTZW50XTxicj57e21heF9yY3ZkfX0gW1JjdmRdPC9zcGFuPjwvdGQ+XG48L3RyPjwvdGJvZHk+PC90YWJsZT5cblxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGNoYXJ0X29wdGlvbnM6IE9iamVjdCxcbiAgICB9LFxuICAgIHdhdGNoOiB7XG5cdFwiY2hhcnRfb3B0aW9uc1wiOiBmdW5jdGlvbih2YWwsIG9sZFZhbCkge1xuXHQgICAgdGhpcy5yZWxvYWRlZF90YWJsZSgpO1xuXHR9XG4gICAgfSxcbiAgICBlbWl0czogW10sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuICAgICAgICB0b3RhbDowLFxuICAgICAgICBwZXJjZW50aWxlX3NlbnQ6MCxcbiAgICAgICAgcGVyY2VudGlsZV9yY3ZkOjAsXG4gICAgICAgIGF2Z19zZW50OjAsXG4gICAgICAgIGF2Z19yY3ZkOjAsXG5cdCAgICBtYXhfc2VudDogMCxcblx0ICAgIG1heF9yY3ZkOiAwLFxuXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBhc3luYyBtb3VudGVkKCkge1xuXHQvLyBjb25zb2xlLmxvZyhcIk1vdW50ZWQgU2ltcGxlIHRhYmxlXCIpO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRyZWxvYWRlZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBmQml0ID0gIG50b3BDaGFydEFwZXguY2hhcnRPcHRpb25zVXRpbGl0eS5nZXRBcGV4WUZvcm1hdHRlcihudG9wQ2hhcnRBcGV4LmNoYXJ0T3B0aW9uc1V0aWxpdHkuYXBleFlGb3JtYXR0ZXJUeXBlcy5icHMuaWQpO1xuICAgICAgICBsZXQgZkJ5dGVzID0gbnRvcENoYXJ0QXBleC5jaGFydE9wdGlvbnNVdGlsaXR5LmdldEFwZXhZRm9ybWF0dGVyKG50b3BDaGFydEFwZXguY2hhcnRPcHRpb25zVXRpbGl0eS5hcGV4WUZvcm1hdHRlclR5cGVzLmJ5dGVzLmlkKTtcblx0ICAgIC8vIGNvbnNvbGUubG9nKFwicmVsb2FkZWQgdGFibGUgY2FsbGVkXCIpO1xuXHQgICAgLy9jb25zb2xlLmxvZyhPYmplY3Qua2V5cyh0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcykpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiT0JKRUNUIEtFWVNcIilcbiAgICAgICAgbGV0IHRvdGFsID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MudG90YWw7XG4gICAgICAgIGxldCBtYXhfc2VudCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzBdLm1heF92YWw7XG4gICAgICAgIGxldCBtYXhfcmN2ZCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzFdLm1heF92YWw7XG4gICAgICAgIGxldCBhdmdfc2VudCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzBdLmF2ZXJhZ2U7XG4gICAgICAgIGxldCBhdmdfcmN2ZCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzFdLmF2ZXJhZ2U7XG4gICAgICAgIGxldCBwZXJjZW50aWxlX3NlbnQgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZVswXVtcIjk1dGhfcGVyY2VudGlsZVwiXTtcbiAgICAgICAgbGV0IHBlcmNlbnRpbGVfcmN2ZCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzFdW1wiOTV0aF9wZXJjZW50aWxlXCJdO1xuICAgICAgICB0aGlzLm1heF9zZW50ID0gZkJpdChtYXhfc2VudCo4KTtcbiAgICAgICAgdGhpcy5tYXhfcmN2ZCA9IGZCaXQobWF4X3JjdmQqOCk7XG4gICAgICAgIHRoaXMuYXZnX3NlbnQgPSBmQml0KGF2Z19zZW50KjgpO1xuICAgICAgICB0aGlzLmF2Z19yY3ZkID0gZkJpdChhdmdfcmN2ZCo4KTtcbiAgICAgICAgdGhpcy5wZXJjZW50aWxlX3NlbnQgPSBmQml0KHBlcmNlbnRpbGVfc2VudCo4KTtcbiAgICAgICAgdGhpcy5wZXJjZW50aWxlX3JjdmQgPSBmQml0KHBlcmNlbnRpbGVfcmN2ZCo4KTtcbiAgICAgICAgdGhpcy50b3RhbCA9IGZCeXRlcyh0b3RhbCk7XG5cblx0fSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXY+XG48dGFibGUgIGNsYXNzPVwidGFibGUgdGFibGUtYm9yZGVybGVzcyBncmFwaC1zdGF0aXN0aWNzIG1iLTJcIiBzdHlsZT1cIlwiPlxuICAgIDx0aGVhZCBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aCBjbGFzcz1cImdyYXBoLXZhbC10b3RhbC10aXRsZSBmcy02XCIgc3R5bGU9XCJib3JkZXItbGVmdC13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7XCI+IFRvdGFsOjwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJncmFwaC12YWwtOTVwZXJjZW50aWxlLXRpdGxlIGZzLTZcIiBzdHlsZT1cImJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7IGJvcmRlci10b3Atd2lkdGg6IDFweDtcIj45NXRoIDxhIGhyZWY9XCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QZXJjZW50aWxlXCI+UGVyY2VudGlsZTwvYT46PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzcz1cImdyYXBoLXZhbC1hdmVyYWdlLXRpdGxlIGZzLTZcIiBzdHlsZT1cImJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7IGJvcmRlci10b3Atd2lkdGg6IDFweDtcIj5BdmVyYWdlOjwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJncmFwaC12YWwtbWF4LXRpdGxlIGZzLTZcIiBzdHlsZT1cImJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7IGJvcmRlci10b3Atd2lkdGg6IDFweDsgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XCI+TWF4OjwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgPC90aGVhZD5cbiAgICA8dGJvZHk+PHRyPlxuICAgPHRkIGNsYXNzPVwiZ3JhcGgtdmFsLXRvdGFsIHRleHQtY2VudGVyXCIgc3R5bGU9XCJib3JkZXItd2lkdGg6IDFweDtcIj4gPHNwYW4+e3t0b3RhbH19PC9zcGFuPjwvdGQ+XG4gICA8dGQgY2xhc3M9XCJncmFwaC12YWwtOTVwZXJjZW50aWxlIHRleHQtY2VudGVyXCIgc3R5bGU9XCJib3JkZXItdG9wLXdpZHRoOiAxcHg7IGJvcmRlci1yaWdodC13aWR0aDogMXB4OyBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7XCI+IDxzcGFuPnt7cGVyY2VudGlsZV9zZW50fX0gW1NlbnRdPGJyPnt7cGVyY2VudGlsZV9yY3ZkfX0gW1JjdmRdPC9zcGFuPjwvdGQ+XG4gICA8dGQgY2xhc3M9XCJncmFwaC12YWwtYXZlcmFnZSB0ZXh0LWNlbnRlclwiIHN0eWxlPVwiYm9yZGVyLXRvcC13aWR0aDogMXB4OyBib3JkZXItcmlnaHQtd2lkdGg6IDFweDsgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1wiPiA8c3Bhbj57e2F2Z19zZW50fX0gS2JpdC9zIFtTZW50XTxicj57e2F2Z19yY3ZkfX0gW1JjdmRdPC9zcGFuPjwvdGQ+XG4gICA8IS0tIDx0ZCBjbGFzcz1cImdyYXBoLXZhbC1taW5cIiBzdHlsZT1cImRpc3BsYXk6bm9uZTtib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7Ym9yZGVyLXRvcC13aWR0aDogMXB4O2JvcmRlci1yaWdodC13aWR0aDogMXB4O1wiPm5pbDogPHNwYW4+PC9zcGFuPjwvdGQ+IC0tPlxuICAgPHRkIGNsYXNzPVwiZ3JhcGgtdmFsLW1heCB0ZXh0LWNlbnRlclwiIHN0eWxlPVwiYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7IGJvcmRlci1yaWdodC13aWR0aDogMXB4O1wiPiA8c3Bhbj57e21heF9zZW50fX0gW1NlbnRdPGJyPnt7bWF4X3JjdmR9fSBbUmN2ZF08L3NwYW4+PC90ZD5cbjwvdHI+PC90Ym9keT48L3RhYmxlPlxuXG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0Y2hhcnRfb3B0aW9uczogT2JqZWN0LFxuICAgIH0sXG4gICAgd2F0Y2g6IHtcblx0XCJjaGFydF9vcHRpb25zXCI6IGZ1bmN0aW9uKHZhbCwgb2xkVmFsKSB7XG5cdCAgICB0aGlzLnJlbG9hZGVkX3RhYmxlKCk7XG5cdH1cbiAgICB9LFxuICAgIGVtaXRzOiBbXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG4gICAgICAgIHRvdGFsOjAsXG4gICAgICAgIHBlcmNlbnRpbGVfc2VudDowLFxuICAgICAgICBwZXJjZW50aWxlX3JjdmQ6MCxcbiAgICAgICAgYXZnX3NlbnQ6MCxcbiAgICAgICAgYXZnX3JjdmQ6MCxcblx0ICAgIG1heF9zZW50OiAwLFxuXHQgICAgbWF4X3JjdmQ6IDAsXG5cblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG5cdC8vIGNvbnNvbGUubG9nKFwiTW91bnRlZCBTaW1wbGUgdGFibGVcIik7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHJlbG9hZGVkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGZCaXQgPSAgbnRvcENoYXJ0QXBleC5jaGFydE9wdGlvbnNVdGlsaXR5LmdldEFwZXhZRm9ybWF0dGVyKG50b3BDaGFydEFwZXguY2hhcnRPcHRpb25zVXRpbGl0eS5hcGV4WUZvcm1hdHRlclR5cGVzLmJwcy5pZCk7XG4gICAgICAgIGxldCBmQnl0ZXMgPSBudG9wQ2hhcnRBcGV4LmNoYXJ0T3B0aW9uc1V0aWxpdHkuZ2V0QXBleFlGb3JtYXR0ZXIobnRvcENoYXJ0QXBleC5jaGFydE9wdGlvbnNVdGlsaXR5LmFwZXhZRm9ybWF0dGVyVHlwZXMuYnl0ZXMuaWQpO1xuXHQgICAgLy8gY29uc29sZS5sb2coXCJyZWxvYWRlZCB0YWJsZSBjYWxsZWRcIik7XG5cdCAgICAvL2NvbnNvbGUubG9nKE9iamVjdC5rZXlzKHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzKSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJPQkpFQ1QgS0VZU1wiKVxuICAgICAgICBsZXQgdG90YWwgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy50b3RhbDtcbiAgICAgICAgbGV0IG1heF9zZW50ID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWVbMF0ubWF4X3ZhbDtcbiAgICAgICAgbGV0IG1heF9yY3ZkID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWVbMV0ubWF4X3ZhbDtcbiAgICAgICAgbGV0IGF2Z19zZW50ID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWVbMF0uYXZlcmFnZTtcbiAgICAgICAgbGV0IGF2Z19yY3ZkID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWVbMV0uYXZlcmFnZTtcbiAgICAgICAgbGV0IHBlcmNlbnRpbGVfc2VudCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzBdW1wiOTV0aF9wZXJjZW50aWxlXCJdO1xuICAgICAgICBsZXQgcGVyY2VudGlsZV9yY3ZkID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWVbMV1bXCI5NXRoX3BlcmNlbnRpbGVcIl07XG4gICAgICAgIHRoaXMubWF4X3NlbnQgPSBmQml0KG1heF9zZW50KjgpO1xuICAgICAgICB0aGlzLm1heF9yY3ZkID0gZkJpdChtYXhfcmN2ZCo4KTtcbiAgICAgICAgdGhpcy5hdmdfc2VudCA9IGZCaXQoYXZnX3NlbnQqOCk7XG4gICAgICAgIHRoaXMuYXZnX3JjdmQgPSBmQml0KGF2Z19yY3ZkKjgpO1xuICAgICAgICB0aGlzLnBlcmNlbnRpbGVfc2VudCA9IGZCaXQocGVyY2VudGlsZV9zZW50KjgpO1xuICAgICAgICB0aGlzLnBlcmNlbnRpbGVfcmN2ZCA9IGZCaXQocGVyY2VudGlsZV9yY3ZkKjgpO1xuICAgICAgICB0aGlzLnRvdGFsID0gZkJ5dGVzKHRvdGFsKTtcblxuXHR9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cblxuPHRlbXBsYXRlPlxuICA8ZGl2IHYtaWY9XCJub19kYXRhXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgaWQ9XCJlbXB0eS1tZXNzYWdlXCI+e3sgX2kxOG4oJ2Zsb3dzX3BhZ2Uubm9fZGF0YScpIH19PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXJcIiB2LWJpbmQ6aWQ9XCJpZFwiPjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHNhbmtleVV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbWFwL3NhbmtleV91dGlsc1wiXG5cbmNvbnN0IG5vX2RhdGEgPSByZWYoZmFsc2UpXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWQ6IFN0cmluZyxcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIHVybDogU3RyaW5nLFxuICB1cmxfcGFyYW1zOiBBcnJheSxcbiAgZXh0cmFfc2V0dGluZ3M6IE9iamVjdCxcbn0pXG5cbmZ1bmN0aW9uIFNhbmtleUNoYXJ0KGRhdGEpIHtcbiAgLyogR2V0IGRlZmF1bHQgc2V0dGluZ3MgKi9cbiAgbGV0IHNldHRpbmdzID0ge1xuICAgIC4uLnNhbmtleVV0aWxzLmdldERlZmF1bHRTYW5rZXlTZXR0aW5ncygpLFxuICAgIC4uLnByb3BzLmV4dHJhX3NldHRpbmdzXG4gIH1cblxuICAvKiBHZXQgdGhlIGxpbmtzIGFuZCBub2RlcyBmb3JtYXR0ZWQgbGlzdCAqL1xuICBjb25zdCBsaW5rX3NvdXJjZSA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLmxpbmtTb3VyY2UpLm1hcChpbnRlcm4pO1xuICBjb25zdCBsaW5rX3RhcmdldCA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLmxpbmtUYXJnZXQpLm1hcChpbnRlcm4pO1xuICBjb25zdCBsaW5rX3NvdXJjZV9ub2RlID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3MubGlua1NvdXJjZU5vZGUpLm1hcChpbnRlcm4pO1xuICBjb25zdCBsaW5rX3RhcmdldF9ub2RlID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3MubGlua1RhcmdldE5vZGUpLm1hcChpbnRlcm4pO1xuICBjb25zdCBsaW5rX2xpbmsgPSBkM3Y3Lm1hcChkYXRhLCBzZXR0aW5ncy5saW5rTGluaykubWFwKGludGVybik7XG4gIGNvbnN0IGxpbmtfdmFsdWUgPSBkM3Y3Lm1hcChkYXRhLCBzZXR0aW5ncy5saW5rVmFsdWUpO1xuICBjb25zdCBsaW5rX2NvbG9yID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3MubGlua0NvbG9yKTtcbiAgY29uc3Qgc291cmNlX2NvbG9yID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3Muc291cmNlQ29sb3IpO1xuICBjb25zdCB0YXJnZXRfY29sb3IgPSBkM3Y3Lm1hcChkYXRhLCBzZXR0aW5ncy50YXJnZXRDb2xvcik7XG4gIGNvbnN0IHNvdXJjZV9saW5rID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3Muc291cmNlTGluayk7XG4gIGNvbnN0IHRhcmdldF9saW5rID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3MudGFyZ2V0TGluayk7XG5cbiAgbGV0IGxpbmtzID0gZGF0YTtcbiAgbGV0IG5vZGVzID0gQXJyYXkuZnJvbShkM3Y3LnVuaW9uKGxpbmtfc291cmNlLCBsaW5rX3RhcmdldCksIGlkID0+ICh7IGlkIH0pKTtcblxuICBjb25zdCBub2RlX2lkX2xpc3QgPSBkM3Y3Lm1hcChub2Rlcywgc2V0dGluZ3Mubm9kZUlkKS5tYXAoaW50ZXJuKTtcbiAgc2V0dGluZ3Mubm9kZUdyb3VwcyA9IGQzdjcubWFwKG5vZGVzLCBzZXR0aW5ncy5ub2RlR3JvdXApLm1hcChpbnRlcm4pO1xuXG4gIG5vZGVzID0gZDN2Ny5tYXAobm9kZXMsIChfLCBpKSA9PiAoeyBpZDogbm9kZV9pZF9saXN0W2ldIH0pKTtcbiAgbGlua3MgPSBkM3Y3Lm1hcChsaW5rcywgKF8sIGkpID0+ICh7IFxuICAgIHNvdXJjZTogbGlua19zb3VyY2VbaV0sIFxuICAgIHRhcmdldDogbGlua190YXJnZXRbaV0sIFxuICAgIHZhbHVlOiBsaW5rX3ZhbHVlW2ldICxcbiAgICBzb3VyY2Vfbm9kZTogbGlua19zb3VyY2Vfbm9kZVtpXSxcbiAgICB0YXJnZXRfbm9kZTogbGlua190YXJnZXRfbm9kZVtpXSxcbiAgICBsaW5rOiBsaW5rX2xpbmtbaV0sXG4gICAgY29sb3I6IGxpbmtfY29sb3JbaV0sXG4gICAgc291cmNlX2NvbG9yOiBzb3VyY2VfY29sb3JbaV0sXG4gICAgdGFyZ2V0X2NvbG9yOiB0YXJnZXRfY29sb3JbaV0sXG4gICAgc291cmNlX2xpbms6IHNvdXJjZV9saW5rW2ldLFxuICAgIHRhcmdldF9saW5rOiB0YXJnZXRfbGlua1tpXSxcbiAgfSkpO1xuXG4gIC8qIENvbG9ycy9MYWJlbC9UaXRsZXMgYXJyYXlzICovXG4gIGNvbnN0IGNvbG9yID0gZDN2Ny5zY2FsZU9yZGluYWwoc2V0dGluZ3Mubm9kZUdyb3Vwcywgc2V0dGluZ3MuY29sb3JzKTtcbiAgY29uc3Qgbm9kZV9sYWJlbF9saXN0ID0gZDN2Ny5tYXAobm9kZXMsIHNldHRpbmdzLm5vZGVMYWJlbCk7XG4gIGNvbnN0IG5vZGVfdGl0bGVfbGlzdCA9IGQzdjcubWFwKG5vZGVzLCBzZXR0aW5ncy5ub2RlVGl0bGUpO1xuICBjb25zdCBsaW5rX3RpdGxlX2xpc3QgPSBkM3Y3Lm1hcChsaW5rcywgc2V0dGluZ3MubGlua1RpdGxlKTtcblxuICAvKiBDb21wdXRlIHRoZSBTYW5rZXkgbGF5b3V0LiAqL1xuICBsZXQgc2Fua2V5ID0gZDN2Ny5zYW5rZXkoKVxuICAgIC5ub2RlSWQoKHtpbmRleDogaX0pID0+IG5vZGVfaWRfbGlzdFtpXSlcbiAgICAubm9kZUFsaWduKHNldHRpbmdzLm5vZGVBbGlnbilcbiAgICAubm9kZVdpZHRoKHNldHRpbmdzLm5vZGVXaWR0aClcbiAgICAubm9kZVBhZGRpbmcoc2V0dGluZ3Mubm9kZVBhZGRpbmcpXG4gICAgLmV4dGVudChbW3NldHRpbmdzLm1hcmdpbkxlZnQsIHNldHRpbmdzLm1hcmdpblRvcF0sIFtzZXR0aW5ncy53aWR0aCAtIHNldHRpbmdzLm1hcmdpblJpZ2h0LCBzZXR0aW5ncy5oZWlnaHQgLSBzZXR0aW5ncy5tYXJnaW5Cb3R0b21dXSlcbiAgICAoe25vZGVzLCBsaW5rc30pO1xuXG4gIGNvbnN0IHN2ZyA9IGQzdjcuY3JlYXRlKFwic3ZnXCIpXG4gICAgLmF0dHIoXCJ2aWV3Qm94XCIsIFswLCAwLCBzZXR0aW5ncy53aWR0aCwgc2V0dGluZ3MuaGVpZ2h0XSlcbiAgICAuYXR0cihcInN0eWxlXCIsIFwibWF4LXdpZHRoOiAxMDAlOyBoZWlnaHQ6IDYwdmg7IGhlaWdodDogaW50cmluc2ljO1wiKTtcblxuICBsZXQgZGVsdGFYLCBkZWx0YVk7XG4gICAgXG4gIGNvbnN0IHdpZHRoID0gc2V0dGluZ3Mud2lkdGhcbiAgY29uc3QgbGluayA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgIC5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgc2V0dGluZ3MubGlua1N0cm9rZU9wYWNpdHkpXG4gICAgLnNlbGVjdEFsbChcImdcIilcbiAgICAuZGF0YShsaW5rcylcbiAgICAuam9pbihcImdcIilcbiAgICAuc3R5bGUoXCJtaXgtYmxlbmQtbW9kZVwiLCBzZXR0aW5ncy5saW5rTWl4QmxlbmRNb2RlKVxuICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgLmF0dHIoXCJkXCIsIHNldHRpbmdzLmxpbmtQYXRoKVxuICAgIC5hdHRyKFwic3Ryb2tlXCIsICh7IGNvbG9yIH0pID0+IGNvbG9yIClcbiAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAoeyB3aWR0aCB9KSA9PiBNYXRoLm1heCgxLCB3aWR0aCkpXG4gICAgLmNhbGwobGlua190aXRsZV9saXN0ID8gcGF0aCA9PiBwYXRoLmFwcGVuZChcInRpdGxlXCIpLnRleHQoKHtpbmRleDogaX0pID0+IGxpbmtfdGl0bGVfbGlzdFtpXSkgOiAoKSA9PiB7fSk7XG5cblxuICBjb25zdCBkcmFnID0gZDN2Ny5kcmFnKClcbiAgICAub24oXCJzdGFydFwiLCBmdW5jdGlvbiAoZXZlbnQsIGQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGQzdjcuc2VsZWN0KHRoaXMpO1xuICAgICAgICBkZWx0YVggPSBjdXJyZW50LmF0dHIoXCJ4XCIpIC0gZXZlbnQueDtcbiAgICAgICAgZGVsdGFZID0gY3VycmVudC5hdHRyKFwieVwiKSAtIGV2ZW50Lnk7XG4gICAgfSlcbiAgICAub24oXCJkcmFnXCIsIGZ1bmN0aW9uIChldmVudCwgZCkge1xuICAgICAgZDN2Ny5zZWxlY3QodGhpcylcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBldmVudC54ICsgZGVsdGFYKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV2ZW50LnkgKyBkZWx0YVkpO1xuXG4gICAgICBkZWJ1Z2dlcjtcbiAgICAgIHNhbmtleSA9IGQzdjcuc2Fua2V5KCkudXBkYXRlKHNhbmtleSlcbiAgICAgICAgbGluay5zZWxlY3RBbGwoXCJwYXRoXCIpXG4gICAgICAgIC5kYXRhKHNhbmtleS5saW5rcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZDsgfSk7XG4gICAgfSk7XG4gICAgXG4gIGNvbnN0IG5vZGUgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwic3Ryb2tlXCIsIHNldHRpbmdzLm5vZGVTdHJva2UpXG4gICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgc2V0dGluZ3Mubm9kZVN0cm9rZVdpZHRoKVxuICAgIC5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgc2V0dGluZ3Mubm9kZVN0cm9rZU9wYWNpdHkpXG4gICAgLmF0dHIoXCJzdHJva2UtbGluZWpvaW5cIiwgc2V0dGluZ3Mubm9kZVN0cm9rZUxpbmVqb2luKVxuICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgLmRhdGEobm9kZXMpICAgIFxuICAgIC5qb2luKFwicmVjdFwiKVxuICAgIC5jYWxsKGRyYWcpXG5cdCAgLm9uKFwiZGJsY2xpY2tcIiwgZnVuY3Rpb24oZGF0YSkgeyBcbiAgICAgIGRhdGEgPSBkYXRhLmN1cnJlbnRUYXJnZXQuX19kYXRhX19cbiAgICAgIGNvbnN0IHNvdXJjZUxpbmsgPSBkYXRhLnNvdXJjZUxpbmtzO1xuICAgICAgY29uc3QgdGFyZ2V0TGluayA9IGRhdGEudGFyZ2V0TGlua3M7XG4gICAgICBjb25zdCBsaW5rID0gKHNvdXJjZUxpbmsgJiYgc291cmNlTGlua1swXSkgPyBzb3VyY2VMaW5rWzBdIDogdGFyZ2V0TGlua1swXTtcblxuICAgICAgaWYobGluaykge1xuICAgICAgICAvKiBHZXQgdGhlIG5vZGUgbGluayBmcm9tIHRoZSByZXN0ICovXG4gICAgICAgIGlmKGxpbmsuc291cmNlLmlkID09PSBkYXRhLmlkKSB7XG4gICAgICAgICAgaWYobGluay5zb3VyY2VfbGluayAmJiBsaW5rLnNvdXJjZV9saW5rICE9PSAnJylcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKGxpbmsuc291cmNlX2xpbmssICdfYmxhbmsnKTtcbiAgICAgICAgfSBlbHNlIGlmKGxpbmsudGFyZ2V0LmlkID09PSBkYXRhLmlkKSB7XG4gICAgICAgICAgaWYobGluay50YXJnZXRfbGluayAmJiBsaW5rLnRhcmdldF9saW5rICE9PSAnJylcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKGxpbmsudGFyZ2V0X2xpbmssICdfYmxhbmsnKTtcbiAgICAgICAgfSBcbiAgICAgIH0gXG4gICAgfSlcbiAgICAvKi5vbihcImRyYWdcIiwgc2Fua2V5VXRpbHMuZHJhZ05vZGVFdmVudCkgKi9cbiAgICAuYXR0cihcInhcIiwgZCA9PiBkLngwKVxuICAgIC5hdHRyKFwieVwiLCBkID0+IGQueTApXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgZCA9PiBkLnkxIC0gZC55MClcbiAgICAuYXR0cihcIndpZHRoXCIsIGQgPT4gZC54MSAtIGQueDApXG4gICAgLmF0dHIoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpXG4gICAgLmF0dHIoXCJmaWxsXCIsIChkYXRhKSA9PiB7IFxuICAgICAgY29uc3Qgc291cmNlTGluayA9IGRhdGEuc291cmNlTGlua3M7XG4gICAgICBsZXQgbm9kZV9jb2xvciA9IGNvbG9yKHNldHRpbmdzLm5vZGVHcm91cHNbZGF0YS5pbmRleF0pIFxuXG4gICAgICBpZihzb3VyY2VMaW5rICYmIHNvdXJjZUxpbmtbMF0pIHtcbiAgICAgICAgLyogR2V0IHRoZSBub2RlIGNvbG9yIGZyb20gdGhlIHJlc3QgKi9cbiAgICAgICAgaWYoc291cmNlTGlua1swXS5zb3VyY2UuaWQgPT09IGRhdGEuaWQpIHtcbiAgICAgICAgICAoc291cmNlTGlua1swXS5zb3VyY2VfY29sb3IgJiYgc291cmNlTGlua1swXS5zb3VyY2VfY29sb3IgIT09ICcnKSA/IG5vZGVfY29sb3IgPSBzb3VyY2VMaW5rWzBdLnNvdXJjZV9jb2xvciA6IG5vZGVfY29sb3IgPSBub2RlX2NvbG9yO1xuICAgICAgICB9IGVsc2UgaWYoc291cmNlTGlua1swXS50YXJnZXQuaWQgPT09IGRhdGEuaWQpIHtcbiAgICAgICAgICAoc291cmNlTGlua1swXS50YXJnZXRfY29sb3IgJiYgc291cmNlTGlua1swXS50YXJnZXRfY29sb3IgIT09ICcnKSA/IG5vZGVfY29sb3IgPSBzb3VyY2VMaW5rWzBdLnRhcmdldF9jb2xvciA6IG5vZGVfY29sb3IgPSBub2RlX2NvbG9yO1xuICAgICAgICB9XG4gICAgICB9IFxuICAgICAgXG4gICAgICByZXR1cm4gbm9kZV9jb2xvcjtcbiAgICB9KVxuICAgIC5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KCh7aW5kZXg6IGl9KSA9PiBub2RlX3RpdGxlX2xpc3RbaV0pXG5cbiAgc3ZnLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKVxuICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgLmRhdGEobm9kZXMpXG4gICAgLmpvaW4oXCJ0ZXh0XCIpXG4gICAgLmF0dHIoXCJ4XCIsIGQgPT4gZC54MCA8IHdpZHRoIC8gMiA/IGQueDEgKyBzZXR0aW5ncy5ub2RlTGFiZWxQYWRkaW5nIDogZC54MCAtIHNldHRpbmdzLm5vZGVMYWJlbFBhZGRpbmcpXG4gICAgLmF0dHIoXCJ5XCIsIGQgPT4gKGQueTEgKyBkLnkwKSAvIDIpXG4gICAgLmF0dHIoXCJkeVwiLCBcIjAuMzVlbVwiKVxuICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZCA9PiBkLngwIDwgc2V0dGluZ3Mud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIilcbiAgICAudGV4dCgoe2luZGV4OiBpfSkgPT4gbm9kZV9sYWJlbF9saXN0W2ldKTtcblxuICBmdW5jdGlvbiBpbnRlcm4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihzdmcubm9kZSgpLCB7c2NhbGVzOiB7Y29sb3J9fSk7XG59XG5cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGZvcm1hdF9yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBwYXJhbXMgPSB7fVxuICBwcm9wcy51cmxfcGFyYW1zLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBwYXJhbXNbbmFtZV0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShuYW1lKTtcbiAgfSk7XG5cbiAgcmV0dXJuIE50b3BVdGlscy5idWlsZFVSTChwcm9wcy51cmwsIHBhcmFtcyk7IFxufVxuXG5jb25zdCB1cGRhdGVEYXRhID0gYXN5bmMgZnVuY3Rpb24oZGF0YSkge1xuICAvKiBTaG93IHRoZSBsb2FkaW5nIG92ZXJsYXkgKi9cbiAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpOyAgXG5cbiAgLyogVXBkYXRlIHRoZSBVUkwgdXNpbmcgdGhlIHBhcmFtcyBuZWVkZWQgKi9cbiAgY29uc3QgdXJsID0gZm9ybWF0X3JlcXVlc3QoKVxuICAvKiBEbyB0aGUgcmVxdWVzdCBhbmQgdXBkYXRlIHRoZSBzYW5rZXkgKi9cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgY29uc3QgZGF0YSA9IHJzcC5yc3A7XG4gICAgaWYoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgY2hhcnQgPSBTYW5rZXlDaGFydChkYXRhKVxuICAgICAgbm9fZGF0YS52YWx1ZSA9IGZhbHNlXG4gICAgICAkKGAjJHtwcm9wcy5pZH1gKS5lbXB0eSgpO1xuICAgICAgJChgIyR7cHJvcHMuaWR9YCkuYXBwZW5kKGNoYXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChgIyR7cHJvcHMuaWR9YCkuZW1wdHkoKTtcbiAgICAgIG5vX2RhdGEudmFsdWUgPSB0cnVlXG4gICAgfSAgXG4gIH0pO1xuXG4gIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbn07XG5cbm9uTW91bnRlZCgoKSA9PiB7IH0pXG5cbmRlZmluZUV4cG9zZSh7IHVwZGF0ZURhdGEgfSlcbjwvc2NyaXB0PlxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uYWRkX2V4Y2x1c2lvblwiKSB9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT4gICAgXG4gICAgPHRlbXBsYXRlIHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2hvc3RzJ1wiPiA8IS0tIG1vZGFsIGhvc3RzIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuXHQgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLm1lbWJlcl90eXBlXCIpIH19PC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cblx0ICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cblx0ICAgIDxsYWJlbCA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGV4Y2x1ZGVfdHlwZSA9PSAnaXAnfVwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIj5cblx0ICAgICAgPGlucHV0ICBjbGFzcz1cImJ0bi1jaGVja1wiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJtZW1iZXJfdHlwZVwiIHZhbHVlPVwiaXBcIiBAY2xpY2s9XCJzZXRfZXhjbHVkZV90eXBlKCdpcCcpXCI+IHt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmlwX2FkZHJlc3NcIikgfX1cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8bGFiZWwgOmNsYXNzPVwieydhY3RpdmUnOiBleGNsdWRlX3R5cGUgPT0gJ25ldHdvcmsnfVwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIj5cblx0ICAgICAgPGlucHV0IEBjbGljaz1cInNldF9leGNsdWRlX3R5cGUoJ25ldHdvcmsnKVwiIGNsYXNzPVwiYnRuLWNoZWNrXCIgIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJtZW1iZXJfdHlwZVwiIHZhbHVlPVwibmV0d29ya1wiPiB7eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5uZXR3b3JrXCIpIH19XG5cdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGhyPlxuICAgICAgXG4gICAgICA8ZGl2IGNsYXNzPVwiaG9zdC1hbGVydC1maWVsZHNcIj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgXHQgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgIFx0ICAgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmhvc3RfYWxlcnRfdHlwZVwiKSB9fTwvYj5cbiAgICBcdCAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgbmFtZT1cInZhbHVlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBhbGVydC1zZWxlY3RcIiB2LW1vZGVsPVwiaG9zdF9zZWxlY3RlZFwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubm9uZVwiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmV4Y2x1ZGVfYWxsX2FsZXJ0c1wiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLnNwYWNpbmdfYmFyXCIpIH19PC9vcHRpb24+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gaG9zdF9hbGVydF90eXBlc1wiPlxuXHRcdDxvcHRpb24gdi1pZj1cIml0ZW0gIT0gbnVsbFwiIDp2YWx1ZT1cIml0ZW0uYWxlcnRfaWRcIj57eyBpdGVtLmxhYmVsIH19PC9vcHRpb24+XG5cdCAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiBjbGFzcz1cImZsb3ctYWxlcnQtZmllbGRzXCI+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uZmxvd19hbGVydF90eXBlXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8c2VsZWN0IGlkPVwiZmxvdy1hbGVydC1zZWxlY3RcIiBuYW1lPVwidmFsdWVcIiBjbGFzcz1cImZvcm0tc2VsZWN0IGFsZXJ0LXNlbGVjdFwiIHYtbW9kZWw9XCJmbG93X3NlbGVjdGVkXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5ub25lXCIpIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uZXhjbHVkZV9hbGxfYWxlcnRzXCIpIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQ+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uc3BhY2luZ19iYXJcIikgfX08L29wdGlvbj5cblx0ICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBmbG93X2FsZXJ0X3R5cGVzXCI+XG5cdFx0PG9wdGlvbiAgdi1pZj1cIml0ZW0gIT0gbnVsbFwiIDp2YWx1ZT1cIml0ZW0uYWxlcnRfaWRcIj57eyBpdGVtLmxhYmVsIH19PC9vcHRpb24+XG5cdCAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiB2LWlmPVwiZXhjbHVkZV90eXBlID09ICdpcCdcIiBjbGFzcz1cImlwLWZpZWxkc1wiPlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmlwX2FkZHJlc3NcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxpbnB1dCA6cGF0dGVybj1cInBhdHRlcm5faXBcIiBwbGFjZWhvbGRlcj1cIjE5Mi4xNjguMS4xXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBuYW1lPVwiaXBfYWRkcmVzc1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImlucHV0X2lwXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiB2LWlmPVwiZXhjbHVkZV90eXBlID09ICduZXR3b3JrJ1wiIGNsYXNzPVwibmV0d29yay1maWVsZHNcIj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5uZXR3b3JrXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS00IHByLTBcIj5cbiAgICAgICAgICAgIDxpbnB1dCByZXF1aXJlZCBzdHlsZT1cIndpZHRoOiBjYWxjKDEwMCUgLSAxMHB4KTtcIiBuYW1lPVwibmV0d29ya1wiIGNsYXNzPVwiZm9ybS1jb250cm9sIGQtaW5saW5lXCIgcGxhY2Vob2xkZXI9XCIxNzIuMTYuMC4wXCIgOnBhdHRlcm49XCJwYXR0ZXJuX2lwXCIgdi1tb2RlbD1cImlucHV0X25ldHdvcmtcIi8+XG4gICAgXHQgIDwvZGl2PlxuICAgIFx0ICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgcHMtNCBwZS0wXCI+XG4gICAgXHQgICAgPHNwYW4gY2xhc3M9XCJtZS0yXCI+Lzwvc3Bhbj5cbiAgICBcdCAgICA8aW5wdXQgcGxhY2Vob2xkZXI9JzI0JyByZXF1aXJlZCBjbGFzcz1cImZvcm0tY29udHJvbCBkLWlubGluZSB3LTc1XCIgbWluPVwiMVwiIG1heD1cIjEyN1wiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiY2lkclwiIHYtbW9kZWw9XCJuZXRtYXNrXCI+XG4gICAgXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oJ3ZsYW4nKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPVwiMFwiIG1pbj1cIjBcIiB0eXBlPVwibnVtYmVyXCIgdi1tb2RlbD1cImlucHV0X3ZsYW5cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj4gICAgICBcbiAgICA8L3RlbXBsYXRlPiA8IS0tIG1kb2FsIGhvc3RzIC0tPlxuICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlICE9ICdob3N0cydcIj4gPCEtLSBtb2RhbCBkb21haW5fbmFtZXMtLT5cbiAgICAgIDxkaXY+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGIgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnZG9tYWluX25hbWVzJ1wiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmRvbWFpblwiKSB9fTwvYj5cbiAgICAgICAgICAgIDxiIHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ3Rsc19jZXJ0aWZpY2F0ZSdcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi50bHNfY2VydGlmaWNhdGVcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxpbnB1dCB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdkb21haW5fbmFtZXMnXCIgcGxhY2Vob2xkZXI9XCJcIiA6cGF0dGVybj1cInBhdHRlcm5fdGV4dFwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlwX2FkZHJlc3NcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJpbnB1dF90ZXh0XCIgLz5cbiAgICAgICAgICAgIDxpbnB1dCB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICd0bHNfY2VydGlmaWNhdGUnXCIgcGxhY2Vob2xkZXI9XCJDTj04MTM4NDU2NTcwMDMzMzk4MzgsIE89Q29kZTQyLCBPVT1URVNULCBTVD1NTiwgQz1VXCIgOnBhdHRlcm49XCJwYXR0ZXJuX2NlcnRpZmljYXRlXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBuYW1lPVwiaXBfYWRkcmVzc1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImlucHV0X3RleHRcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PiAgICAgIFxuICAgIDwvdGVtcGxhdGU+IDwhLS0gbW9kYWwgZG9tYWluX25hbWVzLS0+XG5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmRpc2FibGVkPVwiY2hlY2tfZGlzYWJsZV9hcHBseSgpXCIgQGNsaWNrPVwiYWRkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKCdhZGQnKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZXhjbHVkZV90eXBlID0gcmVmKFwiaXBcIik7XG5jb25zdCBpbnB1dF9pcCA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X25ldHdvcmsgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF92bGFuID0gcmVmKDApO1xuY29uc3QgaW5wdXRfdGV4dCA9IHJlZihcIlwiKTtcbmNvbnN0IGhvc3Rfc2VsZWN0ZWQgPSByZWYoXCJcIik7XG5jb25zdCBmbG93X3NlbGVjdGVkID0gcmVmKFwiXCIpO1xuY29uc3QgbmV0bWFzayA9IHJlZihcIlwiKTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkJ10pXG4vL3Muc3BsaXQoXCIsXCIpLmV2ZXJ5KChhKSA9PiB7cmV0dXJuIC8uKz0uKy8udGVzdChhKX0pXG5mdW5jdGlvbiBnZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpIHtcbiAgICBpZiAodmFsdWVfdHlwZSA9PSBcInRleHRcIikge1xuXHRyZXR1cm4gTnRvcFV0aWxzLlJFR0VYRVMubm9uX3F1b3RlZF90ZXh0O1xuICAgIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImlwXCIpIHtcblx0bGV0IHJfaXB2NCA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjQ7XG5cdGxldCByX2lwdjRfdmxhbiA9IHJfaXB2NC5yZXBsYWNlKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0bGV0IHJfaXB2NiA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjY7XG5cdGxldCByX2lwdjZfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0cmV0dXJuIGAoJHtyX2lwdjR9KXwoJHtyX2lwdjRfdmxhbn0pfCgke3JfaXB2Nn0pfCgke3JfaXB2Nl92bGFufSlgO1xuICAgIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImhvc3RuYW1lXCIpIHtcblx0cmV0dXJuIGAke050b3BVdGlscy5SRUdFWEVTLnNpbmdsZXdvcmR9fFthLXpBLVowLTkuX1xcLV17MywyNTB9QFswLTldezAsNX0kYDtcbiAgICB9IGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdHJldHVybiBOdG9wVXRpbHMuUkVHRVhFUy50bHNfY2VydGlmaWNhdGU7XG4gICAgfVxuICAgIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcbn1cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYWxlcnRfZXhjbHVzaW9uc19wYWdlOiBTdHJpbmcsXG4gICAgaG9zdF9hbGVydF90eXBlczogQXJyYXksXG4gICAgZmxvd19hbGVydF90eXBlczogQXJyYXksICAgIFxufSk7XG5cbmxldCBwYXR0ZXJuX2lwID0gZ2V0X2RhdGFfcGF0dGVybihcImlwXCIpO1xubGV0IHBhdHRlcm5fdGV4dCA9IGdldF9kYXRhX3BhdHRlcm4oXCJ0ZXh0XCIpO1xubGV0IHBhdHRlcm5fY2VydGlmaWNhdGUgPSBnZXRfZGF0YV9wYXR0ZXJuKFwiY2VydGlmaWNhdGVcIik7XG5cbmNvbnN0IHNldF9leGNsdWRlX3R5cGUgPSAodHlwZSkgPT4ge1xuICAgIGV4Y2x1ZGVfdHlwZS52YWx1ZSA9IHR5cGU7XG59XG5cbmNvbnN0IGNoZWNrX2Rpc2FibGVfYXBwbHkgPSAoKSA9PiB7XG4gICAgbGV0IHJlZ2V4ID0gbnVsbDtcbiAgICBsZXQgZGlzYWJsZV9hcHBseSA9IHRydWU7XG4gICAgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnaG9zdHMnKSB7XG5cdHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2lwKTtcblx0aWYgKGV4Y2x1ZGVfdHlwZS52YWx1ZSA9PSBcImlwXCIpIHtcblx0ICAgIGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfaXAudmFsdWUgPT0gbnVsbCB8fCBpbnB1dF9pcC52YWx1ZSA9PSBcIlwiKSB8fCAocmVnZXgudGVzdChpbnB1dF9pcC52YWx1ZSkgPT0gZmFsc2UpIHx8IChob3N0X3NlbGVjdGVkLnZhbHVlID09IFwiXCIgJiYgZmxvd19zZWxlY3RlZC52YWx1ZSA9PSBcIlwiKTtcblx0fSBlbHNlIHtcblx0ICAgIGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfbmV0d29yay52YWx1ZSA9PSBudWxsIHx8IGlucHV0X25ldHdvcmsudmFsdWUgPT0gXCJcIilcblx0XHR8fCAocmVnZXgudGVzdChpbnB1dF9uZXR3b3JrLnZhbHVlKSA9PSBmYWxzZSlcblx0XHR8fCAoaG9zdF9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiICYmIGZsb3dfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIilcblx0XHR8fCAobmV0bWFzay52YWx1ZSA9PSBudWxsIHx8IG5ldG1hc2sudmFsdWUgPT0gXCJcIiB8fCBwYXJzZUludChuZXRtYXNrLnZhbHVlKSA8IDEgfHwgcGFyc2VJbnQobmV0bWFzay52YWx1ZSkgPiAxMjcpO1xuXHR9XG4gICAgfSBlbHNlIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2RvbWFpbl9uYW1lcycpIHtcblx0cmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm5fdGV4dCk7XG5cdGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfdGV4dC52YWx1ZSA9PSBudWxsIHx8IGlucHV0X3RleHQudmFsdWUgPT0gXCJcIikgfHwgKHJlZ2V4LnRlc3QoaW5wdXRfdGV4dC52YWx1ZSkgPT0gZmFsc2UpO1xuXHRcbiAgICB9IGVsc2UgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAndGxzX2NlcnRpZmljYXRlJykge1xuXHRyZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybl9jZXJ0aWZpY2F0ZSk7XG5cdGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfdGV4dC52YWx1ZSA9PSBudWxsIHx8IGlucHV0X3RleHQudmFsdWUgPT0gXCJcIikgfHwgKHJlZ2V4LnRlc3QoaW5wdXRfdGV4dC52YWx1ZSkgPT0gZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gZGlzYWJsZV9hcHBseTtcbn07XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGV4Y2x1ZGVfdHlwZS52YWx1ZSA9IFwiaXBcIjtcbiAgICBpbnB1dF9pcC52YWx1ZSA9IFwiXCI7XG4gICAgaW5wdXRfbmV0d29yay52YWx1ZSA9IFwiXCI7XG4gICAgaW5wdXRfdmxhbi52YWx1ZSA9IDA7XG4gICAgaG9zdF9zZWxlY3RlZC52YWx1ZSA9IFwiXCI7XG4gICAgZmxvd19zZWxlY3RlZC52YWx1ZSA9IFwiXCI7XG4gICAgbmV0bWFzay52YWx1ZSA9IFwiXCI7XG4gICAgaW5wdXRfdGV4dC52YWx1ZSA9IFwiXCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmNvbnN0IGFkZCA9ICgpID0+IHtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGxldCBhbGVydF9hZGRyID0gaW5wdXRfaXAudmFsdWU7XG4gICAgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSBcImhvc3RzXCIpIHtcblx0aWYgKGV4Y2x1ZGVfdHlwZS52YWx1ZSA9PSBcIm5ldHdvcmtcIikge1xuXHQgICAgYWxlcnRfYWRkciA9IGAke2lucHV0X25ldHdvcmsudmFsdWV9LyR7bmV0bWFzay52YWx1ZX1gO1xuXHR9XG4gICAgICAgIGlmIChpbnB1dF92bGFuLnZhbHVlICE9IG51bGwgJiYgaW5wdXRfdmxhbi52YWx1ZSAhPSAwKSB7XG5cdCAgICBhbGVydF9hZGRyID0gYCR7YWxlcnRfYWRkcn1AJHtpbnB1dF92bGFuLnZhbHVlfWA7XG4gICAgICAgIH1cblx0cGFyYW1zID0geyBhbGVydF9hZGRyLCBob3N0X2FsZXJ0X2tleTogaG9zdF9zZWxlY3RlZC52YWx1ZSwgZmxvd19hbGVydF9rZXk6IGZsb3dfc2VsZWN0ZWQudmFsdWUgfTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSBcImRvbWFpbl9uYW1lc1wiKSB7XG5cdHBhcmFtcyA9IHsgYWxlcnRfZG9tYWluOiBpbnB1dF90ZXh0LnZhbHVlIH07XG4gICAgfSBlbHNlIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gXCJ0bHNfY2VydGlmaWNhdGVcIikge1xuXHRwYXJhbXMgPSB7IGFsZXJ0X2NlcnRpZmljYXRlOiBpbnB1dF90ZXh0LnZhbHVlIH07XG4gICAgfVxuICAgIGVtaXQoJ2FkZCcsIHBhcmFtcyk7XG4gICAgY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn0gIFxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57eyBfaTE4bignZXhjbHVkZV9jaGVjaycpIH19OiA8c3BhbiB2LWh0bWw9XCJhbGVydF9uYW1lXCI+PC9zcGFuPjwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIFwiPlxuICAgICAgPGRpdj5cblx0PGxhYmVsPnt7IF9pMThuKCdleGNsdWRlX2NoZWNrJykgfX0gXCI8YiB2LWh0bWw9XCJhbGVydF9uYW1lXCI+PC9iPlwiLiA8c3BhbiBjbGFzcz1cImFsZXJ0X2xhYmVsXCI+e3sgX2kxOG4oJ2V4Y2x1ZGVfZm9yJykgfX06PC9zcGFuPiA8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImFueVwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cbiAgICAgIFx0ICAgIDxzcGFuPiB7eyBfaTE4bignc2hvd19hbGVydHMuZmlsdGVyX2Rpc2FibGVfY2hlY2snKSB9fSA8L3NwYW4+XG4gICAgICBcdCAgPC9sYWJlbD5cblx0PC9kaXY+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwicGFnZSA9PSAnaG9zdCdcIj5cblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiaG9zdFwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxuICAgICAgXHQgICAgICA8c3Bhbj57eyBob3N0X2FkZHIubGFiZWwgfX08L3NwYW4+XG4gICAgICBcdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2Plx0XG5cdDwvdGVtcGxhdGU+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwicGFnZSA9PSAnZmxvdydcIj5cblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiY2xpZW50X2hvc3RcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cbiAgICAgIFx0ICAgICAgPHNwYW4+e3sgX2kxOG4oJ2NsaWVudCcpIH19OiB7e2Zsb3dfYWRkci5jbGlfbGFiZWx9fTwvc3Bhbj5cbiAgICAgIFx0ICAgIDwvbGFiZWw+XG5cdCAgPC9kaXY+XG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cInNlcnZlcl9ob3N0XCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XG4gICAgICBcdCAgICAgIDxzcGFuPnt7IF9pMThuKCdzZXJ2ZXInKSB9fToge3sgZmxvd19hZGRyLnNydl9sYWJlbCB9fTwvc3Bhbj5cbiAgICAgIFx0ICAgIDwvbGFiZWw+XG5cdCAgPC9kaXY+XG5cdDwvdGVtcGxhdGU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgdi1pZj1cImRvbWFpbiAhPSBudWxsIHx8IHRsc19jZXJ0aWZpY2F0ZSAhPSBudWxsXCIgY2xhc3M9XCJleGNsdWRlLWRvbWFpbi1jZXJ0aWZpY2F0ZVwiPlxuXHQ8bGFiZWw+PHNwYW4gY2xhc3M9XCJhbGVydF9sYWJlbFwiPnt7IF9pMThuKCdjaGVja19leGNsdXNpb24uZXhjbHVkZV9hbGxfY2hlY2tzX2ZvcicpIH19Ojwvc3Bhbj4gPC9sYWJlbD5cdFxuXHQ8ZGl2IHYtaWY9XCJkb21haW4gIT0gbnVsbFwiIGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImRvbWFpblwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgd2hpdGVzcGFjZVwiPlxuICAgICAgXHQgICAgPHNwYW4+e3tfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5kb21haW5cIil9fTo8L3NwYW4+XG4gICAgICBcdCAgPC9sYWJlbD5cbiAgICAgIFx0ICA8aW5wdXQgdHlwZT1cInRleHRcIiA6cGF0dGVybj1cInBhdHRlcm5fZG9tYWluXCIgOmRpc2FibGVkPVwicmFkaW9fc2VsZWN0ZWQgIT0gJ2RvbWFpbidcIiByZXF1aXJlZCB2LW1vZGVsPVwiZG9tYWluXCIgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGN1c3RvbS13aWR0aFwiPlxuXHQ8L2Rpdj5cblx0PGRpdiB2LWlmPVwidGxzX2NlcnRpZmljYXRlICE9IG51bGxcIiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJjZXJ0aWZpY2F0ZVwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgd2hpdGVzcGFjZVwiPlxuICAgICAgXHQgICAgPHNwYW4+e3tfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi50bHNfY2VydGlmaWNhdGVcIil9fTo8L3NwYW4+XG4gICAgICBcdCAgPC9sYWJlbD5cbiAgICAgIFx0ICA8aW5wdXQgdHlwZT1cInRleHRcIiA6ZGlzYWJsZWQ9XCJyYWRpb19zZWxlY3RlZCAhPSAnY2VydGlmaWNhdGUnXCIgdi1tb2RlbD1cInRsc19jZXJ0aWZpY2F0ZVwiIDpwYXR0ZXJuPVwicGF0dGVybl9jZXJ0aWZpY2F0ZVwiIHJlcXVpcmVkIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBjdXN0b20td2lkdGhcIj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8dGVtcGxhdGUgdi1pZj1cInJhZGlvX3NlbGVjdGVkICE9ICdkb21haW4nICYmIHJhZGlvX3NlbGVjdGVkICE9ICdjZXJ0aWZpY2F0ZSdcIj5cbiAgICAgIDxkaXYgdi1zaG93PVwiZGlzYWJsZV9hbGVydHNcIiBjbGFzcz1cIm1lc3NhZ2UgYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG5cdHt7IF9pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9kZWxldGVfZmlsdGVyZWRfYWxlcnRzXCIpIH19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxociBjbGFzcz1cInNlcGFyYXRvclwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBcIj5cblx0PGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1zd2l0Y2hcIj5cblx0ICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlXCIgIHYtbW9kZWw9XCJkaXNhYmxlX2FsZXJ0c1wiPlxuXHQgIFxuXHQgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCI+e3tfaTE4bihcImRlbGV0ZV9kaXNhYmxlZF9hbGVydHNcIil9fTwvbGFiZWw+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8ZGl2ICBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmcgYm9yZGVyXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICB7e19pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9maWx0ZXJfYWxlcnRcIil9fVxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImV4Y2x1ZGVcIiA6ZGlzYWJsZWQ9XCJjaGVja19kaXNhYmxlX2FwcGx5KClcIiBjbGFzcz1cImJ0biBidG4td2FybmluZ1wiPnt7X2kxOG4oXCJmaWx0ZXJcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHJhZGlvX3NlbGVjdGVkID0gcmVmKFwiYW55XCIpO1xuY29uc3QgZGlzYWJsZV9hbGVydHMgPSByZWYodHJ1ZSk7XG5jb25zdCBkb21haW4gPSByZWYobnVsbCk7XG5jb25zdCB0bHNfY2VydGlmaWNhdGUgPSByZWYobnVsbCk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2V4Y2x1ZGUnXSlcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGFsZXJ0OiBPYmplY3QsXG4gICAgcGFnZTogU3RyaW5nLFxufSk7XG5cbndhdGNoKCgpID0+IHByb3BzLmFsZXJ0LCAoY3VycmVudF92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgaWYgKGN1cnJlbnRfdmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICByYWRpb19zZWxlY3RlZC52YWx1ZSA9IFwiYW55XCI7XG4gICAgZGlzYWJsZV9hbGVydHMudmFsdWUgPSB0cnVlO1xuICAgIGRvbWFpbi52YWx1ZSA9IGN1cnJlbnRfdmFsdWUuaW5mbz8udmFsdWUgPT0gXCJcIiA/IG51bGwgOiBjdXJyZW50X3ZhbHVlLmluZm8/LnZhbHVlO1xuICAgIHRsc19jZXJ0aWZpY2F0ZS52YWx1ZSA9IGN1cnJlbnRfdmFsdWUuaW5mbz8uaXNzdWVyZG4gPT0gXCJcIiA/IG51bGwgOiBjdXJyZW50X3ZhbHVlLmluZm8/Lmlzc3VlcmRuO1xufSk7XG4vLyBjb25zdCBjbGlja19kZWxldGVfZGlzYWJsZV9hbGVydHMgPSAoKSA9PiB7XG4vLyB9O1xuXG5jb25zdCBjaGVja19kaXNhYmxlX2FwcGx5ID0gKCkgPT4ge1xuICAgIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImRvbWFpblwiKSB7XG5cdGxldCByZWdleF9kb21haW4gPSBuZXcgUmVnRXhwKHBhdHRlcm5fZG9tYWluKTtcblx0cmV0dXJuIGRvbWFpbi52YWx1ZSA9PSBudWxsIHx8IHJlZ2V4X2RvbWFpbi50ZXN0KGRvbWFpbi52YWx1ZSkgPT0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImNlcnRpZmljYXRlXCIpIHtcblx0bGV0IHJlZ2V4X2NlcnRpZmljYXRlID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2NlcnRpZmljYXRlKTtcblx0cmV0dXJuIHRsc19jZXJ0aWZpY2F0ZS52YWx1ZSA9PSBudWxsIHx8IHJlZ2V4X2NlcnRpZmljYXRlLnRlc3QodGxzX2NlcnRpZmljYXRlLnZhbHVlKSA9PSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5jb25zdCBhbGVydF9uYW1lID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuYWxlcnQ/LmFsZXJ0X25hbWUpO1xuXG5jb25zdCBob3N0X2FkZHIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJlcyA9IHsgdmFsdWU6IFwiXCIsIGxhYmVsOiBcIlwiIH07XG4gICAgaWYgKHByb3BzLnBhZ2UgIT0gXCJob3N0XCIgfHwgcHJvcHMuYWxlcnQgPT0gbnVsbCkgeyByZXR1cm4gcmVzOyB9XG4gICAgbGV0IGFsZXJ0ID0gcHJvcHMuYWxlcnQ7XG4gICAgcmVzLnZhbHVlID0gYWxlcnQuaXAudmFsdWU7XG4gICAgaWYgKGFsZXJ0LnZsYW4gIT0gbnVsbCAmJiBhbGVydC52bGFuLnZhbHVlICE9IG51bGwgJiYgYWxlcnQudmxhbi52YWx1ZSAhPSAwKSB7XG5cdHJlcy52YWx1ZSA9IHJlcy52YWx1ZSArICdAJyArIGFsZXJ0LnZsYW4udmFsdWU7XG4gICAgfVxuICAgIHJlcy5sYWJlbCA9IChhbGVydC5pcC5sYWJlbCkgPyBgJHthbGVydC5pcC5sYWJlbH0gKCR7YWxlcnQuaXAudmFsdWV9KWAgOiBhbGVydC5pcC52YWx1ZTtcbiAgICByZXR1cm4gcmVzO1xufSk7XG5cbmNvbnN0IGZsb3dfYWRkciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgcmVzID0geyBjbGlfdmFsdWU6IFwiXCIsIGNsaV9sYWJlbDogXCJcIiwgc3J2X3ZhbHVlOiBcIlwiLCBzcnZfbGFiZWw6IFwiXCIgfTtcbiAgICBpZiAocHJvcHMucGFnZSAhPSBcImZsb3dcIiB8fCBwcm9wcy5hbGVydCA9PSBudWxsKSB7IHJldHVybiByZXM7IH1cbiAgICBsZXQgYWxlcnQgPSBwcm9wcy5hbGVydDtcbiAgICByZXMuY2xpX3ZhbHVlID0gYWxlcnQuZmxvdy5jbGlfaXAudmFsdWU7XG4gICAgcmVzLnNydl92YWx1ZSA9IGFsZXJ0LmZsb3cuc3J2X2lwLnZhbHVlO1xuICAgIGxldCBjbGlfbGFiZWwgPSBgJHthbGVydC5mbG93LmNsaV9pcC5sYWJlbCB8fCBhbGVydC5mbG93LmNsaV9pcC52YWx1ZX1gXG4gICAgbGV0IHNydl9sYWJlbCA9IGAke2FsZXJ0LmZsb3cuc3J2X2lwLmxhYmVsIHx8IGFsZXJ0LmZsb3cuc3J2X2lwLnZhbHVlfWBcblxuICAgIGlmKGFsZXJ0LmZsb3cudmxhbiAhPSBudWxsICYmIGFsZXJ0LmZsb3cudmxhbi52YWx1ZSAhPSBudWxsICYmIGFsZXJ0LmZsb3cudmxhbi52YWx1ZSAhPSAwKSB7XG4gICAgICBjbGlfbGFiZWwgPSBgJHtjbGlfbGFiZWx9QCR7YWxlcnQuZmxvdy52bGFuLmxhYmVsfWBcbiAgICAgIHNydl9sYWJlbCA9IGAke3Nydl9sYWJlbH1AJHthbGVydC5mbG93LnZsYW4ubGFiZWx9YFxuICAgICAgcmVzLmNsaV92YWx1ZSA9IHJlcy5jbGlfdmFsdWUgKyAnQCcgKyBhbGVydC5mbG93LnZsYW4udmFsdWVcbiAgICAgIHJlcy5zcnZfdmFsdWUgPSByZXMuc3J2X3ZhbHVlICsgJ0AnICsgYWxlcnQuZmxvdy52bGFuLnZhbHVlXG4gICAgfVxuXG4gICAgaWYoY2xpX2xhYmVsICE9PSByZXMuY2xpX3ZhbHVlKSB7XG4gICAgICBjbGlfbGFiZWwgPSBgJHtjbGlfbGFiZWx9ICgke3Jlcy5jbGlfdmFsdWV9KWBcbiAgICB9XG4gICAgaWYoc3J2X2xhYmVsICE9PSByZXMuc3J2X3ZhbHVlKSB7XG4gICAgICBzcnZfbGFiZWwgPSBgJHtzcnZfbGFiZWx9ICgke3Jlcy5zcnZfdmFsdWV9KWBcbiAgICB9XG4gICAgXG4gICAgcmVzLmNsaV9sYWJlbCA9IGNsaV9sYWJlbFxuICAgIHJlcy5zcnZfbGFiZWwgPSBzcnZfbGFiZWxcbiAgICByZXR1cm4gcmVzO1xufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuZnVuY3Rpb24gZ2V0X3R5cGUoKSB7XG4gICAgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiZG9tYWluXCIgfHwgcmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdHJldHVybiByYWRpb19zZWxlY3RlZC52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFwiaG9zdFwiO1xufVxuXG5sZXQgcGF0dGVybl9kb21haW4gPSBOdG9wVXRpbHMuUkVHRVhFUy5kb21haW5fbmFtZV9ub3Rfc3RyaWN0O1xubGV0IHBhdHRlcm5fY2VydGlmaWNhdGUgPSBOdG9wVXRpbHMuUkVHRVhFUy50bHNfY2VydGlmaWNhdGU7XG5cbmNvbnN0IGV4Y2x1ZGUgPSAoKSA9PiB7XG4gICAgbGV0IHBhZ2UgPSBwcm9wcy5wYWdlO1xuICAgIGxldCB0eXBlID0gZ2V0X3R5cGUoKTtcbiAgICBsZXQgcGFyYW1zID0ge1xuICAgIFx0ZGVsZXRlX2FsZXJ0czogZGlzYWJsZV9hbGVydHMudmFsdWUsXG5cdHR5cGUsXHRcbiAgICB9O1xuICAgIGxldCBhZGRyID0gbnVsbDtcbiAgICBpZiAodHlwZSA9PSBcImhvc3RcIikge1x0XG5cdGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImhvc3RcIikge1xuXHQgICAgYWRkciA9IGhvc3RfYWRkci52YWx1ZS52YWx1ZTtcblx0fSBlbHNlIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcInNlcnZlcl9ob3N0XCIpIHtcblx0ICAgIGFkZHIgPSBmbG93X2FkZHIudmFsdWUuc3J2X3ZhbHVlO1xuXHR9IGVsc2UgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiY2xpZW50X2hvc3RcIikge1xuXHQgICAgYWRkciA9IGZsb3dfYWRkci52YWx1ZS5jbGlfdmFsdWU7XG5cdH1cblx0cGFyYW1zLmFsZXJ0X2FkZHIgPSBhZGRyO1xuXHRpZiAocGFnZSA9PSBcImZsb3dcIikge1xuXHQgICAgcGFyYW1zLmZsb3dfYWxlcnRfa2V5ID0gcHJvcHMuYWxlcnQuYWxlcnRfaWQudmFsdWU7XG5cdH0gZWxzZSBpZiAocGFnZSA9PSBcImhvc3RcIikge1xuXHQgICAgcGFyYW1zLmhvc3RfYWxlcnRfa2V5ID0gcHJvcHMuYWxlcnQuYWxlcnRfaWQudmFsdWU7XG5cdH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJkb21haW5cIikge1xuXHRwYXJhbXMuZGVsZXRlX2FsZXJ0cyA9IGZhbHNlO1xuXHRwYXJhbXMuYWxlcnRfZG9tYWluID0gZG9tYWluLnZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImNlcnRpZmljYXRlXCIpIHtcblx0cGFyYW1zLmRlbGV0ZV9hbGVydHMgPSBmYWxzZTtcblx0cGFyYW1zLmFsZXJ0X2NlcnRpZmljYXRlID0gdGxzX2NlcnRpZmljYXRlLnZhbHVlO1xuICAgIH1cbiAgICBjbG9zZSgpO1xuICAgIGVtaXQoJ2V4Y2x1ZGUnLCBwYXJhbXMpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4ud2hpdGVzcGFjZSB7XG4gIG1hcmdpbi1yaWdodDogMC4ycmVtO1xufVxuLmN1c3RvbS13aWR0aCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtaW4td2lkdGg6IDEwMCU7XG59XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuLmV4Y2x1ZGUtZG9tYWluLWNlcnRpZmljYXRlIHtcbiAgbWFyZ2luLXRvcDogMC40cmVtO1xufVxuPC9zdHlsZT5cbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgXG4qL1xuXG5pbXBvcnQgKiBhcyBWdWUgZnJvbSBcInZ1ZVwiO1xuLy8gd2luZG93LlZ1ZSA9IFZ1ZTtcblxuLy8gcGFnZXNcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVN0YXRzIH0gZnJvbSBcIi4vcGFnZS1zdGF0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0VGFibGUgfSBmcm9tIFwiLi9wYWdlLWFzc2V0LXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlUYWJsZSB9IGZyb20gXCIuL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlVGFibGUgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlTWFwIH0gZnJvbSBcIi4vcGFnZS1zZXJ2aWNlLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVBlcmlvZGljaXR5TWFwIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBc3NldE1hcCB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlRGV2aWNlRXhjbHVzaW9ucyB9IGZyb20gXCIuL3BhZ2UtZGV2aWNlLWV4Y2x1c2lvbnMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0VExTIH0gZnJvbSBcIi4vcGFnZS1ob3N0LXRscy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RTU0ggfSBmcm9tIFwiLi9wYWdlLWhvc3Qtc3NoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9tZU1hcCB9IGZyb20gXCIuL3BhZ2UtaG9tZS1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTYW5rZXkgfSBmcm9tIFwiLi9wYWdlLXNhbmtleS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zIH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtYXBwbGljYXRpb25zLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNUcmFmZmljIH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtdHJhZmZpYy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzUGFja2V0cyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLXBhY2tldHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXkgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy1mbG93LXNhbmtleS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RSdWxlcyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1ydWxlcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzUG9ydHMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy1wb3J0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFsZXJ0QW5hbHlzaXMgfSBmcm9tIFwiLi9wYWdlLWFsZXJ0LWFuYWx5c2lzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdE1hcCB9IGZyb20gXCIuL3BhZ2UtaG9zdC1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VWTEFOUG9ydHNTYW5rZXkgfSBmcm9tIFwiLi9wYWdlLXZsYW4tcG9ydHMtc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQWdncmVnYXRlZExpdmVGbG93cyB9IGZyb20gXCIuL3BhZ2UtYWdncmVnYXRlZC1saXZlLWZsb3dzLnZ1ZVwiO1xuXG4vLyBjb21wb25lbnRzXG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0YS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBSYW5nZVBpY2tlciB9IGZyb20gXCIuL3JhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2ltcGxlVGFibGUgfSBmcm9tIFwiLi9zaW1wbGUtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2Fua2V5IH0gZnJvbSBcIi4vc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCI7XG5cbi8vIGxpc3RcbmltcG9ydCB7IGRlZmF1bHQgYXMgTGlzdFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9saXN0LXRpbWVzZXJpZXMudnVlXCI7XG5cbi8vIG1vZGFsc1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRDaGVja0V4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWFkZC1jaGVjay1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBbGVydHNGaWx0ZXIgfSBmcm9tIFwiLi9tb2RhbC1hbGVydHMtZmlsdGVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEZpbHRlcnMgfSBmcm9tIFwiLi9tb2RhbC1maWx0ZXJzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9tb2RhbC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNuYXBzaG90IH0gZnJvbSBcIi4vbW9kYWwtc25hcHNob3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkSG9zdFJ1bGVzIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWhvc3QtcnVsZXMudnVlXCI7XG5cbmxldCBudG9wVnVlID0ge1xuICAgIC8vIHBhZ2VzXG4gICAgUGFnZVN0YXRzOiBQYWdlU3RhdHMsXG4gICAgUGFnZUFzc2V0VGFibGU6IFBhZ2VBc3NldFRhYmxlLFxuICAgIFBhZ2VQZXJpb2RpY2l0eVRhYmxlOiBQYWdlUGVyaW9kaWNpdHlUYWJsZSxcbiAgICBQYWdlU2VydmljZVRhYmxlOiBQYWdlU2VydmljZVRhYmxlLFxuICAgIFBhZ2VTZXJ2aWNlTWFwOiBQYWdlU2VydmljZU1hcCxcbiAgICBQYWdlUGVyaW9kaWNpdHlNYXA6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICBQYWdlQXNzZXRNYXA6IFBhZ2VBc3NldE1hcCxcbiAgICBQYWdlRGV2aWNlRXhjbHVzaW9uczogUGFnZURldmljZUV4Y2x1c2lvbnMsXG4gICAgUGFnZUhvc3RUTFM6IFBhZ2VIb3N0VExTLFxuICAgIFBhZ2VIb3N0U1NIOiBQYWdlSG9zdFNTSCxcbiAgICBQYWdlSG9tZU1hcDogUGFnZUhvbWVNYXAsXG4gICAgUGFnZVNhbmtleTogUGFnZVNhbmtleSxcbiAgICBQYWdlSG9zdFJ1bGVzOiBQYWdlSG9zdFJ1bGVzLFxuICAgIFBhZ2VBbGVydEFuYWx5c2lzOiBQYWdlQWxlcnRBbmFseXNpcyxcbiAgICBQYWdlSG9zdE1hcDogUGFnZUhvc3RNYXAsXG5cbiAgICBQYWdlVkxBTlBvcnRzRmxvd1NhbmtleTpQYWdlVkxBTlBvcnRzU2Fua2V5LFxuXG4gICAgLy8gSG9zdCBkZXRhaWxzIHBhZ2VzXG4gICAgUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zOiBQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnMsXG4gICAgUGFnZUhvc3REZXRhaWxzVHJhZmZpYzogUGFnZUhvc3REZXRhaWxzVHJhZmZpYyxcbiAgICBQYWdlSG9zdERldGFpbHNQYWNrZXRzOiBQYWdlSG9zdERldGFpbHNQYWNrZXRzLFxuICAgIFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXk6IFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXksXG4gICAgUGFnZUhvc3REZXRhaWxzUG9ydHM6IFBhZ2VIb3N0RGV0YWlsc1BvcnRzLFxuXG4gICAgUGFnZUFnZ3JlZ2F0ZWRMaXZlRmxvd3M6IFBhZ2VBZ2dyZWdhdGVkTGl2ZUZsb3dzLFxuXG4gICAgLy8gY29tcG9uZW50c1xuICAgIEFsZXJ0SW5mbzogQWxlcnRJbmZvLFxuICAgIENoYXJ0OiBDaGFydCxcbiAgICBEYXRhdGFibGU6IERhdGF0YWJsZSxcbiAgICBEYXRlVGltZVJhbmdlUGlja2VyOiBEYXRlVGltZVJhbmdlUGlja2VyLFxuICAgIE5ldHdvcmtNYXA6IE5ldHdvcmtNYXAsXG4gICAgUmFuZ2VQaWNrZXI6IFJhbmdlUGlja2VyLFxuICAgIFBhZ2VOYXZiYXI6IFBhZ2VOYXZiYXIsXG4gICAgU2ltcGxlVGFibGU6IFNpbXBsZVRhYmxlLFxuICAgIFNlbGVjdFNlYXJjaDogU2VsZWN0U2VhcmNoLFxuICAgIFRhYkxpc3Q6IFRhYkxpc3QsXG4gICAgU2Fua2V5OiBTYW5rZXksXG4gICAgTm90ZUxpc3Q6IE5vdGVMaXN0LFxuICAgIExvYWRpbmc6IExvYWRpbmcsXG4gICAgXG4gICAgLy8gbGlzdFxuICAgIExpc3RUaW1lc2VyaWVzOiBMaXN0VGltZXNlcmllcyxcblxuICAgIC8vIG1vZGFsc1xuICAgIE1vZGFsOiBNb2RhbCxcbiAgICBNb2RhbEFkZENoZWNrRXhjbHVzaW9uOiBNb2RhbEFkZENoZWNrRXhjbHVzaW9uLFxuICAgIE1vZGFsQWxlcnRzRmlsdGVyOiBNb2RhbEFsZXJ0c0ZpbHRlcixcbiAgICBNb2RhbEZpbHRlcnM6IE1vZGFsRmlsdGVycyxcbiAgICBNb2RhbFRpbWVzZXJpZXM6IE1vZGFsVGltZXNlcmllcyxcbiAgICBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uOiBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uLFxuICAgIE1vZGFsRGVsZXRlQ29uZmlybTogTW9kYWxEZWxldGVDb25maXJtLFxuICAgIE1vZGFsU25hcHNob3Q6IE1vZGFsU25hcHNob3QsXG4gICAgTW9kYWxBZGREZXZpY2VFeGNsdXNpb246IE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uLFxuICAgIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbjogTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uLFxuICAgIE1vZGFsQWRkSG9zdFJ1bGVzOiBNb2RhbEFkZEhvc3RSdWxlcyxcblxuICAgIFZ1ZTogVnVlLFxufTtcbndpbmRvdy5udG9wVnVlID0gbnRvcFZ1ZTtcbiIsInZhciBfMHg0YWU1PVtcIlxceDY4XFx4NzRcXHg2RFxceDZDXCIsXCJcXHg2M1xceDZDXFx4NkZcXHg2RVxceDY1XCIsXCJcXHg2MVxceDcwXFx4NzBcXHg2NVxceDZFXFx4NjRcIixcIlxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHgyRlxceDNFXCIsXCJcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHg2OFxceDcyXFx4M0VcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2RFxceDYxXFx4NzJcXHg2N1xceDY5XFx4NkVcXHgyRFxceDZDXFx4NjVcXHg2NlxceDc0XFx4M0FcXHgyMFxceDYxXFx4NzVcXHg3NFxceDZGXFx4M0JcXHg2RFxceDYxXFx4NzJcXHg2N1xceDY5XFx4NkVcXHgyRFxceDcyXFx4NjlcXHg2N1xceDY4XFx4NzRcXHgzQVxceDIwXFx4NjFcXHg3NVxceDc0XFx4NkZcXHgzQlxceDcwXFx4NjFcXHg2NFxceDY0XFx4NjlcXHg2RVxceDY3XFx4MkRcXHg2Q1xceDY1XFx4NjZcXHg3NFxceDNBXFx4MjBcXHg3NlxceDYxXFx4NzJcXHgyOFxceDJEXFx4MkRcXHg2MlxceDczXFx4MkRcXHg2N1xceDc1XFx4NzRcXHg3NFxceDY1XFx4NzJcXHgyRFxceDc4XFx4MkNcXHgyRVxceDM3XFx4MzVcXHg3MlxceDY1XFx4NkRcXHgyOVxceDNCXFx4NzBcXHg2MVxceDY0XFx4NjRcXHg2OVxceDZFXFx4NjdcXHgyRFxceDcyXFx4NjlcXHg2N1xceDY4XFx4NzRcXHgzQVxceDIwXFx4NzZcXHg2MVxceDcyXFx4MjhcXHgyRFxceDJEXFx4NjJcXHg3M1xceDJEXFx4NjdcXHg3NVxceDc0XFx4NzRcXHg2NVxceDcyXFx4MkRcXHg3OFxceDJDXFx4MkVcXHgzN1xceDM1XFx4NzJcXHg2NVxceDZEXFx4MjlcXHgzQlxceDc3XFx4NjlcXHg2NFxceDc0XFx4NjhcXHgzQVxceDIwXFx4MzFcXHgzMFxceDMwXFx4MjVcXHgzQlxceDIyXFx4M0VcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg3MlxceDZGXFx4NzdcXHgyMFxceDZEXFx4NzRcXHgyRFxceDMyXFx4MjJcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDYzXFx4NkZcXHg2Q1xceDJEXFx4MzFcXHgzMlxceDIwXFx4NjNcXHg2RlxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzNFxceDIwXFx4NzBcXHg2Q1xceDJEXFx4NkRcXHg2NFxceDJEXFx4MzBcXHgyMFxceDc0XFx4NjVcXHg3OFxceDc0XFx4MkRcXHg2M1xceDY1XFx4NkVcXHg3NFxceDY1XFx4NzJcXHgyMFxceDc0XFx4NjVcXHg3OFxceDc0XFx4MkRcXHg2RFxceDY0XFx4MkRcXHg3M1xceDc0XFx4NjFcXHg3MlxceDc0XFx4MjJcXHgzRVxceDNDXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgyMFxceDczXFx4NzRcXHg3OVxceDZDXFx4NjVcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZFXFx4NzRcXHgyRFxceDczXFx4NjlcXHg3QVxceDY1XFx4M0FcXHgyMFxceDJFXFx4MzhcXHgzN1xceDM1XFx4NjVcXHg2RFxceDNCXFx4MjJcXHgzRVxceDNDXFx4NjFcXHgyMFxceDY4XFx4NzJcXHg2NVxceDY2XFx4M0RcXHgyMlxceDY4XFx4NzRcXHg3NFxceDcwXFx4NzNcXHgzQVxceDJGXFx4MkZcXHg3N1xceDc3XFx4NzdcXHgyRVxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkVcXHg2RlxceDcyXFx4NjdcXHgyRlxceDcwXFx4NzJcXHg2RlxceDY0XFx4NzVcXHg2M1xceDc0XFx4NzNcXHgyRlxceDc0XFx4NzJcXHg2MVxceDY2XFx4NjZcXHg2OVxceDYzXFx4MkRcXHg2MVxceDZFXFx4NjFcXHg2Q1xceDc5XFx4NzNcXHg2OVxceDczXFx4MkZcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJGXFx4MjJcXHgyMFxceDc0XFx4NjFcXHg3MlxceDY3XFx4NjVcXHg3NFxceDNEXFx4MjJcXHg1RlxceDYyXFx4NkNcXHg2MVxceDZFXFx4NkJcXHgyMlxceDIwXFx4NjlcXHg2NFxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg3NlxceDY1XFx4NzJcXHg3M1xceDY5XFx4NkZcXHg2RVxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NjFcXHgzRVxceDIwXFx4N0NcXHgyMFxceDNDXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjdcXHg2OVxceDc0XFx4NjhcXHg3NVxceDYyXFx4MjJcXHgzRVxceDNDXFx4MkZcXHg3M1xceDcwXFx4NjFcXHg2RVxceDNFXFx4M0NcXHgyRlxceDczXFx4NzBcXHg2MVxceDZFXFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2M1xceDZGXFx4NkNcXHgyRFxceDMxXFx4MzJcXHgyMFxceDYzXFx4NkZcXHg2Q1xceDJEXFx4NkRcXHg2NFxceDJEXFx4MzRcXHgyMFxceDc0XFx4NjVcXHg3OFxceDc0XFx4MkRcXHg2M1xceDY1XFx4NkVcXHg3NFxceDY1XFx4NzJcXHgyMlxceDNFXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkVcXHg3NFxceDJEXFx4NzNcXHg2OVxceDdBXFx4NjVcXHgzQVxceDIwXFx4MkVcXHgzOFxceDM3XFx4MzVcXHg2NVxceDZEXFx4M0JcXHgyMlxceDIwXFx4NjlcXHg2NFxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg2MVxceDY3XFx4NjVcXHgyMlxceDNFXFx4M0NcXHgyRlxceDczXFx4NzBcXHg2MVxceDZFXFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2M1xceDZGXFx4NkNcXHgyRFxceDMxXFx4MzJcXHgyMFxceDYzXFx4NkZcXHg2Q1xceDJEXFx4NkRcXHg2NFxceDJEXFx4MzRcXHgyMFxceDc0XFx4NjVcXHg3OFxceDc0XFx4MkRcXHg2M1xceDY1XFx4NkVcXHg3NFxceDY1XFx4NzJcXHgyMFxceDc0XFx4NjVcXHg3OFxceDc0XFx4MkRcXHg2RFxceDY0XFx4MkRcXHg2NVxceDZFXFx4NjRcXHgyMFxceDcwXFx4NzJcXHgyRFxceDZEXFx4NjRcXHgyRFxceDMwXFx4MjJcXHgzRVxceDNDXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgyMFxceDczXFx4NzRcXHg3OVxceDZDXFx4NjVcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZFXFx4NzRcXHgyRFxceDczXFx4NjlcXHg3QVxceDY1XFx4M0FcXHgyMFxceDJFXFx4MzhcXHgzN1xceDM1XFx4NjVcXHg2RFxceDNCXFx4MjJcXHgzRVxceDNDXFx4NjlcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjZcXHg2MVxceDczXFx4MjBcXHg2NlxceDYxXFx4MkRcXHg2M1xceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgyMFxceDc0XFx4NjlcXHg3NFxceDZDXFx4NjVcXHgzRFxceDIyXFx4NTNcXHg2NVxceDcyXFx4NzZcXHg2NVxceDcyXFx4MjBcXHg1NFxceDY5XFx4NkRcXHg2NVxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NjlcXHgzRVxceDIwXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjRcXHgyRFxceDY5XFx4NkVcXHg2Q1xceDY5XFx4NkVcXHg2NVxceDJEXFx4NjJcXHg2Q1xceDZGXFx4NjNcXHg2QlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg2NVxceDc0XFx4NzdcXHg2RlxceDcyXFx4NkJcXHgyRFxceDYzXFx4NkNcXHg2RlxceDYzXFx4NkJcXHgyMlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4MjBcXHg1NVxceDU0XFx4NDNcXHgyMFxceDdDXFx4MjBcXHg1NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcXHgzQVxceDIwXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjRcXHgyRFxceDY5XFx4NkVcXHg2Q1xceDY5XFx4NkVcXHg2NVxceDJEXFx4NjJcXHg2Q1xceDZGXFx4NjNcXHg2QlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg2NVxceDc0XFx4NzdcXHg2RlxceDcyXFx4NkJcXHgyRFxceDc1XFx4NzBcXHg3NFxceDY5XFx4NkRcXHg2NVxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVwiLFwiXFx4NkVcXHg3NFxceDZGXFx4NzBcXHg2RVxceDY3XFx4NUZcXHg3MlxceDY1XFx4NkNcXHg2NVxceDYxXFx4NzNcXHg2NVxceDVGXFx4NjlcXHg2RVxceDY2XFx4NkZcIixcIlxceDdDXCIsXCJcXHg3M1xceDcwXFx4NkNcXHg2OVxceDc0XCIsXCJcXHgyM1xceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDc2XFx4NjVcXHg3MlxceDczXFx4NjlcXHg2RlxceDZFXCIsXCJcXHgyM1xceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDY3XFx4NjlcXHg3NFxceDY4XFx4NzVcXHg2MlwiLFwiXFx4QTlcXHgyMFxceDMxXFx4MzlcXHgzOVxceDM4XFx4MkRcIixcIlxceDZFXFx4NzRcXHg2RlxceDcwXFx4NUZcXHg2MVxceDY3XFx4NjVcXHg1RlxceDc0XFx4NkZcIixcIlxceDIwXFx4MkRcXHgyMFxceDZFXFx4NzRcXHg2RlxceDcwXCIsXCJcXHgyM1xceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDYxXFx4NjdcXHg2NVwiLFwiXFx4NjJcXHg2RlxceDY0XFx4NzlcXHgyMFxceDY0XFx4NjlcXHg3NlxceDIwXFx4NkRcXHg2MVxceDY5XFx4NkVcIixcIlxceDcwXFx4NjFcXHg3MlxceDY1XFx4NkVcXHg3NFwiLFwiXFx4MjNcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NjVcXHg3NFxceDc3XFx4NkZcXHg3MlxceDZCXFx4MkRcXHg2M1xceDZDXFx4NkZcXHg2M1xceDZCXCIsXCJcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NzVcXHg3MFxceDc0XFx4NjlcXHg2RFxceDY1XCIsXCJcXHg3MlxceDY1XFx4NkRcXHg2RlxceDc2XFx4NjVcIixcIlxceDZDXFx4NkZcXHg2M1xceDYxXFx4NkNcXHg3NFxceDY5XFx4NkRcXHg2NVwiLFwiXFx4NzVcXHg3MFxceDc0XFx4NjlcXHg2RFxceDY1XCIsXCJcXHg2M1xceDY4XFx4NjFcXHg3MlxceDc0XFx4NUZcXHg2M1xceDZGXFx4NkNcXHg2RlxceDcyXFx4NzNcIixcIlxceDZGXFx4NkVcXHg1RlxceDYzXFx4NzVcXHg3M1xceDc0XFx4NkZcXHg2RFxceDVGXFx4NjVcXHg3NlxceDY1XFx4NkVcXHg3NFwiLFwiXFx4NzJcXHg2NVxceDYxXFx4NjRcXHg3OVwiXTtmdW5jdGlvbiBpKCl7Y29uc3QgXzB4NjQ4Y3gyPShfMHg2NDhjeDMpPT57cmV0dXJuICQoXzB4NGFlNVszXSlbXzB4NGFlNVsyXV0oJChfMHg2NDhjeDMpW18weDRhZTVbMV1dKCkpW18weDRhZTVbMF1dKCl9O2xldCBfMHg2NDhjeDQ9XzB4NGFlNVs0XTtjb25zdCBfMHg2NDhjeDU9KCk9PntsZXQgXzB4NjQ4Y3g2PSQoXzB4NjQ4Y3g0KTtsZXQgXzB4NjQ4Y3g3PWkxOG4oXzB4NGFlNVs1XSk7bGV0IF8weDY0OGN4OD1fMHg2NDhjeDdbXzB4NGFlNVs3XV0oXzB4NGFlNVs2XSk7JChfMHg0YWU1WzhdLF8weDY0OGN4NilbXzB4NGFlNVswXV0oXzB4NjQ4Y3g4WzBdKTskKF8weDRhZTVbOV0sXzB4NjQ4Y3g2KVtfMHg0YWU1WzBdXShfMHg2NDhjeDhbMV0pO2xldCBfMHg2NDhjeDk9YCR7XzB4NGFlNVsxMF19JHtpMThuKF8weDRhZTVbMTFdKX0ke18weDRhZTVbMTJdfWA7JChfMHg0YWU1WzEzXSxfMHg2NDhjeDYpW18weDRhZTVbMF1dKF8weDY0OGN4OSk7cmV0dXJuIF8weDY0OGN4MihfMHg2NDhjeDYpfTtjb25zdCBfMHg2NDhjeGE9XzB4NjQ4Y3g1KCk7Y29uc3QgXzB4NjQ4Y3hiPSgpPT57JChfMHg0YWU1WzE0XSlbXzB4NGFlNVsyXV0oXzB4NjQ4Y3hhKX07XzB4NjQ4Y3hiKCk7Y29uc3QgXzB4NjQ4Y3hjPSgpPT57cmV0dXJuICQoXzB4NGFlNVsxNl0pW18weDRhZTVbMTVdXSgpW18weDRhZTVbMTVdXSgpW18weDRhZTVbMTVdXSgpW18weDRhZTVbMTVdXSgpW18weDRhZTVbMTVdXSgpfTtjb25zdCBfMHg2NDhjeGQ9KCk9PntsZXQgXzB4NjQ4Y3hlPV8weDY0OGN4YygpO2lmKF8weDY0OGN4ZT09IG51bGwpe3JldHVybiBmYWxzZX07bGV0IF8weDY0OGN4Zj1fMHg2NDhjeGVbXzB4NGFlNVsxXV0oKTskKF8weDRhZTVbMTZdLF8weDY0OGN4ZilbXzB4NGFlNVswXV0oXzB4NGFlNVsxN10pOyQoXzB4NGFlNVsxOF0sXzB4NjQ4Y3hmKVtfMHg0YWU1WzBdXShfMHg0YWU1WzE3XSk7Y29uc3QgXzB4NjQ4Y3gxMD1fMHg2NDhjeDIoXzB4NjQ4Y3hmKTtpZihfMHg2NDhjeGEhPT0gXzB4NjQ4Y3gxMCl7cmV0dXJuIGZhbHNlfTtyZXR1cm4gdHJ1ZX07Y29uc3QgXzB4NjQ4Y3gxMT0oKT0+e2xldCBfMHg2NDhjeGU9XzB4NjQ4Y3hjKCk7aWYoXzB4NjQ4Y3hlIT0gbnVsbCl7XzB4NjQ4Y3hlW18weDRhZTVbMTldXSgpfX07Y29uc3QgXzB4NjQ4Y3gxMj0oXzB4NjQ4Y3gxMyk9PnskKF8weDRhZTVbMTZdKVtfMHg0YWU1WzBdXShfMHg2NDhjeDEzW18weDRhZTVbMjBdXSk7JChfMHg0YWU1WzE4XSlbXzB4NGFlNVswXV0oXzB4NjQ4Y3gxM1tfMHg0YWU1WzIxXV0pfTtudG9wbmdfZXZlbnRzX21hbmFnZXJbXzB4NGFlNVsyM11dKF8weDRhZTVbMjJdLG50b3BuZ19jdXN0b21fZXZlbnRzLkdFVF9JTlRFUkZBQ0VfREFUQSwoXzB4NjQ4Y3gxMyk9PntpZihfMHg2NDhjeGQoKT09IGZhbHNlKXtfMHg2NDhjeDExKCk7XzB4NjQ4Y3hiKCl9O18weDY0OGN4MTIoXzB4NjQ4Y3gxMyl9KX0kKGRvY3VtZW50KVtfMHg0YWU1WzI0XV0oKCk9PntyZXR1cm4gaSgpfSlcbiJdLCJuYW1lcyI6WyJEYXRlIiwicHJvdG90eXBlIiwiZm9ybWF0IiwibyIsInRoaXMiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiTWF0aCIsImZsb29yIiwiUyIsImdldE1pbGxpc2Vjb25kcyIsImsiLCJ0ZXN0IiwicmVwbGFjZSIsIlJlZ0V4cCIsIiQxIiwiZ2V0RnVsbFllYXIiLCJzdWJzdHIiLCJsZW5ndGgiLCJqUXVlcnkiLCJmbiIsImV4dGVuZCIsImRpc2FibGUiLCJzdGF0ZSIsImVhY2giLCIkdGhpcyIsIiQiLCJpcyIsImRpc2FibGVkIiwidG9nZ2xlQ2xhc3MiLCJOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSIsIlJFR0VYRVMiLCJpcHY0IiwiU3RyaW5nIiwicmF3IiwiaXB2NiIsImRvbWFpbk5hbWUiLCJwb3J0IiwibGF0ZW5jeSIsInVybCIsImVtYWlsVXJsIiwibWFjQWRkcmVzcyIsImhvc3RuYW1lIiwidXNlcm5hbWUiLCJzaW5nbGV3b3JkIiwiZW1haWwiLCJodHRwcyIsInRva2VuIiwic2NvcmUiLCJ0ZWxlZ3JhbV9jaGFubmVsIiwicGFzc3dvcmQiLCJ0bHNfY2VydGlmaWNhdGUiLCJkb21haW5fbmFtZV9ub3Rfc3RyaWN0Iiwibm9uX3F1b3RlZF90ZXh0IiwiTnRvcFV0aWxzIiwic3RhdGljIiwidGltZSIsInRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJzdWJzdHJpbmciLCJyZXF1ZXN0IiwiZmV0Y2giLCJodHRwX3ByZWZpeCIsImpzb24iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJyYyIsInJjX3N0ciIsImRhdGFQYXR0ZXJuIiwiZGF0YSIsIndhcm4iLCJwYXR0ZXJuIiwic3BsaXQiLCJtYXAiLCJwIiwidG9TdHJpbmciLCJqb2luIiwiYXR0ciIsInJlbW92ZUF0dHIiLCJtYWMiLCJ2YWx1ZSIsIndoYXQiLCJvcHRpb25hbF9tYXNrIiwiaXBfYWRkciIsImVsZW1zIiwibWFzayIsImlzTnVtZXJpYyIsInBhcnNlSW50IiwiaXNfZ29vZF9pcHY0IiwidHlwZSIsImFkZHJlc3MiLCJpc19nb29kX2lwdjYiLCJiaXRzIiwic2l6ZXMiLCJiaXRzX2xvZzEwMDAiLCJsb2ciLCJpIiwiaXNOYU4iLCJyb3VuZCIsInBvdyIsInJldCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiZXBzIiwicmVzIiwic2NhbGVWYWx1ZSIsImV4cG9ydHMiLCJleHBvcnRzX2xhYmVsIiwiaTE4bl9leHQiLCJ0b0xvd2VyQ2FzZSIsImJ5dGVzIiwiZmJpdHMiLCJwcHMiLCJmcHMiLCJtcHMiLCJtcyIsInVuZGVmaW5lZCIsInZhbCIsImFwcyIsIndoZW4iLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiYWN0dWFsIiwiYmVmb3JlIiwic3RyIiwibGVuIiwibnVtIiwia2lsb2J5dGUiLCJtZWdhYnl0ZSIsImdpZ2FieXRlIiwidGVyYWJ5dGUiLCJjdXJyZW50IiwibGFzdCIsIndpdGhDb2xvciIsImVuYWJsZWQiLCJmaW5kIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInByb3AiLCJ0b2dnbGVBbGxUYWJzIiwicyIsIm5TdHIiLCJ4IiwieDEiLCJ4MiIsInJneCIsInNjYWxlIiwiZGVjaW1hbHMiLCJmYWN0b3IiLCJuIiwiYWRkQ29tbWFzIiwic2Vjb25kcyIsImRheXMiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWMiLCJtc2ciLCJtc2dfYXJyYXkiLCJ5ZWFycyIsInB1c2giLCJtc2VjIiwic2Vjb25kc1RvVGltZSIsImVwb2NoIiwiZCIsInRkaWZmIiwiZ2V0VGltZSIsImRpZmZfZXBvY2giLCJkZWZhdWx0cyIsIm92ZXJyaWRlIiwiZm9ybSIsInBhcmFtcyIsImhhc093blByb3BlcnR5IiwiYXBwZW5kVG8iLCJob3N0X2tleSIsIm5hdl9vYmplY3QiLCJkZWZhdWx0X3RhYiIsImNsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0Iiwib24iLCJpZCIsInRhcmdldCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJ0YWIiLCJuYW1lIiwiY29udGV4dCIsIl9hZGRfZmluZF9ob3N0X2xpbmsiLCJpcCIsIm5ldHdvcmsiLCJzbm1wX3BvcnRfaWR4IiwiYXNuIiwiaHRtbF90YWciLCJ0aW1lc3RhbXAiLCJodG1sIiwibG9jYWxpemVkIiwiZDMiLCJob3N0IiwicXVlcnlTdHJpbmciLCJxdWVyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImN1cl9wYXJhbXMiLCJwYXJzZVF1ZXJ5Iiwic2VhcmNoIiwibmV3X3BhcmFtcyIsIm5ld19xdWVyeSIsInBhcmFtIiwicHJvdG9jb2wiLCJwYXRobmFtZSIsInN0YXR1c19jb2RlIiwic3RhdHVzX3RleHQiLCIkZXJyb3JfbGFiZWwiLCJpc19kaWZmZXJlbnQiLCJtZXNzYWdlIiwicmVxdWVzdF9mYWlsZWRfbWVzc2FnZSIsInRleHQiLCJzaG93IiwiYWxlcnQiLCJsb2FkQ29uZmlnWEhSIiwiaGlkZSIsIiRidXR0b24iLCJmaWxlIiwiZmlsZXMiLCJub19maWxlIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc1RleHQiLCJvbmxvYWQiLCJqc29uQ29uZmlndXJhdGlvbiIsIkpTT04iLCJwYXJzZSIsInJlc3VsdCIsInJlc3RfY29uc3RzIiwicmVzcG9uc2VKU09OIiwiZG9uZSIsInJlc3BvbnNlIiwic3RhdHVzIiwieGhyIiwic3VjY2Vzc0NhbGxiYWNrIiwiYm9keSIsIm1hbmFnZV9jb25maWd1cmF0aW9ucyIsIm1lc3NhZ2dlcyIsImltcG9ydF9hbGxfc3VjY2VzcyIsImltcG9ydF9zdWNjZXNzIiwiVG9hc3RVdGlscyIsInNob3dUb2FzdCIsImxldmVsIiwidGl0bGUiLCJzdWNjZXNzIiwiZGVsYXkiLCJtb2RhbCIsImZhaWwiLCJmYWlsdXJlQ2FsbGJhY2siLCJGQUlMRURfSFRUUF9SRVFVRVNUIiwiYWx3YXlzIiwic2VyaWFsaXplZEFycmF5Iiwic2VyaWFsaXplZCIsImZvckVhY2giLCJvYmoiLCJpbmNsdWRlcyIsInRyaW0iLCJmb3JtU2VsZWN0b3IiLCJpbnB1dCIsInJlc2V0IiwidXJpIiwib3B0aW9ucyIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJjb25maWciLCJzaWduYWwiLCJzZXRUaW1lb3V0IiwiYWJvcnQiLCJ0aGVuIiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJjYXRjaCIsImFjdGlvbiIsImNzcmYiLCJmYWlsdXJlIiwiZW1wdHkiLCJwb3N0IiwiYXJyYXkiLCJsaW1pdCIsImFuZF94X21vcmUiLCJoYXNSZWZlcmVyIiwicmVmZXJlclBhcmFtcyIsIlVSTCIsIk9iamVjdCIsImVudHJpZXMiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJyZWZVcmwiLCJocmVmIiwicG9vbElkIiwicG9vbFR5cGUiLCJnZXRQb29sTGluayIsInBvb2wiLCJyc3AiLCIkZWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0Iiwia2V5IiwiZ2VuZXJhdGVTY2FsZUVsZW1lbnRLZXkiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiaWRlbnRpZmljYXRvciIsInBhZ2UiLCJlbGVtZW50SWQiLCJjdXJyZW50VmFsdWUiLCJnZXRJdGVtIiwiJGZpZWxkIiwiaXRlbSIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJhcHBlbmRDaGlsZCIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwicmVtb3ZlQ2hpbGQiLCJ0b29sdGlwIiwidCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiaW5uZXJUZXh0IiwibGFiZWwiLCJsYXN0X2NoYXIiLCJzaG9ydGVuZWRfbGFiZWwiLCJsYXN0X2luZGV4IiwibGFzdEluZGV4T2YiLCJyZXF1ZXN0ZWRfbGFiZWwiLCJhIiwiYiIsIm5hbWVBIiwibmFtZUIiLCJwZXJjZW50YWdlIiwicGVyY2VudGFnZV8xIiwicGVyY2VudGFnZV8yIiwibGFiZWxfMSIsImxhYmVsXzIiLCJzZXJpZXMiLCJzZXJpZXNJbmRleCIsImRhdGFQb2ludEluZGV4IiwidyIsInNlcmllIiwieV92YWx1ZSIsInhheGlzIiwieWF4aXMiLCJldmVudCIsImNoYXJ0Q29udGV4dCIsImJhc2VfdXJsIiwiZGVmYXVsdF91cmwiLCJzdGFydF91cmwiLCJtZXRhIiwidXJsX3F1ZXJ5IiwieF92YWx1ZSIsImRhdGF0YWJsZUFkZEVtcHR5Um93IiwidGFibGUiLCJlbXB0eV9zdHIiLCJjb2x1bW5zIiwiZmlsdGVyIiwiY3NzIiwiZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXMiLCJkYXRhdGFibGVJc0VtcHR5IiwiZGF0YXRhYmxlR2V0QnlGb3JtIiwicGFyZW50IiwiZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2siLCJ0ZF9pZHgiLCJic19jbGFzcyIsImNhbGxiYWNrX3N0ciIsImxpbmsiLCJ2aXNpYmxlIiwiYXBwZW5kIiwiZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXgiLCJjb2x1bW5fa2V5IiwiZmluZEluZGV4IiwiZmllbGQiLCJpbml0RGF0YVBhdHRlcm5zIiwiZ3JhcGhfZGl2X2lkIiwibGlua3MiLCJub2RlcyIsIl9saW5rIiwic291cmNlX3BpZCIsInNvdXJjZSIsInNvdXJjZV9uYW1lIiwic291cmNlX3R5cGUiLCJwaWQiLCJ0YXJnZXRfcGlkIiwidGFyZ2V0X25hbWUiLCJ0YXJnZXRfdHlwZSIsImNvbG9yIiwiY2F0ZWdvcnkxMCIsImZvcmNlIiwibGF5b3V0IiwidmFsdWVzIiwic2l6ZSIsImxpbmtEaXN0YW5jZSIsImNoYXJnZSIsInBhdGgiLCJsaW5rQXJjIiwiY2lyY2xlIiwidHJhbnNmb3JtIiwic3RhcnQiLCJzdmciLCJzZWxlY3RBbGwiLCJlbnRlciIsImNhbGwiLCJkcmFnIiwiZHgiLCJkeSIsInkiLCJkciIsInNxcnQiLCJ6b29tX2xldmVsIiwiTW9kYWxIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwiZGlhbG9nIiwiY2xvc2VzdCIsImRvbnREaXNhYmxlU3VibWl0Iiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibGlzdCIsImJpbmRGb3JtVmFsaWRhdGlvbiIsInRvZ2dsZUZvcm1TdWJtaXNzaW9uIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJpbml0aWFsU3RhdGUiLCJjdXJyZW50U3RhdGUiLCJmaXJzdENsb3NlQXR0ZW1wdCIsImlzU3VibWl0dGluZyIsImNyZWF0ZUZvcm1TbmFwc2hvdCIsInNuYXBzaG90IiwiaW5wdXRzIiwiaGlkZGVuIiwiY29tcGFyZUZvcm1TbmFwaHNvdCIsInMxIiwiczIiLCJkZWxlZ2F0ZU1vZGFsQ2xvc2luZyIsInNlbGYiLCJvZmYiLCJyZXBvcnRWYWxpZGl0eSIsInNlbGVjdG9yIiwiJGhpZGRlbiIsImNsZWFuRm9ybSIsImZpbGxGb3JtTW9kYWwiLCJsb2FkRm9ybURhdGEiLCJpbnZva2VNb2RhbEluaXQiLCJvbk1vZGFsSW5pdCIsInBhcmVudHMiLCJvbk1vZGFsU2hvdyIsImRlbGVnYXRlUmVzZXRCdXR0b24iLCJkZWxlZ2F0ZVN1Ym1pdCIsInN1Ym1pdEhhbmRsZXIiLCJpc1N5bmNSZXF1ZXN0Iiwic3RvcFByb3BhZ2F0aW9uIiwibWFrZVJlcXVlc3QiLCJhc3luYyIsIiRpbnB1dCIsInRpbWVvdXRJZCIsInZhbGlkSW5wdXQiLCJ2YWxpZGF0aW9uIiwicmVzb2x2ZUROUyIsIm1hdGNoIiwiJHNwaW5uZXIiLCJzZXRDdXN0b21WYWxpZGl0eSIsInJjX3N0cl9ociIsInZhbGlkSG9zdG5hbWUiLCJjYW5ub3RCZUVtcHR5IiwiaXNJbnB1dEVtcHR5IiwidmFsaWRhdGlvbkVtcHR5TWVzc2FnZSIsIm1pc3NpbmdfZmllbGQiLCJ2YWxpZGl0eSIsInBhdHRlcm5NaXNtYXRjaCIsInZhbGlkYXRpb25NZXNzYWdlIiwiaW52YWxpZF9maWVsZCIsInJhbmdlT3ZlcmZsb3ciLCJyYW5nZU92ZXJmbG93TWVzc2FnZSIsInJhbmdlVW5kZXJmbG93IiwicmFuZ2VVbmRlcmZsb3dNZXNzYWdlIiwiY2hlY2tWYWxpZGF0aW9uIiwiaXNWYWxpZCIsIm1lc3NhZ2VUb1Nob3ciLCIkZXJyb3IiLCJyZW1vdmUiLCJjbGVhclRpbWVvdXQiLCJnZXRNb2RhbElEIiwiaWR4IiwidmFsaWQiLCIkZmVlZGJhY2tMYWJlbCIsInN1Ym1pdEJ1dHRvbiIsImRhdGFUb1NlbmQiLCJiZWZvcmVTdW1iaXQiLCJzdWJtaXRPcHRpb25zIiwiZW5kcG9pbnQiLCJtZXRob2QiLCJhamF4IiwiZGF0YVR5cGUiLCJjb250ZW50VHlwZSIsImdldCIsInRleHRTdGF0dXMiLCJyZXNldEFmdGVyU3VibWl0Iiwib25TdWJtaXRTdWNjZXNzIiwianF4aHIiLCJlcnJvclRocm93biIsIm9uU3VibWl0RXJyb3IiLCJyZXNldEJ1dHRvbiIsImRlZmF1bHRWYWx1ZXMiLCJzZXJpYWxpemVGb3JtQXJyYXkiLCJzZXJpYWxpemVBcnJheSIsInR5cGVzIiwibm9fZm9ybWF0dGluZyIsInVtIiwic3RlcCIsImRlY2ltYWwiLCJzY2FsZV92YWx1ZXMiLCJudW1iZXIiLCJhYnNvbHV0ZV92YWx1ZSIsImJwcyIsIm1heF92YWx1ZSIsImdldFVuaXRNZWFzdXJlTGVuIiwic3BhY2VWYWx1ZSIsInNwYWNlVW0iLCJtYXgiLCJnZXRTY2FsZUZhY3RvckluZGV4IiwidHlwZU9wdGlvbnMiLCJtZWFzdXJlcyIsImdldEZvcm1hdHRlciIsImFic29sdXRlVmFsdWUiLCJzY2FsZUZhY3RvckluZGV4IiwibmVnYXRpdmVWYWx1ZSIsImZvcm1hdHRlclV0aWxzIiwiZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzIiwiY29sdW1uX2lkIiwicmVmcmVzaF9pbnRlcnZhbCIsInRyZW5kX2NvbHVtbnMiLCIkZHQiLCJyb3dzIiwicmVzdWx0c2V0Iiwib2xkX3RpbWVyIiwib2xkX3JlcSIsImNsZWFySW50ZXJ2YWwiLCJyZW1vdmVEYXRhIiwiaWRzIiwiaWRfdG9fcm93Iiwicm93IiwiZGF0YV9pZCIsImN1c3RvbV9ob3N0cyIsImZpcnN0X2xvYWQiLCJfcHJvY2Vzc19yZXN1bHQiLCJyb3dfaWR4Iiwicm93X2h0bWwiLCJyb3dfdGRzIiwiY2VsbCIsIiRjZWxsIiwib2xkX3ZhbCIsInRyZW5kX3ZhbHVlX2Zvcm1hdHRlciIsIm5ld192YWwiLCJhcnJvd3MiLCJkcmF3VHJlbmQiLCJzZXRJbnRlcnZhbCIsImNhY2hlIiwiZGF0YXRhYmxlRm9yRWFjaFJvdyIsImNhbGxiYWNrcyIsInJvd19pIiwiYmluZCIsImRhdGF0YWJsZVJlbW92ZUVtcHR5Um93IiwiZGF0YXRhYmxlVW5kb0FkZFJvdyIsIm5ld19yb3ciLCJidF90b19lbmFibGUiLCJheXNVcGRhdGVGb3JtIiwiZHQiLCJkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayIsImRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrIiwiZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlIiwidHJfb2JqIiwiYWRkZWRfcm93c19wcmVmaXgiLCJkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuIiwidGhpc19zZWxlY3QiLCJzZWxlY3Rvcl9mbiIsImNhbGxiYWNrIiwib3RoZXIiLCJkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMiLCJvcHRpb25fb2JqIiwiZW5hYmxlIiwic2VsZWN0X29iaiIsInNob3VsZF9yZXNldCIsImZpcnN0IiwiZGF0YXRhYmxlT25TZWxlY3RFbnRyeUNoYW5nZSIsImNoYW5nZV9jYWxsYmFjayIsIm9sZF92YWx1ZSIsIm5ld192YWx1ZSIsIm90aGVycyIsInBhcmFtc0V4dGVuZCIsIm9uX2NoYW5nZSIsIm5vb3AiLCJ0cmlnZ2VyIiwiZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeSIsImRhdGF0YWJsZUlzTGFzdFBhZ2UiLCJsYXN0cGFnZSIsImhhc0NsYXNzIiwiZGF0YXRhYmxlR2V0Q29sdW1uIiwiaWRfa2V5IiwiaWRfdmFsdWUiLCJtb2RhbEhhbmRsZXIiLCJhcmdzIiwibG9hZGVkRGF0YSIsInNlbnQiLCJvbk1vZGFsUmVzZXQiLCJkZWZhdWx0RGF0YSIsIm1oIiwiZWJwZlV0aWxzIiwibnRvcEZvcm1hdHRlclV0aWxzIiwiZmlsdGVyc190b192YWxpZGF0ZSIsIm1ha2VVbmlxdWVWYWxpZGF0b3IiLCJpdGVtc19mdW5jdGlvbiIsImNtcF9uYW1lIiwiY291bnQiLCJtZW1iZXJWYWx1ZVZhbGlkYXRvciIsIm1lbWJlciIsImlzX21hY19hZGRyZXNzIiwiaXNfbmV0d29ya19tYXNrIiwibWFrZVBhc3N3b3JkUGF0dGVyblZhbGlkYXRvciIsInBhc3N3b3JkTWF0Y2hWYWxpZGF0b3IiLCJvdGhlcl9pbnB1dCIsIm5vdCIsInBvb2xuYW1lVmFsaWRhdG9yIiwicGFzc3dvcmRNYXRjaFJlY2hlY2siLCJpdGVtcyIsIm5vdF9lbXB0eSIsImhvc3RPck1hY1ZhbGlkYXRvciIsImlwQWRkcmVzc1ZhbGlkYXRvciIsImJwZlZhbGlkYXRvciIsImZpbHRlcl9maWVsZCIsInN5bmMiLCJhamF4X29iaiIsInRpbWVyIiwic3VibWl0X3JlbWluZCIsImxhc3RfdmFsIiwic2VuZEFqYXgiLCJmaW5hbGx5X2NoZWNrIiwibnRvcG5nX3N5bmMiLCJjb21wb25lbnRzX3JlYWR5Iiwic3Vic2NyaWJlcnMiLCJyZWFkeSIsImNvbXBvbmVudF9uYW1lIiwicmVzb2x2ZSIsIm9uX3JlYWR5IiwiUHJvbWlzZSIsInJlamV2dCIsImNvbXBsZXRlZCIsIm50b3BuZ191dGlsaXR5IiwiZ2xvYmFsX2h0dHBfaGVhZGVycyIsImlzX2FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiaXNfb2JqZWN0IiwiY2xvbmUiLCJvYmplY3RfdG9fYXJyYXkiLCJjaGVja19hbmRfc2V0X2RlZmF1bHRfaW50ZXJ2YWxfdGltZSIsInNldF9zdGF0dXMiLCJudG9wbmdfdXJsX21hbmFnZXIiLCJnZXRfdXJsX2VudHJ5IiwiZGVmYXVsdF9lcG9jaF9iZWdpbiIsIk51bWJlciIsIm5vdyIsImRlZmF1bHRfZXBvY2hfZW5kIiwic2V0X2tleV90b191cmwiLCJmcm9tX3V0Y19zX3RvX3NlcnZlcl9kYXRlIiwidXRjX3NlY29uZHMiLCJ1dGMiLCJsb2NhbF9vZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsInNlcnZlcl9vZmZzZXQiLCJtb21lbnQiLCJ0eiIsIm50b3Bfem9uZWluZm8iLCJfb2Zmc2V0IiwiZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0IiwidXRjX21zIiwibnRvcG5nX3N0YXR1c19tYW5hZ2VyIiwiZ2V0X3N0YXR1cyIsImVwb2NoX2JlZ2luIiwiZXBvY2hfZW5kIiwiYmVnaW4iLCJtIiwiY29weV9vYmplY3Rfa2V5cyIsInNvdXJjZV9vYmoiLCJkZXN0X29iaiIsInJlY3Vyc2l2ZV9vYmplY3QiLCJzZXRfaHR0cF9nbG9iYWxzX2hlYWRlcnMiLCJoZWFkZXJzIiwiaHR0cF9yZXF1ZXN0IiwidGhyb3dfZXhjZXB0aW9uIiwibm90X3Vud3JhcCIsImpzb25fcmVzIiwiZG93bmxvYWRfVVJJIiwiZG93bmxvYWQiLCJnZXRfcmFuZG9tX3N0cmluZyIsInJhbmRvbSIsInN0cmluZ19oYXNoX2NvZGUiLCJjaHIiLCJjaGFyQ29kZUF0IiwibW9kIiwiZ2xvYWJhbF9zdGF0dXMiLCJub3RpZnlfc3Vic2NyaWJlcnMiLCJza2lwX2lkIiwiZl9vbl9jaGFuZ2UiLCJ1cGRhdGVfc3Vic2NyaWJlcnMiLCJvbl9zdGF0dXNfY2hhbmdlIiwiZ2V0X2luaXRfbm90aWZ5IiwicmVwbGFjZV9zdGF0dXMiLCJyZWxwbGFjZV9nbG9iYWxfc3RhdHVzIiwiYWRkX29ial90b19zdGF0dXMiLCJuZXdfc3RhdHVzIiwiYWRkX3ZhbHVlX3RvX3N0YXR1cyIsIm50b3BuZ19wYXJhbXNfdXJsX3NlcmlhbGl6ZXIiLCJjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXIiLCJnZXRfdXJsX3BhcmFtcyIsImdldF91cmxfc2VhcmNoX3BhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImdldF91cmxfZW50cmllcyIsInBhcmFtX25hbWUiLCJnZXRfdXJsX29iamVjdCIsInJlbG9hZF91cmwiLCJyZWxvYWQiLCJnb190b191cmwiLCJwdXNoU3RhdGUiLCJyZXBsYWNlX3VybCIsInVybF9wYXJhbXMiLCJyZXBsYWNlX3VybF9hbmRfcmVsb2FkIiwic2VyaWFsaXplX3BhcmFtIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2V0X2N1c3RvbV9rZXlfc2VyaWFsaXplciIsImZfZ2V0X3VybF9wYXJhbSIsIm9ial90b191cmxfcGFyYW1zIiwiZGVmYXVsdF9zZXJpYWxpemVyIiwic2VyaWFsaXplciIsImRlbGV0ZV9wYXJhbXMiLCJwYXJhbXNfa2V5Iiwic2VhcmNoX3BhcmFtcyIsImRlbGV0ZSIsImFkZF9vYmpfdG9fdXJsIiwidXJsX3BhcmFtc19vYmoiLCJuZXdfdXJsX3BhcmFtcyIsIm5ld19lbnRyaWVzIiwibmV3X3VybCIsIm50b3BuZ19ldmVudHMiLCJFUE9DSF9DSEFOR0UiLCJGSUxURVJTX0NIQU5HRSIsIm50b3BuZ19ldmVudHNfY29tcGFyZSIsIm9sZF9zdGF0dXMiLCJmaWx0ZXJzIiwic29tZSIsImZfbmV3IiwiZl9vbGQiLCJudG9wbmdfZXZlbnRzX21hbmFnZXIiLCJldmVudHNfbWFuYWdlcl9pZCIsImV2ZW50c19zdWJzY3JpYmVycyIsImV2ZW50X25hbWUiLCJmX2NvbXBhcmUiLCJlbWl0Iiwib25fZXZlbnQiLCJmX29uX2V2ZW50IiwiZW1pdF9jdXN0b21fZXZlbnQiLCJvbl9jdXN0b21fZXZlbnQiLCJlbWl0X2V2ZW50Iiwib25fZXZlbnRfY2hhbmdlIiwiUGllQ2hhcnQiLCJ1cGRhdGVfdXJsIiwidW5pdHMiLCJyZWZyZXNoIiwicGllSW50ZXJ2YWwiLCJzdHJlYWtlckRhdGFBZGRlZCIsInBhdGhzIiwibGluZXMiLCJ2YWx1ZUxhYmVscyIsIm5hbWVMYWJlbHMiLCJwaWVEYXRhIiwib2xkUGllRGF0YSIsImZpbHRlcmVkUGllRGF0YSIsImgiLCJpciIsInRleHRPZmZzZXQiLCJ0d2VlbkR1cmF0aW9uIiwiciIsImRvbnV0IiwicGllIiwiY2F0ZWdvcnkyMCIsImFyYyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJ2aXMiLCJhcmNfZ3JvdXAiLCJsYWJlbF9ncm91cCIsImNlbnRlcl9ncm91cCIsInRvdGFsVW5pdHMiLCJ0b3RhbFZhbHVlIiwiY3JlYXRlX3BpZV9jaGFydCIsImNvbXBhcmVfYnlfbGFiZWwiLCJwaWVUd2VlbiIsInMwIiwiZTAiLCJpbnRlcnBvbGF0ZSIsInJlbW92ZVBpZVR3ZWVuIiwiUEkiLCJ0ZXh0VHdlZW4iLCJpbnRlcnBvbGF0ZU51bWJlciIsImNvcyIsInNpbiIsInVwZGF0ZSIsImNvbnRlbnQiLCJwYXJzZWRfY29udGVudCIsInBhcnNlSlNPTiIsInNvcnQiLCJ0b3RhbE9jdGV0cyIsImZpbHRlckRhdGEiLCJpbmRleCIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImF0dHJUd2VlbiIsImV4aXQiLCJ1cGRhdGVfcGllX2NoYXJ0IiwibnRvcG5nX2N1c3RvbV9ldmVudHMiLCJTSE9XX01PREFMX0ZJTFRFUlMiLCJNT0RBTF9GSUxURVJTX0FQUExZIiwiU0hPV19HTE9CQUxfQUxFUlRfSU5GTyIsIlZJU19EQVRBX0xPQURFRCIsIkNIQU5HRV9QQUdFX1RJVExFIiwiREFUQVRBQkxFX0xPQURFRCIsIkdFVF9JTlRFUkZBQ0VfRkFUQSIsInNldFVybFBhcmFtcyIsImZvcmNlVXBkYXRlIiwic3RvcEludGVydmFsIiwic3RhcnRJbnRlcnZhbCIsInBfcGllSW50ZXJ2YWwiLCJERUZJTkVEX1dJREdFVFMiLCJERUZJTkVEX0VWRU5UUyIsImRiX2FuYWx5emUiLCJmaWx0ZXJpbmdfbGFiZWxzIiwibGFiZWxzIiwib3BlcmF0b3IiLCJub25lIiwic3RhbmRhcmQiLCJERUZJTkVEX1RPT0xUSVAiLCJmb3JtYXRfYnl0ZXMiLCJieXRlc1RvU2l6ZSIsImZvcm1hdF9wa3RzIiwiZm9ybWF0UGFja2V0cyIsImZvcm1hdF92YWx1ZSIsImZvcm1hdFZhbHVlIiwiZm9ybWF0X211bHRpcGxlX2RhdGUiLCJmb3JtYXRfbGFiZWxfZnJvbV94eSIsImZvcm1hdF9sYWJlbF9mcm9tX3huYW1lIiwiREVGQVVMVF9GT1JNQVRURVIiLCJXaWRnZXRVdGlscyIsIndpZGdldCIsIndpZGdldE5hbWUiLCJXaWRnZXQiLCJkYXRhc291cmNlIiwidXBkYXRlVGltZSIsImFkZGl0aW9uYWxQYXJhbXMiLCJfZmV0Y2hlZERhdGEiLCJfdXBkYXRlVGltZSIsIl9kYXRhc291cmNlIiwiX2FkZGl0aW9uYWxQYXJhbXMiLCJyZWdpc3RlcldpZGdldCIsIl9mZXRjaERhdGEiLCJkYXRhc291cmNlUGFyYW1zIiwiZGVzdHJveSIsInUiLCJvcmlnaW4iLCJyZXEiLCJmaXhTdWJNZW51UG9zaXRpb24iLCIkc3VibWVudSIsIiRob3ZlckJ1dHRvbiIsImRpc3RGcm9tQWJvdmUiLCJ0b3AiLCJzdWJtZW51SGVpZ2h0IiwiZG9jdW1lbnRIZWlnaHQiLCJjdXJyZW50U3VibWVudUhlaWdodCIsIm91dGVySGVpZ2h0Iiwic2Nyb2xsVG9wIiwidG9nZ2xlU2lkZWJhciIsIiRsYXllciIsIm1vdXNlZW50ZXIiLCJzdWJtZW51IiwibW91c2VsZWF2ZSIsIiRjdXJyZW50U3VibWVudSIsIm50b3BDaGFydEFwZXgiLCJfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyIsImNoYXJ0IiwidG9vbGJhciIsInRvb2xzIiwiem9vbW91dCIsInpvb21pbiIsInpvb20iLCJzZWxlY3Rpb24iLCJwYW4iLCJldmVudHMiLCJjb2xvcnMiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJjc3NDbGFzcyIsInJvdGF0ZSIsIm9mZnNldFkiLCJvZmZzZXRYIiwiZ3JpZCIsImxlZ2VuZCIsIl9zZXRYVGltZUZvcm1hdHRlciIsImNoYXJ0T3B0aW9ucyIsImZvcm1hdHRlciIsIl9kZWZhdWx0X1RTX0NPTFVNTl9DaGFydE9wdGlvbnMiLCJzdGFja2VkIiwiZGF0ZXRpbWVVVEMiLCJheGlzVGlja3MiLCJheGlzQm9yZGVyIiwiY29udmVydGVkQ2F0VG9OdW1lcmljIiwiZGF0YUxhYmVscyIsInN0cm9rZSIsImN1cnZlIiwiZmlsbCIsIl9kZWZhdWx0X1RTX1NUQUNLRURfQ2hhcnRPcHRpb25zIiwiX2RlZmF1bHRfVFNfUElFX0NoYXJ0T3B0aW9ucyIsIlRTX1NUQUNLRURfQ2hhcnRPcHRpb25zIiwib3B0cyIsIl9kZWZhdWx0X1RTX0RPTlVUX0NoYXJ0T3B0aW9ucyIsIl9kZWZhdWx0X1RTX1BPTEFSX0NoYXJ0T3B0aW9ucyIsIl9kZWZhdWx0X1RTX0xJTkVfQ2hhcnRPcHRpb25zIiwic2hhcmVkIiwiX2RlZmF1bHRfVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyIsIlRTX0JVQkJMRV9DaGFydE9wdGlvbnMiLCJhdXRvU2NhbGVZYXhpcyIsImRhdGFQb2ludFNlbGVjdGlvbiIsInBhZGRpbmciLCJmb3JjZU5pY2VTY2FsZSIsImN1c3RvbSIsInR5cGVDaGFydCIsIlRTX0xJTkUiLCJUU19TVEFDS0VEIiwiVFNfQ09MVU1OIiwiUElFIiwiRE9OVVQiLCJQT0xBUiIsIkJVQkJMRSIsIkJBU0UiLCJuZXdDaGFydCIsIl9jaGFydCIsIl9jaGFydE9wdGlvbnMiLCJkcmF3Q2hhcnQiLCJodG1sRWxlbWVudCIsIkFwZXhDaGFydHMiLCJyZW5kZXIiLCJ0b19kYXRhX3VyaSIsImRhdGFVUkkiLCJpbWdVUkkiLCJkZXN0cm95Q2hhcnQiLCJ1cGRhdGVDaGFydCIsInVwZGF0ZU9wdGlvbnMiLCJ1cGRhdGVTZXJpZXMiLCJyZWdpc3RlckV2ZW50IiwiZXZlbnROYW1lIiwiRGF0YVRhYmxlSGFuZGxlcnMiLCJoYW5kbGVyc0lkRGljdCIsImFkZEhhbmRsZXIiLCJoYW5kbGVycyIsImhhbmRsZXJJZCIsIm9uQ2xpY2siLCJnZXRIYW5kbGVyIiwicm93SWQiLCJkZWxldGVIYW5kbGVyc0J5SWQiLCJEYXRhVGFibGVVdGlscyIsImR0QnV0dG9ucyIsImRvbSIsInBhZ2luZ1R5cGUiLCJsZW5ndGhNZW51IiwibGFuZ3VhZ2UiLCJpMThuIiwic2NyaXB0X3NlYXJjaCIsInBhZ2luYXRlIiwicHJldmlvdXMiLCJuZXh0Iiwic2F2ZVN0YXRlIiwicmVzcG9uc2l2ZSIsImJ1dHRvbnMiLCJidXR0b24iLCJjbGFzc05hbWUiLCJjb250YWluZXIiLCJoYW5kbGVyIiwiYWN0aW9ucyIsIm9uY2xpY2siLCJjbGFzcyIsImV4dGVybmFsIiwiaWNvbiIsImRhdGFTcmMiLCJleHRlbnNpb24iLCJoYXNGaWx0ZXJzIiwic3RhdGVTYXZlQ2FsbGJhY2siLCJzZXR0aW5ncyIsInNJbnN0YW5jZSIsInN0YXRlTG9hZENhbGxiYWNrIiwic3RhdGVTYXZlUGFyYW1zIiwiYWN0aXZlRmlsdGVyIiwicGFkWmVyb2VzIiwicGFkU3RhcnQiLCJtaW5zIiwidXJsUGFyYW1zIiwiaGFzIiwicGFyYW1OYW1lIiwiZGF0YUlEIiwiZGF0YXRhYmxlSW5zdGFuY2UiLCJ0b0FycmF5IiwiY2FuY2VsSWYiLCIkbW9kYWwiLCJyZWZlcmVyIiwidGFibGVBUEkiLCJ0b2dnbGVDYWxsYmFjayIsImNvbCIsInRhYmxlSUQiLCJub2RlIiwiX2xvYWRDb2x1bW5zVmlzaWJpbGl0eSIsImZldGNoZWREYXRhIiwic2F2ZWRDb2x1bW5zIiwiaWdub3JlZENvbHVtbnMiLCIkZGF0YXRhYmxlV3JhcHBlciIsIm5UYWJsZVdyYXBwZXIiLCJldmVyeSIsImNvbHVtbiIsImhlYWRlciIsIiRidG5Hcm91cCIsIiRkcm9wZG93bk1lbnUiLCIkY2hlY2tib3hlcyIsInRvZ2dsZWQiLCJpbmRleE9mIiwiJGNoZWNrYm94IiwiJHdyYXBwZXIiLCJoaWRkZW5Db2x1bW5zIiwiX19DU1JGX0RBVEFUQUJMRV9fIiwicHJlcGVuZCIsIkRhdGFUYWJsZVJlbmRlcnMiLCJzZXZlcml0eSIsImZvcm1hdFZhbHVlTGFiZWwiLCJhbGVydF9pZCIsInNwYW4iLCJmaW50IiwidGFnX2xhYmVsIiwiZGVzY3IiLCJzaG9ydGVuX2Rlc2NyIiwiZmlsdGVyaXplIiwiaHRtbF9yZWYiLCJyZWZlcmVuY2UiLCJsYWJlbF9sb25nIiwiaG9zdEtleSIsImhvc3RWYWx1ZSIsInZsYW5faWQiLCJjb3VudHJ5Iiwicm9sZSIsInJvbGVfY2xpX3NydiIsImZsb3ciLCJ2YWx1ZVZsYW4iLCJsYWJlbFZsYW4iLCJ0aXRsZVZsYW4iLCJ2bGFuIiwic2hvcnRlbkxhYmVsIiwiYWN0aXZlX3JlZiIsImFjdGl2ZV91cmwiLCJjbGlMYWJlbCIsImNsaV9pcCIsImZpbHRlcml6ZVZsYW4iLCJjbGlGbGFnTGFiZWwiLCJjbGlQb3J0TGFiZWwiLCJjbGlfcG9ydCIsImNsaUJsYWNrbGlzdGVkIiwiYmxhY2tsaXN0ZWQiLCJzcnZMYWJlbCIsInNydl9pcCIsInNydlBvcnRMYWJlbCIsInNydl9wb3J0Iiwic3J2RmxhZ0xhYmVsIiwic3J2QmxhY2tsaXN0ZWQiLCJjbGlJY29ucyIsInNydkljb25zIiwiY2xpX3JvbGUiLCJzcnZfcm9sZSIsImZ1bGxuYW1lIiwiY2VsbERhdGEiLCJyb3dEYXRhIiwicm93SW5kZXgiLCJjb2xJbmRleCIsImhpZ2hsaWdodCIsImNyZWF0ZSIsImRvX3BpZSIsIkRhdGFUYWJsZUZpbHRlcnNNZW51IiwiZmlsdGVyTWVudUtleSIsImZpbHRlclRpdGxlIiwiY29sdW1uSW5kZXgiLCJleHRyYUF0dHJpYnV0ZXMiLCJyZW1vdmVBbGxFbnRyeSIsImNhbGxiYWNrRnVuY3Rpb24iLCJyYXdGaWx0ZXJzIiwicHJldmVudFVwZGF0ZSIsImN1cnJlbnRGaWx0ZXJTZWxlY3RlZCIsInNlbGVjdGVkRmlsdGVyIiwiaW5pdCIsIl9yZW5kZXIiLCJfdXBkYXRlIiwiX2NvdW50RW50cmllcyIsInJlZ2V4IiwicmVnIiwiY2VsbFZhbHVlIiwiX2NyZWF0ZU1lbnVFbnRyeSIsIiRlbnRyeSIsImN1cnJlbnRseV9hY3RpdmUiLCIkZHJvcGRvd24iLCJuZXdDb250ZW50IiwiY291bnRhYmxlIiwiJGNvdW50ZXIiLCJuZXdVcmxQYXJhbXMiLCJkcmF3IiwiX2NyZWF0ZUZpbHRlcnMiLCJmaWx0ZXJzQ3JlYXRlZCIsIiRmaWx0ZXIiLCIkbm9kZSIsImluc2VydEJlZm9yZSIsIiRkcm9wZG93bkNvbnRhaW5lciIsIiRkcm9wZG93bkJ1dHRvbiIsIiRkcm9wZG93blRpdGxlIiwiJG1lbnVDb250YWluZXIiLCJfIiwiYWxsRmlsdGVyIiwiX2dlbmVyYXRlQWxsRmlsdGVyIiwiX3NlbGVjdEZpbHRlckZyb21TdGF0ZSIsImZpbHRlcktleSIsImxvYWRlZCIsInNhdmUiLCJhbGwiLCJDaGFydFdpZGdldCIsInN1cGVyIiwiX2NoYXJ0VHlwZSIsIl8kaHRtbENoYXJ0IiwicXVlcnlTZWxlY3RvciIsImdldFdpZGdldEJ5TmFtZSIsInVwZGF0ZWRPcHRpb25zIiwiX2dlbmVyYXRlQ29uZmlnIiwiZW5hYmxlZE9uU2VyaWVzIiwieiIsInpheGlzIiwib25JdGVtQ2xpY2siLCJ0b2dnbGVEYXRhU2VyaWVzIiwicGxvdE9wdGlvbnMiLCJiYXIiLCJib3JkZXJSYWRpdXMiLCJob3Jpem9udGFsIiwibm9EYXRhIiwiYWxpZ24iLCJ2ZXJ0aWNhbEFsaWduIiwiYXBleCIsImFzc2lnbiIsIl9idWlsZFRvb2x0aXAiLCJheGlzIiwiX2J1aWxkQXhpc0Zvcm1hdHRlciIsImF4aXNOYW1lIiwibnRvcF91dGlsc19mb3JtYXR0ZXIiLCJzZWxlY3RlZEZvcm1hdHRlciIsIl9idWlsZERhdGFMYWJlbHMiLCJkYXRhTGFiZWxzT3B0cyIsIl9idWlsZENvbmZpZyIsImFkZGl0aW9uYWxzIiwiYWRkaXRpb25hbCIsIl9pbml0aWFsaXplQ2hhcnQiLCJfY2hhcnRDb25maWciLCJ1cGRhdGVCeVVybCIsImNhdGVnb3JpZXMiLCJkZXN0cm95QW5kVXBkYXRlIiwiYmxvZ05vdGlmY2F0aW9uQ2xpY2siLCJtZXRhS2V5IiwiY3RybEtleSIsIndoaWNoIiwiYmxvZ19ub3RpZmljYXRpb25faWQiLCJfX0JMT0dfTk9USUZJQ0FUSU9OX0NTUkZfXyIsIkUiLCJQIiwibCIsIk0iLCJjIiwiZiIsIlIiLCJBIiwia2V5cyIsIkkiLCJGIiwiZyIsIl9fdl9pc1JlZiIsInJlZHVjZSIsIk8iLCJMIiwidiIsIkMiLCJzdGFydHNXaXRoIiwic3BsaWNlIiwiVCIsIk4iLCJCIiwiViIsImoiLCJVIiwiRCIsIkgiLCJXIiwiSyIsIkciLCJxIiwiSiIsIlkiLCJaIiwiUSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIlgiLCJlZSIsInRlIiwibmUiLCJhY3RpdmUiLCJlZmZlY3RzIiwiY2xlYW51cHMiLCJzY29wZXMiLCJydW4iLCJzdG9wIiwicG9wIiwib2UiLCJyZSIsInNlIiwiaWUiLCJsZSIsIlNldCIsImNlIiwiZmUiLCJhZSIsInVlIiwiV2Vha01hcCIsImRlIiwicGUiLCJoZSIsIlN5bWJvbCIsIm1lIiwiZ2UiLCJzY2hlZHVsZXIiLCJkZXBzIiwiYmUiLCJ2ZSIsImRlZmVyU3RvcCIsIm9uU3RvcCIsInllIiwiZWZmZWN0Iiwic2NvcGUiLCJsYXp5IiwiX2UiLCJTZSIsInhlIiwiQ2UiLCJ3ZSIsIk1hcCIsImtlIiwiYWRkIiwiVGUiLCJOZSIsImNvbXB1dGVkIiwiRWUiLCJhbGxvd1JlY3Vyc2UiLCIkZSIsIk9lIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIlJlIiwiSWUiLCJGZSIsIlBlIiwiQWUiLCJNZSIsImt0IiwiYXBwbHkiLCJWZSIsImh0IiwiZnQiLCJwdCIsIlJlZmxlY3QiLCJSdCIsInl0IiwiZ3QiLCJCZSIsInh0IiwiQ3QiLCJMZSIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsImplIiwiVWUiLCJEZSIsIkhlIiwiV2UiLCJnZXRQcm90b3R5cGVPZiIsInplIiwiX192X3JhdyIsIkV0IiwiTnQiLCJLZSIsIkdlIiwicWUiLCJKZSIsIlllIiwiWmUiLCJjbGVhciIsIlFlIiwiWGUiLCJpdGVyYXRvciIsImV0IiwibnQiLCJvdCIsInJ0Iiwic3QiLCJ0dCIsIml0IiwibHQiLCJjdCIsImF0IiwidXQiLCJidCIsInZ0IiwiX3QiLCJfX3ZfaXNSZWFjdGl2ZSIsIl9fdl9za2lwIiwiaXNFeHRlbnNpYmxlIiwibXQiLCJQcm94eSIsIlN0IiwiX192X2lzUmVhZG9ubHkiLCJfX3ZfaXNTaGFsbG93Iiwid3QiLCJUdCIsIiR0IiwiZGVwIiwiT3QiLCJGdCIsIkF0IiwiUHQiLCJNdCIsIl9yYXdWYWx1ZSIsIl92YWx1ZSIsIlZ0IiwiSXQiLCJCdCIsIkx0IiwianQiLCJfZ2V0IiwiX3NldCIsIlV0IiwiRHQiLCJXdCIsIkh0IiwiX29iamVjdCIsIl9rZXkiLCJfZGVmYXVsdFZhbHVlIiwienQiLCJfc2V0dGVyIiwiX2RpcnR5IiwiX2NhY2hlYWJsZSIsIkt0IiwiR3QiLCJjb21wb25lbnQiLCJhcHBDb250ZXh0Iiwid2FybkhhbmRsZXIiLCJ2bm9kZSIsInJlY3Vyc2VDb3VudCIsIll0IiwicHJveHkiLCJMcyIsInByb3BzIiwicXQiLCJKdCIsIlF0IiwiWnQiLCJlYyIsImVycm9ySGFuZGxlciIsIlh0IiwiZW4iLCJ0biIsIm5uIiwicm4iLCJzbiIsImxuIiwiY24iLCJhbiIsInVuIiwicG4iLCJkbiIsImhuIiwiYm4iLCJtbiIsIlNuIiwiZ24iLCJ2biIsInluIiwiX24iLCJ4biIsIkNuIiwid24iLCJIVE1MRWxlbWVudCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18iLCJrbiIsImlzVW5tb3VudGVkIiwiZW1pdHRlZCIsIlRuIiwiZW1pdHNDYWNoZSIsImVtaXRzIiwibWl4aW5zIiwiZXh0ZW5kcyIsIk5uIiwiRW4iLCIkbiIsIk9uIiwiX19zY29wZUlkIiwiUm4iLCJGbiIsIlBuIiwiQW4iLCJfZCIsIlhyIiwiX2MiLCJNbiIsIndpdGhQcm94eSIsInByb3BzT3B0aW9ucyIsInNsb3RzIiwiYXR0cnMiLCJyZW5kZXJDYWNoZSIsInNldHVwU3RhdGUiLCJjdHgiLCJpbmhlcml0QXR0cnMiLCJzaGFwZUZsYWciLCJncyIsIlZuIiwicXIiLCJ1cyIsIktyIiwiSW4iLCJmcyIsImRpcnMiLCJjb25jYXQiLCJCbiIsIkxuIiwic3ViVHJlZSIsImpuIiwiX19pc1N1c3BlbnNlIiwiVW4iLCJwcm9jZXNzIiwic3VzcGVuc2UiLCJIbiIsInBlbmRpbmdCcmFuY2giLCJzc0NvbnRlbnQiLCJEbiIsInNzRmFsbGJhY2siLCJLbiIsImFjdGl2ZUJyYW5jaCIsImlzSW5GYWxsYmFjayIsImlzSHlkcmF0aW5nIiwicnMiLCJoaWRkZW5Db250YWluZXIiLCJwZW5kaW5nSWQiLCJ0aW1lb3V0IiwiZmFsbGJhY2siLCJoeWRyYXRlIiwicGFyZW50Tm9kZSIsIm5vcm1hbGl6ZSIsImNoaWxkcmVuIiwiV24iLCJkZWZhdWx0IiwicGFyZW50Q29tcG9uZW50IiwiaXNTVkciLCJhbmNob3IiLCJtb2RlIiwiYWZ0ZXJMZWF2ZSIsIm1vdmUiLCJyZWdpc3RlckRlcCIsImFzeW5jRGVwIiwic3VzcGVuc2VJZCIsImFzeW5jUmVzb2x2ZWQiLCJScyIsInVubW91bnQiLCJRciIsIllyIiwiSnIiLCJaciIsIm9zIiwiZHluYW1pY0NoaWxkcmVuIiwiem4iLCJHbiIsIkNzIiwicHJvdmlkZXMiLCJxbiIsImFyZ3VtZW50cyIsIkpuIiwiZW8iLCJZbiIsImZsdXNoIiwiWm4iLCJRbiIsIlhuIiwiaW1tZWRpYXRlIiwiZGVlcCIsIm9vIiwiUHIiLCJ0byIsIm5vIiwia3MiLCJUcyIsInJvIiwiaXNNb3VudGVkIiwiaXNMZWF2aW5nIiwiaXNVbm1vdW50aW5nIiwibGVhdmluZ1ZOb2RlcyIsIk9vIiwiUG8iLCJzbyIsIkZ1bmN0aW9uIiwiaW8iLCJhcHBlYXIiLCJCb29sZWFuIiwicGVyc2lzdGVkIiwib25CZWZvcmVFbnRlciIsIm9uRW50ZXIiLCJvbkFmdGVyRW50ZXIiLCJvbkVudGVyQ2FuY2VsbGVkIiwib25CZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJvbkFmdGVyTGVhdmUiLCJvbkxlYXZlQ2FuY2VsbGVkIiwib25CZWZvcmVBcHBlYXIiLCJvbkFwcGVhciIsIm9uQWZ0ZXJBcHBlYXIiLCJvbkFwcGVhckNhbmNlbGxlZCIsInNldHVwIiwid3MiLCJmbyIsImFvIiwidW8iLCJjbyIsInBvIiwiZ2V0VHJhbnNpdGlvbktleSIsImRlbGF5TGVhdmUiLCJsbyIsIl9sZWF2ZUNiIiwiZGVsYXllZExlYXZlIiwiYmVmb3JlRW50ZXIiLCJfZW50ZXJDYiIsImxlYXZlIiwieW8iLCJXciIsInBhdGNoRmxhZyIsImhvIiwibW8iLCJfX2FzeW5jTG9hZGVyIiwiZ28iLCJsb2FkZXIiLCJsb2FkaW5nQ29tcG9uZW50IiwiZXJyb3JDb21wb25lbnQiLCJzdXNwZW5zaWJsZSIsIm9uRXJyb3IiLCJfX2VzTW9kdWxlIiwidG9TdHJpbmdUYWciLCJfX2FzeW5jUmVzb2x2ZWQiLCJ2byIsInJlZiIsIl9faXNLZWVwQWxpdmUiLCJfbyIsImluY2x1ZGUiLCJleGNsdWRlIiwicmVuZGVyZXIiLCJrbyIsIkJzIiwiYWN0aXZhdGUiLCJzbG90U2NvcGVJZHMiLCJpc0RlYWN0aXZhdGVkIiwib25Wbm9kZU1vdW50ZWQiLCJicyIsImRlYWN0aXZhdGUiLCJkYSIsIm9uVm5vZGVVbm1vdW50ZWQiLCJibyIsIlRvIiwiRm8iLCJTbyIsIkNvIiwieG8iLCJfX3dkYyIsIk5vIiwid28iLCJBbyIsIl9fd2VoIiwidW5zaGlmdCIsIkVvIiwiT3MiLCIkbyIsIlJvIiwiTW8iLCJWbyIsIklvIiwiQm8iLCJMbyIsIlZzIiwibW91bnRlZCIsInVwZGF0ZWQiLCJkaXIiLCJpbnN0YW5jZSIsIm9sZFZhbHVlIiwiYXJnIiwibW9kaWZpZXJzIiwiam8iLCJVbyIsInpvIiwiRG8iLCJIbyIsIldvIiwiS28iLCJHbyIsImZyb20iLCJxbyIsIkpvIiwiaXNDRSIsIllvIiwibnMiLCJzY29wZUlkIiwiWm8iLCJRbyIsIk5zIiwiWG8iLCIkZWwiLCIkZGF0YSIsIiRwcm9wcyIsIiRhdHRycyIsIiRzbG90cyIsIiRyZWZzIiwicmVmcyIsIiRwYXJlbnQiLCIkcm9vdCIsInJvb3QiLCIkZW1pdCIsIiRvcHRpb25zIiwiJGZvcmNlVXBkYXRlIiwiJG5leHRUaWNrIiwiJHdhdGNoIiwiZXIiLCJhY2Nlc3NDYWNoZSIsIm5yIiwiX19jc3NNb2R1bGVzIiwiZ2xvYmFsUHJvcGVydGllcyIsInRyIiwidW5zY29wYWJsZXMiLCJyciIsInNyIiwib3B0aW9uc0NhY2hlIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwibHIiLCJjciIsImFyIiwiZnIiLCJtZXRob2RzIiwiYmVmb3JlQ3JlYXRlIiwicHIiLCJjcmVhdGVkIiwiYmVmb3JlTW91bnQiLCJiZWZvcmVVcGRhdGUiLCJiZWZvcmVEZXN0cm95IiwiYmVmb3JlVW5tb3VudCIsImRlc3Ryb3llZCIsInVubW91bnRlZCIsImFjdGl2YXRlZCIsImRlYWN0aXZhdGVkIiwiZXJyb3JDYXB0dXJlZCIsInNlcnZlclByZWZldGNoIiwiY29tcG9uZW50cyIsImRpcmVjdGl2ZXMiLCJ3YXRjaCIsInByb3ZpZGUiLCJpbmplY3QiLCJ1ciIsImVtaXRzT3B0aW9ucyIsImhyIiwicHJvcHNEZWZhdWx0cyIsIm1yIiwicHJvcHNDYWNoZSIsImdyIiwiX3IiLCJ2ciIsInlyIiwiYnIiLCJTciIsInhyIiwiQ3IiLCJfY3R4Iiwid3IiLCJrciIsImFwcCIsImlzTmF0aXZlVGFnIiwicGVyZm9ybWFuY2UiLCJjb21waWxlck9wdGlvbnMiLCJUciIsIk5yIiwiX3VpZCIsIl9jb21wb25lbnQiLCJfcHJvcHMiLCJfY29udGFpbmVyIiwiX2NvbnRleHQiLCJfaW5zdGFuY2UiLCJ2ZXJzaW9uIiwib2kiLCJ1c2UiLCJpbnN0YWxsIiwibWl4aW4iLCJkaXJlY3RpdmUiLCJtb3VudCIsIl9fdnVlX2FwcF9fIiwiRXIiLCIkciIsIk9yIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsIlJyIiwibm9kZVR5cGUiLCJGciIsInBhdGNoUHJvcCIsImNyZWF0ZVRleHQiLCJuZXh0U2libGluZyIsImluc2VydCIsImNyZWF0ZUNvbW1lbnQiLCJ6ciIsIkdyIiwic3RhdGljQ291bnQiLCJvdXRlckhUTUwiLCJwcmV2aW91c1NpYmxpbmciLCJsYXN0Q2hpbGQiLCJkcyIsImVuZHNXaXRoIiwib25Wbm9kZUJlZm9yZU1vdW50IiwiZmlyc3RDaGlsZCIsImhhc0NoaWxkTm9kZXMiLCJfdm5vZGUiLCJBciIsIlZyIiwiTXIiLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwiX19WVUVfXyIsInNldFRleHQiLCJzZXRFbGVtZW50VGV4dCIsInNldFNjb3BlSWQiLCJjbG9uZU5vZGUiLCJpbnNlcnRTdGF0aWNDb250ZW50IiwidnMiLCJJciIsIm9uVm5vZGVCZWZvcmVVcGRhdGUiLCJkeW5hbWljUHJvcHMiLCJvblZub2RlVXBkYXRlZCIsIkJyIiwiU3MiLCJ1aWQiLCJ4cyIsImV4cG9zZWQiLCJleHBvc2VQcm94eSIsInNldHVwQ29udGV4dCIsImJjIiwiYm0iLCJidSIsImJ1bSIsInJ0ZyIsInJ0YyIsInNwIiwiTXMiLCJBcyIsIiRzdGFibGUiLCJtaW4iLCJvblZub2RlQmVmb3JlVW5tb3VudCIsIm1jIiwicGMiLCJwYmMiLCJjcmVhdGVBcHAiLCJMciIsImpyIiwiU1ZHRWxlbWVudCIsIlVyIiwiRHIiLCJ0YXJnZXRBbmNob3IiLCJIciIsIl9faXNUZWxlcG9ydCIsIl9scGEiLCJlcyIsInRzIiwiYXMiLCJfX3ZfaXNWTm9kZSIsInNzIiwibHMiLCJjcyIsInJlZl9rZXkiLCJyZWZfZm9yIiwieXMiLCJfX3ZjY09wdHMiLCJwcyIsIl9zIiwiaHMiLCJtZW1vIiwiRXMiLCIkcyIsIkZzIiwiX3JjIiwiUHMiLCJ0ZW1wbGF0ZSIsImlzQ3VzdG9tRWxlbWVudCIsImRlbGltaXRlcnMiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXhwb3NlIiwidW53cmFwSW5qZWN0ZWRSZWYiLCJqcyIsIm9yIiwiSXMiLCJkaXNwbGF5TmFtZSIsIl9fbmFtZSIsIl9fZmlsZSIsIlVzIiwiRHMiLCJIcyIsIldzIiwienMiLCJHcyIsIktzIiwicXMiLCJKcyIsIllzIiwiWnMiLCJRcyIsIlhzIiwiZWkiLCJ0aSIsIm5pIiwibGkiLCJjaSIsImFpIiwiY3JlYXRlRWxlbWVudE5TIiwibXVsdGlwbGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm5vZGVWYWx1ZSIsInVpIiwicGkiLCJzZXRQcm9wZXJ0eSIsImRpIiwiZmkiLCJoaSIsIm1pIiwiZ2kiLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsInZpIiwieWkiLCJfaSIsImJpIiwiYWRkRXZlbnRMaXN0ZW5lciIsInhpIiwiQ2kiLCJ3aSIsIk5pIiwiZGVmIiwia2kiLCJUbCIsIlRpIiwiX2RlZiIsIl9jb25uZWN0ZWQiLCJfcmVzb2x2ZWQiLCJfbnVtYmVyUHJvcHMiLCJzaGFkb3dSb290IiwiX2NyZWF0ZVZOb2RlIiwiYXR0YWNoU2hhZG93IiwiY29ubmVjdGVkQ2FsbGJhY2siLCJfcmVzb2x2ZURlZiIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwia2wiLCJhdHRyaWJ1dGVzIiwiX3NldEF0dHIiLCJhdHRyaWJ1dGVOYW1lIiwic3R5bGVzIiwiX3NldFByb3AiLCJfZ2V0UHJvcCIsIl9hcHBseVN0eWxlcyIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsIkVpIiwiJGkiLCJPaSIsImRpc2Nvbm5lY3QiLCJSaSIsIkZpIiwiSWkiLCJQaSIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIkFpIiwiTWkiLCJWaSIsIkJpIiwiamkiLCJfaXNMZWF2aW5nIiwiVWkiLCJMaSIsIkhpIiwiR2kiLCJjbGFzc0xpc3QiLCJfdnRjIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRGkiLCJfZW5kSWQiLCJwcm9wQ291bnQiLCJXaSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiemkiLCJoYXNUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJLaSIsIm9mZnNldEhlaWdodCIsInFpIiwiSmkiLCJZaSIsInRhZyIsIm1vdmVDbGFzcyIsImRpc3BsYXkiLCJaaSIsIlFpIiwiWGkiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidGwiLCJjb21wb3NpbmciLCJubCIsIkV2ZW50Iiwib2wiLCJfYXNzaWduIiwiYWN0aXZlRWxlbWVudCIsInJsIiwiX21vZGVsVmFsdWUiLCJhbCIsImNoZWNrZWQiLCJ1bCIsInNsIiwiaWwiLCJsbCIsInNlbGVjdGVkIiwiY2wiLCJzZWxlY3RlZEluZGV4IiwicGwiLCJmbCIsImRsIiwiaGwiLCJwcmV2ZW50IiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJzaGlmdCIsInNoaWZ0S2V5IiwiYWx0IiwiYWx0S2V5IiwibWlkZGxlIiwicmlnaHQiLCJleGFjdCIsIm1sIiwiZ2wiLCJlc2MiLCJzcGFjZSIsInVwIiwiZG93biIsInZsIiwieWwiLCJfdm9kIiwiX2wiLCJibCIsImNzc1RleHQiLCJfdmVpIiwiYXR0YWNoZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfc3RvcHBlZCIsIlNpIiwiX3RydWVWYWx1ZSIsIl9mYWxzZVZhbHVlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsIlNsIiwieGwiLCJDbCIsIndsIiwiTmwiLCIkbCIsIkVsZW1lbnQiLCJFbCIsIk9sIiwiUmwiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJjcmVhdGVTU1JBcHAiLCJpbml0RGlyZWN0aXZlc0ZvclNTUiIsImRlZmluZUN1c3RvbUVsZW1lbnQiLCJkZWZpbmVTU1JDdXN0b21FbGVtZW50IiwiVnVlRWxlbWVudCIsInVzZUNzc01vZHVsZSIsInVzZUNzc1ZhcnMiLCJUcmFuc2l0aW9uIiwiVHJhbnNpdGlvbkdyb3VwIiwidk1vZGVsVGV4dCIsInZNb2RlbENoZWNrYm94Iiwidk1vZGVsUmFkaW8iLCJ2TW9kZWxTZWxlY3QiLCJ2TW9kZWxEeW5hbWljIiwid2l0aE1vZGlmaWVycyIsIndpdGhLZXlzIiwidlNob3ciLCJyZWFjdGl2ZSIsInJlYWRvbmx5IiwidW5yZWYiLCJwcm94eVJlZnMiLCJpc1JlZiIsInRvUmVmIiwidG9SZWZzIiwiaXNQcm94eSIsImlzUmVhY3RpdmUiLCJpc1JlYWRvbmx5IiwiaXNTaGFsbG93IiwiY3VzdG9tUmVmIiwidHJpZ2dlclJlZiIsInNoYWxsb3dSZWYiLCJzaGFsbG93UmVhY3RpdmUiLCJzaGFsbG93UmVhZG9ubHkiLCJtYXJrUmF3IiwidG9SYXciLCJSZWFjdGl2ZUVmZmVjdCIsImVmZmVjdFNjb3BlIiwiRWZmZWN0U2NvcGUiLCJnZXRDdXJyZW50U2NvcGUiLCJvblNjb3BlRGlzcG9zZSIsIndhdGNoRWZmZWN0Iiwid2F0Y2hQb3N0RWZmZWN0Iiwid2F0Y2hTeW5jRWZmZWN0Iiwib25CZWZvcmVNb3VudCIsIm9uTW91bnRlZCIsIm9uQmVmb3JlVXBkYXRlIiwib25VcGRhdGVkIiwib25CZWZvcmVVbm1vdW50Iiwib25Vbm1vdW50ZWQiLCJvbkFjdGl2YXRlZCIsIm9uRGVhY3RpdmF0ZWQiLCJvblJlbmRlclRyYWNrZWQiLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uRXJyb3JDYXB0dXJlZCIsIm9uU2VydmVyUHJlZmV0Y2giLCJuZXh0VGljayIsImRlZmluZUNvbXBvbmVudCIsImRlZmluZUFzeW5jQ29tcG9uZW50IiwidXNlQXR0cnMiLCJ1c2VTbG90cyIsImRlZmluZVByb3BzIiwiZGVmaW5lRW1pdHMiLCJkZWZpbmVFeHBvc2UiLCJ3aXRoRGVmYXVsdHMiLCJtZXJnZURlZmF1bHRzIiwiY3JlYXRlUHJvcHNSZXN0UHJveHkiLCJ3aXRoQXN5bmNDb250ZXh0IiwiZ2V0Q3VycmVudEluc3RhbmNlIiwiY3JlYXRlVk5vZGUiLCJjbG9uZVZOb2RlIiwibWVyZ2VQcm9wcyIsImlzVk5vZGUiLCJGcmFnbWVudCIsIlRleHQiLCJDb21tZW50IiwiU3RhdGljIiwiVGVsZXBvcnQiLCJTdXNwZW5zZSIsIktlZXBBbGl2ZSIsIkJhc2VUcmFuc2l0aW9uIiwid2l0aERpcmVjdGl2ZXMiLCJ1c2VTU1JDb250ZXh0Iiwic3NyQ29udGV4dEtleSIsImNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIiLCJxdWV1ZVBvc3RGbHVzaENiIiwiaGFuZGxlRXJyb3IiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyIsInJlc29sdmVDb21wb25lbnQiLCJyZXNvbHZlRGlyZWN0aXZlIiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJyZWdpc3RlclJ1bnRpbWVDb21waWxlciIsImlzUnVudGltZU9ubHkiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJyZXNvbHZlVHJhbnNpdGlvbkhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwiZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuIiwiaW5pdEN1c3RvbUZvcm1hdHRlciIsImRldnRvb2xzIiwic2V0RGV2dG9vbHNIb29rIiwid2l0aEN0eCIsInB1c2hTY29wZUlkIiwicG9wU2NvcGVJZCIsIndpdGhTY29wZUlkIiwicmVuZGVyTGlzdCIsInRvSGFuZGxlcnMiLCJyZW5kZXJTbG90IiwiY3JlYXRlU2xvdHMiLCJ3aXRoTWVtbyIsImlzTWVtb1NhbWUiLCJvcGVuQmxvY2siLCJjcmVhdGVCbG9jayIsInNldEJsb2NrVHJhY2tpbmciLCJjcmVhdGVUZXh0Vk5vZGUiLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJjcmVhdGVTdGF0aWNWTm9kZSIsImNyZWF0ZUVsZW1lbnRWTm9kZSIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImd1YXJkUmVhY3RpdmVQcm9wcyIsInRvRGlzcGxheVN0cmluZyIsImNhbWVsaXplIiwiY2FwaXRhbGl6ZSIsInRvSGFuZGxlcktleSIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplQ2xhc3MiLCJub3JtYWxpemVTdHlsZSIsInRyYW5zZm9ybVZOb2RlQXJncyIsInNzclV0aWxzIiwicmVzb2x2ZUZpbHRlciIsImNvbXBhdFV0aWxzIiwiRmwiLCJQbCIsIkFsIiwiU3ludGF4RXJyb3IiLCJjb2RlIiwibG9jIiwiTWwiLCJWbCIsIklsIiwiQmwiLCJMbCIsImpsIiwiVWwiLCJEbCIsIkhsIiwiV2wiLCJ6bCIsIktsIiwiR2wiLCJxbCIsIkpsIiwiWWwiLCJabCIsIlFsIiwiWGwiLCJ0YyIsIm5jIiwib2MiLCJzYyIsImljIiwibGMiLCJjYyIsImFjIiwidWMiLCJmYyIsImRjIiwiaGMiLCJnYyIsInZjIiwieWMiLCJTYyIsImxpbmUiLCJvZmZzZXQiLCJlbmQiLCJ4YyIsImhlbHBlciIsIlpjIiwiaW5TU1IiLCJZYyIsImlzQmxvY2siLCJkaXNhYmxlVHJhY2tpbmciLCJpc0NvbXBvbmVudCIsIkNjIiwiZWxlbWVudHMiLCJ3YyIsInByb3BlcnRpZXMiLCJrYyIsIlRjIiwiaXNTdGF0aWMiLCJjb25zdFR5cGUiLCJOYyIsIkVjIiwiY2FsbGVlIiwiJGMiLCJyZXR1cm5zIiwibmV3bGluZSIsImlzU2xvdCIsIk9jIiwiY29uc2VxdWVudCIsImFsdGVybmF0ZSIsIlJjIiwiRmMiLCJQYyIsIkFjIiwiTWMiLCJWYyIsIkljIiwiQmMiLCJMYyIsImpjIiwiVWMiLCJEYyIsIkhjIiwiZXhwIiwiV2MiLCJ6YyIsIktjIiwiR2MiLCJxYyIsInRhZ1R5cGUiLCJKYyIsIlFjIiwiWGMiLCJlYSIsInRhIiwibmEiLCJyZW1vdmVIZWxwZXIiLCJvYSIsInJhIiwiYW1wIiwiYXBvcyIsInF1b3QiLCJzYSIsImdldE5hbWVzcGFjZSIsImdldFRleHRNb2RlIiwiaXNWb2lkVGFnIiwiaXNQcmVUYWciLCJkZWNvZGVFbnRpdGllcyIsIm9uV2FybiIsImNvbW1lbnRzIiwibGEiLCJ4YSIsIk5hIiwiaW5WUHJlIiwiQ2EiLCJ2YSIsInVhIiwicGEiLCJhYSIsIndhIiwiaGEiLCJmYSIsInlhIiwiY2EiLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJiYSIsImV4ZWMiLCJTYSIsImlzU2VsZkNsb3NpbmciLCJFYSIsImthIiwibWEiLCJpc0J1aWx0SW5Db21wb25lbnQiLCJjb2RlZ2VuTm9kZSIsImdhIiwiX2EiLCJpc1F1b3RlZCIsIlRhIiwib3JpZ2luYWxTb3VyY2UiLCIkYSIsIlJhIiwiT2EiLCJGYSIsImhvaXN0IiwiSWEiLCJNYSIsIlZhIiwidlNsb3QiLCJicmFuY2hlcyIsInRyYW5zZm9ybUhvaXN0IiwiY29uc3RhbnRDYWNoZSIsIlBhIiwiQWEiLCJMYSIsImZpbGVuYW1lIiwicHJlZml4SWRlbnRpZmllcnMiLCJob2lzdFN0YXRpYyIsImNhY2hlSGFuZGxlcnMiLCJub2RlVHJhbnNmb3JtcyIsImRpcmVjdGl2ZVRyYW5zZm9ybXMiLCJleHByZXNzaW9uUGx1Z2lucyIsInNsb3R0ZWQiLCJzc3IiLCJzc3JDc3NWYXJzIiwiYmluZGluZ01ldGFkYXRhIiwiaW5saW5lIiwiaXNUUyIsImNvbXBhdENvbmZpZyIsInNlbGZOYW1lIiwiaGVscGVycyIsImhvaXN0cyIsImltcG9ydHMiLCJ0ZW1wcyIsImNhY2hlZCIsImlkZW50aWZpZXJzIiwidkZvciIsInZQcmUiLCJ2T25jZSIsImN1cnJlbnROb2RlIiwiY2hpbGRJbmRleCIsImluVk9uY2UiLCJoZWxwZXJTdHJpbmciLCJyZXBsYWNlTm9kZSIsInJlbW92ZU5vZGUiLCJvbk5vZGVSZW1vdmVkIiwiYWRkSWRlbnRpZmllcnMiLCJyZW1vdmVJZGVudGlmaWVycyIsImhvaXN0ZWQiLCJCYSIsImphIiwiVWEiLCJEYSIsIldhIiwiemEiLCJpbmRlbnQiLCJLYSIsImRlaW5kZW50IiwiR2EiLCJxYSIsInB1cmUiLCJKYSIsIllhIiwiaW5kZW50TGV2ZWwiLCJaYSIsIlFhIiwiWGEiLCJjb25kaXRpb24iLCJ1c2VyS2V5IiwiaXNUZW1wbGF0ZUlmIiwiZXUiLCJ0dSIsInN1IiwidmFsdWVBbGlhcyIsImtleUFsaWFzIiwib2JqZWN0SW5kZXhBbGlhcyIsInBhcnNlUmVzdWx0IiwibHUiLCJudSIsIm91IiwicnUiLCJpdSIsInJlcGVhdCIsImN1IiwiYXUiLCJ1dSIsInB1IiwiZnUiLCJodSIsImR1IiwiaGFzRHluYW1pY1Nsb3RzIiwibXUiLCJndSIsInZ1IiwiZHluYW1pY1Byb3BOYW1lcyIsInNob3VsZFVzZUJsb2NrIiwieXUiLCJuZWVkUnVudGltZSIsImlzSGFuZGxlcktleSIsIl91IiwiU3UiLCJzbG90TmFtZSIsInNsb3RQcm9wcyIsInh1IiwiQ3UiLCJ3dSIsImt1IiwiVHUiLCJOdSIsIldlYWtTZXQiLCJFdSIsIiR1IiwiT3UiLCJSdSIsIkZ1IiwiUHUiLCJpYSIsIm1vZGVsIiwic291cmNlTWFwIiwib3B0aW1pemVJbXBvcnRzIiwicnVudGltZUdsb2JhbE5hbWUiLCJydW50aW1lTW9kdWxlTmFtZSIsInNzclJ1bnRpbWVNb2R1bGVOYW1lIiwib25Db250ZXh0Q3JlYXRlZCIsImFzdCIsInByZWFtYmxlIiwidG9KU09OIiwiSGEiLCJBdSIsIk11IiwiVnUiLCJJdSIsIkJ1IiwiTHUiLCJqdSIsIlV1IiwiRHUiLCJIdSIsIld1IiwienUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJLdSIsIkd1IiwicXUiLCJKdSIsIll1IiwiWnUiLCJRdSIsIlh1IiwiZXAiLCJ0cCIsIm5wIiwiY2xvYWsiLCJrZXlNb2RpZmllcnMiLCJub25LZXlNb2RpZmllcnMiLCJldmVudE9wdGlvbk1vZGlmaWVycyIsIm9wIiwicnAiLCJzY3JpcHQkTyIsImNoYXJ0X3R5cGUiLCJyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlIiwiYmFzZV91cmxfcmVxdWVzdCIsImdldF9wYXJhbXNfdXJsX3JlcXVlc3QiLCJnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMiLCJjaGFydF9vcHRpb25zIiwiZnJvbV96b29tIiwidXJsX3JlcXVlc3QiLCJnZXRfdXJsX3JlcXVlc3QiLCJyZWdpc3Rlcl9zdGF0dXMiLCJkcmF3X2NoYXJ0IiwiZ2V0X2RhdGFfdXJpIiwiZG93bmxvYWRfY2hhcnRfcG5nIiwiZmlsZV9uYW1lIiwiZGF0YV91cmkiLCJkb3dubG9hZFVSSSIsIm5ld191cmxfcmVxdWVzdCIsInVwZGF0ZV9jaGFydCIsImNoYXJ0QXBleCIsImNoYXJ0X2NvbnRleHQiLCJvbl96b29tZWQiLCJnZXRfY2hhcnRfb3B0aW9ucyIsInVwZGF0ZV9jaGFydF9vcHRpb25zIiwidXBkYXRlX2NoYXJ0X3NlcmllcyIsIm5ld19lcG9jaF9zdGF0dXMiLCJ1bml4Iiwic2VsZWN0MiIsIm9wdGlvbnNfMiIsImdyb3Vwc19vcHRpb25zXzIiLCJzZWxlY3RlZF9vcHRpb25fMiIsImdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24iLCJzZWxlY3RlZF9vcHRpb24iLCJzZXRfc2VsZWN0ZWRfb3B0aW9uIiwiZ2V0X3ZhbHVlX2Zyb21fc2VsZWN0ZWRfb3B0aW9uIiwiY3VyX3ZhbHVlIiwic2VsZWN0MkRpdiIsImZpcnN0X3RpbWVfcmVuZGVyIiwic2V0X2lucHV0IiwiZ3JvdXBzX2RpY3QiLCJvcHRpb24iLCJvcHRfMiIsImdyb3VwIiwic2V0X29wdGlvbnMiLCJjdXJyZW50X3ZhbHVlIiwiZGlzYWJsZV9jaGFuZ2UiLCJ0aGVtZSIsImRyb3Bkb3duUGFyZW50IiwiZHJvcGRvd25BdXRvV2lkdGgiLCJvcHRpb25fMiIsImZpbmRfb3B0aW9uXzJfZnJvbV92YWx1ZSIsInNjcmlwdCRNIiwiU2VsZWN0U2VhcmNoIiwiZW5hYmxlX3JlZnJlc2giLCJvbGRWYWwiLCJzdGFydF9yZWZyZXNoIiwiZl9zZXRfcGlja2VyIiwicGlja2VyIiwidmFyX25hbWUiLCJmbGF0cGlja3IiLCJlbmFibGVUaW1lIiwiZGF0ZUZvcm1hdCIsInRpbWVfMjRociIsImNsaWNrT3BlbnMiLCJvbkNoYW5nZSIsInNlbGVjdGVkRGF0ZXMiLCJkYXRlU3RyIiwiZW5hYmxlX2FwcGx5Iiwid3JvbmdfZGF0ZSIsImZsYXRfYmVnaW5fZGF0ZSIsImZsYXRfZW5kX2RhdGUiLCJvbl9zdGF0dXNfdXBkYXRlZCIsInNlbGVjdGVkX3RpbWVfb3B0aW9uIiwidXBkYXRlX2Zyb21faW50ZXJ2YWwiLCJjaGFuZ2Vfc2VsZWN0X3RpbWUiLCJyZWZyZXNoX2ludGVydmFsX3NlY29uZHMiLCJ1dGNfc190b19zZXJ2ZXJfZGF0ZSIsInNlcnZlcl9kYXRlX3RvX2RhdGUiLCJkYXRlIiwiZW5kX2RhdGVfdGltZV91dGMiLCJiZWdpbl9kYXRlX3RpbWVfdXRjIiwiZ2V0X3V0Y19zZWNvbmRzIiwiZW1pdF9lcG9jaF9jaGFuZ2UiLCJzZXREYXRlIiwic2V0X3NlbGVjdF90aW1lX3ZhbHVlIiwiZXBvY2hfc3RhdHVzIiwiYWRkX3N0YXR1c19pbl9oaXN0b3J5IiwiYmVnaW5fdXRjIiwiZW5kX3V0YyIsInNfdmFsdWVzIiwiZ2V0X3NlbGVjdF92YWx1ZXMiLCJ0b2xlcmFuY2UiLCJlbmRfdXRjX3MiLCJiZWdpbl91dGNfcyIsImlzX2JldHdlZW4iLCJtaW5fNSIsInNlbGVjdF90aW1lX3ZhbHVlIiwibWluXzMwIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInllYXIiLCJ0aW1lX3ByZXNldF9saXN0Iiwibm93X3MiLCJiZWdpbl9kYXRlIiwiZW5kX2RhdGUiLCJyZWZyZXNoX2RhdGEiLCJpbnRlcnZhbF9zIiwiZ2V0X2xhc3RfZGF5X3NlY29uZHMiLCJnZXRfbGFzdF93ZWVrX3NlY29uZHMiLCJnZXRfbGFzdF9tb250aF9zZWNvbmRzIiwiZ2V0X2xhc3RfeWVhcl9zZWNvbmRzIiwidXRjX3RzIiwic2V0TW9udGgiLCJpbnRlcnZhbCIsImNlbnRlciIsImp1bXBfdGltZV9iYWNrIiwianVtcF90aW1lX2FoZWFkIiwicHJldmlvdXNfZW5kIiwiaGlzdG9yeV9sYXN0X3N0YXR1cyIsImFwcGx5X3N0YXR1c19ieV9oaXN0b3J5IiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzIiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIl9ob2lzdGVkXzUiLCJfY3JlYXRlRWxlbWVudFZOb2RlIiwicGxhY2Vob2xkZXIiLCJfaG9pc3RlZF8xMyIsIl9ob2lzdGVkXzE1Iiwic3R5bGVJbmplY3QiLCJpbnNlcnRBdCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlU2hlZXQiLCJfcmVuZGVyU2xvdCIsIl9jb21wb25lbnRfc2VsZWN0X3NlYXJjaCIsIiRldmVudCIsIm9uU2VsZWN0X29wdGlvbiIsIl9ob2lzdGVkXzYiLCJfaG9pc3RlZF83IiwiX2NyZWF0ZUNvbW1lbnRWTm9kZSIsIl9ob2lzdGVkXzgiLCJfaG9pc3RlZF85Iiwic2NyaXB0JEwiLCJwcmV2ZW50RW50ZXIiLCJjbG9zZSIsIl9jcmVhdGVFbGVtZW50QmxvY2siLCJvblN1Ym1pdCIsInRhYmluZGV4IiwibW9kYWxfaWQiLCJzbmFwc2hvdF9zZWxlY3RlZCIsImFwcGx5X3RpbWUiLCJhcHBseV90aW1lX3RleHQiLCJzYXZlX3RpbWUiLCJzYXZlX3RpbWVfdGV4dCIsInNuYXBzaG90X25hbWUiLCJzbmFwc2hvdHMiLCJvcmRlcl9ieSIsInBhdHRlcm5fc2luZ2xld29yZCIsImRpc2FibGVfYWRkIiwiZGlzYWJsZV9zZWxlY3QiLCJnZXRfcGFnZSIsImxhc3Rfb3JkZXJfYnkiLCJzb3J0X3NuYXBzaG90c19ieSIsImxvY2FsZUNvbXBhcmUiLCJsb2FkX3NuYXBzaG90cyIsImFkZF9zbmFwc2hvdCIsInBhcmFtc19vYmoiLCJzZWxlY3Rfc25hcHNob3QiLCJkZWxldGVfc25hcHNob3QiLCJkZWxldGVfYWxsIiwic2F2ZV90aW1lX2ZpbHRlcl90ZXh0IiwiX2kxOG4iLCJiZWdpbl90aW1lIiwiZW5kX3RpbWUiLCJhcHBseV90aW1lX2ZpbHRlcl90ZXh0Iiwic25hcHNob3RzX29iaiIsInVwZGF0ZV90aW1lc2VyaWVzIiwidGltZXNlcmllcyIsImRlbGV0ZV90cyIsImJ5dGVzVG9TaXplRm9ybWF0dGVyIiwiaGFuZGxlcklkQWRkTGluayIsImhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsIiwidG9wX2FwcGxpY2F0aW9uIiwidGFibGVfdmFsdWUiLCJ2aWV3IiwiZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMiLCJjb2x1bW5EZWZzIiwidGFyZ2V0cyIsImNvbHVtbk5hbWUiLCJzZXJ2aWNlIiwic2NoZW1hIiwidHNfc2NoZW1hIiwiYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEiLCJ0c19xdWVyeSIsImNyZWF0ZUxpbmtDYWxsYmFjayIsIm9yZGVyYWJsZSIsImNyZWF0ZVByb2dyZXNzQmFyIiwicmVzcG9uc2l2ZVByaW9yaXR5IiwicmVuZGVyX2lmIiwiaXNfaGlzdG9yeV9lbmFibGVkIiwianVtcF90b19oaXN0b3JpY2FsIiwibDdfcHJvdG8iLCJoaXN0b3JpY2FsX2Zsb3dzX3VybCIsInNvdXJjZV9hcnJheSIsInBhcmFtc19hcnJheSIsInNvdXJjZV9kZWZfYXJyYXkiLCJzb3VyY2VfZGVmIiwib3BlbiIsImNyZWF0ZUFjdGlvbkJ1dHRvbnMiLCJ0b3BfY2F0ZWdvcmllcyIsImNhdGVnb3J5IiwiaW50ZXJmYWNlX3RvcF90YWJsZXMiLCJob3N0X3JlZiIsImFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0IiwidGFncyIsInNvdXJjZXNfdHlwZXNfZW5hYmxlZCIsImlzX2xvY2FsIiwiaXNfYXZhaWxhYmxlIiwiaG9zdF90c19hdmFpbGFibGUiLCJwX3VybCIsImp1bXBfdG9faG9zdCIsImlmaWQiLCJob3N0X3VybCIsImRyb3Bkb3duIiwidG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSIsImludGVyZmFjZVRvcFRhYmxlcyIsImhvc3RfdG9wX3RhYmxlcyIsImJwc0Zvcm1hdHRlciIsInRvcF9zbm1wX2ludGVyZmFjZSIsInRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCIsImRldmljZSIsImlmX2luZGV4IiwiZl9nZXRfbGFiZWwiLCJ0c19ncm91cCIsInNvdXJjZV9sYWJlbCIsImxhYmVsX3RleHQiLCJzbm1wX2ludGVyZmFjZV90b3BfdGFibGVzIiwidWlfdHlwZXMiLCJzb3VyY2VzX3VybF9lbF90b19zb3VyY2UiLCJpZm5hbWUiLCJwb29sX2lkIiwiYW1faG9zdCIsImFtIiwibWVhc3VyZW1lbnQiLCJtZWFzdXJlbWVudF9rZXkiLCJzb3VyY2VzX3R5cGVzX3RhYmxlcyIsImludGVyZmFjZSIsImhvc3RUb3BUYWJsZXMiLCJzbm1wX2ludGVyZmFjZSIsInNubXBJbnRlcmZhY2VUb3BUYWJsZXMiLCJzbm1wX2RldmljZSIsInNvdXJjZXNfdHlwZXMiLCJyZWdleF9wYWdlX3VybCIsIm1haW5fc291cmNlX2RlZiIsInJlZ2V4X3R5cGUiLCJzb3VyY2VzX3VybCIsInNvdXJjZXNfZnVuY3Rpb24iLCJ2YWx1ZV91cmwiLCJ2YWx1ZV9tYXBfc291cmNlc19yZXMiLCJkaXNhYmxlX3Rza2V5IiwiZl9nZXRfdmFsdWVfdXJsIiwiZl9zZXRfdmFsdWVfdXJsIiwidWlfdHlwZSIsImlkX2dyb3VwIiwibWV0cmljc0NvbnN0cyIsInNldF90aW1lc2VyaWVzX2dyb3Vwc19pbl91cmwiLCJ0aW1lc2VyaWVzX2dyb3VwcyIsInBhcmFtc190aW1lc2VyaWVzX2dyb3VwcyIsInBhc3QiLCJhdmciLCJwZXJjXzk1IiwibWV0cmljX3NjaGVtYV9xdWVyeSIsIm1ldHJpYyIsInRpbWVzZXJpZXNfcGFyYW0iLCJzb3VyY2VfdmFsdWVfYXJyYXlfcXVlcnkiLCJnZXRfdHNfZ3JvdXBfdXJsX3BhcmFtIiwidXJsX3RpbWVzZXJpZXNfZ3JvdXBzIiwiZ2V0X3RzX2dyb3VwIiwiZ2V0X3RzX2dyb3VwX2lkIiwiZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMiLCJtZXRyaWNfdHNfc2NoZW1hIiwibWV0cmljX3F1ZXJ5IiwiZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSIsImdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSIsIm1ldHJpY3MiLCJnZXRfbWV0cmljcyIsImdldF9kZWZhdWx0X21ldHJpYyIsImdldF91cmxfcGFyYW1fZnJvbV90c19ncm91cCIsInRzX2dyb3VwX3VybF9wYXJhbSIsImluZm8iLCJzb3VyY2VfdHlwZV9pZCIsInNvdXJjZV92YWx1ZV9hcnJheSIsIm1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXkiLCJ0aW1lc2VyaWVzX3VybCIsImdldF9zb3VyY2VfdHlwZV9mcm9tX2lkIiwiZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5IiwiZ2V0X21ldHJpY19mcm9tX3NjaGVtYSIsInRzX3VybF9hcnJheSIsInRzX3VybCIsImdldF90aW1lc2VyaWVzIiwiZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCIsInNldF9zb3VyY2VfdHlwZV9pZF9ncm91cCIsIm1ldHJpY19pZCIsInNvdXJjZV9kZWZfdmFsdWUiLCJnZXRfZGVmYXVsdF9zb3VyY2VfdmFsdWVfYXJyYXkiLCJnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfZGljdCIsInNvdXJjZV92YWx1ZV9kaWN0Iiwic291cmNlX3ZhbHVlIiwic291cmNlcyIsImdldF9zb3VyY2VzIiwiY2FjaGVfc291cmNlcyIsImZfbWFwX3NvdXJjZV9lbGVtZW50Iiwic29ydEFscGhhYmV0aWNhbGx5Iiwic2V0X3NvdXJjZV92YWx1ZV9vYmplY3RfaW5fdXJsIiwic291cmNlX3ZhbHVlX29iamVjdCIsImNhY2hlX21ldHJpY3MiLCJsYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCIsImN1cnJlbnRfbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwiLCJnZXRfbWV0cmljc191cmwiLCJzb3VyY2VfYXJyYXlfa2V5IiwiZ2V0X21ldHJpY19rZXkiLCJkZWZhdWx0X3Zpc2libGUiLCJtZXRyaWNfc2NoZW1hIiwiZ2V0X21ldHJpY19xdWVyeV9mcm9tX3RzX3F1ZXJ5Iiwic291cmNlX2RlZl9kaWN0Iiwic19kZWYiLCJ0c19xdWVyeV9hcnJheSIsInRzX3ZhbF9rZXkiLCJkZWZhdWx0X21ldHJpYyIsIm1ldHJpY3NNYW5hZ2VyIiwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsIiwiZ3JvdXBzIiwidHNUb0FwZXhPcHRpb25zIiwidHNPcHRpb25zIiwic3RhcnRUaW1lIiwiZDIiLCJtZWFzdXJlX3VuaXQiLCJnZXRTZXJpZUlkIiwiZ2V0WWF4aXNOYW1lIiwibWVhc3VyZVVuaXQiLCJnZXRTZXJpZU5hbWUiLCJ0c0dyb3VwIiwiZXh0ZW5kU2VyaWVzTmFtZSIsIm5hbWVfbW9yZV9zcGFjZSIsInNvdXJjZV9pbmRleCIsImdldE1haW5Tb3VyY2VEZWZJbmRleCIsImdldFlheGlzSWQiLCJkZWZhdWx0Q29sb3JzIiwiZ3JvdXBzT3B0aW9uc01vZGVzRW51bSIsImdldEdyb3VwT3B0aW9uTW9kZSIsImdyb3VwX2lkIiwidHNBcnJheVRvQXBleE9wdGlvbnNBcnJheSIsInRzT3B0aW9uc0FycmF5IiwidHNHcnB1cHNBcnJheSIsImdyb3Vwc09wdGlvbnNNb2RlIiwidHNDb21wYXJlIiwiYXBleE9wdGlvbnNBcnJheSIsInRzQXJyYXlUb0FwZXhPcHRpb25zIiwic2V0TGVmdFBhZGRpbmciLCJ0c0RpY3QiLCJ5YXhpc0lkIiwidHNFbCIsInRzQXJyYXkiLCJ0c09wdGlvbnNBcnJheTIiLCJ0c0dycHVwc0FycmF5MiIsImFwZXhPcHRpb25zIiwib25lQ2hhcnQiLCJtaW5XaWR0aCIsInNlcmllc0FycmF5IiwieWF4aXNBcnJheSIsInlheGlzRGljdCIsImZvcm1hdHRlckRpY3QiLCJnZXRBZGRTZXJpZXNOYW1lU291cmNlIiwiZm9yY2VEcmF3VHlwZSIsInNlcmllc0FwZXgiLCJzZXJpZXNLZXlzIiwic2siLCJzTWV0YWRhdGEiLCJzY2FsYXIiLCJpbnZlcnRfZGlyZWN0aW9uIiwiZk1hcERhdGEiLCJ0c1Zpc2liaWxpdHkiLCJleHRfbGFiZWwiLCJzTmFtZSIsImRyYXdUeXBlIiwiZHJhd190eXBlIiwic0FwZXgiLCJjb2xvclBhbGV0dGUiLCJhZGRpdGlvbmFsX3NlcmllcyIsInNlcmllc0RhdGEiLCJkYXNoZWQiLCJmQnVpbGRDb25zdGFudFNlcmllIiwicHJlZml4Iiwic3RhdGlzdGljcyIsImJ5X3NlcmllIiwiYXZlcmFnZSIsImdldFNlcmllc0luQXBleEZvcm1hdCIsInlheGlzQXBleCIsImludmVydERpcmVjdGlvbiIsImNvdW50WWF4aXNJZCIsIm1kS2V5IiwieWF4aXNTZXJpZXNOYW1lIiwiYWJzIiwic2VyaWVzTmFtZSIsIm9wcG9zaXRlIiwiZ2V0WWF4aXNJbkFwZXhGb3JtYXQiLCJjb3VudDAiLCJjb3VudDEiLCJjb2xvcnMwIiwiY29sb3JzMSIsImQzdjciLCJzY2hlbWVDYXRlZ29yeTEwIiwic2V0U2VyaWVzQ29sb3JzMiIsInlBeGlzQXJyYXkiLCJ5QXhpc0FycmF5RGljdCIsIm1pbk1heERpY3QiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIm1pbk1heCIsImZBZGRPclN1YnRyYWMzUGVyYyIsImlzQWRkIiwib25lUGVyYyIsInlBcnJheSIsIm1pbl9hYnMiLCJtYXhfYWJzIiwic2V0TWluTWF4WWF4aXMiLCJvcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJtYXJrZXJzIiwic3Ryb2tlQ29sb3JzIiwibGluZUNhcCIsImRhc2hBcnJheSIsInNob3dGb3JTaW5nbGVTZXJpZXMiLCJob3Jpem9udGFsQWxpZ24iLCJidWlsZENoYXJ0T3B0aW9ucyIsImdldFRzUXVlcnkiLCJub3RfbWV0cmljX3F1ZXJ5IiwidHNRdWVyeSIsImdldFRzQ2hhcnRzT3B0aW9ucyIsImh0dHBQcmVmaXgiLCJlcG9jaFN0YXR1cyIsInRpbWVzZXJpZXNHcm91cHMiLCJpc1BybyIsInRzQ2hhcnRzT3B0aW9ucyIsInBhcmFtc0Vwb2NoT2JqIiwicGFyYW1zQ2hhcnQiLCJpbml0aWFsX3BvaW50IiwidHNfY29tcGFyZSIsInRzRGF0YVVybE11bHRpIiwidHNfcmVxdWVzdHMiLCJtYWluX3NvdXJjZV9pbmRleCIsInBPYmoiLCJ0c2tleSIsInRzRGF0YVVybCIsInBhcmFtc1VybFJlcXVlc3QiLCJ0aW1lc2VyaWVzVXRpbHMiLCJVdGlscyIsImdldF9kYXRhX3BhdHRlcm4iLCJyX2lwdjQiLCJyX2lwdjRfdmxhbiIsInJfaXB2NiIsInJfaXB2Nl92bGFuIiwicmVwbGFjZUFsbCIsIm5ldHdvcmtfaXB2NCIsImlwdjRfY2lkciIsImlwdjRfY2lkcl92bGFuIiwibmV0d29ya19pcHY2IiwicmVnZXhWYWxpZGF0aW9uIiwic2VsZWN0X3NlYXJjaF9tZXRyaWNzIiwiY3VycmVudF9wYWdlX3NvdXJjZV90eXBlIiwic2VsZWN0ZWRfc291cmNlX3R5cGUiLCJzb3VyY2VzX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkiLCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsIiwic291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheSIsImlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkIiwiZW5hYmxlX2FwcGx5X3NvdXJjZSIsInJnX3RleHQiLCJzb3VyY2VfdGV4dCIsImhpZGVfc291cmNlcyIsInNlbGVjdGVkX21ldHJpYyIsInRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkIiwidGltZXNlcmllc190b19hZGQiLCJ3YWl0X2luaXQiLCJjaGFuZ2Vfc291cmNlX3R5cGUiLCJ1cGRhdGVfdGltZXNlcmllc190b19hZGQiLCJjaGFuZ2VfYWN0aW9uIiwicmVnZXhfc291cmNlX2FycmF5IiwicmVnZXhfc291cmNlIiwic2V0X3JlZ2V4Iiwic2QiLCJzZXRfaGlkZV9zb3VyY2VzIiwic291cmNlc19hcnJheV90ZW1wIiwiZGVmYXVsdF9zb3VyY2VfYXJyYXkiLCJzZXRfc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbCIsInNldF9zb3VyY2VzX2FycmF5Iiwic2V0X21ldHJpY3MiLCJhcHBseV9zb3VyY2VfYXJyYXkiLCJjaGFuZ2Vfc291cmNlX2FycmF5IiwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZSIsImRlZmF1bHRfY29uZmlnIiwidHNfaWQiLCJnZXRfdGltZXNlcmllc19ncm91cF9uYW1lIiwic291cmNlX3R5cGVfbmFtZSIsInNvdXJjZV9kZWZfaW5kZXgiLCJnZXRfdGltZXNlcmllc19ncm91cF9pZCIsInRzX2dyb3VwX2lkIiwiYWRkX3RzX2dyb3VwIiwidHNfZ3JvdXBfdG9fYWRkIiwiZW1pdF9hcHBseSIsInRzX2dyb3VwX2luZGV4Iiwic2V0X3RpbWVzZXJpZXNfZ3JvdXBzIiwic2NyaXB0JEgiLCJNb2RhbCIsImRlc2NyaXB0aW9uIiwiaW52YWxpZF9icGYiLCJicGZfZmlsdGVyIiwiZXh0cmFjdF9ub3ciLCJzaG93X21lbnUiLCJpZF9tb2RhbCIsInBhZDJfbnVtYmVyIiwiZm9ybWF0X2RhdGUiLCJkX21zIiwidmFsdWVPZiIsInVybF9yZXF1ZXN0X29iaiIsInVybF9yZXF1ZXN0X3BhcmFtcyIsImpvYl9pZCIsImFsZXJ0X3RleHRfaHRtbCIsInBhZ2VfbmFtZSIsInRleHRfaHRtbCIsImJwZiIsImRhdGVfYmVnaW4iLCJkYXRlX2VuZCIsImRlc2MiLCJzaG93X2hpZGVfbWVudSIsIl9ob2lzdGVkXzEwIiwiX2hvaXN0ZWRfMTIiLCJfaG9pc3RlZF8xNCIsIl9ob2lzdGVkXzE3IiwiX2NyZWF0ZUJsb2NrIiwiX2NvbXBvbmVudF9tb2RhbCIsIm9uQXBwbHkiLCJfbm9ybWFsaXplQ2xhc3MiLCJfY3JlYXRlVGV4dFZOb2RlIiwiX3dpdGhEaXJlY3RpdmVzIiwiX2hvaXN0ZWRfMTEiLCJfdG9EaXNwbGF5U3RyaW5nIiwiYXV0b2NvbXBsZXRlIiwic3BlbGxjaGVjayIsIm1hcmdpbiIsIl9ob2lzdGVkXzE2IiwiX2hvaXN0ZWRfMTgiLCJfaG9pc3RlZF8xOSIsImZvb3RlciIsImZpbGVuYW1lX3ZhbGlkYXRpb24iLCJlbmFibGVfZG93bmxvYWQiLCJleHQiLCJzY3JpcHQkRiIsInNob3dfYWxlcnQiLCJhbGVydF90eXBlIiwiYmFzZV9wYXJhbXMiLCJ0YWJsZV9pZCIsImV4dGVuZF9jb25maWciLCJzZXJ2ZXJTaWRlIiwic2Nyb2xsWCIsInNlYXJjaGluZyIsImVuYWJsZV9zZWFyY2giLCJvcmRlciIsImNvbHVtbnNfY29uZmlnIiwiYXV0b1dpZHRoIiwiZGF0YV91cmwiLCJ0YWJsZUFwaSIsIm9JbnN0YW5jZSIsImFwaSIsIm9yZGVyQ29sdW1uSW5kZXgiLCJvcmRlckNvbHVtbk5hbWUiLCJtYXBfc2VhcmNoIiwiYmVmb3JlU2VuZCIsInNob3dPdmVybGF5cyIsImRyYXdDYWxsYmFjayIsImhpZGVPdmVybGF5cyIsInRhYmxlX2NvbmZpZyIsImdldFN0ZERhdGF0YWJsZUNvbmZpZyIsInRhYmxlX2J1dHRvbnMiLCJleHRlbmRDb25maWciLCJEYXRhVGFibGUiLCJmaWx0ZXJfYnV0dG9ucyIsImN1cnJfdmFsdWUiLCJudW1fbm9uX2FjdGl2ZV9lbnRyaWVzIiwiYnVpbGRVUkwiLCJsb2FkRGF0YXRhYmxlIiwiZGVsZXRlX2J1dHRvbl9oYW5kbGVycyIsImRlbGV0ZUJ1dHRvbkhhbmRsZXJzIiwiaXNfZGVzdHJveWVkIiwiZGVzdHJveV90YWJsZSIsImlkX2RhdGVfdGltZV9waWNrZXIiLCJjaGFydHMiLCJkYXRlX3RpbWVfcGlja2VyIiwidG9wX3RhYmxlX3JlZiIsIm1vZGFsX3RpbWVzZXJpZXMiLCJtb2RhbF9zbmFwc2hvdCIsIm1vZGFsX2Rvd25sb2FkX2ZpbGUiLCJlbmFibGVfc3RhdHNfdGFibGUiLCJjaGFydHNfb3B0aW9uc19pdGVtcyIsImdyb3Vwc19vcHRpb25zX21vZGVzIiwiY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlIiwiZ3JvdXBzX21vZGUiLCJpbml0X2dyb3Vwc19vcHRpb25fbW9kZSIsImxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkIiwiY3VzdG9tX21ldHJpYyIsInBhZ2Vfc25hcHNob3RzIiwidHNfbWVudV9yZWFkeSIsInNldF9kZWZhdWx0X3NvdXJjZV9vYmplY3RfaW5fdXJsIiwicHVzaF9jdXN0b21fbWV0cmljIiwibG9hZF9wYWdlX3N0YXRzX2RhdGEiLCJmb3JjZV9yZWZyZXNoIiwiY2FjaGVfc25hcHNob3RzIiwiZW5hYmxlX3NuYXBzaG90cyIsIm1ldHJpY3Nfc25hcHNob3RzIiwiaXNfc25hcHNob3QiLCJnZXRfc25hcHNob3RzX21ldHJpY3MiLCJzbSIsImdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyIsInNlbGVjdF9tZXRyaWMiLCJ1cmxfcGFyYW1ldGVycyIsInRpbWVzZXJpZXNfdXJsX3BhcmFtcyIsImdldF9zZWxlY3RlZF90aW1lc2VyaWVzX2dyb3VwcyIsImxvYWRfc2VsZWN0ZWRfbWV0cmljX3BhZ2Vfc3RhdHNfZGF0YSIsInJlZnJlc2hfbWV0cmljcyIsImVwb2NoX2NoYW5nZSIsIm5ld19lcG9jaCIsImlzX250b3BfcHJvIiwic2VsZWN0ZWRfdG9wX3RhYmxlIiwidGFibGVfY29uZmlnX2RlZiIsImdldF90b3BfdGFibGVfdXJsIiwidGFibGVfZGVmIiwicmVmcmVzaF90b3BfdGFibGUiLCJjaGFydF9yZWxvYWRlZCIsInNob3dfbW9kYWxfc25hcHNob3QiLCJzaG93X21hbmFnZV90aW1lc2VyaWVzIiwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zIiwiY2hhcnRfaW5kZXgiLCJ0c19jaGFydHNfb3B0aW9ucyIsInJlZnJlc2hfc25hcHNob3RzIiwiYXBwbHlfbW9kYWxfdGltZXNlcmllcyIsImNoYW5nZV9ncm91cHNfb3B0aW9uc19tb2RlIiwicmVsb2FkX2NoYXJ0c19kYXRhIiwicmVsb2FkX3RvcF90YWJsZV9vcHRpb25zIiwicmVmcmVzaGVkX3RpbWVfaW50ZXJ2YWwiLCJnZXRfdHNfY29tcGFyZSIsInRzX29wdGlvbnMiLCJzZXRfdGltZXNlcmllc19ncm91cHNfc291cmNlX2xhYmVsIiwiY2hhcnRzX29wdGlvbnMiLCJ1cGRhdGVfY2hhcnRzIiwic2V0X2NoYXJ0c19vcHRpb25zX2l0ZW1zIiwiZXh0ZW5kX3NlcmllX25hbWUiLCJkaXNhYmxlX3N0YXRzIiwiZl9nZXRfdG90YWxfZm9ybWF0dGVyX3R5cGUiLCJzdGF0c19yb3dzIiwidHNfc3RhdHMiLCJzX21ldGFkYXRhIiwidG90YWxfZm9ybWF0dGVyX3R5cGUiLCJ0b3RhbF9mb3JtYXR0ZXIiLCJ0b3RhbCIsIm1heF92YWwiLCJtaW5fdmFsIiwic2V0X3N0YXRzX3Jvd3MiLCJ0c19ncm91cF9kaWN0IiwidG9wX3RhYmxlX2lkX2RpY3QiLCJ0b3BfdGFibGVfb3B0aW9ucyIsIm1haW5fc291cmNlIiwic291cmNlX3R5cGVfdGFibGVzIiwiZW5hYmxlc190YWJsZV92YWx1ZSIsInNvdXJjZXNfdHlwZXNfdG9wX2VuYWJsZWQiLCJyZW5kZXJfaWZfY29udGV4dCIsInNldF90b3BfdGFibGVfb3B0aW9ucyIsInRhYmxlX3ZpZXciLCJwX29iaiIsImRldGFpbF92aWV3IiwibmV3X2NoYXJ0cyIsInN0YXRzX2NvbHVtbnMiLCJqdW1wX3RvX2hpc3RvcmljYWxfZmxvd3MiLCJoaXN0b3JpY2FsX3VybCIsIm1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiIsInNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uIiwic2hvd19tb2RhbF9kb3dubG9hZF9maWxlIiwiY2hhcnRfaW1hZ2VfYXJyYXlfcHJvbWlzZSIsInJlamVjdCIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJjaGFydF9pbWFnZV9hcnJheSIsImNhbnZhcyIsImNhbnZhc19jb250ZXh0IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsInNjcmlwdCRCIiwidGFiX2xpc3QiLCJvbGRfdGFiIiwidG1wIiwiY2hhbmdlX3RhYiIsImRlbGV0ZV8iLCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50Iiwic2NyaXB0JHoiLCJkYXRhdGFibGUiLCJEYXRhdGFibGUiLCJNb2RhbERlbGV0ZUNvbmZpcm0iLCJUYWJMaXN0IiwicGFnZV9jc3JmIiwidGFibGVfZmlsdGVycyIsImFzc2V0X3RhYmxlX3RhYiIsImFzc2V0X2ZhbWlseSIsIkRhdGF0YWJsZVZ1ZSIsImRhdGF0YWJsZUJ1dHRvbiIsImdldF91cmwiLCJyZWxvYWRfdGFibGUiLCJ0bXBfcGFyYW1zIiwiZGVmYXVsdERhdGF0YWJsZUNvbmZpZyIsImNvbmZpZ0RldmljZXMiLCJjb25maWdfZGV2aWNlc19zdGFuZGFyZCIsImNlbnRyYWxpdHlDb25maWdEZXZpY2VzIiwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSIsInN0YXJ0X2RhdGF0YWJsZSIsImhpZGVfZHJvcGRvd25zIiwiZ2V0X2FjdGl2ZV90YWJsZSIsInNob3dfZGVsZXRlX2FsbF9kaWFsb2ciLCJ0aXRsZV9kZWxldGUiLCJib2R5X2RlbGV0ZSIsInRpdGxlX2Rvd25sb2FkIiwiYm9keV9kb3dubG9hZCIsImNsaWNrX2l0ZW0iLCJfb3BlbkJsb2NrIiwiX2NvbXBvbmVudF9tb2RhbF9kZWxldGVfY29uZmlybSIsIm9uRGVsZXRlIiwiX2NvbXBvbmVudF90YWJfbGlzdCIsIm9uQ2xpY2tfaXRlbSIsIl9jb21wb25lbnRfZGF0YXRhYmxlIiwic2NyaXB0JHkiLCJpc19hZG1pbiIsImRlZmF1bHRPcHRpb25zIiwiYXV0b1Jlc2l6ZSIsInNoYXBlIiwic2NhbGluZyIsInNoYWRvdyIsImVkZ2VzIiwiaW5oZXJpdCIsInNtb290aCIsInJvdW5kbmVzcyIsImludGVyYWN0aW9uIiwidG9vbHRpcERlbGF5IiwiaGlkZUVkZ2VzT25EcmFnIiwiaGlkZUVkZ2VzT25ab29tIiwiaG92ZXIiLCJwaHlzaWNzIiwiYmFybmVzSHV0Iiwic3ByaW5nQ29uc3RhbnQiLCJhdm9pZE92ZXJsYXAiLCJncmF2aXRhdGlvbmFsQ29uc3RhbnQiLCJkYW1waW5nIiwiY2VudHJhbEdyYXZpdHkiLCJzdGFiaWxpemF0aW9uIiwib25seUR5bmFtaWNFZGdlcyIsInVua25vd24iLCJwcmludGVyIiwiZmFjZSIsIndlaWdodCIsInZpZGVvIiwid29ya3N0YXRpb24iLCJsYXB0b3AiLCJ0YWJsZXQiLCJwaG9uZSIsInR2IiwibmV0d29ya2luZyIsIndpZmkiLCJuYXMiLCJtdWx0aW1lZGlhIiwiaW90IiwibnRvcG5nX21hcF9tYW5hZ2VyIiwic2VydmljZV9pZCIsIm5ld19zdGF0ZSIsInNlcnZpY2Vfc3RhdHVzIiwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50Iiwic2NyaXB0JHgiLCJzZXJ2aWNlX2FjY2VwdGFuY2UiLCJzZXJ2aWNlX3RhYmxlX3RhYiIsImNyZWF0ZWRDZWxsIiwiYXBwbHlDZWxsU3R5bGUiLCJjcmVhdGVfYWN0aW9uX2J1dHRvbnMiLCJ0b2dnbGVfYWxsb3dlZF9zdGF0ZSIsImhhc2hfaWQiLCJ0b2dnbGVfZGVuaWVkX3N0YXRlIiwidG9nZ2xlX3VuZGVjaWRlZF9zdGF0ZSIsImN1cnJlbnRTdGF0dXMiLCJhY2NlcHRhbmNlIiwiYWxsb3dlZEJ1dHRvbiIsImRlbmllZEJ1dHRvbiIsInVuZGVjaWRlZEJ1dHRvbiIsInN3aXRjaF90b19zdGFuZGFyZCIsInN3aXRjaF90b19jZW50cmFsaXR5IiwiZGF0YVJlcXVlc3QiLCJtYXBfaWQiLCJub2Rlc19kYXRhc2V0IiwiZWRnZXNfZGF0YXNldCIsIm1heF9lbnRyaWVzIiwidXBkYXRlX3ZpZXdfc3RhdGVfaWQiLCJsb2FkX3NjYWxlIiwiZ2V0RWxlbWVudEJ5SWQiLCJtYXhfZW50cnlfcmVhY2hlZCIsIkRhdGFTZXQiLCJkYXRhc2V0cyIsImVtcHR5X25ldHdvcmsiLCJOZXR3b3JrIiwic2F2ZV90b3BvbG9neV92aWV3Iiwic2V0X2V2ZW50X2xpc3RlbmVyIiwib2xkU2NhbGUiLCJsb2FkRWxlbWVudFNjYWxlIiwic2F2ZUVsZW1lbnRTY2FsZSIsInRtcEhvc3QiLCJ6b29tX2luX2FuZF9zYXZlX3RvcG9sb2d5IiwiZXZlbnRfbGlzdGVuZXJzIiwicG9zaXRpb25zIiwiZ2V0UG9zaXRpb25zIiwiZ2V0U2NhbGUiLCJnZXRWaWV3UG9zaXRpb24iLCJtb3ZlVG8iLCJNSU5fU0NBTEUiLCJhbmltYXRpb24iLCJlYXNpbmdGdW5jdGlvbiIsInNldERhdGEiLCJpc19tYXhfZW50cnlfcmVhY2hlZCIsImF1dG9sYXlvdXQiLCJzdGFiaWxpemUiLCJ1cGRhdGVfdXJsX3BhcmFtcyIsImF1dG9sYXlvdXRfIiwiY2hhbmdlX2ZpbHRlcl9ldmVudCIsInNjcmlwdCR1IiwiTmV0d29ya01hcCIsIk1vZGFsQXV0b2xheW91dENvbmZpcm0iLCJhbGxfZmlsdGVyX2xpc3QiLCJOZXR3b3JrTWFwVnVlIiwiZmlsdGVyX25hbWUiLCJmaWx0ZXJfbGlzdCIsImFjdGl2ZV9maWx0ZXIiLCJhY3RpdmVfZmlsdGVyX2xpc3QiLCJkb3dubG9hZF91cmwiLCJzdGFydF92aXNfbmV0d29ya19tYXAiLCJtYXhfZW50cmllc19yZWFjaGVkIiwicmVsb2FkX21hcCIsInVwZGF0ZV9hbmRfcmVsb2FkX21hcCIsImdldF9tYXAiLCJzaG93X2F1dG9sYXlvdXRfZGlhbG9nIiwidGl0bGVfYXV0b2xheW91dCIsImJvZHlfYXV0b2xheW91dCIsIm5vX3NlcnZpY2VzX21lc3NhZ2UiLCJtYXhfZW50cnlfdGl0bGUiLCJfRnJhZ21lbnQiLCJfcmVuZGVyTGlzdCIsIl9jb21wb25lbnRfbW9kYWxfYXV0b2xheW91dF9jb25maXJtIiwib25BdXRvbGF5b3V0IiwiX2NvbXBvbmVudF9uZXR3b3JrX21hcCIsImVtcHR5X21lc3NhZ2UiLCJzY3JpcHQkdCIsInVwZGF0ZWRfdXJsX3BhcmFtcyIsInNjcmlwdCRzIiwic2NyaXB0JHIiLCJtYWluX3RpdGxlIiwic2Vjb25kYXJ5X3RpdGxlX2xpc3QiLCJoZWxwX2xpbmsiLCJpdGVtc190YWJsZSIsImZsb2F0IiwiYmFkZ2VfbnVtIiwiaW5wdXRfbWFjX2xpc3QiLCJpbnB1dF90cmlnZ2VyX2FsZXJ0cyIsImFkZF8iLCJtYWNfbGlzdCIsInRyaWdnZXJfYWxlcnRzIiwiaW5wdXRfbWFjX2FkZHJlc3NfbmFtZSIsImlucHV0X2RldmljZV9zdGF0dXMiLCJlZGl0XyIsIm1hY19hbGlhcyIsIm1hY19zdGF0dXMiLCJtYWNfYWRkcmVzc19sYWJlbCIsInRyaWdnZXJfYWxlcnQiLCJzY3JpcHQkbyIsIlBhZ2VOYXZiYXIiLCJNb2RhbEFkZERldmljZUV4Y2x1c2lvbiIsIk1vZGFsRWRpdERldmljZUV4Y2x1c2lvbiIsImlzX2NsaWNraG91c2VfZW5hYmxlZCIsInNob3dfYWRkX2RldmljZV9kaWFsb2ciLCJzb3J0YWJsZSIsInNlYXJjaGFibGUiLCJzY3JpcHQiLCJkZWxldGVfaGFuZGxlciIsInNob3dfZGVsZXRlX2RpYWxvZyIsImVkaXRfaGFuZGxlciIsInNob3dfZWRpdF9kZXZpY2VfZGlhbG9nIiwianVtcF90b19oaXN0b3JpY2FsX2Zsb3ciLCJmaXJzdF9zZWVuIiwibGFzdF9zZWVuIiwibWFjX2FkZHJlc3MiLCJpc0NsaWNraG91c2VFbmFibGVkIiwiY29uZmlnX2RldmljZXMiLCJsZWFybmluZ19zdGF0dXMiLCJuYXZiYXJfY29udGV4dCIsInRpdGxlX2RlbGV0ZV9hbGwiLCJib2R5X2RlbGV0ZV9hbGwiLCJ0aXRsZV9hZGQiLCJib2R5X2FkZCIsImZvb3Rlcl9hZGQiLCJsaXN0X25vdGVzX2FkZCIsInRpdGxlX2VkaXQiLCJsZWFybmluZ19tZXNzYWdlIiwicm93X3RvX2RlbGV0ZSIsInJvd190b19lZGl0IiwiYWRkX2RldmljZSIsImRlbGV0ZV9yb3ciLCJlZGl0X3JvdyIsImxlYXJuaW5nX2RvbmUiLCJfY29tcG9uZW50X3BhZ2VfbmF2YmFyIiwiX2NvbXBvbmVudF9tb2RhbF9hZGRfZGV2aWNlX2V4Y2x1c2lvbiIsImxpc3Rfbm90ZXMiLCJvbkFkZCIsIl9jb21wb25lbnRfbW9kYWxfZWRpdF9kZXZpY2VfZXhjbHVzaW9uIiwib25FZGl0Iiwic2NyaXB0JG4iLCJzY3JpcHQkbSIsImNoYW5nZV9tYXBfZXZlbnQiLCJzY3JpcHQkbCIsIlBhZ2VQZXJpb2RpY2l0eU1hcCIsIlBhZ2VQZXJpb2RpY2l0eVRhYmxlIiwiUGFnZUFzc2V0TWFwIiwiUGFnZUFzc2V0VGFibGUiLCJQYWdlU2VydmljZU1hcCIsIlBhZ2VTZXJ2aWNlVGFibGUiLCJiYXNlX3VybF9wYXJhbXMiLCJuYXZiYXJfaW5mbyIsInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0Iiwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdCIsInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdCIsInBlcmlvZGljaXR5X3RhYmxlX2ZpbHRlcl9saXN0IiwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0IiwiYXNzZXRfdGFibGVfZmlsdGVyX2xpc3QiLCJhY3RpdmVfdGFiIiwidXBkYXRlZF92aWV3IiwiZm9ybWF0X25hdmJhciIsImZvcm1hdF9uYXZiYXJfdGl0bGUiLCJzZWxlY3RlZF9pZmFjZSIsInNlbGVjdGVkX2hvc3QiLCJuYXZiYXJfbm9kZSIsImdldF9hY3RpdmVfdGFiIiwiaXNfYWN0aXZlIiwidGFyZ2V0X2JsYW5rIiwiX2NvbXBvbmVudF9wYWdlX3NlcnZpY2VfbWFwIiwiX2NvbXBvbmVudF9wYWdlX3NlcnZpY2VfdGFibGUiLCJfY29tcG9uZW50X3BhZ2VfcGVyaW9kaWNpdHlfbWFwIiwiX2NvbXBvbmVudF9wYWdlX3BlcmlvZGljaXR5X3RhYmxlIiwiX2NvbXBvbmVudF9wYWdlX2Fzc2V0X21hcCIsInNhbmtleV9jaGFydF9yZWYiLCJzYW5rZXlfc2l6ZSIsInNjYWxlT3JkaW5hbCIsIm5vZGVzX2FkZGVkX2RpY3QiLCJmX2FkZF9ub2RlIiwibm9kZV9pZCIsIm5ld19ub2RlIiwiZl9hZGRfbGluayIsIm5ld19saW5rIiwic291cmNlX2xpbmsiLCJzb3VyY2VfY29sb3IiLCJ0YXJnZXRfbGluayIsInRhcmdldF9jb2xvciIsIndyYXBfZ3JhcGhfcnNwIiwibGlua19jb2xvciIsInRhcmdldF9ub2RlIiwic291cmNlX25vZGUiLCJnZXRfc2Fua2V5X2RhdGEiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRfc2l6ZSIsInNhbmtleSIsIm5vZGVBbGlnbiIsInNhbmtleUNlbnRlciIsIm5vZGVXaWR0aCIsIm5vZGVQYWRkaW5nIiwiZXh0ZW50Iiwic2Fua2V5aW1wbCIsImNhbGN1bGF0ZV9zYW5rZXkiLCJ4MCIsInkwIiwiZWFzZUxpbmVhciIsInkxIiwicmdiIiwiZGFya2VyIiwibGciLCJzYW5rZXlMaW5rSG9yaXpvbnRhbCIsImRyYXdfc2Fua2V5IiwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQiLCJzY3JpcHQkaiIsIkNoYXJ0IiwiaXNfY2hfZW5hYmxlZCIsImFwcGxpY2F0aW9uc190YWIiLCJQYWdlVnVlIiwicGVyY2VudGFnZV9zZW50IiwiYnl0ZXNfc2VudCIsInRvdF9ieXRlcyIsInBlcmNlbnRhZ2VfcmN2ZCIsImJ5dGVzX3JjdmQiLCJjcmVhdGVCcmVha2Rvd24iLCJhZGRfYWN0aW9uX2NvbHVtbiIsImFwcGxpY2F0aW9uc0NvbmZpZyIsImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucyIsImNhdGVnb3J5X2lkIiwibW9yZV9wcm90b3MiLCJjYXRlZ29yaWVzQ29uZmlnIiwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcyIsImNoYXJ0X29wdGlvbiIsInRyYWZmaWNfdGFibGUiLCJjb25maWdfdHJhZmZpY190YWJsZSIsInRvdGFsX2J5dGVzIiwidHJhZmZpY0NvbmZpZyIsImNoYXJ0X2RvbmUiLCJ0bXAyIiwib3ZlcmxheSIsImhpZGVfbG9hZGluZyIsInNob3dfbG9hZGluZyIsIm5vX2RhdGEiLCJzZXRfc2Fua2V5X2RhdGEiLCJzYW5rZXlfZGF0YSIsInNhbmtleURhdGEiLCJkM19ub2RlcyIsInNjYWxlRXh0ZW50Iiwiem9vbWVkIiwiZGF0YV9vYmoiLCJzdWJqZWN0IiwiZHJhZ1N0YXJ0IiwiZHJhZ01vdmUiLCJsaW5rc19kMyIsImxnX2QzIiwiX194IiwiX195IiwiX194MCIsIl9feTAiLCJfX3gxIiwiX195MSIsInNldF9ub19kYXRhX2ZsYWciLCJzZXRfbm9fZGF0YSIsImRlZmF1bHRTYW5rZXlTZXR0aW5ncyIsIm5vZGVJZCIsIm5vZGVUaXRsZSIsIm5vZGVHcm91cCIsInNhbmtleUp1c3RpZnkiLCJub2RlTGFiZWwiLCJub2RlTGFiZWxQYWRkaW5nIiwibm9kZVN0cm9rZSIsImxpbmtTb3VyY2UiLCJsaW5rVGFyZ2V0IiwibGlua1NvdXJjZU5vZGUiLCJsaW5rVGFyZ2V0Tm9kZSIsImxpbmtQYXRoIiwibGlua1ZhbHVlIiwibGlua0xpbmsiLCJsaW5rVGl0bGUiLCJsaW5rQ29sb3IiLCJzb3VyY2VDb2xvciIsInRhcmdldENvbG9yIiwic291cmNlTGluayIsInRhcmdldExpbmsiLCJsaW5rU3Ryb2tlT3BhY2l0eSIsImxpbmtNaXhCbGVuZE1vZGUiLCJzY2hlbWVUYWJsZWF1MTAiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJmb3JtYXRGbG93VGl0bGUiLCJzYW5rZXlVdGlscyIsImdldF9kYXRhIiwiZ2V0RGVmYXVsdFNhbmtleVNldHRpbmdzIiwic2Fua2V5X2NoYXJ0IiwibG9hZGluZyIsInNhbmtleV9mb3JtYXRfbGlzdCIsImZpbHRlcl9pY29uIiwiYWN0aXZlX2hvc3RzX3R5cGUiLCJvbl9ub2RlX2NsaWNrIiwiaXNfbGlua19ub2RlIiwidXJsX29iaiIsInVwZGF0ZV9zYW5rZXkiLCJlbnRyeSIsImhvc3RzX3R5cGUiLCJnZXRfc2Fua2V5X3VybCIsImdyYXBoIiwiZl9sb2dfbGluayIsInNvdXJjZV9ub2RlX2lkIiwidGFyZ2V0X25vZGVfaWQiLCJmX2xvZyIsIm5vZGVfZGljdCIsImZfZmlsdGVyIiwidGFrZV9lbGVtZW50IiwiZmlsdGVyX2xvZyIsImdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUiLCJtYWtlX2NvbXBsZXRlX2dyYXBoIiwibWFpbl9ub2RlX2lkIiwiZl9nZXRfbGlua19kaXJlY3Rpb24iLCJmX2dldF9ub2RlX2RpcmVjdGlvbl9pZCIsImRpcmVjdGlvbiIsImdyYXBoMl9ub2RlX2RpY3QiLCJncmFwaDIiLCJtYWluX25vZGUiLCJmX2dldF9saW5rX25vZGVfaWQiLCJsaW5rX3RvX25vZGVzX2RpY3QiLCJsaW5rX25vZGVfaWQiLCJsaW5rX3RvX25vZGVzIiwibm9kZV9saW5rcyIsImdldF9saW5rX3ZhbHVlIiwibGlua19ub2RlIiwic2Fua2V5X25vZGVfZGljdCIsInNhbmtleV9ub2RlcyIsInNhbmtleV9ub2RlIiwic2Fua2V5X2xpbmtzIiwiZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhIiwidHJhZmZpYyIsIm1ldHJpY3NfcmVhZHkiLCJtZXRyaWNfbGlzdCIsImZyZXF1ZW5jeV9saXN0IiwidGhyZXNob2xkX21lYXN1cmUiLCJzZWxlY3RlZF9mcmVxdWVuY3kiLCJtZXRyaWNfdHlwZSIsIm5vdGVfbGlzdCIsIm1ldHJpY190eXBlX2xpc3QiLCJ2b2x1bWVfdGhyZXNob2xkX2xpc3QiLCJ0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0IiwidGhyZXNob2xkIiwiY2hlY2tfZW1wdHlfaG9zdCIsInNldF9hY3RpdmVfcmFkaW8iLCJzZWxlY3RlZF9yYWRpbyIsIm1lYXN1cmUiLCJwYXJlbnRFbGVtZW50IiwidG1wX2hvc3QiLCJ0bXBfZnJlcXVlbmN5IiwidG1wX21ldHJpYyIsImJhc2ljX3ZhbHVlIiwidG1wX3RocmVzaG9sZCIsInRtcF9tZXRyaWNfdHlwZSIsInRtcF9leHRyYV9tZXRyaWMiLCJleHRyYV9tZXRyaWMiLCJmcmVxdWVuY3kiLCJtZXRyaWNzTG9hZGVkIiwiX21ldHJpY19saXN0Iiwic2hvd192b2x1bWUiLCJ0YWJsZV9ob3N0X3J1bGVzIiwibW9kYWxfZGVsZXRlX2NvbmZpcm0iLCJtb2RhbF9hZGRfaG9zdF9ydWxlIiwibWV0cmljX3VybCIsImFkZF9ydWxlX3VybCIsInJlbW92ZV9ydWxlX3VybCIsInJlc3RfcGFyYW1zIiwiaG9zdF9ydWxlc190YWJsZV9jb25maWciLCJydWxlX2lkIiwiYWRkX2hvc3RfcnVsZSIsIm1ldHJpY19sYWJlbCIsImZvcm1hdF9tZXRyaWMiLCJmcmVxdWVuY3lfdGl0bGUiLCJmb3JtYXRfZnJlcXVlbmN5IiwiZm9ybWF0dGVkX2RhdGEiLCJiaXRzVG9TaXplIiwiZm9ybWF0X3RocmVzaG9sZCIsImhvc3RSdWxlc1RhYmxlQ29uZmlnIiwiZ2V0X21ldHJpY19saXN0IiwidGFibGVfb3B0aW9ucyIsImV4dHJhX3BhcmFtcyIsInBvcnRfaW5mbyIsInByb3RvIiwicmVzdF91cmwiLCJ3aWRnZXRfbmFtZSIsImJ1YmJsZV9jaGFydCIsImZvcm1hdF9yZXF1ZXN0IiwicGFyYW1zX3N0cmluZyIsImJ1YmJsZV9tb2RlIiwidGltZWZyYW1lIiwibW9kZV9pZCIsIm9wdGlvbl9saXN0IiwibnRvcF9ldmVudHMiLCJmdW4iLCJmbm9uZSIsImZvcm1hdF9vcHRpb25zIiwiYXZhaWxhYmxlX2ZpbHRlcnMiLCJub19kYXRhX21lc3NhZ2UiLCJib2R5X2RpdiIsImxpdmVfcmVzdCIsImhpc3RvcmljYWxfcmVzdCIsInVwZGF0ZV9oZWlnaHQiLCJ1cGRhdGVfd2lkdGgiLCJsNHByb3RvIiwiY2hlY2tfbWF4X2VudHJpZXMiLCJvcHRpb25hbF9pbmZvIiwidGFibGVfYWdncmVnYXRlZF9saXZlX2Zsb3dzIiwidmxhbl9maWx0ZXJzIiwidmxhbnMiLCJzb3J0aW5nIiwicGVyY2VudGFnZV9ieXRlc19zZW50IiwicGVyY2VudGFnZV9ieXRlc19yY3ZkIiwic2NyaXB0JDUiLCJmaWx0ZXJzX29wdGlvbnMiLCJmaWx0ZXJfdHlwZV9zZWxlY3RlZCIsImZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkIiwib3BlcmF0b3Jfc2VsZWN0ZWQiLCJvcHRpb25fc2VsZWN0ZWQiLCJpbnB1dF92YWx1ZSIsImRhdGFfcGF0dGVybl9zZWxlY3RlZCIsImlucHV0X3JlcXVpcmVkIiwib3B0aW9uc190b19zaG93Iiwib3BlcmF0b3JzX3RvX3Nob3ciLCJjaGFuZ2VfZmlsdGVyIiwicG9zdF9jaGFuZ2UiLCJ2YWx1ZV90eXBlIiwiY2hhbmdlX29wZXJhdG9yX3R5cGUiLCJzZWxlY3RlZF9vcGVyYXRvcl90eXBlIiwiY2hhbmdlX2RhdGFfZmlsdGVyIiwic2VsZWN0ZWRfZmlsdGVyIiwib3BlcmF0b3JzIiwiY2hlY2tfZGlzYWJsZV9hcHBseSIsInZhbHVlX2xhYmVsIiwiZm9yIiwicmVxdWlyZWQiLCJUQUdfT1BFUkFUT1JTIiwiREVGSU5FRF9UQUdTIiwiRklMVEVSU19DT05TVCIsImluaXRpYWxUYWdzIiwiVEFHSUZZIiwiSVNfQUxFUlRfU1RBVFNfVVJMIiwiUVVFUllfUFJFU0VUIiwiU1RBVFVTX1ZJRVciLCJFTkFCTEVfUVVFUllfUFJFU0VUUyIsIlBBR0UiLCJhbGVydF9zdGF0c19wYWdlIiwibG9hZF9maWx0ZXJzX2RhdGEiLCJpc19hbGVydF9zdGF0c191cmwiLCJiYXNlX3BhdGgiLCJxdWVyeV9wcmVzZXQiLCJnZXRfZmlsdGVyX2NvbnN0IiwiZl9kZWYiLCJmaWx0ZXJfZGVmIiwib3B0X3N0aXJuZyIsIm9wdCIsInNjcmlwdCQ0IiwiRGF0YVRpbWVSYW5nZVBpY2tlciIsIk1vZGFsRmlsdGVycyIsImR0X3JhbmdlX3BpY2tlcl9tb3VudGVkIiwiaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlciIsImlkX21vZGFsX2ZpbHRlcnMiLCJlbmFibGVfcXVlcnlfcHJlc2V0cyIsInJhbmdlX3BpY2tlcl92dWUiLCJxdWVyeV9wcmVzZXRzIiwiYnVpbHRpbiIsInNldF9xdWVyeV9wcmVzZXQiLCJ0YWdpZnkiLCJUYWdpZnkiLCJkdXBsaWNhdGVzIiwiY2xhc3NuYW1lIiwiYXV0b0NvbXBsZXRlIiwidGVtcGxhdGVzIiwidGFnRGF0YSIsImdldEF0dHJpYnV0ZXMiLCJzZWxlY3RlZE9wZXJhdG9yIiwidmFsaWRhdGUiLCJhZGRUYWdzIiwiYWRkRmlsdGVyVGFnIiwicmVhbFZhbHVlIiwiZXhpc3RpbmdUYWdFbGVtZW50IiwiZ2V0VGFnRWxtcyIsImh0bWxUYWciLCJyZW1vdmVUYWdzIiwiZWRpdF90YWciLCJjcmVhdGVfdGFnaWZ5IiwicmVsb2FkX3N0YXR1cyIsIm1vZGFsX2RhdGEiLCJzaG93X2ZpbHRlcnMiLCJzdGF0dXNfdmlldyIsImxhc3RfZmlsdGVycyIsImlzX2ZpbHRlcl9kZWZpbmVkIiwidXBkYXRlX3N0YXR1c192aWV3IiwidXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzIiwic2hvd19tb2RhbF9maWx0ZXJzIiwicmVtb3ZlX2ZpbHRlcnMiLCJyZW1vdmVBbGxUYWdzIiwiZmlsdGVyc19vYmplY3QiLCJmaWx0ZXJzX2dyb3VwcyIsImZfaWQiLCJmaWx0ZXJfdmFsdWVzIiwiZ2V0X2ZpbHRlcnNfb2JqZWN0IiwiZl9jb25zdCIsImNyZWF0ZV90YWdfZnJvbV9maWx0ZXIiLCJhcHBseV9tb2RhbCIsIl9jb21wb25lbnRfbW9kYWxfZmlsdGVycyIsIl9jb21wb25lbnRfZGF0YV90aW1lX3JhbmdlX3BpY2tlciIsImV4dHJhX2J1dHRvbnMiLCJzY3JpcHQkMyIsInJlbG9hZGVkX3RhYmxlIiwicGVyY2VudGlsZV9zZW50IiwicGVyY2VudGlsZV9yY3ZkIiwiYXZnX3NlbnQiLCJhdmdfcmN2ZCIsIm1heF9zZW50IiwibWF4X3JjdmQiLCJmQml0IiwiY2hhcnRPcHRpb25zVXRpbGl0eSIsImdldEFwZXhZRm9ybWF0dGVyIiwiYXBleFlGb3JtYXR0ZXJUeXBlcyIsImZCeXRlcyIsInVwZGF0ZURhdGEiLCJleHRyYV9zZXR0aW5ncyIsImxpbmtfc291cmNlIiwiaW50ZXJuIiwibGlua190YXJnZXQiLCJsaW5rX3NvdXJjZV9ub2RlIiwibGlua190YXJnZXRfbm9kZSIsImxpbmtfbGluayIsImxpbmtfdmFsdWUiLCJ1bmlvbiIsIm5vZGVfaWRfbGlzdCIsIm5vZGVHcm91cHMiLCJub2RlX2xhYmVsX2xpc3QiLCJub2RlX3RpdGxlX2xpc3QiLCJsaW5rX3RpdGxlX2xpc3QiLCJkZWx0YVgiLCJkZWx0YVkiLCJub2RlU3Ryb2tlV2lkdGgiLCJub2RlU3Ryb2tlT3BhY2l0eSIsIm5vZGVTdHJva2VMaW5lam9pbiIsIl9fZGF0YV9fIiwic291cmNlTGlua3MiLCJ0YXJnZXRMaW5rcyIsIm5vZGVfY29sb3IiLCJzY2FsZXMiLCJTYW5rZXlDaGFydCIsImV4Y2x1ZGVfdHlwZSIsImlucHV0X2lwIiwiaW5wdXRfbmV0d29yayIsImlucHV0X3ZsYW4iLCJpbnB1dF90ZXh0IiwiaG9zdF9zZWxlY3RlZCIsImZsb3dfc2VsZWN0ZWQiLCJuZXRtYXNrIiwicGF0dGVybl9pcCIsInBhdHRlcm5fdGV4dCIsInBhdHRlcm5fY2VydGlmaWNhdGUiLCJzZXRfZXhjbHVkZV90eXBlIiwiZGlzYWJsZV9hcHBseSIsImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSIsImFsZXJ0X2FkZHIiLCJob3N0X2FsZXJ0X2tleSIsImZsb3dfYWxlcnRfa2V5IiwiYWxlcnRfZG9tYWluIiwiYWxlcnRfY2VydGlmaWNhdGUiLCJyYWRpb19zZWxlY3RlZCIsImRpc2FibGVfYWxlcnRzIiwiZG9tYWluIiwiaXNzdWVyZG4iLCJyZWdleF9kb21haW4iLCJwYXR0ZXJuX2RvbWFpbiIsInJlZ2V4X2NlcnRpZmljYXRlIiwiYWxlcnRfbmFtZSIsImhvc3RfYWRkciIsImZsb3dfYWRkciIsImNsaV92YWx1ZSIsImNsaV9sYWJlbCIsInNydl92YWx1ZSIsInNydl9sYWJlbCIsImRlbGV0ZV9hbGVydHMiLCJhZGRyIiwibnRvcFZ1ZSIsIlBhZ2VTdGF0cyIsIlBhZ2VEZXZpY2VFeGNsdXNpb25zIiwiUGFnZUhvc3RUTFMiLCJQYWdlSG9zdFNTSCIsIlBhZ2VIb21lTWFwIiwiUGFnZVNhbmtleSIsIlBhZ2VIb3N0UnVsZXMiLCJQYWdlQWxlcnRBbmFseXNpcyIsIlBhZ2VIb3N0TWFwIiwiUGFnZVZMQU5Qb3J0c0Zsb3dTYW5rZXkiLCJQYWdlVkxBTlBvcnRzU2Fua2V5IiwiUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zIiwiUGFnZUhvc3REZXRhaWxzVHJhZmZpYyIsIlBhZ2VIb3N0RGV0YWlsc1BhY2tldHMiLCJQYWdlSG9zdERldGFpbHNGbG93U2Fua2V5IiwiUGFnZUhvc3REZXRhaWxzUG9ydHMiLCJQYWdlQWdncmVnYXRlZExpdmVGbG93cyIsIkFsZXJ0SW5mbyIsIkRhdGVUaW1lUmFuZ2VQaWNrZXIiLCJSYW5nZVBpY2tlciIsIlNpbXBsZVRhYmxlIiwiU2Fua2V5IiwiTm90ZUxpc3QiLCJMb2FkaW5nIiwiTGlzdFRpbWVzZXJpZXMiLCJNb2RhbEFkZENoZWNrRXhjbHVzaW9uIiwiTW9kYWxBbGVydHNGaWx0ZXIiLCJNb2RhbFRpbWVzZXJpZXMiLCJNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIiwiTW9kYWxTbmFwc2hvdCIsIk1vZGFsQWRkSG9zdFJ1bGVzIiwiVnVlIiwiXzB4NGFlNSIsIl8weDY0OGN4MiIsIl8weDY0OGN4MyIsIl8weDY0OGN4NCIsIl8weDY0OGN4YSIsIl8weDY0OGN4NSIsIl8weDY0OGN4NiIsIl8weDY0OGN4OCIsIl8weDY0OGN4OSIsIl8weDY0OGN4YiIsIl8weDY0OGN4YyIsIkdFVF9JTlRFUkZBQ0VfREFUQSIsIl8weDY0OGN4MTMiLCJfMHg2NDhjeGQiLCJfMHg2NDhjeGUiLCJfMHg2NDhjeGYiLCJfMHg2NDhjeDEwIiwiXzB4NjQ4Y3gxMSIsIl8weDY0OGN4MTIiXSwibWFwcGluZ3MiOiJ5QkFDQUEsS0FBS0MsVUFBVUMsT0FBUyxTQUFVQSxHQUNqQyxJQUFJQyxFQUFJLENBQ1AsS0FBTUMsS0FBS0MsV0FBYSxFQUN4QixLQUFNRCxLQUFLRSxVQUNYLEtBQU1GLEtBQUtHLFdBQ1gsS0FBTUgsS0FBS0ksYUFDWCxLQUFNSixLQUFLSyxhQUNYLEtBQU1DLEtBQUtDLE9BQU9QLEtBQUtDLFdBQWEsR0FBSyxHQUN6Q08sRUFBS1IsS0FBS1MsbUJBS1gsSUFBSyxJQUFJQyxJQUZMLE9BQU9DLEtBQUtiLEtBQVNBLEVBQVNBLEVBQU9jLFFBQVFDLE9BQU9DLElBQ3REZCxLQUFLZSxjQUFnQixJQUFJQyxPQUFPLEVBQUlILE9BQU9DLEdBQUdHLFVBQ2xDbEIsRUFBTyxJQUFJYyxPQUFPLElBQU1ILEVBQUksS0FBS0MsS0FBS2IsS0FDbkRBLEVBQVNBLEVBQU9j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
